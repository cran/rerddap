http_interactions:
- request:
    method: get
    uri: https://upwell.pfeg.noaa.gov/erddap/info/erdCinpKfmBT/index.json
    body:
      encoding: ''
      string: ''
    headers:
      User-Agent: libcurl/7.54.0 r-curl/3.3 crul/0.7.4
      Accept-Encoding: gzip, deflate
      Accept: application/json, text/xml, application/xml, */*
  response:
    status:
      status_code: '200'
      message: OK
      explanation: Request fulfilled, document follows
    headers:
      status: 'HTTP/1.1 200 '
      date: Tue, 07 May 2019 22:55:10 GMT
      strict-transport-security: max-age=31536000; includeSubDomains
      content-disposition: attachment;filename=erdCinpKfmBT_info.json
      content-encoding: gzip
      content-type: application/json;charset=UTF-8
      connection: close
      transfer-encoding: chunked
    body:
      encoding: ASCII-8BIT
      string: 
  recorded_at: 2019-05-07 22:59:48 GMT
  recorded_with: vcr/0.2.6, webmockr/0.3.4.9100
- request:
    method: get
    uri: https://upwell.pfeg.noaa.gov/erddap/tabledap/index.json?page=1&itemsPerPage=10000
    body:
      encoding: ''
      string: ''
    headers:
      User-Agent: libcurl/7.54.0 r-curl/3.3 crul/0.7.4
      Accept-Encoding: gzip, deflate
      Accept: application/json, text/xml, application/xml, */*
  response:
    status:
      status_code: '200'
      message: OK
      explanation: Request fulfilled, document follows
    headers:
      status: 'HTTP/1.1 200 '
      date: Tue, 07 May 2019 22:55:11 GMT
      strict-transport-security: max-age=31536000; includeSubDomains
      last-modified: Tue, 07 May 2019 22:55:11 GMT
      xdods-server: dods/3.7
      erddap-server: '1.82'
      content-disposition: attachment;filename=tabledap.json
      content-encoding: gzip
      content-type: application/json;charset=UTF-8
      connection: close
      transfer-encoding: chunked
    body:
      encoding: ASCII-8BIT
      string: ewogICJ0YWJsZSI6IHsKICAgICJjb2x1bW5OYW1lcyI6IFsiZ3JpZGRhcCIsICJTdWJzZXQiLCAidGFibGVkYXAiLCAiTWFrZSBBIEdyYXBoIiwgIndtcyIsICJmaWxlcyIsICJBY2Nlc3NpYmxlIiwgIlRpdGxlIiwgIlN1bW1hcnkiLCAiRkdEQyIsICJJU08gMTkxMTUiLCAiSW5mbyIsICJCYWNrZ3JvdW5kIEluZm8iLCAiUlNTIiwgIkVtYWlsIiwgIkluc3RpdHV0aW9uIiwgIkRhdGFzZXQgSUQiXSwKICAgICJjb2x1bW5UeXBlcyI6IFsiU3RyaW5nIiwgIlN0cmluZyIsICJTdHJpbmciLCAiU3RyaW5nIiwgIlN0cmluZyIsICJTdHJpbmciLCAiU3RyaW5nIiwgIlN0cmluZyIsICJTdHJpbmciLCAiU3RyaW5nIiwgIlN0cmluZyIsICJTdHJpbmciLCAiU3RyaW5nIiwgIlN0cmluZyIsICJTdHJpbmciLCAiU3RyaW5nIiwgIlN0cmluZyJdLAogICAgInJvd3MiOiBbCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2FsbERhdGFzZXRzLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9hbGxEYXRhc2V0cyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9hbGxEYXRhc2V0cy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICIqIFRoZSBMaXN0IG9mIEFsbCBBY3RpdmUgRGF0YXNldHMgaW4gdGhpcyBFUkREQVAgKiIsICJUaGlzIGRhdGFzZXQgaXMgYSB0YWJsZSB3aGljaCBoYXMgYSByb3cgb2YgaW5mb3JtYXRpb24gZm9yIGVhY2ggZGF0YXNldCBjdXJyZW50bHkgYWN0aXZlIGluIHRoaXMgRVJEREFQLlxuXG5jZG1fZGF0YV90eXBlID0gT3RoZXJcblZBUklBQkxFUzpcbmRhdGFzZXRJRCAoRGF0YXNldCBJRClcbmFjY2Vzc2libGVcbmluc3RpdHV0aW9uXG5kYXRhU3RydWN0dXJlIChEYXRhIFN0cnVjdHVyZSlcbmNkbV9kYXRhX3R5cGUgKENvbW1vbiBEYXRhIE1vZGVsIFR5cGUpXG5jbGFzcyAoRVJEREFQIENsYXNzKVxudGl0bGVcbm1pbkxvbmdpdHVkZSAoTWluaW11bSBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbm1heExvbmdpdHVkZSAoTWF4aW11bSBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxvbmdpdHVkZVNwYWNpbmcgKEF2ZXJhZ2UgR3JpZCBMb25naXR1ZGUgU3BhY2luZywgZGVncmVlc19lYXN0KVxubWluTGF0aXR1ZGUgKE1pbmltdW0gTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG5tYXhMYXRpdHVkZSAoTWF4aW11bSBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbmxhdGl0dWRlU3BhY2luZyAoQXZlcmFnZSBHcmlkIExhdGl0dWRlIFNwYWNpbmcsIGRlZ3JlZXNfbm9ydGgpXG5taW5BbHRpdHVkZSAoTWluaW11bSBBbHRpdHVkZSBvciAtRGVwdGgsIG0pXG5tYXhBbHRpdHVkZSAoTWF4aW11bSBBbHRpdHVkZSBvciAtRGVwdGgsIG0pXG5taW5UaW1lIChNaW5pbXVtIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5tYXhUaW1lIChNYXhpbXVtIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG50aW1lU3BhY2luZyAoQXZlcmFnZSBHcmlkIFRpbWUgU3BhY2luZywgc2Vjb25kcylcbmdyaWRkYXAgKEJhc2UgVVJMIG9mIE9QZU5EQVAgR3JpZCBTZXJ2aWNlKVxuc3Vic2V0IChVUkwgb2YgU3Vic2V0IFdlYiBQYWdlKVxudGFibGVkYXAgKEJhc2UgVVJMIG9mIE9QZU5EQVAgVGFibGUvU2VxdWVuY2UgU2VydmljZSlcbk1ha2VBR3JhcGggKFVSTCBvZiBNYWtlLUEtR3JhcGggV2ViIFBhZ2UpXG5zb3MgKEJhc2UgVVJMIG9mIFNPUyBTZXJ2aWNlKVxud2NzIChCYXNlIFVSTCBvZiBXQ1MgU2VydmljZSlcbndtcyAoQmFzZSBVUkwgb2YgV01TIFNlcnZpY2UpXG5maWxlcyAoQmFzZSBVUkwgb2YgL2ZpbGVzLyBTZXJ2aWNlKVxuLi4uICgxMCBtb3JlIHZhcmlhYmxlcylcbiIsICIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vYWxsRGF0YXNldHMvaW5kZXguanNvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwIiwgIiIsICIiLCAiTk9BQSBOTUZTIFNXRlNDIEVudmlyb25tZW50YWwgUmVzZWFyY2ggRGl2aXNpb24iLCAiYWxsRGF0YXNldHMiXSwKICAgICAgWyIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF8wMWFmX2UzNzJfNWJiNiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfMDFhZl9lMzcyXzViYjYuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiQUlTIFNoaXAgVHJhZmZpYzogSGF3YWlpOiAyMDExLTIwMTIiLCAiU2hpcCBwb3NpdGlvbiBkYXRhIGZyb20gYSBzYXRlbGxpdGUtYmFzZWQgQXV0b21hdGljIElkZW50aWZpY2F0aW9uIFN5c3RlbSAoQUlTKSB3ZXJlIG9idGFpbmVkIGpvaW50bHkgYnkgUGFjSU9PUyAoSi4gUG90ZW1yYSksIFNPRVNUL09SRSBvZiB0aGUgVW5pdmVyc2l0eSBvZiBIYXdhaWkgKEUuIFJvdGgpLCBhbmQgdGhlIFBhcGFoYW5hdW1va3Vha2VhIE1hcmluZSBOYXRpb25hbCBNb251bWVudCAoUE5NTikgKEQuIEdyYWhhbSkgdGhyb3VnaCBhIG9uZS10aW1lIHB1cmNoYXNlIGZyb20gT1JCQ09NTSBMTEMuICBUaGUgcHVyY2hhc2UgYWdyZWVtZW50IHdhcyBtYWRlIGluIGxhdGUgMjAxMiBhbmQgd2FzIGZvciBhIDMwLWJ5LTMwIGRlZ3JlZSBzZWN0aW9uIG9mIGhpc3RvcmljYWwgQUlTIGRhdGEgdGhhdCBpbmNsdWRlZCB0aGUgcmVnaW9uIG9mIHRoZSBIYXdhaWlhbiBJc2xhbmRzLiAgVGhlIGRhdGEgaW5jbHVkZSBBSVMgbG9uZyBhbmQgdW5jaGVja2VkIHJlcG9ydHMgZm9yIGEgb25lIHllYXIgcGVyaW9kOiBBdWd1c3QgMjAxMSB0aHJvdWdoIG1pZC1BdWd1c3QgMjAxMi4gIFRoZSByYXcsIG1vbnRobHkgR1BTIGZpbGVzIHdlcmUgbG9jYWxseSBjb252ZXJ0ZWQgdG8gTmV0Q0RGIGZvciB0aGUgUGFjSU9PUyBkYXRhIHNlcnZlcnMuICBEdWUgdG8gdmVuZG9yIGNvbnN0cmFpbnRzLCByZWxlYXNlIG9mIHRoZSByYXcgZGF0YSBpcyBsaW1pdGVkLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbm9icyAob2JzZXJ2YXRpb24sIDApXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbnNoaXBfaWRfbW1zaSAoc2hpcCBpZGVudGlmaWNhdGlvbiBudW1iZXIgKE1NU0kpLCAwKVxubmF2aWdhdGlvbmFsX3N0YXR1cyAoMClcbnNwZWVkX292ZXJfZ3JvdW5kIChrdHMpXG5jb3Vyc2Vfb3Zlcl9ncm91bmQgKGRlZylcbnRydWVfaGVhZGluZyAoZGVnKVxucmF0ZV9vZl90dXJuIChkZWdyZWVzIG1pbnV0ZXMtMSlcbnBvc2l0aW9uX2FjY3VyYWN5ICgwKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2hhd2FpaV9zb2VzdF8wMWFmX2UzNzJfNWJiNl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvaGF3YWlpX3NvZXN0XzAxYWZfZTM3Ml81YmI2X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2hhd2FpaV9zb2VzdF8wMWFmX2UzNzJfNWJiNi9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cubmF2Y2VuLnVzY2cuZ292Lz9wYWdlTmFtZT1BSVNtYWluIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2hhd2FpaV9zb2VzdF8wMWFmX2UzNzJfNWJiNi5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9aGF3YWlpX3NvZXN0XzAxYWZfZTM3Ml81YmI2JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIlVuaXZlcnNpdHkgb2YgSGF3YWlpIiwgImhhd2FpaV9zb2VzdF8wMWFmX2UzNzJfNWJiNiJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0X2Y3MGJfYzc3N18yZDBiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF9mNzBiX2M3NzdfMmQwYi5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJBSVMgU2hpcCBUcmFmZmljOiBKb2huc3RvbiBBdG9sbDogMjAxMS0yMDEyIiwgIlNoaXAgcG9zaXRpb24gZGF0YSBmcm9tIGEgc2F0ZWxsaXRlLWJhc2VkIEF1dG9tYXRpYyBJZGVudGlmaWNhdGlvbiBTeXN0ZW0gKEFJUykgd2VyZSBvYnRhaW5lZCBqb2ludGx5IGJ5IFBhY0lPT1MgKEouIFBvdGVtcmEpLCBTT0VTVC9PUkUgb2YgdGhlIFVuaXZlcnNpdHkgb2YgSGF3YWlpIChFLiBSb3RoKSwgYW5kIHRoZSBQYXBhaGFuYXVtb2t1YWtlYSBNYXJpbmUgTmF0aW9uYWwgTW9udW1lbnQgKFBOTU4pIChELiBHcmFoYW0pIHRocm91Z2ggYSBvbmUtdGltZSBwdXJjaGFzZSBmcm9tIE9SQkNPTU0gTExDLiBUaGUgcHVyY2hhc2UgYWdyZWVtZW50IHdhcyBtYWRlIGluIGxhdGUgMjAxMiBhbmQgd2FzIGZvciBhIDMwLWJ5LTMwIGRlZ3JlZSBzZWN0aW9uIG9mIGhpc3RvcmljYWwgQUlTIGRhdGEgdGhhdCBpbmNsdWRlZCB0aGUgcmVnaW9uIG9mIHRoZSBIYXdhaWlhbiBJc2xhbmRzLiBUaGUgZGF0YSBpbmNsdWRlIEFJUyBsb25nIGFuZCB1bmNoZWNrZWQgcmVwb3J0cyBmb3IgYSBvbmUgeWVhciBwZXJpb2Q6IEF1Z3VzdCAyMDExIHRocm91Z2ggbWlkLUF1Z3VzdCAyMDEyLiBUaGUgcmF3LCBtb250aGx5IEdQUyBmaWxlcyB3ZXJlIGxvY2FsbHkgY29udmVydGVkIHRvIE5ldENERiBmb3IgdGhlIFBhY0lPT1MgZGF0YSBzZXJ2ZXJzLiBEdWUgdG8gdmVuZG9yIGNvbnN0cmFpbnRzLCByZWxlYXNlIG9mIHRoZSByYXcgZGF0YSBpcyBsaW1pdGVkLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbm9icyAob2JzZXJ2YXRpb24sIDApXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbnNoaXBfaWRfbW1zaSAoc2hpcCBpZGVudGlmaWNhdGlvbiBudW1iZXIgKE1NU0kpLCAwKVxubmF2aWdhdGlvbmFsX3N0YXR1cyAoMClcbnNwZWVkX292ZXJfZ3JvdW5kIChrdHMpXG5jb3Vyc2Vfb3Zlcl9ncm91bmQgKGRlZylcbnRydWVfaGVhZGluZyAoZGVnKVxucmF0ZV9vZl90dXJuIChkZWdyZWVzIG1pbnV0ZXMtMSlcbnBvc2l0aW9uX2FjY3VyYWN5ICgwKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2hhd2FpaV9zb2VzdF9mNzBiX2M3NzdfMmQwYl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvaGF3YWlpX3NvZXN0X2Y3MGJfYzc3N18yZDBiX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2hhd2FpaV9zb2VzdF9mNzBiX2M3NzdfMmQwYi9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cucGFjaW9vcy5oYXdhaWkuZWR1IiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2hhd2FpaV9zb2VzdF9mNzBiX2M3NzdfMmQwYi5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9aGF3YWlpX3NvZXN0X2Y3MGJfYzc3N18yZDBiJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIlVuaXZlcnNpdHkgb2YgSGF3YWlpIiwgImhhd2FpaV9zb2VzdF9mNzBiX2M3NzdfMmQwYiJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0X2JlOWFfOWJlMF8xZjBhIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF9iZTlhXzliZTBfMWYwYS5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJBSVMgU2hpcCBUcmFmZmljOiBNYXJpYW5hIGFuZCBXYWtlOiAyMDExLTIwMTIiLCAiU2hpcCBwb3NpdGlvbiBkYXRhIGZyb20gYSBzYXRlbGxpdGUtYmFzZWQgQXV0b21hdGljIElkZW50aWZpY2F0aW9uIFN5c3RlbSAoQUlTKSB3ZXJlIG9idGFpbmVkIGpvaW50bHkgYnkgUGFjSU9PUyAoSi4gUG90ZW1yYSksIFNPRVNUL09SRSBvZiB0aGUgVW5pdmVyc2l0eSBvZiBIYXdhaWkgKEUuIFJvdGgpLCBhbmQgdGhlIFBhcGFoYW5hdW1va3Vha2VhIE1hcmluZSBOYXRpb25hbCBNb251bWVudCAoUE5NTikgKEQuIEdyYWhhbSkgdGhyb3VnaCBhIG9uZS10aW1lIHB1cmNoYXNlIGZyb20gT1JCQ09NTSBMTEMuIFRoZSBwdXJjaGFzZSBhZ3JlZW1lbnQgd2FzIG1hZGUgaW4gbGF0ZSAyMDEyIGFuZCB3YXMgZm9yIGEgMzAtYnktMzAgZGVncmVlIHNlY3Rpb24gb2YgaGlzdG9yaWNhbCBBSVMgZGF0YSB0aGF0IGluY2x1ZGVkIHRoZSByZWdpb24gb2YgdGhlIEhhd2FpaWFuIElzbGFuZHMuIFRoZSBkYXRhIGluY2x1ZGUgQUlTIGxvbmcgYW5kIHVuY2hlY2tlZCByZXBvcnRzIGZvciBhIG9uZSB5ZWFyIHBlcmlvZDogQXVndXN0IDIwMTEgdGhyb3VnaCBtaWQtQXVndXN0IDIwMTIuIFRoZSByYXcsIG1vbnRobHkgR1BTIGZpbGVzIHdlcmUgbG9jYWxseSBjb252ZXJ0ZWQgdG8gTmV0Q0RGIGZvciB0aGUgUGFjSU9PUyBkYXRhIHNlcnZlcnMuIER1ZSB0byB2ZW5kb3IgY29uc3RyYWludHMsIHJlbGVhc2Ugb2YgdGhlIHJhdyBkYXRhIGlzIGxpbWl0ZWQuXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxub2JzIChvYnNlcnZhdGlvbiwgMClcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuc2hpcF9pZF9tbXNpIChzaGlwIGlkZW50aWZpY2F0aW9uIG51bWJlciAoTU1TSSksIDApXG5uYXZpZ2F0aW9uYWxfc3RhdHVzICgwKVxuc3BlZWRfb3Zlcl9ncm91bmQgKGt0cylcbmNvdXJzZV9vdmVyX2dyb3VuZCAoZGVnKVxudHJ1ZV9oZWFkaW5nIChkZWcpXG5yYXRlX29mX3R1cm4gKGRlZ3JlZXMgbWludXRlcy0xKVxucG9zaXRpb25fYWNjdXJhY3kgKDApXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvaGF3YWlpX3NvZXN0X2JlOWFfOWJlMF8xZjBhX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9oYXdhaWlfc29lc3RfYmU5YV85YmUwXzFmMGFfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vaGF3YWlpX3NvZXN0X2JlOWFfOWJlMF8xZjBhL2luZGV4Lmpzb24iLCAiaHR0cDovL3d3dy5wYWNpb29zLmhhd2FpaS5lZHUiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvaGF3YWlpX3NvZXN0X2JlOWFfOWJlMF8xZjBhLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1oYXdhaWlfc29lc3RfYmU5YV85YmUwXzFmMGEmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiVW5pdmVyc2l0eSBvZiBIYXdhaWkiLCAiaGF3YWlpX3NvZXN0X2JlOWFfOWJlMF8xZjBhIl0sCiAgICAgIFsiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfNTc0Ml80ZjM1X2ZmNTUiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0XzU3NDJfNGYzNV9mZjU1LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkFJUyBTaGlwIFRyYWZmaWM6IFJvc2UgQXRvbGw6IDIwMTEtMjAxMiIsICJTaGlwIHBvc2l0aW9uIGRhdGEgZnJvbSBhIHNhdGVsbGl0ZS1iYXNlZCBBdXRvbWF0aWMgSWRlbnRpZmljYXRpb24gU3lzdGVtIChBSVMpIHdlcmUgb2J0YWluZWQgam9pbnRseSBieSBQYWNJT09TIChKLiBQb3RlbXJhKSwgU09FU1QvT1JFIG9mIHRoZSBVbml2ZXJzaXR5IG9mIEhhd2FpaSAoRS4gUm90aCksIGFuZCB0aGUgUGFwYWhhbmF1bW9rdWFrZWEgTWFyaW5lIE5hdGlvbmFsIE1vbnVtZW50IChQTk1OKSAoRC4gR3JhaGFtKSB0aHJvdWdoIGEgb25lLXRpbWUgcHVyY2hhc2UgZnJvbSBPUkJDT01NIExMQy4gVGhlIHB1cmNoYXNlIGFncmVlbWVudCB3YXMgbWFkZSBpbiBsYXRlIDIwMTIgYW5kIHdhcyBmb3IgYSAzMC1ieS0zMCBkZWdyZWUgc2VjdGlvbiBvZiBoaXN0b3JpY2FsIEFJUyBkYXRhIHRoYXQgaW5jbHVkZWQgdGhlIHJlZ2lvbiBvZiB0aGUgSGF3YWlpYW4gSXNsYW5kcy4gVGhlIGRhdGEgaW5jbHVkZSBBSVMgbG9uZyBhbmQgdW5jaGVja2VkIHJlcG9ydHMgZm9yIGEgb25lIHllYXIgcGVyaW9kOiBBdWd1c3QgMjAxMSB0aHJvdWdoIG1pZC1BdWd1c3QgMjAxMi4gVGhlIHJhdywgbW9udGhseSBHUFMgZmlsZXMgd2VyZSBsb2NhbGx5IGNvbnZlcnRlZCB0byBOZXRDREYgZm9yIHRoZSBQYWNJT09TIGRhdGEgc2VydmVycy4gRHVlIHRvIHZlbmRvciBjb25zdHJhaW50cywgcmVsZWFzZSBvZiB0aGUgcmF3IGRhdGEgaXMgbGltaXRlZC5cblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5vYnMgKG9ic2VydmF0aW9uLCAwKVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5zaGlwX2lkX21tc2kgKHNoaXAgaWRlbnRpZmljYXRpb24gbnVtYmVyIChNTVNJKSwgMClcbm5hdmlnYXRpb25hbF9zdGF0dXMgKDApXG5zcGVlZF9vdmVyX2dyb3VuZCAoa3RzKVxuY291cnNlX292ZXJfZ3JvdW5kIChkZWcpXG50cnVlX2hlYWRpbmcgKGRlZylcbnJhdGVfb2ZfdHVybiAoZGVncmVlcyBtaW51dGVzLTEpXG5wb3NpdGlvbl9hY2N1cmFjeSAoMClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9oYXdhaWlfc29lc3RfNTc0Ml80ZjM1X2ZmNTVfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2hhd2FpaV9zb2VzdF81NzQyXzRmMzVfZmY1NV9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9oYXdhaWlfc29lc3RfNTc0Ml80ZjM1X2ZmNTUvaW5kZXguanNvbiIsICJodHRwOi8vd3d3LnBhY2lvb3MuaGF3YWlpLmVkdSIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9oYXdhaWlfc29lc3RfNTc0Ml80ZjM1X2ZmNTUucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWhhd2FpaV9zb2VzdF81NzQyXzRmMzVfZmY1NSZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJVbml2ZXJzaXR5IG9mIEhhd2FpaSIsICJoYXdhaWlfc29lc3RfNTc0Ml80ZjM1X2ZmNTUiXSwKICAgICAgWyIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF80OTBkXzExOThfMTVjMSIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfNDkwZF8xMTk4XzE1YzEuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiQUxPSEEgQ2FibGVkIE9ic2VydmF0b3J5IChBQ08pOiBBY291c3RpYyBEb3BwbGVyIEN1cnJlbnQgUHJvZmlsZXIgKEFEQ1ApOiBUZW1wZXJhdHVyZSIsICJUaGUgVW5pdmVyc2l0eSBvZiBIYXdhaWkncyBBTE9IQSAoXCJBIExvbmctdGVybSBPbGlnb3Ryb3BoaWMgSGFiaXRhdCBBc3Nlc3NtZW50XCIpIENhYmxlZCBPYnNlcnZhdG9yeSAoQUNPKSBpcyBsb2NhdGVkIDEwMCBrbSBub3J0aCBvZiB0aGUgaXNsYW5kIG9mIE9haHUsIEhhd2FpaSAoMjIgNDUnTiwgMTU4VykgaW4gdGhlIE5vcnRoIFBhY2lmaWMgT2NlYW4uIEl0IHByb3ZpZGVzIHJlYWwtdGltZSBvY2Vhbm9ncmFwaGljIG9ic2VydmF0aW9ucyBmcm9tIGEgZGVwdGggb2YgYWJvdXQgNCw4MDAgbSB2aWEgYSBzdWJtYXJpbmUgZmliZXIgb3B0aWMgY2FibGUgdGhhdCBjb21lcyBhc2hvcmUgYXQgTWFrYWhhIG9uIE9haHUuIFRoaXMgZGF0YSBzZXQgcHJvdmlkZXMgbWVhc3VyZW1lbnRzIG9mIHNlYSB3YXRlciB0ZW1wZXJhdHVyZSBhdCB0aGUgQUNPIGF0IDEuODMgbSBhYm92ZSB0aGUgb2NlYW4gYm90dG9tLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuc3RhdGlvbl9uYW1lXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmRlcHRoIChtKVxuc2VhX3dhdGVyX3RlbXBlcmF0dXJlIChkZWdyZWVfQ2Vsc2l1cylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9oYXdhaWlfc29lc3RfNDkwZF8xMTk4XzE1YzFfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2hhd2FpaV9zb2VzdF80OTBkXzExOThfMTVjMV9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9oYXdhaWlfc29lc3RfNDkwZF8xMTk4XzE1YzEvaW5kZXguanNvbiIsICJodHRwOi8vYWNvLXNzZHMuc29lc3QuaGF3YWlpLmVkdSIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9oYXdhaWlfc29lc3RfNDkwZF8xMTk4XzE1YzEucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWhhd2FpaV9zb2VzdF80OTBkXzExOThfMTVjMSZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJVbml2ZXJzaXR5IG9mIEhhd2FpaSIsICJoYXdhaWlfc29lc3RfNDkwZF8xMTk4XzE1YzEiXSwKICAgICAgWyIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF8wOTU2X2U5MzlfY2VmYyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfMDk1Nl9lOTM5X2NlZmMuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiQUxPSEEgQ2FibGVkIE9ic2VydmF0b3J5IChBQ08pOiBBY291c3RpYyBEb3BwbGVyIEN1cnJlbnQgUHJvZmlsZXIgKEFEQ1ApOiBWZWxvY2l0eSIsICJUaGUgVW5pdmVyc2l0eSBvZiBIYXdhaWkncyBBTE9IQSAoXCJBIExvbmctdGVybSBPbGlnb3Ryb3BoaWMgSGFiaXRhdCBBc3Nlc3NtZW50XCIpIENhYmxlZCBPYnNlcnZhdG9yeSAoQUNPKSBpcyBsb2NhdGVkIDEwMCBrbSBub3J0aCBvZiB0aGUgaXNsYW5kIG9mIE9haHUsIEhhd2FpaSAoMjIgNDUnTiwgMTU4VykgaW4gdGhlIE5vcnRoIFBhY2lmaWMgT2NlYW4uIEl0IHByb3ZpZGVzIHJlYWwtdGltZSBvY2Vhbm9ncmFwaGljIG9ic2VydmF0aW9ucyBmcm9tIGEgZGVwdGggb2YgYWJvdXQgNCw4MDAgbSB2aWEgYSBzdWJtYXJpbmUgZmliZXIgb3B0aWMgY2FibGUgdGhhdCBjb21lcyBhc2hvcmUgYXQgTWFrYWhhIG9uIE9haHUuIFRoaXMgZGF0YSBzZXQgcHJvdmlkZXMgbWVhc3VyZW1lbnRzIG9mIG9jZWFuIGN1cnJlbnQgdmVsb2NpdHkgYXQgdGhlIEFDTyBmcm9tIGEgMjUwIGtIeiBTb25UZWsgYWNvdXN0aWMgZG9wcGxlciBjdXJyZW50IHByb2ZpbGVyIChBRENQKSBhdCAxLjgzIG0gYWJvdmUgdGhlIG9jZWFuIGJvdHRvbS4gVmVsb2NpdGllcyBhcmUgZmxhZ2dlZCBiYWQgaWYgdGhlIGFtcGxpdHVkZSBpcyBleGNlc3NpdmVseSBsb3cgb3IgaGlnaC4gQW4gYW1wbGl0dWRlIGlzIGhpZ2ggaWYgaXQgZXhjZWVkcyB0aGUgYXZlcmFnZSBvZiB0aGUgcGluZyBiZWZvcmUgYW5kIHRoZSBwaW5nIGFmdGVyIGJ5IDIwIGNvdW50cy4gQW4gYW1wbGl0dWRlIGlzIGxvdyBpZiBsZXNzIHRoYW4gNiBjb3VudHMuIEFmdGVyIHRoaXMgdGhlIHZlbG9jaXRpZXMgYXJlIGZsYWdnZWQgYmFkIGlmIHRoZSBhYnNvbHV0ZSBkZXZpYXRpb24gb2YgdGhlIHZlcnRpY2FsIHZlbG9jaXR5IGZyb20gaXRzIGVuc2VtYmxlIG1lZGlhbiBleGNlZWRzIDAuMTUgbS9zIG9yIGlmIGl0cyB2YWx1ZSBpcyBsZXNzIHRoYW4gLTAuMjUgbS9zLlxuXG5jZG1fZGF0YV90eXBlID0gUHJvZmlsZVxuVkFSSUFCTEVTOlxuc3RhdGlvbl9uYW1lXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKERlcHRoIG9mIGVhY2ggbG9jYXRpb24sIG0pXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuZWFzdHdhcmRfc2VhX3dhdGVyX3ZlbG9jaXR5IChjdXJyZW50IGVhc3QgY29tcG9uZW50LCBtZXRlcnMvc2Vjb25kKVxubm9ydGh3YXJkX3NlYV93YXRlcl92ZWxvY2l0eSAoY3VycmVudCBub3J0aCBjb21wb25lbnQsIG1ldGVycy9zZWNvbmQpXG51cHdhcmRfc2VhX3dhdGVyX3ZlbG9jaXR5IChjdXJyZW50IHVwd2FyZCBjb21wb25lbnQsIG1ldGVycy9zZWNvbmQpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvaGF3YWlpX3NvZXN0XzA5NTZfZTkzOV9jZWZjX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9oYXdhaWlfc29lc3RfMDk1Nl9lOTM5X2NlZmNfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vaGF3YWlpX3NvZXN0XzA5NTZfZTkzOV9jZWZjL2luZGV4Lmpzb24iLCAiaHR0cDovL2Fjby1zc2RzLnNvZXN0Lmhhd2FpaS5lZHUiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvaGF3YWlpX3NvZXN0XzA5NTZfZTkzOV9jZWZjLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1oYXdhaWlfc29lc3RfMDk1Nl9lOTM5X2NlZmMmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiVW5pdmVyc2l0eSBvZiBIYXdhaWkiLCAiaGF3YWlpX3NvZXN0XzA5NTZfZTkzOV9jZWZjIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF9kMWJmXzE1MzVfNzQxZi5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0X2QxYmZfMTUzNV83NDFmIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF9kMWJmXzE1MzVfNzQxZi5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJBTE9IQSBDYWJsZWQgT2JzZXJ2YXRvcnkgKEFDTyk6IEJvdHRvbSBQcmVzc3VyZSBSZWNvcmRlciAoQlBSKSIsICJUaGUgVW5pdmVyc2l0eSBvZiBIYXdhaWkncyBBTE9IQSAoXCJBIExvbmctdGVybSBPbGlnb3Ryb3BoaWMgSGFiaXRhdCBBc3Nlc3NtZW50XCIpIENhYmxlZCBPYnNlcnZhdG9yeSAoQUNPKSBpcyBsb2NhdGVkIDEwMCBrbSBub3J0aCBvZiB0aGUgaXNsYW5kIG9mIE9haHUsIEhhd2FpaSAoMjIgNDUnTiwgMTU4VykgaW4gdGhlIE5vcnRoIFBhY2lmaWMgT2NlYW4uIEl0IHByb3ZpZGVzIHJlYWwtdGltZSBvY2Vhbm9ncmFwaGljIG9ic2VydmF0aW9ucyBmcm9tIGEgZGVwdGggb2YgYWJvdXQgNCw4MDAgbSB2aWEgYSBzdWJtYXJpbmUgZmliZXIgb3B0aWMgY2FibGUgdGhhdCBjb21lcyBhc2hvcmUgYXQgTWFrYWhhIG9uIE9haHUuIFRoaXMgZGF0YSBzZXQgcHJvdmlkZXMgbWVhc3VyZW1lbnRzIG9mIG9jZWFuIHByZXNzdXJlIGF0IHRoZSBBQ08gZnJvbSBhIEJvdHRvbSBQcmVzc3VyZSBSZWNvcmRlciAoQlBSKS5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbnN0YXRpb25cbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuZGVwdGggKG0pXG5wcmVzc3VyZSAoc2VhIHdhdGVyIHByZXNzdXJlLCBwc2kpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvaGF3YWlpX3NvZXN0X2QxYmZfMTUzNV83NDFmX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9oYXdhaWlfc29lc3RfZDFiZl8xNTM1Xzc0MWZfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vaGF3YWlpX3NvZXN0X2QxYmZfMTUzNV83NDFmL2luZGV4Lmpzb24iLCAiaHR0cDovL2Fjby1zc2RzLnNvZXN0Lmhhd2FpaS5lZHUiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvaGF3YWlpX3NvZXN0X2QxYmZfMTUzNV83NDFmLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1oYXdhaWlfc29lc3RfZDFiZl8xNTM1Xzc0MWYmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiVW5pdmVyc2l0eSBvZiBIYXdhaWkiLCAiaGF3YWlpX3NvZXN0X2QxYmZfMTUzNV83NDFmIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF9jYzliXzIwOWZfZWEyZi5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0X2NjOWJfMjA5Zl9lYTJmIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF9jYzliXzIwOWZfZWEyZi5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJBTE9IQSBDYWJsZWQgT2JzZXJ2YXRvcnkgKEFDTyk6IEh5ZHJvcGhvbmUgQWNvdXN0aWNzIiwgIlRoZSBVbml2ZXJzaXR5IG9mIEhhd2FpaSdzIEFMT0hBIChcIkEgTG9uZy10ZXJtIE9saWdvdHJvcGhpYyBIYWJpdGF0IEFzc2Vzc21lbnRcIikgQ2FibGVkIE9ic2VydmF0b3J5IChBQ08pIGlzIGxvY2F0ZWQgMTAwIGttIG5vcnRoIG9mIHRoZSBpc2xhbmQgb2YgT2FodSwgSGF3YWlpICgyMiA0NSdOLCAxNThXKSBpbiB0aGUgTm9ydGggUGFjaWZpYyBPY2Vhbi4gSXQgcHJvdmlkZXMgcmVhbC10aW1lIG9jZWFub2dyYXBoaVxuYyBvYnNlcnZhdGlvbnMgZnJvbSBhIGRlcHRoIG9mIGFib3V0IDQsODAwIG0gdmlhIGEgc3VibWFyaW5lIGZpYmVyIG9wdGljIGNhYmxlIHRoYXQgY29tZXMgYXNob3JlIGF0IE1ha2FoYSBvbiBPYWh1LiBUaGlzIGRhdGEgc2V0IHByb3ZpZGVzIHNvdW5kIGZpbGVzIG9mIG9jZWFuIGFjb3VzdGljcyBhdCB0aGUgb2NlYW4gZmxvb3IgZnJvbSB0aGUgQUNPIGh5ZHJvcGhvbmUuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5zdGF0aW9uXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuZGVwdGggKG0pXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZWxhcHNlZFRpbWUgKEVsYXBzZWQgVGltZSwgc2Vjb25kcylcbmNoYW5uZWxfMVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2hhd2FpaV9zb2VzdF9jYzliXzIwOWZfZWEyZl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvaGF3YWlpX3NvZXN0X2NjOWJfMjA5Zl9lYTJmX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2hhd2FpaV9zb2VzdF9jYzliXzIwOWZfZWEyZi9pbmRleC5qc29uIiwgImh0dHA6Ly9hY28tc3Nkcy5zb2VzdC5oYXdhaWkuZWR1IiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2hhd2FpaV9zb2VzdF9jYzliXzIwOWZfZWEyZi5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9aGF3YWlpX3NvZXN0X2NjOWJfMjA5Zl9lYTJmJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIlVuaXZlcnNpdHkgb2YgSGF3YWlpIiwgImhhd2FpaV9zb2VzdF9jYzliXzIwOWZfZWEyZiJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm9kY1BKSlUiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm9kY1BKSlUuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiQU4gRVhQRVJJTUVOVEFMIERBVEFTRVQ6IFVuZGVyd2F5IFNlYSBTdXJmYWNlIFRlbXBlcmF0dXJlIGFuZCBTYWxpbml0eSBBYm9hcmQgdGhlIE9sZWFuZGVyLCAyMDA3LTIwMTAiLCAiVGhlIGRhdGEgYmVpbmcgc3VibWl0dGVkIHRvIE5PREMgY29udGFpbiBpbmZvcm1hdGlvbiBhYm91dCB0ZW1wZXJhdHVyZSBhbmQgc2FsaW5pdHkgb2J0YWluZWQgd2l0aCB0aGUgdXNlIG9mIHRoZXJtb3NhbGlub2dyYXBocyAoVFNHKSBpbnN0YWxsZWQgaW4gc2hpcHMgb2YgdGhlIE5PQUEgZmxlZXQgYW5kIG90aGVyIGNhcmdvIGFuZCBjcnVpc2Ugc2hpcHMuIFRoZSBkYXRhIGlzIHRyYW5zbWl0dGVkIHRvIEFPTUwvTk9BQSBpbiByZWFsLXRpbWUgYW5kIHN1Ym1pdHRlZCB0byBhIHF1YWxpdHkgY29udHJvbCBwcm9jZWR1cmUgZGV2ZWxvcGVkIGF0IEFPTUwgYmFzZWQgb24gdGhlIEdsb2JhbCBPY2VhbiBTdXJmYWNlIFVuZGVyd2F5IERhdGEgUGlsb3QgUHJvamVjdCAoR09TVUQpIHJlYWwtdGltZSBjb250cm9sIHRlc3QuIERhdGEgYXBwcm92ZWQgaW4gdGhlc2UgdGVzdHMgYXJlIHN1Ym1pdHRlZCB0byB0aGUgR1RTLiBUaGUgZGF0YSBzZXQgc3VibWl0dGVkIHRvIE5PREMgZm9yIGRpc3RyaWJ1dGlvbiBjb25zdGl0dXRlIHRoZSBjb21wbGV0ZSBkYXRhIHNldCByZWNlaXZlZCBieSBBT01MIHdpdGggdGhlIGNvcnJlc3BvbmRpbmcgZmxhZ3MgYWZ0ZXIgdGhlIHF1YWxpdHkgY29udHJvbC5cblxuY2RtX2RhdGFfdHlwZSA9IFRyYWplY3RvcnlcblZBUklBQkxFUzpcbmNhbGxTaWduIChDYWxsIFNpZ24pXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmludHAgKEludGVybmFsIFRTRyBUZW1wZXJhdHVyZSwgZGVncmVlX0MpXG5zYWwgKFRTRyBQcmFjdGlhbCBTYWxpbml0eSwgUFNVKVxuY29uZCAoVFNHIENvbmR1Y3Rpdml0eSwgZGVncmVlX0MpXG5leHQgKFRoZXJtaXN0b3IgV2F0ZXIgVGVtcGVyYXR1cmUsIGRlZ3JlZXNfQ2Vsc2l1cylcbnNzdCAoU2VhIFN1cmZhY2UgVGVtcGVyYXR1cmUsIGRlZ3JlZXNfQ2Vsc2l1cylcbmZsYWdfYSAoUUMgZmxhZy1wbGF0Zm9ybSBpZGVudGlmaWNhdGlvbilcbmZsYWdfYiAoUUMgZmxhZy1pbXBvc3NpYmxlIGRhdGUpXG5mbGFnX2MgKFFDIGZsYWctaW1wb3NzaWJsZSBsb2NhdGlvbilcbmZsYWdfZCAoUUMgZmxhZy1wb3NpdGlvbiBvbiBsYW5kIHN0ZXApXG5mbGFnX2UgKFFDIGZsYWctaW1wb3NzaWJsZSBzcGVlZClcbmZsYWdfZiAoUUMgZmxhZy1nbG9iYWwgcmFuZ2VzKVxuZmxhZ19nIChRQyBmbGFnLXJlZ2lvbmFsIHJhbmdlcylcbmZsYWdfaCAoUUMgZmxhZy1zcGlrZSB0ZXN0KVxuZmxhZ19pIChRQyBmbGFnLWNvbnN0YW50IHZhbHVlKVxuZmxhZ19qIChRQyBmbGFnLWdyYWRpZW50IHRlc3QpXG5mbGFnX2sgKFFDIGZsYWctY2xpbWF0b2xvZ3kgYW5kIE5DRVAgd2Vla2x5IGFuYWx5c2lzKVxuZmxhZ19sIChRQyBmbGFnLWJ1ZGR5IGNoZWNrKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL25vZGNQSkpVX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9ub2RjUEpKVV9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9ub2RjUEpKVS9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cuYW9tbC5ub2FhLmdvdi9waG9kL3RzZy9pbmRleC5waHAiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3Mvbm9kY1BKSlUucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPW5vZGNQSkpVJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgT0FSIEFPTUwiLCAibm9kY1BKSlUiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZ3RvcHBBVC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZ3RvcHBBVCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ndG9wcEFULmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkFuaW1hbCBUZWxlbWV0cnkgTmV0d29yayAoQVROKSIsICJUaGVzZSBkYXRhICh1cGRhdGVkIGRhaWx5KSBhcmUgZnJvbSB0aGUgQW5pbWFsIFRlbGVtZXRyeSBOZXR3b3JrIChBVE4pIHByb2dyYW0uICBCZWd1biBhcyBvbmUgb2YgdGhlIGZpZWxkIHByb2plY3RzIGluIHRoZSBpbnRlcm5hdGlvbmFsIENlbnN1cyBvZiBNYXJpbmUgTGlmZSwgdGhlIFBhY2lmaWMtZm9jdXNlZCBUT1BQIChUYWdnaW5nIG9mIFBhY2lmaWMgUHJlZGF0b3JzKSBwcm9ncmFtIHdhcyBhbiBpbnRlcm5hdGlvbmFsIG11bHRpZGlzY2lwbGluYXJ5IGNvbGxhYm9yYXRpb24gb2YgbW9yZSB0aGFuIDc1IHNjaWVudGlzdHMgZnJvbSA3IG5hdGlvbnMuICBPdmVyIHRoZSBkZWNhZGUgYmVnaW5uaW5nIGluIDIwMDAsIFRPUFAgcmVzZWFyY2hlcnMgZGVwbG95ZWQgbW9yZSB0aGFuIDQsMzAwIGVsZWN0cm9uaWMgdGFncyBvbiAyMyBkaWZmZXJlbnQgc3BlY2llcyBvZiBtYXJpbmUgYW5pbWFscyAtIHlpZWxkaW5nIGEgZGF0YXNldCBvZiBtb3JlIHRoYW4gMzM1LDAwMCB0cmFja2luZyBkYXlzLiBUbyBsZWFybiBtb3JlIHBsZWFzZSB2aXNpdCBodHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L0FUTi5cblxuY2RtX2RhdGFfdHlwZSA9IFRyYWplY3RvcnlcblZBUklBQkxFUzpcbmNvbW1vbk5hbWUgKENvbW1vbiBOYW1lKVxueWVhckRlcGxveWVkIChZZWFyIERlcGxveWVkKVxucHJvamVjdFxudG9wcElEIChUT1BQIElEICh1bmlxdWUpKVxuc2VyaWFsTnVtYmVyIChUaGUgVGFnJ3MgU2VyaWFsIE51bWJlciAobm90IHVuaXF1ZSkpXG5pc0RyaWZ0ZXIgKElzIERyaWZ0ZXI/KVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5MQyAoTG9jYXRpb24gUXVhbGl0eSBDb2RlKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2d0b3BwQVRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2d0b3BwQVRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZ3RvcHBBVC9pbmRleC5qc29uIiwgImh0dHA6Ly9ndG9wcC5vcmcvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2d0b3BwQVQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWd0b3BwQVQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiQW5pbWFsIFRlbGVtZXRyeSBOZXR3b3JrIiwgImd0b3BwQVQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWN1ZmVzLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJY3VmZXMiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWN1ZmVzLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkNhbENPRkkgQ29udGludW91cyBVbmRlcndheSBGaXNoLUVnZyBTYW1wbGVyIiwgIlNhbXBsZXMgY29sbGVjdGVkIHVzaW5nIHRoZSBDb250aW51b3VzIFVuZGVyd2F5IEZpc2gtRWdnIFNhbXBsZXIsIGtub3duIGFzIENVRkVTLiBUaGUgZGF0YSBpbmNsdWRlIG51bWJlcnMgb2YgYW5jaG92eSwgc2FyZGluZSwgamFjayBtYWNrZXJlbCwgc3F1aWQsIGhha2UsIGFuZCB1bmlkZW50aWZpZWQgZmlzaCBlZ2dzIGNhcHR1cmVkLCBhbmQgYXNzb2NpYXRlZCBlbnZpcm9ubWVudGFsLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZSAoQ3J1aXNlIENvZGUpXG5zaGlwIChTaGlwIE5hbWUpXG5zaGlwX2NvZGVcbnNhbXBsZV9udW1iZXJcbnRpbWUgKFN0YXJ0IFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoU3RhcnQgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKFN0YXJ0IExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxuc3RhcnRfdGVtcGVyYXR1cmUgKGRlZ3JlZSBDKVxuc3RhcnRfc2FsaW5pdHkgKHBzdSlcbnN0YXJ0X3dpbmRfc3BlZWQgKGtub3RzKVxuc3RhcnRfd2luZF9kaXJlY3Rpb24gKGRlZ3JlZXMpXG5zdGFydF9wdW1wX3NwZWVkIChNXjMgcGVyIG1pbnV0ZSlcbnN0b3BfdGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnN0b3BfbGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5zdG9wX2xvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuc3RvcF90ZW1wZXJhdHVyZSAoZGVncmVlIEMpXG5zdG9wX3NhbGluaXR5IChwc3UpXG5zdG9wX3dpbmRfc3BlZWQgKGtub3RzKVxuc3RvcF93aW5kX2RpcmVjdGlvbiAoZGVncmVlcylcbnN0b3BfcHVtcF9zcGVlZCAoTV4zIHBlciBtaW51dGUpXG5zYXJkaW5lX2VnZ3MgKGNvdW50KVxuYW5jaG92eV9lZ2dzIChjb3VudClcbmphY2tfbWFja2VyZWxfZWdncyAoY291bnQpXG5oYWtlX2VnZ3MgKGNvdW50KVxuc3F1aWRfZWdncyAoY291bnQpXG5vdGhlcl9maXNoX2VnZ3MgKGNvdW50KVxuY29tbWVudHNcbnJlc29ydGVkXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkQ2FsQ09GSWN1ZmVzX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRDYWxDT0ZJY3VmZXNfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkQ2FsQ09GSWN1ZmVzL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9DYWxDT0ZJL2NhbGNvZmlfaW5mby5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZENhbENPRkljdWZlcy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkQ2FsQ09GSWN1ZmVzJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgU1dGU0MiLCAiZXJkQ2FsQ09GSWN1ZmVzIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRkljcnVpc2VzLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJY3J1aXNlcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJY3J1aXNlcy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJDYWxDT0ZJIENydWlzZXMiLCAiQ3J1aXNlcyB1c2luZyBvbmUgb3IgbW9yZSBzaGlwcyBjb25kdWN0ZWQgYXMgcGFydCBvZiB0aGUgQ2FsaWZvcm5pYSBDb29wZXJhdGl2ZSBPY2VhbmljIEZpc2hlcmllcyBJbnZlc3RpZ2F0aW9ucyAoQ2FsQ09GSSkgcHJvZ3JhbSBhbmQgb3RoZXIgcmVsYXRlZCBjcnVpc2VzIGNvbmR1Y3RlZCBieSB0aGUgTk9BQSBTb3V0aHdlc3QgRmlzaGVyaWVzIFNjaWVuY2UgQ2VudGVyIGZyb20gMTk1MSB0byBwcmVzZW50LiBNdWx0aS1wdXJwb3NlIGNydWlzZXMgZS5nLiwgQ2FsQ09GSSBhbmQgdHJhd2xpbmcsIGluY2x1ZGUgYSBsaXN0aW5nIGZvciBlYWNoIGNydWlzZSB0eXBlLlxuXG5jZG1fZGF0YV90eXBlID0gT3RoZXJcblZBUklBQkxFUzpcbmNydWlzZSAoQ3J1aXNlIENvZGUpXG5zaGlwIChTaGlwIE5hbWUpXG5zaGlwX2NvZGVcbnllYXJcbm1vbnRoXG5jcnVpc2VfdHlwZVxuIiwgIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9lcmRDYWxDT0ZJY3J1aXNlcy9pbmRleC5qc29uIiwgImh0dHBzOi8vb2NlYW52aWV3LnBmZWcubm9hYS5nb3YvQ2FsQ09GSS9jYWxjb2ZpX2luZm8uaHRtbCIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9lcmRDYWxDT0ZJY3J1aXNlcy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkQ2FsQ09GSWNydWlzZXMmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBTV0ZTQyIsICJlcmRDYWxDT0ZJY3J1aXNlcyJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJZWdnY250LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJZWdnY250IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRkllZ2djbnQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiQ2FsQ09GSSBFZ2cgQ291bnRzIiwgIkZpc2ggZWdnIGNvdW50cyBhbmQgc3RhbmRhcmRpemVkIGNvdW50cyBmb3IgZWdncyBjYXB0dXJlZCBpbiBDYWxDT0ZJIGljdGh5b3BsYW5rdG9uIG5ldHMgKHByaW1hcmlseSB2ZXJ0aWNhbCBbQ2FsdmV0IG9yIFBhaXJvdmV0XSwgb2JsaXF1ZSBbYm9uZ28gb3IgcmluZyBuZXRzXSwgYW5kIHN1cmZhY2UgdG93cyBbTWFudGEgbmV0c10pLiBTdXJmYWNlIHRvd3MgYXJlIG5vcm1hbGx5IHN0YW5kYXJkaXplZCB0byBjb3VudCBwZXIgMSwwMDAgbTMgc3RyYWluZWQuIE9ibGlxdWUgdG93cyBhcmUgbm9ybWFsbHkgc3RhbmRhcmRpemVkIHRvIGNvdW50IHBlciAxMCBtMiBvZiBzdXJmYWNlIHNhbXBsZWQuIFRoaXMgdGFibGUgaW5jbHVkZXMgYWxsIHRvd3MgYnkgc3BlY2llcywgZXZlbiBpZiB6ZXJvIGVnZ3Mgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMsIGkuZS4sIG5lZ2F0aXZlIHRvd3MuIFRoZSBcIkVnZyBDb3VudHMgUG9zaXRpdmUgVG93c1wiIHRhYmxlIGluY2x1ZGVzIG9ubHkgdG93cyB3aGVyZSBvbmUgb3IgbW9yZSBlZ2dzIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzIHNlbGVjdGVkIGJ5IHRoZSB1c2VyLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZSAoQ3J1aXNlIENvZGUpXG5zaGlwIChTaGlwIE5hbWUpXG5zaGlwX2NvZGVcbm9yZGVyX29jY3VwaWVkXG50b3dfdHlwZVxubmV0X3R5cGVcbnRvd19udW1iZXJcbm5ldF9sb2NhdGlvblxuc3RhbmRhcmRfaGF1bF9mYWN0b3JcbnZvbHVtZV9zYW1wbGVkIChjdWJpYyBtZXRlcnMpXG5wZXJjZW50X3NvcnRlZCAoJS8xMDApXG5zYW1wbGVfcXVhbGl0eVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxpbmVcbnN0YXRpb25cbnRpbWUgKFN0YXJ0IFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zY2llbnRpZmljX25hbWVcbmNvbW1vbl9uYW1lXG5pdGlzX3RzbiAoSW50ZXJncmF0ZWQgVGF4b21vbWljIEluZm9ybWF0aW9uIFN5c3RlbSBUYXhvbm9taWMgU2VyaWFsIE51bWJlcilcbmNhbGNvZmlfc3BlY2llc19jb2RlIChDYWxDT0kgU3BlY2llcyBDb2RlKVxuZWdnX2NvdW50IChyYXcgY291bnQpXG5lZ2dzXzEwbTIgKFN0YW5kYXJkaXplZCBjb3VudCBvZiBlZ2dzIGZvciBvYmxpcXVlIHRvd3MsIEVnZ3MgcGVyIHRlbiBtZXRlcnMgc3F1YXJlZCBvZiB3YXRlciBzYW1wbGVkKVxuZWdnc18xMDAwbTMgKFN0YW5kYXJkaXplZCBjb3VudCBvZiBlZ2dzIGZvciBtYW50YSB0b3dzLCBFZ2dzIHBlciAxLDAwMCBjdWJpYyBtZXRlcnMgb2Ygd2F0ZXIgc2FtcGxlZClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9lcmRDYWxDT0ZJZWdnY250X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRDYWxDT0ZJZWdnY250X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZENhbENPRkllZ2djbnQvaW5kZXguanNvbiIsICJodHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L0NhbENPRkkvY2FsY29maV9pbmZvLmh0bWwiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkQ2FsQ09GSWVnZ2NudC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkQ2FsQ09GSWVnZ2NudCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFNXRlNDIiwgImVyZENhbENPRkllZ2djbnQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWVnZ2NudHBvcy5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWVnZ2NudHBvcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJZWdnY250cG9zLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkNhbENPRkkgRWdnIENvdW50cyBQb3NpdGl2ZSBUb3dzIiwgIkZpc2ggZWdnIGNvdW50cyBhbmQgc3RhbmRhcmRpemVkIGNvdW50cyBmb3IgZWdncyBjYXB0dXJlZCBpbiBDYWxDT0ZJIGljdGh5b3BsYW5rdG9uIG5ldHMgKHByaW1hcmlseSB2ZXJ0aWNhbCBbQ2FsdmV0IG9yIFBhaXJvdmV0XSwgb2JsaXF1ZSBbYm9uZ28gb3IgcmluZyBuZXRzXSwgYW5kIHN1cmZhY2UgdG93cyBbTWFudGEgbmV0c10pLiBTdXJmYWNlIHRvd3MgYXJlIG5vcm1hbGx5IHN0YW5kYXJkaXplZCB0byBjb3VudCBwZXIgMSwwMDAgbTMgc3RyYWluZWQuIE9ibGlxdWUgdG93cyBhcmUgbm9ybWFsbHkgc3RhbmRhcmRpemVkIHRvIGNvdW50IHBlciAxMCBtMiBvZiBzdXJmYWNlIHNhbXBsZWQuIFRoaXMgdGFibGUgaW5jbHVkZXMgb25seSB0b3dzIHdoZXJlIG9uZSBvciBtb3JlIGVnZ3Mgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMgc2VsZWN0ZWQgYnkgdGhlIHVzZXIsIGkuZS4sIG5vIFwiemVyb1wiIHRvd3MuIFRoZSBcIkVnZyBDb3VudHNcIiB0YWJsZSBpbmNsdWRlcyBhbGwgdG93cyBieSBzcGVjaWVzLCBpLmUuLCBib3RoIHBvc2l0aXZlIGFuZCBuZWdhdGl2ZSB0b3dzLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZSAoQ3J1aXNlIENvZGUpXG5zaGlwIChTaGlwIE5hbWUpXG5zaGlwX2NvZGVcbm9yZGVyX29jY3VwaWVkXG50b3dfdHlwZVxubmV0X3R5cGVcbnRvd19udW1iZXJcbm5ldF9sb2NhdGlvblxuc3RhbmRhcmRfaGF1bF9mYWN0b3JcbnZvbHVtZV9zYW1wbGVkIChjdWJpYyBtZXRlcnMpXG5wZXJjZW50X3NvcnRlZCAoJS8xMDApXG5zYW1wbGVfcXVhbGl0eVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxpbmVcbnN0YXRpb25cbnRpbWUgKFN0YXJ0IFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zY2llbnRpZmljX25hbWVcbmNvbW1vbl9uYW1lXG5pdGlzX3RzbiAoSW50ZXJncmF0ZWQgVGF4b21vbWljIEluZm9ybWF0aW9uIFN5c3RlbSBUYXhvbm9taWMgU2VyaWFsIE51bWJlcilcbmNhbGNvZmlfc3BlY2llc19jb2RlXG5lZ2dfY291bnQgKHJhdyBjb3VudClcbmVnZ3NfMTBtMiAoU3RhbmRhcmRpemVkIGNvdW50IG9mIGVnZ3MgZm9yIG9ibGlxdWUgdG93cywgRWdncyBwZXIgdGVuIG1ldGVycyBzcXVhcmVkIG9mIHdhdGVyIHNhbXBsZWQpXG5lZ2dzXzEwMDBtMyAoU3RhbmRhcmRpemVkIGNvdW50IG9mIGVnZ3MgZm9yIG1hbnRhIHRvd3MsIEVnZ3MgcGVyIDEsMDAwIGN1YmljIG1ldGVycyBvZiB3YXRlciBzYW1wbGVkKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2VyZENhbENPRkllZ2djbnRwb3NfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2VyZENhbENPRkllZ2djbnRwb3NfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkQ2FsQ09GSWVnZ2NudHBvcy9pbmRleC5qc29uIiwgImh0dHBzOi8vb2NlYW52aWV3LnBmZWcubm9hYS5nb3YvQ2FsQ09GSS9jYWxjb2ZpX2luZm8uaHRtbCIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9lcmRDYWxDT0ZJZWdnY250cG9zLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1lcmRDYWxDT0ZJZWdnY250cG9zJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgU1dGU0MiLCAiZXJkQ2FsQ09GSWVnZ2NudHBvcyJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJZWdnc3RnLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJZWdnc3RnIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRkllZ2dzdGcuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiQ2FsQ09GSSBFZ2cgU3RhZ2VzIiwgIkVnZyBtb3JwaG9sb2dpY2FsIGRldmVsb3BtZW50YWwgc3RhZ2UgZm9yIGVnZ3Mgb2Ygc2VsZWN0ZWQgc3BlY2llcyBjYXB0dXJlZCBpbiBDYWxDT0ZJIGljdGh5b3BsYW5rdG9uIG5ldHMuIFNlcXVlbnRpYWwgZGV2ZWxvcG1lbnRhbCBzdGFnZXMgYXJlIGRlc2NyaWJlZCBieSBNb3NlciBhbmQgQWhsc3Ryb20gKDE5ODU7IHNlZSB0aGUgaW5mbyB1cmwgcmVmZXJlbmNlcyBzZWN0aW9uKS5cblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2UgKENydWlzZSBDb2RlKVxuc2hpcCAoU2hpcCBOYW1lKVxuc2hpcF9jb2RlXG5vcmRlcl9vY2N1cGllZFxudG93X3R5cGUgKFRvdyBUeXBlIE5hbWUpXG5uZXRfdHlwZVxudG93X251bWJlclxubmV0X2xvY2F0aW9uXG5zdGFuZGFyZF9oYXVsX2ZhY3Rvclxudm9sdW1lX3NhbXBsZWQgKGN1YmljIG1ldGVycylcbnBlcmNlbnRfc29ydGVkICglLzEwMClcbnNhbXBsZV9xdWFsaXR5XG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGluZVxuc3RhdGlvblxudGltZSAoU3RhcnQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnNjaWVudGlmaWNfbmFtZVxuY29tbW9uX25hbWVcbml0aXNfdHNuIChJbnRlcmdyYXRlZCBUYXhvbW9taWMgSW5mb3JtYXRpb24gU3lzdGVtIFRheG9ub21pYyBTZXJpYWwgTnVtYmVyKVxuY2FsY29maV9zcGVjaWVzX2NvZGVcbmVnZ19zdGFnZVxuZWdnX3N0YWdlX2NvdW50IChSYXcgY291bnQgb2YgZWdncyBpbiB0aGUgc3RhZ2UpXG5lZ2dzXzEwbTIgKFN0YW5kYXJkaXplZCBjb3VudCBvZiBlZ2dzIGZvciBvYmxpcXVlIHRvd3MsIEVnZ3MgcGVyIHRlbiBtZXRlcnMgc3F1YXJlZCBvZiB3YXRlciBzYW1wbGVkKVxuZWdnc18xMDAwbTMgKFN0YW5kYXJkaXplZCBjb3VudCBvZiBlZ2dzIGZvciBtYW50YSB0b3dzLCBFZ2dzIHBlciAxLDAwMCBjdWJpYyBtZXRlcnMgb2Ygd2F0ZXIgc2FtcGxlZClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9lcmRDYWxDT0ZJZWdnc3RnX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRDYWxDT0ZJZWdnc3RnX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZENhbENPRkllZ2dzdGcvaW5kZXguanNvbiIsICJodHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L0NhbENPRkkvY2FsY29maV9pbmZvLmh0bWwiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkQ2FsQ09GSWVnZ3N0Zy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkQ2FsQ09GSWVnZ3N0ZyZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFNXRlNDIiwgImVyZENhbENPRkllZ2dzdGciXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudHBvcy5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudHBvcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250cG9zLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkNhbENPRkkgTGFydmFlIENvdW50cyBQb3NpdGl2ZSBUb3dzIiwgIkZpc2ggbGFydmFlIGNvdW50cyBhbmQgc3RhbmRhcmRpemVkIGNvdW50cyBmb3IgZWdncyBjYXB0dXJlZCBpbiBDYWxDT0ZJIGljdGh5b3BsYW5rdG9uIG5ldHMgKHByaW1hcmlseSB2ZXJ0aWNhbCBbQ2FsdmV0IG9yIFBhaXJvdmV0XSwgb2JsaXF1ZSBbYm9uZ28gb3IgcmluZyBuZXRzXSwgYW5kIHN1cmZhY2UgdG93cyBbTWFudGEgbmV0c10pIC4gU3VyZmFjZSB0b3dzIGFyZSBub3JtYWxseSBzdGFuZGFyZGl6ZWQgdG8gY291bnQgcGVyIDEsMDAwIG0zIHN0cmFpbmVkLiBPYmxpcXVlIHRvd3MgYXJlIG5vcm1hbGx5IHN0YW5kYXJkaXplZCB0byBjb3VudCBwZXIgMTAgbTIgb2Ygc3VyZmFjZSBzYW1wbGVkLiBUaGlzIHRhYmxlIGluY2x1ZGVzIG9ubHkgdG93cyB3aGVyZSBvbmUgb3IgbW9yZSBsYXJ2YWUgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMgc2VsZWN0ZWQgYnkgdGhlIHVzZXIsIGkuZS4sIG5vIFwiemVyb1wiIHRvd3MuIFRoZSBcIkxhcnZhZSBDb3VudHNcIiB0YWJsZSBpbmNsdWRlcyBhbGwgdG93cyBieSBzcGVjaWVzLCBpLmUuLCBib3RoIHBvc2l0aXZlIGFuZCBuZWdhdGl2ZSB0b3dzLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZSAoQ3J1aXNlIENvZGUpXG5zaGlwIChTaGlwIE5hbWUpXG5zaGlwX2NvZGVcbm9yZGVyX29jY3VwaWVkXG50b3dfdHlwZVxubmV0X3R5cGVcbnRvd19udW1iZXJcbm5ldF9sb2NhdGlvblxuc3RhbmRhcmRfaGF1bF9mYWN0b3JcbnZvbHVtZV9zYW1wbGVkIChjdWJpYyBtZXRlcnMpXG5wZXJjZW50X3NvcnRlZCAoJS8xMDApXG5zYW1wbGVfcXVhbGl0eVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxpbmVcbnN0YXRpb25cbnRpbWUgKFN0YXJ0IFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zY2llbnRpZmljX25hbWVcbmNvbW1vbl9uYW1lXG5pdGlzX3RzbiAoSW50ZXJncmF0ZWQgVGF4b21vbWljIEluZm9ybWF0aW9uIFN5c3RlbSBUYXhvbm9taWMgU2VyaWFsIE51bWJlcilcbmNhbGNvZmlfc3BlY2llc19jb2RlXG5sYXJ2YWVfY291bnQgKFJhdyBjb3VudCBvZiBsYXJ2YWUpXG5sYXJ2YWVfMTBtMiAoU3RhbmRhcmRpemVkIGNvdW50IG9mIGxhcnZhZSBpbiB0aGUgc2l6ZSBjbGFzcyBmb3Igb2JsaXF1ZSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgdGVuIG1ldGVycyBzcXVhcmVkIG9mIHdhdGVyIHNhbXBsZWQpXG5sYXJ2YWVfMTAwMG0zIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGluIHRoZSBzaXplIGNsYXNzIGZvciBtYW50YSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgMSwwMDAgY3ViaWMgbWV0ZXJzIG9mIHdhdGVyIHNhbXBsZWQpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkQ2FsQ09GSWxydmNudHBvc19mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkQ2FsQ09GSWxydmNudHBvc19pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9lcmRDYWxDT0ZJbHJ2Y250cG9zL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9DYWxDT0ZJL2NhbGNvZmlfaW5mby5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZENhbENPRklscnZjbnRwb3MucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZENhbENPRklscnZjbnRwb3Mmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBTV0ZTQyIsICJlcmRDYWxDT0ZJbHJ2Y250cG9zIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRBdG9BTS5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudEF0b0FNIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRBdG9BTS5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJDYWxDT0ZJIExhcnZhZSBDb3VudHMsIFNjaWVudGlmaWMgTmFtZXMgQSB0byBBTSIsICJGaXNoIGxhcnZhZSBjb3VudHMgYW5kIHN0YW5kYXJkaXplZCBjb3VudHMgZm9yIGxhcnZhZSBjYXB0dXJlZCBpbiBDYWxDT0ZJIGljdGh5b3BsYW5rdG9uIG5ldHMgKHByaW1hcmlseSB2ZXJ0aWNhbCBbQ2FsdmV0IG9yIFBhaXJvdmV0XSwgb2JsaXF1ZSBbYm9uZ28gb3IgcmluZyBuZXRzXSwgYW5kIHN1cmZhY2UgdG93cyBbTWFudGEgbmV0c10pLiBTdXJmYWNlIHRvd3MgYXJlIG5vcm1hbGx5IHN0YW5kYXJkaXplZCB0byBjb3VudCBwZXIgMSwwMDAgbTMgc3RyYWluZWQuIE9ibGlxdWUgdG93cyBhcmUgbm9ybWFsbHkgc3RhbmRhcmRpemVkIHRvIGNvdW50IHBlciAxMCBtMiBvZiBzdXJmYWNlIHNhbXBsZWQuIFRoaXMgdGFibGUgaW5jbHVkZXMgYWxsIHRvd3MgYnkgc3BlY2llcywgZXZlbiBpZiB6ZXJvIGxhcnZhZSB3ZXJlIGNhcHR1cmVkIGZvciB0aGUgc3BlY2llcywgaS5lLiwgbmVnYXRpdmUgdG93cy4gVGhlIFwiTGFydmFlIENvdW50cyBQb3NpdGl2ZSBUb3dzXCIgdGFibGUgaW5jbHVkZXMgb25seSB0b3dzIHdoZXJlIG9uZSBvciBtb3JlIGxhcnZhZSB3ZXJlIGNhcHR1cmVkIGZvciB0aGUgc3BlY2llcyBzZWxlY3RlZCBieSB0aGUgdXNlci5cblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2UgKENydWlzZSBDb2RlKVxuc2hpcCAoU2hpcCBOYW1lKVxuc2hpcF9jb2RlXG5vcmRlcl9vY2N1cGllZFxudG93X3R5cGVcbm5ldF90eXBlXG50b3dfbnVtYmVyXG5uZXRfbG9jYXRpb25cbnN0YW5kYXJkX2hhdWxfZmFjdG9yXG52b2x1bWVfc2FtcGxlZCAoY3ViaWMgbWV0ZXJzKVxucGVyY2VudF9zb3J0ZWQgKCUvMTAwKVxuc2FtcGxlX3F1YWxpdHlcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5saW5lXG5zdGF0aW9uXG50aW1lIChTdGFydCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuc2NpZW50aWZpY19uYW1lXG5jb21tb25fbmFtZVxuaXRpc190c24gKEludGVyZ3JhdGVkIFRheG9tb21pYyBJbmZvcm1hdGlvbiBTeXN0ZW0gVGF4b25vbWljIFNlcmlhbCBOdW1iZXIpXG5jYWxjb2ZpX3NwZWNpZXNfY29kZVxubGFydmFlX2NvdW50IChSYXcgY291bnQgb2YgbGFydmFlKVxubGFydmFlXzEwbTIgKFN0YW5kYXJkaXplZCBjb3VudCBvZiBsYXJ2YWUgZm9yIG9ibGlxdWUgdG93cywgRmlzaCBsYXJ2YWUgcGVyIHRlbiBtZXRlcnMgc3F1YXJlZCBvZiB3YXRlciBzYW1wbGVkKVxubGFydmFlXzEwMDBtMyAoU3RhbmRhcmRpemVkIGNvdW50IG9mIGxhcnZhZSBmb3IgbWFudGEgdG93cywgRmlzaCBsYXJ2YWUgcGVyIDEsMDAwIGN1YmljIG1ldGVycyBvZiB3YXRlciBzYW1wbGVkKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2VyZENhbENPRklscnZjbnRBdG9BTV9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkQ2FsQ09GSWxydmNudEF0b0FNX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZENhbENPRklscnZjbnRBdG9BTS9pbmRleC5qc29uIiwgImh0dHBzOi8vb2NlYW52aWV3LnBmZWcubm9hYS5nb3YvQ2FsQ09GSS9jYWxjb2ZpX2luZm8uaHRtbCIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9lcmRDYWxDT0ZJbHJ2Y250QXRvQU0ucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZENhbENPRklscnZjbnRBdG9BTSZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFNXRlNDIiwgImVyZENhbENPRklscnZjbnRBdG9BTSJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250QU50b0FSLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250QU50b0FSIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRBTnRvQVIuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiQ2FsQ09GSSBMYXJ2YWUgQ291bnRzLCBTY2llbnRpZmljIE5hbWVzIEFOIHRvIEFSIiwgIkZpc2ggbGFydmFlIGNvdW50cyBhbmQgc3RhbmRhcmRpemVkIGNvdW50cyBmb3IgbGFydmFlIGNhcHR1cmVkIGluIENhbENPRkkgaWN0aHlvcGxhbmt0b24gbmV0cyAocHJpbWFyaWx5IHZlcnRpY2FsIFtDYWx2ZXQgb3IgUGFpcm92ZXRdLCBvYmxpcXVlIFtib25nbyBvciByaW5nIG5ldHNdLCBhbmQgc3VyZmFjZSB0b3dzIFtNYW50YSBuZXRzXSkuIFN1cmZhY2UgdG93cyBhcmUgbm9ybWFsbHkgc3RhbmRhcmRpemVkIHRvIGNvdW50IHBlciAxLDAwMCBtMyBzdHJhaW5lZC4gT2JsaXF1ZSB0b3dzIGFyZSBub3JtYWxseSBzdGFuZGFyZGl6ZWQgdG8gY291bnQgcGVyIDEwIG0yIG9mIHN1cmZhY2Ugc2FtcGxlZC4gVGhpcyB0YWJsZSBpbmNsdWRlcyBhbGwgdG93cyBieSBzcGVjaWVzLCBldmVuIGlmIHplcm8gbGFydmFlIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzLCBpLmUuLCBuZWdhdGl2ZSB0b3dzLiBUaGUgXCJMYXJ2YWUgQ291bnRzIFBvc2l0aXZlIFRvd3NcIiB0YWJsZSBpbmNsdWRlcyBvbmx5IHRvd3Mgd2hlcmUgb25lIG9yIG1vcmUgbGFydmFlIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzIHNlbGVjdGVkIGJ5IHRoZSB1c2VyLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZSAoQ3J1aXNlIENvZGUpXG5zaGlwIChTaGlwIE5hbWUpXG5zaGlwX2NvZGVcbm9yZGVyX29jY3VwaWVkXG50b3dfdHlwZVxubmV0X3R5cGVcbnRvd19udW1iZXJcbm5ldF9sb2NhdGlvblxuc3RhbmRhcmRfaGF1bF9mYWN0b3JcbnZvbHVtZV9zYW1wbGVkIChjdWJpYyBtZXRlcnMpXG5wZXJjZW50X3NvcnRlZCAoJS8xMDApXG5zYW1wbGVfcXVhbGl0eVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxpbmVcbnN0YXRpb25cbnRpbWUgKFN0YXJ0IFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zY2llbnRpZmljX25hbWVcbmNvbW1vbl9uYW1lXG5pdGlzX3RzbiAoSW50ZXJncmF0ZWQgVGF4b21vbWljIEluZm9ybWF0aW9uIFN5c3RlbSBUYXhvbm9taWMgU2VyaWFsIE51bWJlcilcbmNhbGNvZmlfc3BlY2llc19jb2RlXG5sYXJ2YWVfY291bnQgKFJhdyBjb3VudCBvZiBsYXJ2YWUpXG5sYXJ2YWVfMTBtMiAoU3RhbmRhcmRpemVkIGNvdW50IG9mIGxhcnZhZSBmb3Igb2JsaXF1ZSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgdGVuIG1ldGVycyBzcXVhcmVkIG9mIHdhdGVyIHNhbXBsZWQpXG5sYXJ2YWVfMTAwMG0zIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGZvciBtYW50YSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgMSwwMDAgY3ViaWMgbWV0ZXJzIG9mIHdhdGVyIHNhbXBsZWQpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkQ2FsQ09GSWxydmNudEFOdG9BUl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkQ2FsQ09GSWxydmNudEFOdG9BUl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9lcmRDYWxDT0ZJbHJ2Y250QU50b0FSL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9DYWxDT0ZJL2NhbGNvZmlfaW5mby5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZENhbENPRklscnZjbnRBTnRvQVIucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZENhbENPRklscnZjbnRBTnRvQVImc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBTV0ZTQyIsICJlcmRDYWxDT0ZJbHJ2Y250QU50b0FSIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRBU3RvQkEuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRBU3RvQkEiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudEFTdG9CQS5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJDYWxDT0ZJIExhcnZhZSBDb3VudHMsIFNjaWVudGlmaWMgTmFtZXMgQVMgdG8gQkEiLCAiRmlzaCBsYXJ2YWUgY291bnRzIGFuZCBzdGFuZGFyZGl6ZWQgY291bnRzIGZvciBsYXJ2YWUgY2FwdHVyZWQgaW4gQ2FsQ09GSSBpY3RoeW9wbGFua3RvbiBuZXRzIChwcmltYXJpbHkgdmVydGljYWwgW0NhbHZldCBvciBQYWlyb3ZldF0sIG9ibGlxdWUgW2JvbmdvIG9yIHJpbmcgbmV0c10sIGFuZCBzdXJmYWNlIHRvd3MgW01hbnRhIG5ldHNdKS4gU3VyZmFjZSB0b3dzIGFyZSBub3JtYWxseSBzdGFuZGFyZGl6ZWQgdG8gY291bnQgcGVyIDEsMDAwIG0zIHN0cmFpbmVkLiBPYmxpcXVlIHRvd3MgYXJlIG5vcm1hbGx5IHN0YW5kYXJkaXplZCB0byBjb3VudCBwZXIgMTAgbTIgb2Ygc3VyZmFjZSBzYW1wbGVkLiBUaGlzIHRhYmxlIGluY2x1ZGVzIGFsbCB0b3dzIGJ5IHNwZWNpZXMsIGV2ZW4gaWYgemVybyBsYXJ2YWUgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMsIGkuZS4sIG5lZ2F0aXZlIHRvd3MuIFRoZSBcIkxhcnZhZSBDb3VudHMgUG9zaXRpdmUgVG93c1wiIHRhYmxlIGluY2x1ZGVzIG9ubHkgdG93cyB3aGVyZSBvbmUgb3IgbW9yZSBsYXJ2YWUgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMgc2VsZWN0ZWQgYnkgdGhlIHVzZXIuXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlIChDcnVpc2UgQ29kZSlcbnNoaXAgKFNoaXAgTmFtZSlcbnNoaXBfY29kZVxub3JkZXJfb2NjdXBpZWRcbnRvd190eXBlXG5uZXRfdHlwZVxudG93X251bWJlclxubmV0X2xvY2F0aW9uXG5zdGFuZGFyZF9oYXVsX2ZhY3Rvclxudm9sdW1lX3NhbXBsZWQgKGN1YmljIG1ldGVycylcbnBlcmNlbnRfc29ydGVkICglLzEwMClcbnNhbXBsZV9xdWFsaXR5XG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGluZVxuc3RhdGlvblxudGltZSAoU3RhcnQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnNjaWVudGlmaWNfbmFtZVxuY29tbW9uX25hbWVcbml0aXNfdHNuIChJbnRlcmdyYXRlZCBUYXhvbW9taWMgSW5mb3JtYXRpb24gU3lzdGVtIFRheG9ub21pYyBTZXJpYWwgTnVtYmVyKVxuY2FsY29maV9zcGVjaWVzX2NvZGVcbmxhcnZhZV9jb3VudCAoUmF3IGNvdW50IG9mIGxhcnZhZSlcbmxhcnZhZV8xMG0yIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGZvciBvYmxpcXVlIHRvd3MsIEZpc2ggbGFydmFlIHBlciB0ZW4gbWV0ZXJzIHNxdWFyZWQgb2Ygd2F0ZXIgc2FtcGxlZClcbmxhcnZhZV8xMDAwbTMgKFN0YW5kYXJkaXplZCBjb3VudCBvZiBsYXJ2YWUgZm9yIG1hbnRhIHRvd3MsIEZpc2ggbGFydmFlIHBlciAxLDAwMCBjdWJpYyBtZXRlcnMgb2Ygd2F0ZXIgc2FtcGxlZClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9lcmRDYWxDT0ZJbHJ2Y250QVN0b0JBX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRDYWxDT0ZJbHJ2Y250QVN0b0JBX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZENhbENPRklscnZjbnRBU3RvQkEvaW5kZXguanNvbiIsICJodHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L0NhbENPRkkvY2FsY29maV9pbmZvLmh0bWwiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkQ2FsQ09GSWxydmNudEFTdG9CQS5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkQ2FsQ09GSWxydmNudEFTdG9CQSZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFNXRlNDIiwgImVyZENhbENPRklscnZjbnRBU3RvQkEiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudEJDRXRvQlouc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRCQ0V0b0JaIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRCQ0V0b0JaLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkNhbENPRkkgTGFydmFlIENvdW50cywgU2NpZW50aWZpYyBOYW1lcyBCQ0UgdG8gQloiLCAiRmlzaCBsYXJ2YWUgY291bnRzIGFuZCBzdGFuZGFyZGl6ZWQgY291bnRzIGZvciBsYXJ2YWUgY2FwdHVyZWQgaW4gQ2FsQ09GSSBpY3RoeW9wbGFua3RvbiBuZXRzIChwcmltYXJpbHkgdmVydGljYWwgW0NhbHZldCBvciBQYWlyb3ZldF0sIG9ibGlxdWUgW2JvbmdvIG9yIHJpbmcgbmV0c10sIGFuZCBzdXJmYWNlIHRvd3MgW01hbnRhIG5ldHNdKS4gU3VyZmFjZSB0b3dzIGFyZSBub3JtYWxseSBzdGFuZGFyZGl6ZWQgdG8gY291bnQgcGVyIDEsMDAwIG0zIHN0cmFpbmVkLiBPYmxpcXVlIHRvd3MgYXJlIG5vcm1hbGx5IHN0YW5kYXJkaXplZCB0byBjb3VudCBwZXIgMTAgbTIgb2Ygc3VyZmFjZSBzYW1wbGVkLiBUaGlzIHRhYmxlIGluY2x1ZGVzIGFsbCB0b3dzIGJ5IHNwZWNpZXMsIGV2ZW4gaWYgemVybyBsYXJ2YWUgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMsIGkuZS4sIG5lZ2F0aXZlIHRvd3MuIFRoZSBcIkxhcnZhZSBDb3VudHMgUG9zaXRpdmUgVG93c1wiIHRhYmxlIGluY2x1ZGVzIG9ubHkgdG93cyB3aGVyZSBvbmUgb3IgbW9yZSBsYXJ2YWUgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMgc2VsZWN0ZWQgYnkgdGhlIHVzZXIuXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlIChDcnVpc2UgQ29kZSlcbnNoaXAgKFNoaXAgTmFtZSlcbnNoaXBfY29kZVxub3JkZXJfb2NjdXBpZWRcbnRvd190eXBlXG5uZXRfdHlwZVxudG93X251bWJlclxubmV0X2xvY2F0aW9uXG5zdGFuZGFyZF9oYXVsX2ZhY3Rvclxudm9sdW1lX3NhbXBsZWQgKGN1YmljIG1ldGVycylcbnBlcmNlbnRfc29ydGVkICglLzEwMClcbnNhbXBsZV9xdWFsaXR5XG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGluZVxuc3RhdGlvblxudGltZSAoU3RhcnQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnNjaWVudGlmaWNfbmFtZVxuY29tbW9uX25hbWVcbml0aXNfdHNuIChJbnRlcmdyYXRlZCBUYXhvbW9taWMgSW5mb3JtYXRpb24gU3lzdGVtIFRheG9ub21pYyBTZXJpYWwgTnVtYmVyKVxuY2FsY29maV9zcGVjaWVzX2NvZGVcbmxhcnZhZV9jb3VudCAoUmF3IGNvdW50IG9mIGxhcnZhZSlcbmxhcnZhZV8xMG0yIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGZvciBvYmxpcXVlIHRvd3MsIEZpc2ggbGFydmFlIHBlciB0ZW4gbWV0ZXJzIHNxdWFyZWQgb2Ygd2F0ZXIgc2FtcGxlZClcbmxhcnZhZV8xMDAwbTMgKFN0YW5kYXJkaXplZCBjb3VudCBvZiBsYXJ2YWUgZm9yIG1hbnRhIHRvd3MsIEZpc2ggbGFydmFlIHBlciAxLDAwMCBjdWJpYyBtZXRlcnMgb2Ygd2F0ZXIgc2FtcGxlZClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9lcmRDYWxDT0ZJbHJ2Y250QkNFdG9CWl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkQ2FsQ09GSWxydmNudEJDRXRvQlpfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkQ2FsQ09GSWxydmNudEJDRXRvQlovaW5kZXguanNvbiIsICJodHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L0NhbENPRkkvY2FsY29maV9pbmZvLmh0bWwiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkQ2FsQ09GSWxydmNudEJDRXRvQloucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZENhbENPRklscnZjbnRCQ0V0b0JaJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgU1dGU0MiLCAiZXJkQ2FsQ09GSWxydmNudEJDRXRvQloiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudEN0b0NFLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250Q3RvQ0UiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudEN0b0NFLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkNhbENPRkkgTGFydmFlIENvdW50cywgU2NpZW50aWZpYyBOYW1lcyBDIHRvIENFIiwgIkZpc2ggbGFydmFlIGNvdW50cyBhbmQgc3RhbmRhcmRpemVkIGNvdW50cyBmb3IgbGFydmFlIGNhcHR1cmVkIGluIENhbENPRkkgaWN0aHlvcGxhbmt0b24gbmV0cyAocHJpbWFyaWx5IHZlcnRpY2FsIFtDYWx2ZXQgb3IgUGFpcm92ZXRdLCBvYmxpcXVlIFtib25nbyBvciByaW5nIG5ldHNdLCBhbmQgc3VyZmFjZSB0b3dzIFtNYW50YSBuZXRzXSkuIFN1cmZhY2UgdG93cyBhcmUgbm9ybWFsbHkgc3RhbmRhcmRpemVkIHRvIGNvdW50IHBlciAxLDAwMCBtMyBzdHJhaW5lZC4gT2JsaXF1ZSB0b3dzIGFyZSBub3JtYWxseSBzdGFuZGFyZGl6ZWQgdG8gY291bnQgcGVyIDEwIG0yIG9mIHN1cmZhY2Ugc2FtcGxlZC4gVGhpcyB0YWJsZSBpbmNsdWRlcyBhbGwgdG93cyBieSBzcGVjaWVzLCBldmVuIGlmIHplcm8gbGFydmFlIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzLCBpLmUuLCBuZWdhdGl2ZSB0b3dzLiBUaGUgXCJMYXJ2YWUgQ291bnRzIFBvc2l0aXZlIFRvd3NcIiB0YWJsZSBpbmNsdWRlcyBvbmx5IHRvd3Mgd2hlcmUgb25lIG9yIG1vcmUgbGFydmFlIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzIHNlbGVjdGVkIGJ5IHRoZSB1c2VyLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZSAoQ3J1aXNlIENvZGUpXG5zaGlwIChTaGlwIE5hbWUpXG5zaGlwX2NvZGVcbm9yZGVyX29jY3VwaWVkXG50b3dfdHlwZVxubmV0X3R5cGVcbnRvd19udW1iZXJcbm5ldF9sb2NhdGlvblxuc3RhbmRhcmRfaGF1bF9mYWN0b3JcbnZvbHVtZV9zYW1wbGVkIChjdWJpYyBtZXRlcnMpXG5wZXJjZW50X3NvcnRlZCAoJS8xMDApXG5zYW1wbGVfcXVhbGl0eVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxpbmVcbnN0YXRpb25cbnRpbWUgKFN0YXJ0IFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zY2llbnRpZmljX25hbWVcbmNvbW1vbl9uYW1lXG5pdGlzX3RzbiAoSW50ZXJncmF0ZWQgVGF4b21vbWljIEluZm9ybWF0aW9uIFN5c3RlbSBUYXhvbm9taWMgU2VyaWFsIE51bWJlcilcbmNhbGNvZmlfc3BlY2llc19jb2RlXG5sYXJ2YWVfY291bnQgKFJhdyBjb3VudCBvZiBsYXJ2YWUpXG5sYXJ2YWVfMTBtMiAoU3RhbmRhcmRpemVkIGNvdW50IG9mIGxhcnZhZSBmb3Igb2JsaXF1ZSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgdGVuIG1ldGVycyBzcXVhcmVkIG9mIHdhdGVyIHNhbXBsZWQpXG5sYXJ2YWVfMTAwMG0zIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGZvciBtYW50YSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgMSwwMDAgY3ViaWMgbWV0ZXJzIG9mIHdhdGVyIHNhbXBsZWQpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkQ2FsQ09GSWxydmNudEN0b0NFX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRDYWxDT0ZJbHJ2Y250Q3RvQ0VfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkQ2FsQ09GSWxydmNudEN0b0NFL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9DYWxDT0ZJL2NhbGNvZmlfaW5mby5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZENhbENPRklscnZjbnRDdG9DRS5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkQ2FsQ09GSWxydmNudEN0b0NFJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgU1dGU0MiLCAiZXJkQ2FsQ09GSWxydmNudEN0b0NFIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRDRHRvQ0guc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRDRHRvQ0giLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudENEdG9DSC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJDYWxDT0ZJIExhcnZhZSBDb3VudHMsIFNjaWVudGlmaWMgTmFtZXMgQ0QgdG8gQ0giLCAiRmlzaCBsYXJ2YWUgY291bnRzIGFuZCBzdGFuZGFyZGl6ZWQgY291bnRzIGZvciBsYXJ2YWUgY2FwdHVyZWQgaW4gQ2FsQ09GSSBpY3RoeW9wbGFua3RvbiBuZXRzIChwcmltYXJpbHkgdmVydGljYWwgW0NhbHZldCBvciBQYWlyb3ZldF0sIG9ibGlxdWUgW2JvbmdvIG9yIHJpbmcgbmV0c10sIGFuZCBzdXJmYWNlIHRvd3MgW01hbnRhIG5ldHNdKS4gU3VyZmFjZSB0b3dzIGFyZSBub3JtYWxseSBzdGFuZGFyZGl6ZWQgdG8gY291bnQgcGVyIDEsMDAwIG0zIHN0cmFpbmVkLiBPYmxpcXVlIHRvd3MgYXJlIG5vcm1hbGx5IHN0YW5kYXJkaXplZCB0byBjb3VudCBwZXIgMTAgbTIgb2Ygc3VyZmFjZSBzYW1wbGVkLiBUaGlzIHRhYmxlIGluY2x1ZGVzIGFsbCB0b3dzIGJ5IHNwZWNpZXMsIGV2ZW4gaWYgemVybyBsYXJ2YWUgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMsIGkuZS4sIG5lZ2F0aXZlIHRvd3MuIFRoZSBcIkxhcnZhZSBDb3VudHMgUG9zaXRpdmUgVG93c1wiIHRhYmxlIGluY2x1ZGVzIG9ubHkgdG93cyB3aGVyZSBvbmUgb3IgbW9yZSBsYXJ2YWUgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMgc2VsZWN0ZWQgYnkgdGhlIHVzZXIuXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlIChDcnVpc2UgQ29kZSlcbnNoaXAgKFNoaXAgTmFtZSlcbnNoaXBfY29kZVxub3JkZXJfb2NjdXBpZWRcbnRvd190eXBlXG5uZXRfdHlwZVxudG93X251bWJlclxubmV0X2xvY2F0aW9uXG5zdGFuZGFyZF9oYXVsX2ZhY3Rvclxudm9sdW1lX3NhbXBsZWQgKGN1YmljIG1ldGVycylcbnBlcmNlbnRfc29ydGVkICglLzEwMClcbnNhbXBsZV9xdWFsaXR5XG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGluZVxuc3RhdGlvblxudGltZSAoU3RhcnQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnNjaWVudGlmaWNfbmFtZVxuY29tbW9uX25hbWVcbml0aXNfdHNuIChJbnRlcmdyYXRlZCBUYXhvbW9taWMgSW5mb3JtYXRpb24gU3lzdGVtIFRheG9ub21pYyBTZXJpYWwgTnVtYmVyKVxuY2FsY29maV9zcGVjaWVzX2NvZGVcbmxhcnZhZV9jb3VudCAoUmF3IGNvdW50IG9mIGxhcnZhZSlcbmxhcnZhZV8xMG0yIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGZvciBvYmxpcXVlIHRvd3MsIEZpc2ggbGFydmFlIHBlciB0ZW4gbWV0ZXJzIHNxdWFyZWQgb2Ygd2F0ZXIgc2FtcGxlZClcbmxhcnZhZV8xMDAwbTMgKFN0YW5kYXJkaXplZCBjb3VudCBvZiBsYXJ2YWUgZm9yIG1hbnRhIHRvd3MsIEZpc2ggbGFydmFlIHBlciAxLDAwMCBjdWJpYyBtZXRlcnMgb2Ygd2F0ZXIgc2FtcGxlZClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9lcmRDYWxDT0ZJbHJ2Y250Q0R0b0NIX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRDYWxDT0ZJbHJ2Y250Q0R0b0NIX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZENhbENPRklscnZjbnRDRHRvQ0gvaW5kZXguanNvbiIsICJodHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L0NhbENPRkkvY2FsY29maV9pbmZvLmh0bWwiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkQ2FsQ09GSWxydmNudENEdG9DSC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkQ2FsQ09GSWxydmNudENEdG9DSCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFNXRlNDIiwgImVyZENhbENPRklscnZjbnRDRHRvQ0giXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudENJdG9DTy5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudENJdG9DTyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250Q0l0b0NPLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkNhbENPRkkgTGFydmFlIENvdW50cywgU2NpZW50aWZpYyBOYW1lcyBDSSB0byBDTyIsICJGaXNoIGxhcnZhZSBjb3VudHMgYW5kIHN0YW5kYXJkaXplZCBjb3VudHMgZm9yIGxhcnZhZSBjYXB0dXJlZCBpbiBDYWxDT0ZJIGljdGh5b3BsYW5rdG9uIG5ldHMgKHByaW1hcmlseSB2ZXJ0aWNhbCBbQ2FsdmV0IG9yIFBhaXJvdmV0XSwgb2JsaXF1ZSBbYm9uZ28gb3IgcmluZyBuZXRzXSwgYW5kIHN1cmZhY2UgdG93cyBbTWFudGEgbmV0c10pLiBTdXJmYWNlIHRvd3MgYXJlIG5vcm1hbGx5IHN0YW5kYXJkaXplZCB0byBjb3VudCBwZXIgMSwwMDAgbTMgc3RyYWluZWQuIE9ibGlxdWUgdG93cyBhcmUgbm9ybWFsbHkgc3RhbmRhcmRpemVkIHRvIGNvdW50IHBlciAxMCBtMiBvZiBzdXJmYWNlIHNhbXBsZWQuIFRoaXMgdGFibGUgaW5jbHVkZXMgYWxsIHRvd3MgYnkgc3BlY2llcywgZXZlbiBpZiB6ZXJvIGxhcnZhZSB3ZXJlIGNhcHR1cmVkIGZvciB0aGUgc3BlY2llcywgaS5lLiwgbmVnYXRpdmUgdG93cy4gVGhlIFwiTGFydmFlIENvdW50cyBQb3NpdGl2ZSBUb3dzXCIgdGFibGUgaW5jbHVkZXMgb25seSB0b3dzIHdoZXJlIG9uZSBvciBtb3JlIGxhcnZhZSB3ZXJlIGNhcHR1cmVkIGZvciB0aGUgc3BlY2llcyBzZWxlY3RlZCBieSB0aGUgdXNlci5cblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2UgKENydWlzZSBDb2RlKVxuc2hpcCAoU2hpcCBOYW1lKVxuc2hpcF9jb2RlXG5vcmRlcl9vY2N1cGllZFxudG93X3R5cGVcbm5ldF90eXBlXG50b3dfbnVtYmVyXG5uZXRfbG9jYXRpb25cbnN0YW5kYXJkX2hhdWxfZmFjdG9yXG52b2x1bWVfc2FtcGxlZCAoY3ViaWMgbWV0ZXJzKVxucGVyY2VudF9zb3J0ZWQgKCUvMTAwKVxuc2FtcGxlX3F1YWxpdHlcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5saW5lXG5zdGF0aW9uXG50aW1lIChTdGFydCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuc2NpZW50aWZpY19uYW1lXG5jb21tb25fbmFtZVxuaXRpc190c24gKEludGVyZ3JhdGVkIFRheG9tb21pYyBJbmZvcm1hdGlvbiBTeXN0ZW0gVGF4b25vbWljIFNlcmlhbCBOdW1iZXIpXG5jYWxjb2ZpX3NwZWNpZXNfY29kZVxubGFydmFlX2NvdW50IChSYXcgY291bnQgb2YgbGFydmFlKVxubGFydmFlXzEwbTIgKFN0YW5kYXJkaXplZCBjb3VudCBvZiBsYXJ2YWUgZm9yIG9ibGlxdWUgdG93cywgRmlzaCBsYXJ2YWUgcGVyIHRlbiBtZXRlcnMgc3F1YXJlZCBvZiB3YXRlciBzYW1wbGVkKVxubGFydmFlXzEwMDBtMyAoU3RhbmRhcmRpemVkIGNvdW50IG9mIGxhcnZhZSBmb3IgbWFudGEgdG93cywgRmlzaCBsYXJ2YWUgcGVyIDEsMDAwIGN1YmljIG1ldGVycyBvZiB3YXRlciBzYW1wbGVkKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2VyZENhbENPRklscnZjbnRDSXRvQ09fZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2VyZENhbENPRklscnZjbnRDSXRvQ09faXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkQ2FsQ09GSWxydmNudENJdG9DTy9pbmRleC5qc29uIiwgImh0dHBzOi8vb2NlYW52aWV3LnBmZWcubm9hYS5nb3YvQ2FsQ09GSS9jYWxjb2ZpX2luZm8uaHRtbCIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9lcmRDYWxDT0ZJbHJ2Y250Q0l0b0NPLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1lcmRDYWxDT0ZJbHJ2Y250Q0l0b0NPJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgU1dGU0MiLCAiZXJkQ2FsQ09GSWxydmNudENJdG9DTyJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250Q1B0b0RFLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250Q1B0b0RFIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRDUHRvREUuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiQ2FsQ09GSSBMYXJ2YWUgQ291bnRzLCBTY2llbnRpZmljIE5hbWVzIENQIHRvIERFIiwgIkZpc2ggbGFydmFlIGNvdW50cyBhbmQgc3RhbmRhcmRpemVkIGNvdW50cyBmb3IgbGFydmFlIGNhcHR1cmVkIGluIENhbENPRkkgaWN0aHlvcGxhbmt0b24gbmV0cyAocHJpbWFyaWx5IHZlcnRpY2FsIFtDYWx2ZXQgb3IgUGFpcm92ZXRdLCBvYmxpcXVlIFtib25nbyBvciByaW5nIG5ldHNdLCBhbmQgc3VyZmFjZSB0b3dzIFtNYW50YSBuZXRzXSkuIFN1cmZhY2UgdG93cyBhcmUgbm9ybWFsbHkgc3RhbmRhcmRpemVkIHRvIGNvdW50IHBlciAxLDAwMCBtMyBzdHJhaW5lZC4gT2JsaXF1ZSB0b3dzIGFyZSBub3JtYWxseSBzdGFuZGFyZGl6ZWQgdG8gY291bnQgcGVyIDEwIG0yIG9mIHN1cmZhY2Ugc2FtcGxlZC4gVGhpcyB0YWJsZSBpbmNsdWRlcyBhbGwgdG93cyBieSBzcGVjaWVzLCBldmVuIGlmIHplcm8gbGFydmFlIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzLCBpLmUuLCBuZWdhdGl2ZSB0b3dzLiBUaGUgXCJMYXJ2YWUgQ291bnRzIFBvc2l0aXZlIFRvd3NcIiB0YWJsZSBpbmNsdWRlcyBvbmx5IHRvd3Mgd2hlcmUgb25lIG9yIG1vcmUgbGFydmFlIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzIHNlbGVjdGVkIGJ5IHRoZSB1c2VyLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZSAoQ3J1aXNlIENvZGUpXG5zaGlwIChTaGlwIE5hbWUpXG5zaGlwX2NvZGVcbm9yZGVyX29jY3VwaWVkXG50b3dfdHlwZVxubmV0X3R5cGVcbnRvd19udW1iZXJcbm5ldF9sb2NhdGlvblxuc3RhbmRhcmRfaGF1bF9mYWN0b3JcbnZvbHVtZV9zYW1wbGVkIChjdWJpYyBtZXRlcnMpXG5wZXJjZW50X3NvcnRlZCAoJS8xMDApXG5zYW1wbGVfcXVhbGl0eVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxpbmVcbnN0YXRpb25cbnRpbWUgKFN0YXJ0IFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zY2llbnRpZmljX25hbWVcbmNvbW1vbl9uYW1lXG5pdGlzX3RzbiAoSW50ZXJncmF0ZWQgVGF4b21vbWljIEluZm9ybWF0aW9uIFN5c3RlbSBUYXhvbm9taWMgU2VyaWFsIE51bWJlcilcbmNhbGNvZmlfc3BlY2llc19jb2RlXG5sYXJ2YWVfY291bnQgKFJhdyBjb3VudCBvZiBsYXJ2YWUpXG5sYXJ2YWVfMTBtMiAoU3RhbmRhcmRpemVkIGNvdW50IG9mIGxhcnZhZSBmb3Igb2JsaXF1ZSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgdGVuIG1ldGVycyBzcXVhcmVkIG9mIHdhdGVyIHNhbXBsZWQpXG5sYXJ2YWVfMTAwMG0zIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGZvciBtYW50YSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgMSwwMDAgY3ViaWMgbWV0ZXJzIG9mIHdhdGVyIHNhbXBsZWQpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkQ2FsQ09GSWxydmNudENQdG9ERV9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkQ2FsQ09GSWxydmNudENQdG9ERV9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9lcmRDYWxDT0ZJbHJ2Y250Q1B0b0RFL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9DYWxDT0ZJL2NhbGNvZmlfaW5mby5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZENhbENPRklscnZjbnRDUHRvREUucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZENhbENPRklscnZjbnRDUHRvREUmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBTV0ZTQyIsICJlcmRDYWxDT0ZJbHJ2Y250Q1B0b0RFIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRESHRvRUMuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRESHRvRUMiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudERIdG9FQy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJDYWxDT0ZJIExhcnZhZSBDb3VudHMsIFNjaWVudGlmaWMgTmFtZXMgREggdG8gRUMiLCAiRmlzaCBsYXJ2YWUgY291bnRzIGFuZCBzdGFuZGFyZGl6ZWQgY291bnRzIGZvciBsYXJ2YWUgY2FwdHVyZWQgaW4gQ2FsQ09GSSBpY3RoeW9wbGFua3RvbiBuZXRzIChwcmltYXJpbHkgdmVydGljYWwgW0NhbHZldCBvciBQYWlyb3ZldF0sIG9ibGlxdWUgW2JvbmdvIG9yIHJpbmcgbmV0c10sIGFuZCBzdXJmYWNlIHRvd3MgW01hbnRhIG5ldHNdKS4gU3VyZmFjZSB0b3dzIGFyZSBub3JtYWxseSBzdGFuZGFyZGl6ZWQgdG8gY291bnQgcGVyIDEsMDAwIG0zIHN0cmFpbmVkLiBPYmxpcXVlIHRvd3MgYXJlIG5vcm1hbGx5IHN0YW5kYXJkaXplZCB0byBjb3VudCBwZXIgMTAgbTIgb2Ygc3VyZmFjZSBzYW1wbGVkLiBUaGlzIHRhYmxlIGluY2x1ZGVzIGFsbCB0b3dzIGJ5IHNwZWNpZXMsIGV2ZW4gaWYgemVybyBsYXJ2YWUgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMsIGkuZS4sIG5lZ2F0aXZlIHRvd3MuIFRoZSBcIkxhcnZhZSBDb3VudHMgUG9zaXRpdmUgVG93c1wiIHRhYmxlIGluY2x1ZGVzIG9ubHkgdG93cyB3aGVyZSBvbmUgb3IgbW9yZSBsYXJ2YWUgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMgc2VsZWN0ZWQgYnkgdGhlIHVzZXIuXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlIChDcnVpc2UgQ29kZSlcbnNoaXAgKFNoaXAgTmFtZSlcbnNoaXBfY29kZVxub3JkZXJfb2NjdXBpZWRcbnRvd190eXBlXG5uZXRfdHlwZVxudG93X251bWJlclxubmV0X2xvY2F0aW9uXG5zdGFuZGFyZF9oYXVsX2ZhY3Rvclxudm9sdW1lX3NhbXBsZWQgKGN1YmljIG1ldGVycylcbnBlcmNlbnRfc29ydGVkICglLzEwMClcbnNhbXBsZV9xdWFsaXR5XG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGluZVxuc3RhdGlvblxudGltZSAoU3RhcnQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnNjaWVudGlmaWNfbmFtZVxuY29tbW9uX25hbWVcbml0aXNfdHNuIChJbnRlcmdyYXRlZCBUYXhvbW9taWMgSW5mb3JtYXRpb24gU3lzdGVtIFRheG9ub21pYyBTZXJpYWwgTnVtYmVyKVxuY2FsY29maV9zcGVjaWVzX2NvZGVcbmxhcnZhZV9jb3VudCAoUmF3IGNvdW50IG9mIGxhcnZhZSlcbmxhcnZhZV8xMG0yIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGZvciBvYmxpcXVlIHRvd3MsIEZpc2ggbGFydmFlIHBlciB0ZW4gbWV0ZXJzIHNxdWFyZWQgb2Ygd2F0ZXIgc2FtcGxlZClcbmxhcnZhZV8xMDAwbTMgKFN0YW5kYXJkaXplZCBjb3VudCBvZiBsYXJ2YWUgZm9yIG1hbnRhIHRvd3MsIEZpc2ggbGFydmFlIHBlciAxLDAwMCBjdWJpYyBtZXRlcnMgb2Ygd2F0ZXIgc2FtcGxlZClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9lcmRDYWxDT0ZJbHJ2Y250REh0b0VDX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRDYWxDT0ZJbHJ2Y250REh0b0VDX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZENhbENPRklscnZjbnRESHRvRUMvaW5kZXguanNvbiIsICJodHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L0NhbENPRkkvY2FsY29maV9pbmZvLmh0bWwiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkQ2FsQ09GSWxydmNudERIdG9FQy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkQ2FsQ09GSWxydmNudERIdG9FQyZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFNXRlNDIiwgImVyZENhbENPRklscnZjbnRESHRvRUMiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudEVEdG9FVS5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudEVEdG9FVSIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250RUR0b0VVLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkNhbENPRkkgTGFydmFlIENvdW50cywgU2NpZW50aWZpYyBOYW1lcyBFRCB0byBFVSIsICJGaXNoIGxhcnZhZSBjb3VudHMgYW5kIHN0YW5kYXJkaXplZCBjb3VudHMgZm9yIGxhcnZhZSBjYXB0dXJlZCBpbiBDYWxDT0ZJIGljdGh5b3BsYW5rdG9uIG5ldHMgKHByaW1hcmlseSB2ZXJ0aWNhbCBbQ2FsdmV0IG9yIFBhaXJvdmV0XSwgb2JsaXF1ZSBbYm9uZ28gb3IgcmluZyBuZXRzXSwgYW5kIHN1cmZhY2UgdG93cyBbTWFudGEgbmV0c10pLiBTdXJmYWNlIHRvd3MgYXJlIG5vcm1hbGx5IHN0YW5kYXJkaXplZCB0byBjb3VudCBwZXIgMSwwMDAgbTMgc3RyYWluZWQuIE9ibGlxdWUgdG93cyBhcmUgbm9ybWFsbHkgc3RhbmRhcmRpemVkIHRvIGNvdW50IHBlciAxMCBtMiBvZiBzdXJmYWNlIHNhbXBsZWQuIFRoaXMgdGFibGUgaW5jbHVkZXMgYWxsIHRvd3MgYnkgc3BlY2llcywgZXZlbiBpZiB6ZXJvIGxhcnZhZSB3ZXJlIGNhcHR1cmVkIGZvciB0aGUgc3BlY2llcywgaS5lLiwgbmVnYXRpdmUgdG93cy4gVGhlIFwiTGFydmFlIENvdW50cyBQb3NpdGl2ZSBUb3dzXCIgdGFibGUgaW5jbHVkZXMgb25seSB0b3dzIHdoZXJlIG9uZSBvciBtb3JlIGxhcnZhZSB3ZXJlIGNhcHR1cmVkIGZvciB0aGUgc3BlY2llcyBzZWxlY3RlZCBieSB0aGUgdXNlci5cblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2UgKENydWlzZSBDb2RlKVxuc2hpcCAoU2hpcCBOYW1lKVxuc2hpcF9jb2RlXG5vcmRlcl9vY2N1cGllZFxudG93X3R5cGVcbm5ldF90eXBlXG50b3dfbnVtYmVyXG5uZXRfbG9jYXRpb25cbnN0YW5kYXJkX2hhdWxfZmFjdG9yXG52b2x1bWVfc2FtcGxlZCAoY3ViaWMgbWV0ZXJzKVxucGVyY2VudF9zb3J0ZWQgKCUvMTAwKVxuc2FtcGxlX3F1YWxpdHlcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5saW5lXG5zdGF0aW9uXG50aW1lIChTdGFydCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuc2NpZW50aWZpY19uYW1lXG5jb21tb25fbmFtZVxuaXRpc190c24gKEludGVyZ3JhdGVkIFRheG9tb21pYyBJbmZvcm1hdGlvbiBTeXN0ZW0gVGF4b25vbWljIFNlcmlhbCBOdW1iZXIpXG5jYWxjb2ZpX3NwZWNpZXNfY29kZVxubGFydmFlX2NvdW50IChSYXcgY291bnQgb2YgbGFydmFlKVxubGFydmFlXzEwbTIgKFN0YW5kYXJkaXplZCBjb3VudCBvZiBsYXJ2YWUgZm9yIG9ibGlxdWUgdG93cywgRmlzaCBsYXJ2YWUgcGVyIHRlbiBtZXRlcnMgc3F1YXJlZCBvZiB3YXRlciBzYW1wbGVkKVxubGFydmFlXzEwMDBtMyAoU3RhbmRhcmRpemVkIGNvdW50IG9mIGxhcnZhZSBmb3IgbWFudGEgdG93cywgRmlzaCBsYXJ2YWUgcGVyIDEsMDAwIGN1YmljIG1ldGVycyBvZiB3YXRlciBzYW1wbGVkKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2VyZENhbENPRklscnZjbnRFRHRvRVVfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2VyZENhbENPRklscnZjbnRFRHRvRVVfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkQ2FsQ09GSWxydmNudEVEdG9FVS9pbmRleC5qc29uIiwgImh0dHBzOi8vb2NlYW52aWV3LnBmZWcubm9hYS5nb3YvQ2FsQ09GSS9jYWxjb2ZpX2luZm8uaHRtbCIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9lcmRDYWxDT0ZJbHJ2Y250RUR0b0VVLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1lcmRDYWxDT0ZJbHJ2Y250RUR0b0VVJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgU1dGU0MiLCAiZXJkQ2FsQ09GSWxydmNudEVEdG9FVSJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250RVZ0b0dOLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250RVZ0b0dOIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRFVnRvR04uZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiQ2FsQ09GSSBMYXJ2YWUgQ291bnRzLCBTY2llbnRpZmljIE5hbWVzIEVWIHRvIEdOIiwgIkZpc2ggbGFydmFlIGNvdW50cyBhbmQgc3RhbmRhcmRpemVkIGNvdW50cyBmb3IgbGFydmFlIGNhcHR1cmVkIGluIENhbENPRkkgaWN0aHlvcGxhbmt0b24gbmV0cyAocHJpbWFyaWx5IHZlcnRpY2FsIFtDYWx2ZXQgb3IgUGFpcm92ZXRdLCBvYmxpcXVlIFtib25nbyBvciByaW5nIG5ldHNdLCBhbmQgc3VyZmFjZSB0b3dzIFtNYW50YSBuZXRzXSkuIFN1cmZhY2UgdG93cyBhcmUgbm9ybWFsbHkgc3RhbmRhcmRpemVkIHRvIGNvdW50IHBlciAxLDAwMCBtMyBzdHJhaW5lZC4gT2JsaXF1ZSB0b3dzIGFyZSBub3JtYWxseSBzdGFuZGFyZGl6ZWQgdG8gY291bnQgcGVyIDEwIG0yIG9mIHN1cmZhY2Ugc2FtcGxlZC4gVGhpcyB0YWJsZSBpbmNsdWRlcyBhbGwgdG93cyBieSBzcGVjaWVzLCBldmVuIGlmIHplcm8gbGFydmFlIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzLCBpLmUuLCBuZWdhdGl2ZSB0b3dzLiBUaGUgXCJMYXJ2YWUgQ291bnRzIFBvc2l0aXZlIFRvd3NcIiB0YWJsZSBpbmNsdWRlcyBvbmx5IHRvd3Mgd2hlcmUgb25lIG9yIG1vcmUgbGFydmFlIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzIHNlbGVjdGVkIGJ5IHRoZSB1c2VyLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZSAoQ3J1aXNlIENvZGUpXG5zaGlwIChTaGlwIE5hbWUpXG5zaGlwX2NvZGVcbm9yZGVyX29jY3VwaWVkXG50b3dfdHlwZVxubmV0X3R5cGVcbnRvd19udW1iZXJcbm5ldF9sb2NhdGlvblxuc3RhbmRhcmRfaGF1bF9mYWN0b3JcbnZvbHVtZV9zYW1wbGVkIChjdWJpYyBtZXRlcnMpXG5wZXJjZW50X3NvcnRlZCAoJS8xMDApXG5zYW1wbGVfcXVhbGl0eVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxpbmVcbnN0YXRpb25cbnRpbWUgKFN0YXJ0IFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zY2llbnRpZmljX25hbWVcbmNvbW1vbl9uYW1lXG5pdGlzX3RzbiAoSW50ZXJncmF0ZWQgVGF4b21vbWljIEluZm9ybWF0aW9uIFN5c3RlbSBUYXhvbm9taWMgU2VyaWFsIE51bWJlcilcbmNhbGNvZmlfc3BlY2llc19jb2RlXG5sYXJ2YWVfY291bnQgKFJhdyBjb3VudCBvZiBsYXJ2YWUpXG5sYXJ2YWVfMTBtMiAoU3RhbmRhcmRpemVkIGNvdW50IG9mIGxhcnZhZSBmb3Igb2JsaXF1ZSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgdGVuIG1ldGVycyBzcXVhcmVkIG9mIHdhdGVyIHNhbXBsZWQpXG5sYXJ2YWVfMTAwMG0zIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGZvciBtYW50YSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgMSwwMDAgY3ViaWMgbWV0ZXJzIG9mIHdhdGVyIHNhbXBsZWQpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkQ2FsQ09GSWxydmNudEVWdG9HTl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkQ2FsQ09GSWxydmNudEVWdG9HTl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9lcmRDYWxDT0ZJbHJ2Y250RVZ0b0dOL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9DYWxDT0ZJL2NhbGNvZmlfaW5mby5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZENhbENPRklscnZjbnRFVnRvR04ucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZENhbENPRklscnZjbnRFVnRvR04mc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBTV0ZTQyIsICJlcmRDYWxDT0ZJbHJ2Y250RVZ0b0dOIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRHT3RvSEEuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRHT3RvSEEiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudEdPdG9IQS5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJDYWxDT0ZJIExhcnZhZSBDb3VudHMsIFNjaWVudGlmaWMgTmFtZXMgR08gdG8gSEEiLCAiRmlzaCBsYXJ2YWUgY291bnRzIGFuZCBzdGFuZGFyZGl6ZWQgY291bnRzIGZvciBsYXJ2YWUgY2FwdHVyZWQgaW4gQ2FsQ09GSSBpY3RoeW9wbGFua3RvbiBuZXRzIChwcmltYXJpbHkgdmVydGljYWwgW0NhbHZldCBvciBQYWlyb3ZldF0sIG9ibGlxdWUgW2JvbmdvIG9yIHJpbmcgbmV0c10sIGFuZCBzdXJmYWNlIHRvd3MgW01hbnRhIG5ldHNdKS4gU3VyZmFjZSB0b3dzIGFyZSBub3JtYWxseSBzdGFuZGFyZGl6ZWQgdG8gY291bnQgcGVyIDEsMDAwIG0zIHN0cmFpbmVkLiBPYmxpcXVlIHRvd3MgYXJlIG5vcm1hbGx5IHN0YW5kYXJkaXplZCB0byBjb3VudCBwZXIgMTAgbTIgb2Ygc3VyZmFjZSBzYW1wbGVkLiBUaGlzIHRhYmxlIGluY2x1ZGVzIGFsbCB0b3dzIGJ5IHNwZWNpZXMsIGV2ZW4gaWYgemVybyBsYXJ2YWUgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMsIGkuZS4sIG5lZ2F0aXZlIHRvd3MuIFRoZSBcIkxhcnZhZSBDb3VudHMgUG9zaXRpdmUgVG93c1wiIHRhYmxlIGluY2x1ZGVzIG9ubHkgdG93cyB3aGVyZSBvbmUgb3IgbW9yZSBsYXJ2YWUgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMgc2VsZWN0ZWQgYnkgdGhlIHVzZXIuXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlIChDcnVpc2UgQ29kZSlcbnNoaXAgKFNoaXAgTmFtZSlcbnNoaXBfY29kZVxub3JkZXJfb2NjdXBpZWRcbnRvd190eXBlXG5uZXRfdHlwZVxudG93X251bWJlclxubmV0X2xvY2F0aW9uXG5zdGFuZGFyZF9oYXVsX2ZhY3Rvclxudm9sdW1lX3NhbXBsZWQgKGN1YmljIG1ldGVycylcbnBlcmNlbnRfc29ydGVkICglLzEwMClcbnNhbXBsZV9xdWFsaXR5XG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGluZVxuc3RhdGlvblxudGltZSAoU3RhcnQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnNjaWVudGlmaWNfbmFtZVxuY29tbW9uX25hbWVcbml0aXNfdHNuIChJbnRlcmdyYXRlZCBUYXhvbW9taWMgSW5mb3JtYXRpb24gU3lzdGVtIFRheG9ub21pYyBTZXJpYWwgTnVtYmVyKVxuY2FsY29maV9zcGVjaWVzX2NvZGVcbmxhcnZhZV9jb3VudCAoUmF3IGNvdW50IG9mIGxhcnZhZSlcbmxhcnZhZV8xMG0yIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGZvciBvYmxpcXVlIHRvd3MsIEZpc2ggbGFydmFlIHBlciB0ZW4gbWV0ZXJzIHNxdWFyZWQgb2Ygd2F0ZXIgc2FtcGxlZClcbmxhcnZhZV8xMDAwbTMgKFN0YW5kYXJkaXplZCBjb3VudCBvZiBsYXJ2YWUgZm9yIG1hbnRhIHRvd3MsIEZpc2ggbGFydmFlIHBlciAxLDAwMCBjdWJpYyBtZXRlcnMgb2Ygd2F0ZXIgc2FtcGxlZClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9lcmRDYWxDT0ZJbHJ2Y250R090b0hBX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRDYWxDT0ZJbHJ2Y250R090b0hBX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZENhbENPRklscnZjbnRHT3RvSEEvaW5kZXguanNvbiIsICJodHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L0NhbENPRkkvY2FsY29maV9pbmZvLmh0bWwiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkQ2FsQ09GSWxydmNudEdPdG9IQS5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkQ2FsQ09GSWxydmNudEdPdG9IQSZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFNXRlNDIiwgImVyZENhbENPRklscnZjbnRHT3RvSEEiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudEhCdG9ISS5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudEhCdG9ISSIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250SEJ0b0hJLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkNhbENPRkkgTGFydmFlIENvdW50cywgU2NpZW50aWZpYyBOYW1lcyBIQiB0byBISSIsICJGaXNoIGxhcnZhZSBjb3VudHMgYW5kIHN0YW5kYXJkaXplZCBjb3VudHMgZm9yIGxhcnZhZSBjYXB0dXJlZCBpbiBDYWxDT0ZJIGljdGh5b3BsYW5rdG9uIG5ldHMgKHByaW1hcmlseSB2ZXJ0aWNhbCBbQ2FsdmV0IG9yIFBhaXJvdmV0XSwgb2JsaXF1ZSBbYm9uZ28gb3IgcmluZyBuZXRzXSwgYW5kIHN1cmZhY2UgdG93cyBbTWFudGEgbmV0c10pLiBTdXJmYWNlIHRvd3MgYXJlIG5vcm1hbGx5IHN0YW5kYXJkaXplZCB0byBjb3VudCBwZXIgMSwwMDAgbTMgc3RyYWluZWQuIE9ibGlxdWUgdG93cyBhcmUgbm9ybWFsbHkgc3RhbmRhcmRpemVkIHRvIGNvdW50IHBlciAxMCBtMiBvZiBzdXJmYWNlIHNhbXBsZWQuIFRoaXMgdGFibGUgaW5jbHVkZXMgYWxsIHRvd3MgYnkgc3BlY2llcywgZXZlbiBpZiB6ZXJvIGxhcnZhZSB3ZXJlIGNhcHR1cmVkIGZvciB0aGUgc3BlY2llcywgaS5lLiwgbmVnYXRpdmUgdG93cy4gVGhlIFwiTGFydmFlIENvdW50cyBQb3NpdGl2ZSBUb3dzXCIgdGFibGUgaW5jbHVkZXMgb25seSB0b3dzIHdoZXJlIG9uZSBvciBtb3JlIGxhcnZhZSB3ZXJlIGNhcHR1cmVkIGZvciB0aGUgc3BlY2llcyBzZWxlY3RlZCBieSB0aGUgdXNlci5cblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2UgKENydWlzZSBDb2RlKVxuc2hpcCAoU2hpcCBOYW1lKVxuc2hpcF9jb2RlXG5vcmRlcl9vY2N1cGllZFxudG93X3R5cGVcbm5ldF90eXBlXG50b3dfbnVtYmVyXG5uZXRfbG9jYXRpb25cbnN0YW5kYXJkX2hhdWxfZmFjdG9yXG52b2x1bWVfc2FtcGxlZCAoY3ViaWMgbWV0ZXJzKVxucGVyY2VudF9zb3J0ZWQgKCUvMTAwKVxuc2FtcGxlX3F1YWxpdHlcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5saW5lXG5zdGF0aW9uXG50aW1lIChTdGFydCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuc2NpZW50aWZpY19uYW1lXG5jb21tb25fbmFtZVxuaXRpc190c24gKEludGVyZ3JhdGVkIFRheG9tb21pYyBJbmZvcm1hdGlvbiBTeXN0ZW0gVGF4b25vbWljIFNlcmlhbCBOdW1iZXIpXG5jYWxjb2ZpX3NwZWNpZXNfY29kZVxubGFydmFlX2NvdW50IChSYXcgY291bnQgb2YgbGFydmFlKVxubGFydmFlXzEwbTIgKFN0YW5kYXJkaXplZCBjb3VudCBvZiBsYXJ2YWUgZm9yIG9ibGlxdWUgdG93cywgRmlzaCBsYXJ2YWUgcGVyIHRlbiBtZXRlcnMgc3F1YXJlZCBvZiB3YXRlciBzYW1wbGVkKVxubGFydmFlXzEwMDBtMyAoU3RhbmRhcmRpemVkIGNvdW50IG9mIGxhcnZhZSBmb3IgbWFudGEgdG93cywgRmlzaCBsYXJ2YWUgcGVyIDEsMDAwIGN1YmljIG1ldGVycyBvZiB3YXRlciBzYW1wbGVkKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2VyZENhbENPRklscnZjbnRIQnRvSElfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2VyZENhbENPRklscnZjbnRIQnRvSElfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkQ2FsQ09GSWxydmNudEhCdG9ISS9pbmRleC5qc29uIiwgImh0dHBzOi8vb2NlYW52aWV3LnBmZWcubm9hYS5nb3YvQ2FsQ09GSS9jYWxjb2ZpX2luZm8uaHRtbCIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9lcmRDYWxDT0ZJbHJ2Y250SEJ0b0hJLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1lcmRDYWxDT0ZJbHJ2Y250SEJ0b0hJJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgU1dGU0MiLCAiZXJkQ2FsQ09GSWxydmNudEhCdG9ISSJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250SEp0b0lELnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250SEp0b0lEIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRISnRvSUQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiQ2FsQ09GSSBMYXJ2YWUgQ291bnRzLCBTY2llbnRpZmljIE5hbWVzIEhKIHRvIElEIiwgIkZpc2ggbGFydmFlIGNvdW50cyBhbmQgc3RhbmRhcmRpemVkIGNvdW50cyBmb3IgbGFydmFlIGNhcHR1cmVkIGluIENhbENPRkkgaWN0aHlvcGxhbmt0b24gbmV0cyAocHJpbWFyaWx5IHZlcnRpY2FsIFtDYWx2ZXQgb3IgUGFpcm92ZXRdLCBvYmxpcXVlIFtib25nbyBvciByaW5nIG5ldHNdLCBhbmQgc3VyZmFjZSB0b3dzIFtNYW50YSBuZXRzXSkuIFN1cmZhY2UgdG93cyBhcmUgbm9ybWFsbHkgc3RhbmRhcmRpemVkIHRvIGNvdW50IHBlciAxLDAwMCBtMyBzdHJhaW5lZC4gT2JsaXF1ZSB0b3dzIGFyZSBub3JtYWxseSBzdGFuZGFyZGl6ZWQgdG8gY291bnQgcGVyIDEwIG0yIG9mIHN1cmZhY2Ugc2FtcGxlZC4gVGhpcyB0YWJsZSBpbmNsdWRlcyBhbGwgdG93cyBieSBzcGVjaWVzLCBldmVuIGlmIHplcm8gbGFydmFlIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzLCBpLmUuLCBuZWdhdGl2ZSB0b3dzLiBUaGUgXCJMYXJ2YWUgQ291bnRzIFBvc2l0aXZlIFRvd3NcIiB0YWJsZSBpbmNsdWRlcyBvbmx5IHRvd3Mgd2hlcmUgb25lIG9yIG1vcmUgbGFydmFlIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzIHNlbGVjdGVkIGJ5IHRoZSB1c2VyLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZSAoQ3J1aXNlIENvZGUpXG5zaGlwIChTaGlwIE5hbWUpXG5zaGlwX2NvZGVcbm9yZGVyX29jY3VwaWVkXG50b3dfdHlwZVxubmV0X3R5cGVcbnRvd19udW1iZXJcbm5ldF9sb2NhdGlvblxuc3RhbmRhcmRfaGF1bF9mYWN0b3JcbnZvbHVtZV9zYW1wbGVkIChjdWJpYyBtZXRlcnMpXG5wZXJjZW50X3NvcnRlZCAoJS8xMDApXG5zYW1wbGVfcXVhbGl0eVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxpbmVcbnN0YXRpb25cbnRpbWUgKFN0YXJ0IFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zY2llbnRpZmljX25hbWVcbmNvbW1vbl9uYW1lXG5pdGlzX3RzbiAoSW50ZXJncmF0ZWQgVGF4b21vbWljIEluZm9ybWF0aW9uIFN5c3RlbSBUYXhvbm9taWMgU2VyaWFsIE51bWJlcilcbmNhbGNvZmlfc3BlY2llc19jb2RlXG5sYXJ2YWVfY291bnQgKFJhdyBjb3VudCBvZiBsYXJ2YWUpXG5sYXJ2YWVfMTBtMiAoU3RhbmRhcmRpemVkIGNvdW50IG9mIGxhcnZhZSBmb3Igb2JsaXF1ZSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgdGVuIG1ldGVycyBzcXVhcmVkIG9mIHdhdGVyIHNhbXBsZWQpXG5sYXJ2YWVfMTAwMG0zIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGZvciBtYW50YSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgMSwwMDAgY3ViaWMgbWV0ZXJzIG9mIHdhdGVyIHNhbXBsZWQpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkQ2FsQ09GSWxydmNudEhKdG9JRF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkQ2FsQ09GSWxydmNudEhKdG9JRF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9lcmRDYWxDT0ZJbHJ2Y250SEp0b0lEL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9DYWxDT0ZJL2NhbGNvZmlfaW5mby5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZENhbENPRklscnZjbnRISnRvSUQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZENhbENPRklscnZjbnRISnRvSUQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBTV0ZTQyIsICJlcmRDYWxDT0ZJbHJ2Y250SEp0b0lEIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRJRXRvTEEuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRJRXRvTEEiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudElFdG9MQS5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJDYWxDT0ZJIExhcnZhZSBDb3VudHMsIFNjaWVudGlmaWMgTmFtZXMgSUUgdG8gTEEiLCAiRmlzaCBsYXJ2YWUgY291bnRzIGFuZCBzdGFuZGFyZGl6ZWQgY291bnRzIGZvciBsYXJ2YWUgY2FwdHVyZWQgaW4gQ2FsQ09GSSBpY3RoeW9wbGFua3RvbiBuZXRzIChwcmltYXJpbHkgdmVydGljYWwgW0NhbHZldCBvciBQYWlyb3ZldF0sIG9ibGlxdWUgW2JvbmdvIG9yIHJpbmcgbmV0c10sIGFuZCBzdXJmYWNlIHRvd3MgW01hbnRhIG5ldHNdKS4gU3VyZmFjZSB0b3dzIGFyZSBub3JtYWxseSBzdGFuZGFyZGl6ZWQgdG8gY291bnQgcGVyIDEsMDAwIG0zIHN0cmFpbmVkLiBPYmxpcXVlIHRvd3MgYXJlIG5vcm1hbGx5IHN0YW5kYXJkaXplZCB0byBjb3VudCBwZXIgMTAgbTIgb2Ygc3VyZmFjZSBzYW1wbGVkLiBUaGlzIHRhYmxlIGluY2x1ZGVzIGFsbCB0b3dzIGJ5IHNwZWNpZXMsIGV2ZW4gaWYgemVybyBsYXJ2YWUgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMsIGkuZS4sIG5lZ2F0aXZlIHRvd3MuIFRoZSBcIkxhcnZhZSBDb3VudHMgUG9zaXRpdmUgVG93c1wiIHRhYmxlIGluY2x1ZGVzIG9ubHkgdG93cyB3aGVyZSBvbmUgb3IgbW9yZSBsYXJ2YWUgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMgc2VsZWN0ZWQgYnkgdGhlIHVzZXIuXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlIChDcnVpc2UgQ29kZSlcbnNoaXAgKFNoaXAgTmFtZSlcbnNoaXBfY29kZVxub3JkZXJfb2NjdXBpZWRcbnRvd190eXBlXG5uZXRfdHlwZVxudG93X251bWJlclxubmV0X2xvY2F0aW9uXG5zdGFuZGFyZF9oYXVsX2ZhY3Rvclxudm9sdW1lX3NhbXBsZWQgKGN1YmljIG1ldGVycylcbnBlcmNlbnRfc29ydGVkICglLzEwMClcbnNhbXBsZV9xdWFsaXR5XG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGluZVxuc3RhdGlvblxudGltZSAoU3RhcnQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnNjaWVudGlmaWNfbmFtZVxuY29tbW9uX25hbWVcbml0aXNfdHNuIChJbnRlcmdyYXRlZCBUYXhvbW9taWMgSW5mb3JtYXRpb24gU3lzdGVtIFRheG9ub21pYyBTZXJpYWwgTnVtYmVyKVxuY2FsY29maV9zcGVjaWVzX2NvZGVcbmxhcnZhZV9jb3VudCAoUmF3IGNvdW50IG9mIGxhcnZhZSlcbmxhcnZhZV8xMG0yIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGZvciBvYmxpcXVlIHRvd3MsIEZpc2ggbGFydmFlIHBlciB0ZW4gbWV0ZXJzIHNxdWFyZWQgb2Ygd2F0ZXIgc2FtcGxlZClcbmxhcnZhZV8xMDAwbTMgKFN0YW5kYXJkaXplZCBjb3VudCBvZiBsYXJ2YWUgZm9yIG1hbnRhIHRvd3MsIEZpc2ggbGFydmFlIHBlciAxLDAwMCBjdWJpYyBtZXRlcnMgb2Ygd2F0ZXIgc2FtcGxlZClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9lcmRDYWxDT0ZJbHJ2Y250SUV0b0xBX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRDYWxDT0ZJbHJ2Y250SUV0b0xBX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZENhbENPRklscnZjbnRJRXRvTEEvaW5kZXguanNvbiIsICJodHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L0NhbENPRkkvY2FsY29maV9pbmZvLmh0bWwiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkQ2FsQ09GSWxydmNudElFdG9MQS5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkQ2FsQ09GSWxydmNudElFdG9MQSZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFNXRlNDIiwgImVyZENhbENPRklscnZjbnRJRXRvTEEiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudExCdG9MSS5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudExCdG9MSSIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250TEJ0b0xJLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkNhbENPRkkgTGFydmFlIENvdW50cywgU2NpZW50aWZpYyBOYW1lcyBMQiB0byBMSSIsICJGaXNoIGxhcnZhZSBjb3VudHMgYW5kIHN0YW5kYXJkaXplZCBjb3VudHMgZm9yIGxhcnZhZSBjYXB0dXJlZCBpbiBDYWxDT0ZJIGljdGh5b3BsYW5rdG9uIG5ldHMgKHByaW1hcmlseSB2ZXJ0aWNhbCBbQ2FsdmV0IG9yIFBhaXJvdmV0XSwgb2JsaXF1ZSBbYm9uZ28gb3IgcmluZyBuZXRzXSwgYW5kIHN1cmZhY2UgdG93cyBbTWFudGEgbmV0c10pLiBTdXJmYWNlIHRvd3MgYXJlIG5vcm1hbGx5IHN0YW5kYXJkaXplZCB0byBjb3VudCBwZXIgMSwwMDAgbTMgc3RyYWluZWQuIE9ibGlxdWUgdG93cyBhcmUgbm9ybWFsbHkgc3RhbmRhcmRpemVkIHRvIGNvdW50IHBlciAxMCBtMiBvZiBzdXJmYWNlIHNhbXBsZWQuIFRoaXMgdGFibGUgaW5jbHVkZXMgYWxsIHRvd3MgYnkgc3BlY2llcywgZXZlbiBpZiB6ZXJvIGxhcnZhZSB3ZXJlIGNhcHR1cmVkIGZvciB0aGUgc3BlY2llcywgaS5lLiwgbmVnYXRpdmUgdG93cy4gVGhlIFwiTGFydmFlIENvdW50cyBQb3NpdGl2ZSBUb3dzXCIgdGFibGUgaW5jbHVkZXMgb25seSB0b3dzIHdoZXJlIG9uZSBvciBtb3JlIGxhcnZhZSB3ZXJlIGNhcHR1cmVkIGZvciB0aGUgc3BlY2llcyBzZWxlY3RlZCBieSB0aGUgdXNlci5cblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2UgKENydWlzZSBDb2RlKVxuc2hpcCAoU2hpcCBOYW1lKVxuc2hpcF9jb2RlXG5vcmRlcl9vY2N1cGllZFxudG93X3R5cGVcbm5ldF90eXBlXG50b3dfbnVtYmVyXG5uZXRfbG9jYXRpb25cbnN0YW5kYXJkX2hhdWxfZmFjdG9yXG52b2x1bWVfc2FtcGxlZCAoY3ViaWMgbWV0ZXJzKVxucGVyY2VudF9zb3J0ZWQgKCUvMTAwKVxuc2FtcGxlX3F1YWxpdHlcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5saW5lXG5zdGF0aW9uXG50aW1lIChTdGFydCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuc2NpZW50aWZpY19uYW1lXG5jb21tb25fbmFtZVxuaXRpc190c24gKEludGVyZ3JhdGVkIFRheG9tb21pYyBJbmZvcm1hdGlvbiBTeXN0ZW0gVGF4b25vbWljIFNlcmlhbCBOdW1iZXIpXG5jYWxjb2ZpX3NwZWNpZXNfY29kZVxubGFydmFlX2NvdW50IChSYXcgY291bnQgb2YgbGFydmFlKVxubGFydmFlXzEwbTIgKFN0YW5kYXJkaXplZCBjb3VudCBvZiBsYXJ2YWUgZm9yIG9ibGlxdWUgdG93cywgRmlzaCBsYXJ2YWUgcGVyIHRlbiBtZXRlcnMgc3F1YXJlZCBvZiB3YXRlciBzYW1wbGVkKVxubGFydmFlXzEwMDBtMyAoU3RhbmRhcmRpemVkIGNvdW50IG9mIGxhcnZhZSBmb3IgbWFudGEgdG93cywgRmlzaCBsYXJ2YWUgcGVyIDEsMDAwIGN1YmljIG1ldGVycyBvZiB3YXRlciBzYW1wbGVkKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2VyZENhbENPRklscnZjbnRMQnRvTElfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2VyZENhbENPRklscnZjbnRMQnRvTElfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkQ2FsQ09GSWxydmNudExCdG9MSS9pbmRleC5qc29uIiwgImh0dHBzOi8vb2NlYW52aWV3LnBmZWcubm9hYS5nb3YvQ2FsQ09GSS9jYWxjb2ZpX2luZm8uaHRtbCIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9lcmRDYWxDT0ZJbHJ2Y250TEJ0b0xJLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1lcmRDYWxDT0ZJbHJ2Y250TEJ0b0xJJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgU1dGU0MiLCAiZXJkQ2FsQ09GSWxydmNudExCdG9MSSJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250TEp0b01BLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250TEp0b01BIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRMSnRvTUEuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiQ2FsQ09GSSBMYXJ2YWUgQ291bnRzLCBTY2llbnRpZmljIE5hbWVzIExKIHRvIE1BIiwgIkZpc2ggbGFydmFlIGNvdW50cyBhbmQgc3RhbmRhcmRpemVkIGNvdW50cyBmb3IgbGFydmFlIGNhcHR1cmVkIGluIENhbENPRkkgaWN0aHlvcGxhbmt0b24gbmV0cyAocHJpbWFyaWx5IHZlcnRpY2FsIFtDYWx2ZXQgb3IgUGFpcm92ZXRdLCBvYmxpcXVlIFtib25nbyBvciByaW5nIG5ldHNdLCBhbmQgc3VyZmFjZSB0b3dzIFtNYW50YSBuZXRzXSkuIFN1cmZhY2UgdG93cyBhcmUgbm9ybWFsbHkgc3RhbmRhcmRpemVkIHRvIGNvdW50IHBlciAxLDAwMCBtMyBzdHJhaW5lZC4gT2JsaXF1ZSB0b3dzIGFyZSBub3JtYWxseSBzdGFuZGFyZGl6ZWQgdG8gY291bnQgcGVyIDEwIG0yIG9mIHN1cmZhY2Ugc2FtcGxlZC4gVGhpcyB0YWJsZSBpbmNsdWRlcyBhbGwgdG93cyBieSBzcGVjaWVzLCBldmVuIGlmIHplcm8gbGFydmFlIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzLCBpLmUuLCBuZWdhdGl2ZSB0b3dzLiBUaGUgXCJMYXJ2YWUgQ291bnRzIFBvc2l0aXZlIFRvd3NcIiB0YWJsZSBpbmNsdWRlcyBvbmx5IHRvd3Mgd2hlcmUgb25lIG9yIG1vcmUgbGFydmFlIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzIHNlbGVjdGVkIGJ5IHRoZSB1c2VyLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZSAoQ3J1aXNlIENvZGUpXG5zaGlwIChTaGlwIE5hbWUpXG5zaGlwX2NvZGVcbm9yZGVyX29jY3VwaWVkXG50b3dfdHlwZVxubmV0X3R5cGVcbnRvd19udW1iZXJcbm5ldF9sb2NhdGlvblxuc3RhbmRhcmRfaGF1bF9mYWN0b3JcbnZvbHVtZV9zYW1wbGVkIChjdWJpYyBtZXRlcnMpXG5wZXJjZW50X3NvcnRlZCAoJS8xMDApXG5zYW1wbGVfcXVhbGl0eVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxpbmVcbnN0YXRpb25cbnRpbWUgKFN0YXJ0IFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zY2llbnRpZmljX25hbWVcbmNvbW1vbl9uYW1lXG5pdGlzX3RzbiAoSW50ZXJncmF0ZWQgVGF4b21vbWljIEluZm9ybWF0aW9uIFN5c3RlbSBUYXhvbm9taWMgU2VyaWFsIE51bWJlcilcbmNhbGNvZmlfc3BlY2llc19jb2RlXG5sYXJ2YWVfY291bnQgKFJhdyBjb3VudCBvZiBsYXJ2YWUpXG5sYXJ2YWVfMTBtMiAoU3RhbmRhcmRpemVkIGNvdW50IG9mIGxhcnZhZSBmb3Igb2JsaXF1ZSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgdGVuIG1ldGVycyBzcXVhcmVkIG9mIHdhdGVyIHNhbXBsZWQpXG5sYXJ2YWVfMTAwMG0zIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGZvciBtYW50YSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgMSwwMDAgY3ViaWMgbWV0ZXJzIG9mIHdhdGVyIHNhbXBsZWQpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkQ2FsQ09GSWxydmNudExKdG9NQV9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkQ2FsQ09GSWxydmNudExKdG9NQV9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9lcmRDYWxDT0ZJbHJ2Y250TEp0b01BL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9DYWxDT0ZJL2NhbGNvZmlfaW5mby5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZENhbENPRklscnZjbnRMSnRvTUEucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZENhbENPRklscnZjbnRMSnRvTUEmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBTV0ZTQyIsICJlcmRDYWxDT0ZJbHJ2Y250TEp0b01BIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRNQnRvTU8uc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRNQnRvTU8iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudE1CdG9NTy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJDYWxDT0ZJIExhcnZhZSBDb3VudHMsIFNjaWVudGlmaWMgTmFtZXMgTUIgdG8gTU8iLCAiRmlzaCBsYXJ2YWUgY291bnRzIGFuZCBzdGFuZGFyZGl6ZWQgY291bnRzIGZvciBsYXJ2YWUgY2FwdHVyZWQgaW4gQ2FsQ09GSSBpY3RoeW9wbGFua3RvbiBuZXRzIChwcmltYXJpbHkgdmVydGljYWwgW0NhbHZldCBvciBQYWlyb3ZldF0sIG9ibGlxdWUgW2JvbmdvIG9yIHJpbmcgbmV0c10sIGFuZCBzdXJmYWNlIHRvd3MgW01hbnRhIG5ldHNdKS4gU3VyZmFjZSB0b3dzIGFyZSBub3JtYWxseSBzdGFuZGFyZGl6ZWQgdG8gY291bnQgcGVyIDEsMDAwIG0zIHN0cmFpbmVkLiBPYmxpcXVlIHRvd3MgYXJlIG5vcm1hbGx5IHN0YW5kYXJkaXplZCB0byBjb3VudCBwZXIgMTAgbTIgb2Ygc3VyZmFjZSBzYW1wbGVkLiBUaGlzIHRhYmxlIGluY2x1ZGVzIGFsbCB0b3dzIGJ5IHNwZWNpZXMsIGV2ZW4gaWYgemVybyBsYXJ2YWUgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMsIGkuZS4sIG5lZ2F0aXZlIHRvd3MuIFRoZSBcIkxhcnZhZSBDb3VudHMgUG9zaXRpdmUgVG93c1wiIHRhYmxlIGluY2x1ZGVzIG9ubHkgdG93cyB3aGVyZSBvbmUgb3IgbW9yZSBsYXJ2YWUgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMgc2VsZWN0ZWQgYnkgdGhlIHVzZXIuXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlIChDcnVpc2UgQ29kZSlcbnNoaXAgKFNoaXAgTmFtZSlcbnNoaXBfY29kZVxub3JkZXJfb2NjdXBpZWRcbnRvd190eXBlXG5uZXRfdHlwZVxudG93X251bWJlclxubmV0X2xvY2F0aW9uXG5zdGFuZGFyZF9oYXVsX2ZhY3Rvclxudm9sdW1lX3NhbXBsZWQgKGN1YmljIG1ldGVycylcbnBlcmNlbnRfc29ydGVkICglLzEwMClcbnNhbXBsZV9xdWFsaXR5XG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGluZVxuc3RhdGlvblxudGltZSAoU3RhcnQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnNjaWVudGlmaWNfbmFtZVxuY29tbW9uX25hbWVcbml0aXNfdHNuIChJbnRlcmdyYXRlZCBUYXhvbW9taWMgSW5mb3JtYXRpb24gU3lzdGVtIFRheG9ub21pYyBTZXJpYWwgTnVtYmVyKVxuY2FsY29maV9zcGVjaWVzX2NvZGVcbmxhcnZhZV9jb3VudCAoUmF3IGNvdW50IG9mIGxhcnZhZSlcbmxhcnZhZV8xMG0yIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGZvciBvYmxpcXVlIHRvd3MsIEZpc2ggbGFydmFlIHBlciB0ZW4gbWV0ZXJzIHNxdWFyZWQgb2Ygd2F0ZXIgc2FtcGxlZClcbmxhcnZhZV8xMDAwbTMgKFN0YW5kYXJkaXplZCBjb3VudCBvZiBsYXJ2YWUgZm9yIG1hbnRhIHRvd3MsIEZpc2ggbGFydmFlIHBlciAxLDAwMCBjdWJpYyBtZXRlcnMgb2Ygd2F0ZXIgc2FtcGxlZClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9lcmRDYWxDT0ZJbHJ2Y250TUJ0b01PX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRDYWxDT0ZJbHJ2Y250TUJ0b01PX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZENhbENPRklscnZjbnRNQnRvTU8vaW5kZXguanNvbiIsICJodHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L0NhbENPRkkvY2FsY29maV9pbmZvLmh0bWwiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkQ2FsQ09GSWxydmNudE1CdG9NTy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkQ2FsQ09GSWxydmNudE1CdG9NTyZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFNXRlNDIiwgImVyZENhbENPRklscnZjbnRNQnRvTU8iXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudE1QdG9OQS5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudE1QdG9OQSIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250TVB0b05BLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkNhbENPRkkgTGFydmFlIENvdW50cywgU2NpZW50aWZpYyBOYW1lcyBNUCB0byBOQSIsICJGaXNoIGxhcnZhZSBjb3VudHMgYW5kIHN0YW5kYXJkaXplZCBjb3VudHMgZm9yIGxhcnZhZSBjYXB0dXJlZCBpbiBDYWxDT0ZJIGljdGh5b3BsYW5rdG9uIG5ldHMgKHByaW1hcmlseSB2ZXJ0aWNhbCBbQ2FsdmV0IG9yIFBhaXJvdmV0XSwgb2JsaXF1ZSBbYm9uZ28gb3IgcmluZyBuZXRzXSwgYW5kIHN1cmZhY2UgdG93cyBbTWFudGEgbmV0c10pLiBTdXJmYWNlIHRvd3MgYXJlIG5vcm1hbGx5IHN0YW5kYXJkaXplZCB0byBjb3VudCBwZXIgMSwwMDAgbTMgc3RyYWluZWQuIE9ibGlxdWUgdG93cyBhcmUgbm9ybWFsbHkgc3RhbmRhcmRpemVkIHRvIGNvdW50IHBlciAxMCBtMiBvZiBzdXJmYWNlIHNhbXBsZWQuIFRoaXMgdGFibGUgaW5jbHVkZXMgYWxsIHRvd3MgYnkgc3BlY2llcywgZXZlbiBpZiB6ZXJvIGxhcnZhZSB3ZXJlIGNhcHR1cmVkIGZvciB0aGUgc3BlY2llcywgaS5lLiwgbmVnYXRpdmUgdG93cy4gVGhlIFwiTGFydmFlIENvdW50cyBQb3NpdGl2ZSBUb3dzXCIgdGFibGUgaW5jbHVkZXMgb25seSB0b3dzIHdoZXJlIG9uZSBvciBtb3JlIGxhcnZhZSB3ZXJlIGNhcHR1cmVkIGZvciB0aGUgc3BlY2llcyBzZWxlY3RlZCBieSB0aGUgdXNlci5cblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2UgKENydWlzZSBDb2RlKVxuc2hpcCAoU2hpcCBOYW1lKVxuc2hpcF9jb2RlXG5vcmRlcl9vY2N1cGllZFxudG93X3R5cGVcbm5ldF90eXBlXG50b3dfbnVtYmVyXG5uZXRfbG9jYXRpb25cbnN0YW5kYXJkX2hhdWxfZmFjdG9yXG52b2x1bWVfc2FtcGxlZCAoY3ViaWMgbWV0ZXJzKVxucGVyY2VudF9zb3J0ZWQgKCUvMTAwKVxuc2FtcGxlX3F1YWxpdHlcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5saW5lXG5zdGF0aW9uXG50aW1lIChTdGFydCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuc2NpZW50aWZpY19uYW1lXG5jb21tb25fbmFtZVxuaXRpc190c24gKEludGVyZ3JhdGVkIFRheG9tb21pYyBJbmZvcm1hdGlvbiBTeXN0ZW0gVGF4b25vbWljIFNlcmlhbCBOdW1iZXIpXG5jYWxjb2ZpX3NwZWNpZXNfY29kZVxubGFydmFlX2NvdW50IChSYXcgY291bnQgb2YgbGFydmFlKVxubGFydmFlXzEwbTIgKFN0YW5kYXJkaXplZCBjb3VudCBvZiBsYXJ2YWUgZm9yIG9ibGlxdWUgdG93cywgRmlzaCBsYXJ2YWUgcGVyIHRlbiBtZXRlcnMgc3F1YXJlZCBvZiB3YXRlciBzYW1wbGVkKVxubGFydmFlXzEwMDBtMyAoU3RhbmRhcmRpemVkIGNvdW50IG9mIGxhcnZhZSBmb3IgbWFudGEgdG93cywgRmlzaCBsYXJ2YWUgcGVyIDEsMDAwIGN1YmljIG1ldGVycyBvZiB3YXRlciBzYW1wbGVkKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2VyZENhbENPRklscnZjbnRNUHRvTkFfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2VyZENhbENPRklscnZjbnRNUHRvTkFfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkQ2FsQ09GSWxydmNudE1QdG9OQS9pbmRleC5qc29uIiwgImh0dHBzOi8vb2NlYW52aWV3LnBmZWcubm9hYS5nb3YvQ2FsQ09GSS9jYWxjb2ZpX2luZm8uaHRtbCIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9lcmRDYWxDT0ZJbHJ2Y250TVB0b05BLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1lcmRDYWxDT0ZJbHJ2Y250TVB0b05BJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgU1dGU0MiLCAiZXJkQ2FsQ09GSWxydmNudE1QdG9OQSJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250TkJ0b09MLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250TkJ0b09MIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnROQnRvT0wuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiQ2FsQ09GSSBMYXJ2YWUgQ291bnRzLCBTY2llbnRpZmljIE5hbWVzIE5CIHRvIE9MIiwgIkZpc2ggbGFydmFlIGNvdW50cyBhbmQgc3RhbmRhcmRpemVkIGNvdW50cyBmb3IgbGFydmFlIGNhcHR1cmVkIGluIENhbENPRkkgaWN0aHlvcGxhbmt0b24gbmV0cyAocHJpbWFyaWx5IHZlcnRpY2FsIFtDYWx2ZXQgb3IgUGFpcm92ZXRdLCBvYmxpcXVlIFtib25nbyBvciByaW5nIG5ldHNdLCBhbmQgc3VyZmFjZSB0b3dzIFtNYW50YSBuZXRzXSkuIFN1cmZhY2UgdG93cyBhcmUgbm9ybWFsbHkgc3RhbmRhcmRpemVkIHRvIGNvdW50IHBlciAxLDAwMCBtMyBzdHJhaW5lZC4gT2JsaXF1ZSB0b3dzIGFyZSBub3JtYWxseSBzdGFuZGFyZGl6ZWQgdG8gY291bnQgcGVyIDEwIG0yIG9mIHN1cmZhY2Ugc2FtcGxlZC4gVGhpcyB0YWJsZSBpbmNsdWRlcyBhbGwgdG93cyBieSBzcGVjaWVzLCBldmVuIGlmIHplcm8gbGFydmFlIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzLCBpLmUuLCBuZWdhdGl2ZSB0b3dzLiBUaGUgXCJMYXJ2YWUgQ291bnRzIFBvc2l0aXZlIFRvd3NcIiB0YWJsZSBpbmNsdWRlcyBvbmx5IHRvd3Mgd2hlcmUgb25lIG9yIG1vcmUgbGFydmFlIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzIHNlbGVjdGVkIGJ5IHRoZSB1c2VyLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZSAoQ3J1aXNlIENvZGUpXG5zaGlwIChTaGlwIE5hbWUpXG5zaGlwX2NvZGVcbm9yZGVyX29jY3VwaWVkXG50b3dfdHlwZVxubmV0X3R5cGVcbnRvd19udW1iZXJcbm5ldF9sb2NhdGlvblxuc3RhbmRhcmRfaGF1bF9mYWN0b3JcbnZvbHVtZV9zYW1wbGVkIChjdWJpYyBtZXRlcnMpXG5wZXJjZW50X3NvcnRlZCAoJS8xMDApXG5zYW1wbGVfcXVhbGl0eVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxpbmVcbnN0YXRpb25cbnRpbWUgKFN0YXJ0IFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zY2llbnRpZmljX25hbWVcbmNvbW1vbl9uYW1lXG5pdGlzX3RzbiAoSW50ZXJncmF0ZWQgVGF4b21vbWljIEluZm9ybWF0aW9uIFN5c3RlbSBUYXhvbm9taWMgU2VyaWFsIE51bWJlcilcbmNhbGNvZmlfc3BlY2llc19jb2RlXG5sYXJ2YWVfY291bnQgKFJhdyBjb3VudCBvZiBsYXJ2YWUpXG5sYXJ2YWVfMTBtMiAoU3RhbmRhcmRpemVkIGNvdW50IG9mIGxhcnZhZSBmb3Igb2JsaXF1ZSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgdGVuIG1ldGVycyBzcXVhcmVkIG9mIHdhdGVyIHNhbXBsZWQpXG5sYXJ2YWVfMTAwMG0zIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGZvciBtYW50YSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgMSwwMDAgY3ViaWMgbWV0ZXJzIG9mIHdhdGVyIHNhbXBsZWQpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkQ2FsQ09GSWxydmNudE5CdG9PTF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkQ2FsQ09GSWxydmNudE5CdG9PTF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9lcmRDYWxDT0ZJbHJ2Y250TkJ0b09ML2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9DYWxDT0ZJL2NhbGNvZmlfaW5mby5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZENhbENPRklscnZjbnROQnRvT0wucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZENhbENPRklscnZjbnROQnRvT0wmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBTV0ZTQyIsICJlcmRDYWxDT0ZJbHJ2Y250TkJ0b09MIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRPTXRvT1guc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRPTXRvT1giLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudE9NdG9PWC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJDYWxDT0ZJIExhcnZhZSBDb3VudHMsIFNjaWVudGlmaWMgTmFtZXMgT00gdG8gT1giLCAiRmlzaCBsYXJ2YWUgY291bnRzIGFuZCBzdGFuZGFyZGl6ZWQgY291bnRzIGZvciBsYXJ2YWUgY2FwdHVyZWQgaW4gQ2FsQ09GSSBpY3RoeW9wbGFua3RvbiBuZXRzIChwcmltYXJpbHkgdmVydGljYWwgW0NhbHZldCBvciBQYWlyb3ZldF0sIG9ibGlxdWUgW2JvbmdvIG9yIHJpbmcgbmV0c10sIGFuZCBzdXJmYWNlIHRvd3MgW01hbnRhIG5ldHNdKS4gU3VyZmFjZSB0b3dzIGFyZSBub3JtYWxseSBzdGFuZGFyZGl6ZWQgdG8gY291bnQgcGVyIDEsMDAwIG0zIHN0cmFpbmVkLiBPYmxpcXVlIHRvd3MgYXJlIG5vcm1hbGx5IHN0YW5kYXJkaXplZCB0byBjb3VudCBwZXIgMTAgbTIgb2Ygc3VyZmFjZSBzYW1wbGVkLiBUaGlzIHRhYmxlIGluY2x1ZGVzIGFsbCB0b3dzIGJ5IHNwZWNpZXMsIGV2ZW4gaWYgemVybyBsYXJ2YWUgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMsIGkuZS4sIG5lZ2F0aXZlIHRvd3MuIFRoZSBcIkxhcnZhZSBDb3VudHMgUG9zaXRpdmUgVG93c1wiIHRhYmxlIGluY2x1ZGVzIG9ubHkgdG93cyB3aGVyZSBvbmUgb3IgbW9yZSBsYXJ2YWUgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMgc2VsZWN0ZWQgYnkgdGhlIHVzZXIuXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlIChDcnVpc2UgQ29kZSlcbnNoaXAgKFNoaXAgTmFtZSlcbnNoaXBfY29kZVxub3JkZXJfb2NjdXBpZWRcbnRvd190eXBlXG5uZXRfdHlwZVxudG93X251bWJlclxubmV0X2xvY2F0aW9uXG5zdGFuZGFyZF9oYXVsX2ZhY3Rvclxudm9sdW1lX3NhbXBsZWQgKGN1YmljIG1ldGVycylcbnBlcmNlbnRfc29ydGVkICglLzEwMClcbnNhbXBsZV9xdWFsaXR5XG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGluZVxuc3RhdGlvblxudGltZSAoU3RhcnQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnNjaWVudGlmaWNfbmFtZVxuY29tbW9uX25hbWVcbml0aXNfdHNuIChJbnRlcmdyYXRlZCBUYXhvbW9taWMgSW5mb3JtYXRpb24gU3lzdGVtIFRheG9ub21pYyBTZXJpYWwgTnVtYmVyKVxuY2FsY29maV9zcGVjaWVzX2NvZGVcbmxhcnZhZV9jb3VudCAoUmF3IGNvdW50IG9mIGxhcnZhZSlcbmxhcnZhZV8xMG0yIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGZvciBvYmxpcXVlIHRvd3MsIEZpc2ggbGFydmFlIHBlciB0ZW4gbWV0ZXJzIHNxdWFyZWQgb2Ygd2F0ZXIgc2FtcGxlZClcbmxhcnZhZV8xMDAwbTMgKFN0YW5kYXJkaXplZCBjb3VudCBvZiBsYXJ2YWUgZm9yIG1hbnRhIHRvd3MsIEZpc2ggbGFydmFlIHBlciAxLDAwMCBjdWJpYyBtZXRlcnMgb2Ygd2F0ZXIgc2FtcGxlZClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9lcmRDYWxDT0ZJbHJ2Y250T010b09YX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRDYWxDT0ZJbHJ2Y250T010b09YX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZENhbENPRklscnZjbnRPTXRvT1gvaW5kZXguanNvbiIsICJodHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L0NhbENPRkkvY2FsY29maV9pbmZvLmh0bWwiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkQ2FsQ09GSWxydmNudE9NdG9PWC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkQ2FsQ09GSWxydmNudE9NdG9PWCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFNXRlNDIiwgImVyZENhbENPRklscnZjbnRPTXRvT1giXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudE9ZdG9QSS5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudE9ZdG9QSSIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250T1l0b1BJLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkNhbENPRkkgTGFydmFlIENvdW50cywgU2NpZW50aWZpYyBOYW1lcyBPWSB0byBQSSIsICJGaXNoIGxhcnZhZSBjb3VudHMgYW5kIHN0YW5kYXJkaXplZCBjb3VudHMgZm9yIGxhcnZhZSBjYXB0dXJlZCBpbiBDYWxDT0ZJIGljdGh5b3BsYW5rdG9uIG5ldHMgKHByaW1hcmlseSB2ZXJ0aWNhbCBbQ2FsdmV0IG9yIFBhaXJvdmV0XSwgb2JsaXF1ZSBbYm9uZ28gb3IgcmluZyBuZXRzXSwgYW5kIHN1cmZhY2UgdG93cyBbTWFudGEgbmV0c10pLiBTdXJmYWNlIHRvd3MgYXJlIG5vcm1hbGx5IHN0YW5kYXJkaXplZCB0byBjb3VudCBwZXIgMSwwMDAgbTMgc3RyYWluZWQuIE9ibGlxdWUgdG93cyBhcmUgbm9ybWFsbHkgc3RhbmRhcmRpemVkIHRvIGNvdW50IHBlciAxMCBtMiBvZiBzdXJmYWNlIHNhbXBsZWQuIFRoaXMgdGFibGUgaW5jbHVkZXMgYWxsIHRvd3MgYnkgc3BlY2llcywgZXZlbiBpZiB6ZXJvIGxhcnZhZSB3ZXJlIGNhcHR1cmVkIGZvciB0aGUgc3BlY2llcywgaS5lLiwgbmVnYXRpdmUgdG93cy4gVGhlIFwiTGFydmFlIENvdW50cyBQb3NpdGl2ZSBUb3dzXCIgdGFibGUgaW5jbHVkZXMgb25seSB0b3dzIHdoZXJlIG9uZSBvciBtb3JlIGxhcnZhZSB3ZXJlIGNhcHR1cmVkIGZvciB0aGUgc3BlY2llcyBzZWxlY3RlZCBieSB0aGUgdXNlci5cblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2UgKENydWlzZSBDb2RlKVxuc2hpcCAoU2hpcCBOYW1lKVxuc2hpcF9jb2RlXG5vcmRlcl9vY2N1cGllZFxudG93X3R5cGVcbm5ldF90eXBlXG50b3dfbnVtYmVyXG5uZXRfbG9jYXRpb25cbnN0YW5kYXJkX2hhdWxfZmFjdG9yXG52b2x1bWVfc2FtcGxlZCAoY3ViaWMgbWV0ZXJzKVxucGVyY2VudF9zb3J0ZWQgKCUvMTAwKVxuc2FtcGxlX3F1YWxpdHlcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5saW5lXG5zdGF0aW9uXG50aW1lIChTdGFydCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuc2NpZW50aWZpY19uYW1lXG5jb21tb25fbmFtZVxuaXRpc190c24gKEludGVyZ3JhdGVkIFRheG9tb21pYyBJbmZvcm1hdGlvbiBTeXN0ZW0gVGF4b25vbWljIFNlcmlhbCBOdW1iZXIpXG5jYWxjb2ZpX3NwZWNpZXNfY29kZVxubGFydmFlX2NvdW50IChSYXcgY291bnQgb2YgbGFydmFlKVxubGFydmFlXzEwbTIgKFN0YW5kYXJkaXplZCBjb3VudCBvZiBsYXJ2YWUgZm9yIG9ibGlxdWUgdG93cywgRmlzaCBsYXJ2YWUgcGVyIHRlbiBtZXRlcnMgc3F1YXJlZCBvZiB3YXRlciBzYW1wbGVkKVxubGFydmFlXzEwMDBtMyAoU3RhbmRhcmRpemVkIGNvdW50IG9mIGxhcnZhZSBmb3IgbWFudGEgdG93cywgRmlzaCBsYXJ2YWUgcGVyIDEsMDAwIGN1YmljIG1ldGVycyBvZiB3YXRlciBzYW1wbGVkKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2VyZENhbENPRklscnZjbnRPWXRvUElfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2VyZENhbENPRklscnZjbnRPWXRvUElfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkQ2FsQ09GSWxydmNudE9ZdG9QSS9pbmRleC5qc29uIiwgImh0dHBzOi8vb2NlYW52aWV3LnBmZWcubm9hYS5nb3YvQ2FsQ09GSS9jYWxjb2ZpX2luZm8uaHRtbCIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9lcmRDYWxDT0ZJbHJ2Y250T1l0b1BJLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1lcmRDYWxDT0ZJbHJ2Y250T1l0b1BJJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgU1dGU0MiLCAiZXJkQ2FsQ09GSWxydmNudE9ZdG9QSSJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250UEx0b1BPLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250UEx0b1BPIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRQTHRvUE8uZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiQ2FsQ09GSSBMYXJ2YWUgQ291bnRzLCBTY2llbnRpZmljIE5hbWVzIFBMIHRvIFBPIiwgIkZpc2ggbGFydmFlIGNvdW50cyBhbmQgc3RhbmRhcmRpemVkIGNvdW50cyBmb3IgbGFydmFlIGNhcHR1cmVkIGluIENhbENPRkkgaWN0aHlvcGxhbmt0b24gbmV0cyAocHJpbWFyaWx5IHZlcnRpY2FsIFtDYWx2ZXQgb3IgUGFpcm92ZXRdLCBvYmxpcXVlIFtib25nbyBvciByaW5nIG5ldHNdLCBhbmQgc3VyZmFjZSB0b3dzIFtNYW50YSBuZXRzXSkuIFN1cmZhY2UgdG93cyBhcmUgbm9ybWFsbHkgc3RhbmRhcmRpemVkIHRvIGNvdW50IHBlciAxLDAwMCBtMyBzdHJhaW5lZC4gT2JsaXF1ZSB0b3dzIGFyZSBub3JtYWxseSBzdGFuZGFyZGl6ZWQgdG8gY291bnQgcGVyIDEwIG0yIG9mIHN1cmZhY2Ugc2FtcGxlZC4gVGhpcyB0YWJsZSBpbmNsdWRlcyBhbGwgdG93cyBieSBzcGVjaWVzLCBldmVuIGlmIHplcm8gbGFydmFlIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzLCBpLmUuLCBuZWdhdGl2ZSB0b3dzLiBUaGUgXCJMYXJ2YWUgQ291bnRzIFBvc2l0aXZlIFRvd3NcIiB0YWJsZSBpbmNsdWRlcyBvbmx5IHRvd3Mgd2hlcmUgb25lIG9yIG1vcmUgbGFydmFlIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzIHNlbGVjdGVkIGJ5IHRoZSB1c2VyLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZSAoQ3J1aXNlIENvZGUpXG5zaGlwIChTaGlwIE5hbWUpXG5zaGlwX2NvZGVcbm9yZGVyX29jY3VwaWVkXG50b3dfdHlwZVxubmV0X3R5cGVcbnRvd19udW1iZXJcbm5ldF9sb2NhdGlvblxuc3RhbmRhcmRfaGF1bF9mYWN0b3JcbnZvbHVtZV9zYW1wbGVkIChjdWJpYyBtZXRlcnMpXG5wZXJjZW50X3NvcnRlZCAoJS8xMDApXG5zYW1wbGVfcXVhbGl0eVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxpbmVcbnN0YXRpb25cbnRpbWUgKFN0YXJ0IFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zY2llbnRpZmljX25hbWVcbmNvbW1vbl9uYW1lXG5pdGlzX3RzbiAoSW50ZXJncmF0ZWQgVGF4b21vbWljIEluZm9ybWF0aW9uIFN5c3RlbSBUYXhvbm9taWMgU2VyaWFsIE51bWJlcilcbmNhbGNvZmlfc3BlY2llc19jb2RlXG5sYXJ2YWVfY291bnQgKFJhdyBjb3VudCBvZiBsYXJ2YWUpXG5sYXJ2YWVfMTBtMiAoU3RhbmRhcmRpemVkIGNvdW50IG9mIGxhcnZhZSBmb3Igb2JsaXF1ZSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgdGVuIG1ldGVycyBzcXVhcmVkIG9mIHdhdGVyIHNhbXBsZWQpXG5sYXJ2YWVfMTAwMG0zIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGZvciBtYW50YSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgMSwwMDAgY3ViaWMgbWV0ZXJzIG9mIHdhdGVyIHNhbXBsZWQpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkQ2FsQ09GSWxydmNudFBMdG9QT19mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkQ2FsQ09GSWxydmNudFBMdG9QT19pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9lcmRDYWxDT0ZJbHJ2Y250UEx0b1BPL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9DYWxDT0ZJL2NhbGNvZmlfaW5mby5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZENhbENPRklscnZjbnRQTHRvUE8ucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZENhbENPRklscnZjbnRQTHRvUE8mc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBTV0ZTQyIsICJlcmRDYWxDT0ZJbHJ2Y250UEx0b1BPIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRQUHRvUFouc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRQUHRvUFoiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudFBQdG9QWi5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJDYWxDT0ZJIExhcnZhZSBDb3VudHMsIFNjaWVudGlmaWMgTmFtZXMgUFAgdG8gUFoiLCAiRmlzaCBsYXJ2YWUgY291bnRzIGFuZCBzdGFuZGFyZGl6ZWQgY291bnRzIGZvciBsYXJ2YWUgY2FwdHVyZWQgaW4gQ2FsQ09GSSBpY3RoeW9wbGFua3RvbiBuZXRzIChwcmltYXJpbHkgdmVydGljYWwgW0NhbHZldCBvciBQYWlyb3ZldF0sIG9ibGlxdWUgW2JvbmdvIG9yIHJpbmcgbmV0c10sIGFuZCBzdXJmYWNlIHRvd3MgW01hbnRhIG5ldHNdKS4gU3VyZmFjZSB0b3dzIGFyZSBub3JtYWxseSBzdGFuZGFyZGl6ZWQgdG8gY291bnQgcGVyIDEsMDAwIG0zIHN0cmFpbmVkLiBPYmxpcXVlIHRvd3MgYXJlIG5vcm1hbGx5IHN0YW5kYXJkaXplZCB0byBjb3VudCBwZXIgMTAgbTIgb2Ygc3VyZmFjZSBzYW1wbGVkLiBUaGlzIHRhYmxlIGluY2x1ZGVzIGFsbCB0b3dzIGJ5IHNwZWNpZXMsIGV2ZW4gaWYgemVybyBsYXJ2YWUgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMsIGkuZS4sIG5lZ2F0aXZlIHRvd3MuIFRoZSBcIkxhcnZhZSBDb3VudHMgUG9zaXRpdmUgVG93c1wiIHRhYmxlIGluY2x1ZGVzIG9ubHkgdG93cyB3aGVyZSBvbmUgb3IgbW9yZSBsYXJ2YWUgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMgc2VsZWN0ZWQgYnkgdGhlIHVzZXIuXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlIChDcnVpc2UgQ29kZSlcbnNoaXAgKFNoaXAgTmFtZSlcbnNoaXBfY29kZVxub3JkZXJfb2NjdXBpZWRcbnRvd190eXBlXG5uZXRfdHlwZVxudG93X251bWJlclxubmV0X2xvY2F0aW9uXG5zdGFuZGFyZF9oYXVsX2ZhY3Rvclxudm9sdW1lX3NhbXBsZWQgKGN1YmljIG1ldGVycylcbnBlcmNlbnRfc29ydGVkICglLzEwMClcbnNhbXBsZV9xdWFsaXR5XG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGluZVxuc3RhdGlvblxudGltZSAoU3RhcnQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnNjaWVudGlmaWNfbmFtZVxuY29tbW9uX25hbWVcbml0aXNfdHNuIChJbnRlcmdyYXRlZCBUYXhvbW9taWMgSW5mb3JtYXRpb24gU3lzdGVtIFRheG9ub21pYyBTZXJpYWwgTnVtYmVyKVxuY2FsY29maV9zcGVjaWVzX2NvZGVcbmxhcnZhZV9jb3VudCAoUmF3IGNvdW50IG9mIGxhcnZhZSlcbmxhcnZhZV8xMG0yIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGZvciBvYmxpcXVlIHRvd3MsIEZpc2ggbGFydmFlIHBlciB0ZW4gbWV0ZXJzIHNxdWFyZWQgb2Ygd2F0ZXIgc2FtcGxlZClcbmxhcnZhZV8xMDAwbTMgKFN0YW5kYXJkaXplZCBjb3VudCBvZiBsYXJ2YWUgZm9yIG1hbnRhIHRvd3MsIEZpc2ggbGFydmFlIHBlciAxLDAwMCBjdWJpYyBtZXRlcnMgb2Ygd2F0ZXIgc2FtcGxlZClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9lcmRDYWxDT0ZJbHJ2Y250UFB0b1BaX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRDYWxDT0ZJbHJ2Y250UFB0b1BaX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZENhbENPRklscnZjbnRQUHRvUFovaW5kZXguanNvbiIsICJodHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L0NhbENPRkkvY2FsY29maV9pbmZvLmh0bWwiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkQ2FsQ09GSWxydmNudFBQdG9QWi5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkQ2FsQ09GSWxydmNudFBQdG9QWiZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFNXRlNDIiwgImVyZENhbENPRklscnZjbnRQUHRvUFoiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudFF0b1NBLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250UXRvU0EiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudFF0b1NBLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkNhbENPRkkgTGFydmFlIENvdW50cywgU2NpZW50aWZpYyBOYW1lcyBRIHRvIFNBIiwgIkZpc2ggbGFydmFlIGNvdW50cyBhbmQgc3RhbmRhcmRpemVkIGNvdW50cyBmb3IgbGFydmFlIGNhcHR1cmVkIGluIENhbENPRkkgaWN0aHlvcGxhbmt0b24gbmV0cyAocHJpbWFyaWx5IHZlcnRpY2FsIFtDYWx2ZXQgb3IgUGFpcm92ZXRdLCBvYmxpcXVlIFtib25nbyBvciByaW5nIG5ldHNdLCBhbmQgc3VyZmFjZSB0b3dzIFtNYW50YSBuZXRzXSkuIFN1cmZhY2UgdG93cyBhcmUgbm9ybWFsbHkgc3RhbmRhcmRpemVkIHRvIGNvdW50IHBlciAxLDAwMCBtMyBzdHJhaW5lZC4gT2JsaXF1ZSB0b3dzIGFyZSBub3JtYWxseSBzdGFuZGFyZGl6ZWQgdG8gY291bnQgcGVyIDEwIG0yIG9mIHN1cmZhY2Ugc2FtcGxlZC4gVGhpcyB0YWJsZSBpbmNsdWRlcyBhbGwgdG93cyBieSBzcGVjaWVzLCBldmVuIGlmIHplcm8gbGFydmFlIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzLCBpLmUuLCBuZWdhdGl2ZSB0b3dzLiBUaGUgXCJMYXJ2YWUgQ291bnRzIFBvc2l0aXZlIFRvd3NcIiB0YWJsZSBpbmNsdWRlcyBvbmx5IHRvd3Mgd2hlcmUgb25lIG9yIG1vcmUgbGFydmFlIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzIHNlbGVjdGVkIGJ5IHRoZSB1c2VyLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZSAoQ3J1aXNlIENvZGUpXG5zaGlwIChTaGlwIE5hbWUpXG5zaGlwX2NvZGVcbm9yZGVyX29jY3VwaWVkXG50b3dfdHlwZVxubmV0X3R5cGVcbnRvd19udW1iZXJcbm5ldF9sb2NhdGlvblxuc3RhbmRhcmRfaGF1bF9mYWN0b3JcbnZvbHVtZV9zYW1wbGVkIChjdWJpYyBtZXRlcnMpXG5wZXJjZW50X3NvcnRlZCAoJS8xMDApXG5zYW1wbGVfcXVhbGl0eVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxpbmVcbnN0YXRpb25cbnRpbWUgKFN0YXJ0IFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zY2llbnRpZmljX25hbWVcbmNvbW1vbl9uYW1lXG5pdGlzX3RzbiAoSW50ZXJncmF0ZWQgVGF4b21vbWljIEluZm9ybWF0aW9uIFN5c3RlbSBUYXhvbm9taWMgU2VyaWFsIE51bWJlcilcbmNhbGNvZmlfc3BlY2llc19jb2RlXG5sYXJ2YWVfY291bnQgKFJhdyBjb3VudCBvZiBsYXJ2YWUpXG5sYXJ2YWVfMTBtMiAoU3RhbmRhcmRpemVkIGNvdW50IG9mIGxhcnZhZSBmb3Igb2JsaXF1ZSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgdGVuIG1ldGVycyBzcXVhcmVkIG9mIHdhdGVyIHNhbXBsZWQpXG5sYXJ2YWVfMTAwMG0zIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGZvciBtYW50YSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgMSwwMDAgY3ViaWMgbWV0ZXJzIG9mIHdhdGVyIHNhbXBsZWQpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkQ2FsQ09GSWxydmNudFF0b1NBX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRDYWxDT0ZJbHJ2Y250UXRvU0FfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkQ2FsQ09GSWxydmNudFF0b1NBL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9DYWxDT0ZJL2NhbGNvZmlfaW5mby5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZENhbENPRklscnZjbnRRdG9TQS5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkQ2FsQ09GSWxydmNudFF0b1NBJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgU1dGU0MiLCAiZXJkQ2FsQ09GSWxydmNudFF0b1NBIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRTQnRvU0Muc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRTQnRvU0MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudFNCdG9TQy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJDYWxDT0ZJIExhcnZhZSBDb3VudHMsIFNjaWVudGlmaWMgTmFtZXMgU0IgdG8gU0MiLCAiRmlzaCBsYXJ2YWUgY291bnRzIGFuZCBzdGFuZGFyZGl6ZWQgY291bnRzIGZvciBsYXJ2YWUgY2FwdHVyZWQgaW4gQ2FsQ09GSSBpY3RoeW9wbGFua3RvbiBuZXRzIChwcmltYXJpbHkgdmVydGljYWwgW0NhbHZldCBvciBQYWlyb3ZldF0sIG9ibGlxdWUgW2JvbmdvIG9yIHJpbmcgbmV0c10sIGFuZCBzdXJmYWNlIHRvd3MgW01hbnRhIG5ldHNdKS4gU3VyZmFjZSB0b3dzIGFyZSBub3JtYWxseSBzdGFuZGFyZGl6ZWQgdG8gY291bnQgcGVyIDEsMDAwIG0zIHN0cmFpbmVkLiBPYmxpcXVlIHRvd3MgYXJlIG5vcm1hbGx5IHN0YW5kYXJkaXplZCB0byBjb3VudCBwZXIgMTAgbTIgb2Ygc3VyZmFjZSBzYW1wbGVkLiBUaGlzIHRhYmxlIGluY2x1ZGVzIGFsbCB0b3dzIGJ5IHNwZWNpZXMsIGV2ZW4gaWYgemVybyBsYXJ2YWUgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMsIGkuZS4sIG5lZ2F0aXZlIHRvd3MuIFRoZSBcIkxhcnZhZSBDb3VudHMgUG9zaXRpdmUgVG93c1wiIHRhYmxlIGluY2x1ZGVzIG9ubHkgdG93cyB3aGVyZSBvbmUgb3IgbW9yZSBsYXJ2YWUgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMgc2VsZWN0ZWQgYnkgdGhlIHVzZXIuXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlIChDcnVpc2UgQ29kZSlcbnNoaXAgKFNoaXAgTmFtZSlcbnNoaXBfY29kZVxub3JkZXJfb2NjdXBpZWRcbnRvd190eXBlXG5uZXRfdHlwZVxudG93X251bWJlclxubmV0X2xvY2F0aW9uXG5zdGFuZGFyZF9oYXVsX2ZhY3Rvclxudm9sdW1lX3NhbXBsZWQgKGN1YmljIG1ldGVycylcbnBlcmNlbnRfc29ydGVkICglLzEwMClcbnNhbXBsZV9xdWFsaXR5XG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGluZVxuc3RhdGlvblxudGltZSAoU3RhcnQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnNjaWVudGlmaWNfbmFtZVxuY29tbW9uX25hbWVcbml0aXNfdHNuIChJbnRlcmdyYXRlZCBUYXhvbW9taWMgSW5mb3JtYXRpb24gU3lzdGVtIFRheG9ub21pYyBTZXJpYWwgTnVtYmVyKVxuY2FsY29maV9zcGVjaWVzX2NvZGVcbmxhcnZhZV9jb3VudCAoUmF3IGNvdW50IG9mIGxhcnZhZSlcbmxhcnZhZV8xMG0yIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGZvciBvYmxpcXVlIHRvd3MsIEZpc2ggbGFydmFlIHBlciB0ZW4gbWV0ZXJzIHNxdWFyZWQgb2Ygd2F0ZXIgc2FtcGxlZClcbmxhcnZhZV8xMDAwbTMgKFN0YW5kYXJkaXplZCBjb3VudCBvZiBsYXJ2YWUgZm9yIG1hbnRhIHRvd3MsIEZpc2ggbGFydmFlIHBlciAxLDAwMCBjdWJpYyBtZXRlcnMgb2Ygd2F0ZXIgc2FtcGxlZClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9lcmRDYWxDT0ZJbHJ2Y250U0J0b1NDX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRDYWxDT0ZJbHJ2Y250U0J0b1NDX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZENhbENPRklscnZjbnRTQnRvU0MvaW5kZXguanNvbiIsICJodHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L0NhbENPRkkvY2FsY29maV9pbmZvLmh0bWwiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkQ2FsQ09GSWxydmNudFNCdG9TQy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkQ2FsQ09GSWxydmNudFNCdG9TQyZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFNXRlNDIiwgImVyZENhbENPRklscnZjbnRTQnRvU0MiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudFNEdG9TSS5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudFNEdG9TSSIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250U0R0b1NJLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkNhbENPRkkgTGFydmFlIENvdW50cywgU2NpZW50aWZpYyBOYW1lcyBTRCB0byBTSSIsICJGaXNoIGxhcnZhZSBjb3VudHMgYW5kIHN0YW5kYXJkaXplZCBjb3VudHMgZm9yIGxhcnZhZSBjYXB0dXJlZCBpbiBDYWxDT0ZJIGljdGh5b3BsYW5rdG9uIG5ldHMgKHByaW1hcmlseSB2ZXJ0aWNhbCBbQ2FsdmV0IG9yIFBhaXJvdmV0XSwgb2JsaXF1ZSBbYm9uZ28gb3IgcmluZyBuZXRzXSwgYW5kIHN1cmZhY2UgdG93cyBbTWFudGEgbmV0c10pLiBTdXJmYWNlIHRvd3MgYXJlIG5vcm1hbGx5IHN0YW5kYXJkaXplZCB0byBjb3VudCBwZXIgMSwwMDAgbTMgc3RyYWluZWQuIE9ibGlxdWUgdG93cyBhcmUgbm9ybWFsbHkgc3RhbmRhcmRpemVkIHRvIGNvdW50IHBlciAxMCBtMiBvZiBzdXJmYWNlIHNhbXBsZWQuIFRoaXMgdGFibGUgaW5jbHVkZXMgYWxsIHRvd3MgYnkgc3BlY2llcywgZXZlbiBpZiB6ZXJvIGxhcnZhZSB3ZXJlIGNhcHR1cmVkIGZvciB0aGUgc3BlY2llcywgaS5lLiwgbmVnYXRpdmUgdG93cy4gVGhlIFwiTGFydmFlIENvdW50cyBQb3NpdGl2ZSBUb3dzXCIgdGFibGUgaW5jbHVkZXMgb25seSB0b3dzIHdoZXJlIG9uZSBvciBtb3JlIGxhcnZhZSB3ZXJlIGNhcHR1cmVkIGZvciB0aGUgc3BlY2llcyBzZWxlY3RlZCBieSB0aGUgdXNlci5cblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2UgKENydWlzZSBDb2RlKVxuc2hpcCAoU2hpcCBOYW1lKVxuc2hpcF9jb2RlXG5vcmRlcl9vY2N1cGllZFxudG93X3R5cGVcbm5ldF90eXBlXG50b3dfbnVtYmVyXG5uZXRfbG9jYXRpb25cbnN0YW5kYXJkX2hhdWxfZmFjdG9yXG52b2x1bWVfc2FtcGxlZCAoY3ViaWMgbWV0ZXJzKVxucGVyY2VudF9zb3J0ZWQgKCUvMTAwKVxuc2FtcGxlX3F1YWxpdHlcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5saW5lXG5zdGF0aW9uXG50aW1lIChTdGFydCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuc2NpZW50aWZpY19uYW1lXG5jb21tb25fbmFtZVxuaXRpc190c24gKEludGVyZ3JhdGVkIFRheG9tb21pYyBJbmZvcm1hdGlvbiBTeXN0ZW0gVGF4b25vbWljIFNlcmlhbCBOdW1iZXIpXG5jYWxjb2ZpX3NwZWNpZXNfY29kZVxubGFydmFlX2NvdW50IChSYXcgY291bnQgb2YgbGFydmFlKVxubGFydmFlXzEwbTIgKFN0YW5kYXJkaXplZCBjb3VudCBvZiBsYXJ2YWUgZm9yIG9ibGlxdWUgdG93cywgRmlzaCBsYXJ2YWUgcGVyIHRlbiBtZXRlcnMgc3F1YXJlZCBvZiB3YXRlciBzYW1wbGVkKVxubGFydmFlXzEwMDBtMyAoU3RhbmRhcmRpemVkIGNvdW50IG9mIGxhcnZhZSBmb3IgbWFudGEgdG93cywgRmlzaCBsYXJ2YWUgcGVyIDEsMDAwIGN1YmljIG1ldGVycyBvZiB3YXRlciBzYW1wbGVkKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2VyZENhbENPRklscnZjbnRTRHRvU0lfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2VyZENhbENPRklscnZjbnRTRHRvU0lfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkQ2FsQ09GSWxydmNudFNEdG9TSS9pbmRleC5qc29uIiwgImh0dHBzOi8vb2NlYW52aWV3LnBmZWcubm9hYS5nb3YvQ2FsQ09GSS9jYWxjb2ZpX2luZm8uaHRtbCIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9lcmRDYWxDT0ZJbHJ2Y250U0R0b1NJLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1lcmRDYWxDT0ZJbHJ2Y250U0R0b1NJJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgU1dGU0MiLCAiZXJkQ2FsQ09GSWxydmNudFNEdG9TSSJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250U0p0b1NULnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250U0p0b1NUIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRTSnRvU1QuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiQ2FsQ09GSSBMYXJ2YWUgQ291bnRzLCBTY2llbnRpZmljIE5hbWVzIFNKIHRvIFNUIiwgIkZpc2ggbGFydmFlIGNvdW50cyBhbmQgc3RhbmRhcmRpemVkIGNvdW50cyBmb3IgbGFydmFlIGNhcHR1cmVkIGluIENhbENPRkkgaWN0aHlvcGxhbmt0b24gbmV0cyAocHJpbWFyaWx5IHZlcnRpY2FsIFtDYWx2ZXQgb3IgUGFpcm92ZXRdLCBvYmxpcXVlIFtib25nbyBvciByaW5nIG5ldHNdLCBhbmQgc3VyZmFjZSB0b3dzIFtNYW50YSBuZXRzXSkuIFN1cmZhY2UgdG93cyBhcmUgbm9ybWFsbHkgc3RhbmRhcmRpemVkIHRvIGNvdW50IHBlciAxLDAwMCBtMyBzdHJhaW5lZC4gT2JsaXF1ZSB0b3dzIGFyZSBub3JtYWxseSBzdGFuZGFyZGl6ZWQgdG8gY291bnQgcGVyIDEwIG0yIG9mIHN1cmZhY2Ugc2FtcGxlZC4gVGhpcyB0YWJsZSBpbmNsdWRlcyBhbGwgdG93cyBieSBzcGVjaWVzLCBldmVuIGlmIHplcm8gbGFydmFlIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzLCBpLmUuLCBuZWdhdGl2ZSB0b3dzLiBUaGUgXCJMYXJ2YWUgQ291bnRzIFBvc2l0aXZlIFRvd3NcIiB0YWJsZSBpbmNsdWRlcyBvbmx5IHRvd3Mgd2hlcmUgb25lIG9yIG1vcmUgbGFydmFlIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzIHNlbGVjdGVkIGJ5IHRoZSB1c2VyLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZSAoQ3J1aXNlIENvZGUpXG5zaGlwIChTaGlwIE5hbWUpXG5zaGlwX2NvZGVcbm9yZGVyX29jY3VwaWVkXG50b3dfdHlwZVxubmV0X3R5cGVcbnRvd19udW1iZXJcbm5ldF9sb2NhdGlvblxuc3RhbmRhcmRfaGF1bF9mYWN0b3JcbnZvbHVtZV9zYW1wbGVkIChjdWJpYyBtZXRlcnMpXG5wZXJjZW50X3NvcnRlZCAoJS8xMDApXG5zYW1wbGVfcXVhbGl0eVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxpbmVcbnN0YXRpb25cbnRpbWUgKFN0YXJ0IFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zY2llbnRpZmljX25hbWVcbmNvbW1vbl9uYW1lXG5pdGlzX3RzbiAoSW50ZXJncmF0ZWQgVGF4b21vbWljIEluZm9ybWF0aW9uIFN5c3RlbSBUYXhvbm9taWMgU2VyaWFsIE51bWJlcilcbmNhbGNvZmlfc3BlY2llc19jb2RlXG5sYXJ2YWVfY291bnQgKFJhdyBjb3VudCBvZiBsYXJ2YWUpXG5sYXJ2YWVfMTBtMiAoU3RhbmRhcmRpemVkIGNvdW50IG9mIGxhcnZhZSBmb3Igb2JsaXF1ZSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgdGVuIG1ldGVycyBzcXVhcmVkIG9mIHdhdGVyIHNhbXBsZWQpXG5sYXJ2YWVfMTAwMG0zIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGZvciBtYW50YSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgMSwwMDAgY3ViaWMgbWV0ZXJzIG9mIHdhdGVyIHNhbXBsZWQpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkQ2FsQ09GSWxydmNudFNKdG9TVF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkQ2FsQ09GSWxydmNudFNKdG9TVF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9lcmRDYWxDT0ZJbHJ2Y250U0p0b1NUL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9DYWxDT0ZJL2NhbGNvZmlfaW5mby5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZENhbENPRklscnZjbnRTSnRvU1QucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZENhbENPRklscnZjbnRTSnRvU1Qmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBTV0ZTQyIsICJlcmRDYWxDT0ZJbHJ2Y250U0p0b1NUIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRTVXRvVEUuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRTVXRvVEUiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudFNVdG9URS5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJDYWxDT0ZJIExhcnZhZSBDb3VudHMsIFNjaWVudGlmaWMgTmFtZXMgU1UgdG8gVEUiLCAiRmlzaCBsYXJ2YWUgY291bnRzIGFuZCBzdGFuZGFyZGl6ZWQgY291bnRzIGZvciBsYXJ2YWUgY2FwdHVyZWQgaW4gQ2FsQ09GSSBpY3RoeW9wbGFua3RvbiBuZXRzIChwcmltYXJpbHkgdmVydGljYWwgW0NhbHZldCBvciBQYWlyb3ZldF0sIG9ibGlxdWUgW2JvbmdvIG9yIHJpbmcgbmV0c10sIGFuZCBzdXJmYWNlIHRvd3MgW01hbnRhIG5ldHNdKS4gU3VyZmFjZSB0b3dzIGFyZSBub3JtYWxseSBzdGFuZGFyZGl6ZWQgdG8gY291bnQgcGVyIDEsMDAwIG0zIHN0cmFpbmVkLiBPYmxpcXVlIHRvd3MgYXJlIG5vcm1hbGx5IHN0YW5kYXJkaXplZCB0byBjb3VudCBwZXIgMTAgbTIgb2Ygc3VyZmFjZSBzYW1wbGVkLiBUaGlzIHRhYmxlIGluY2x1ZGVzIGFsbCB0b3dzIGJ5IHNwZWNpZXMsIGV2ZW4gaWYgemVybyBsYXJ2YWUgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMsIGkuZS4sIG5lZ2F0aXZlIHRvd3MuIFRoZSBcIkxhcnZhZSBDb3VudHMgUG9zaXRpdmUgVG93c1wiIHRhYmxlIGluY2x1ZGVzIG9ubHkgdG93cyB3aGVyZSBvbmUgb3IgbW9yZSBsYXJ2YWUgd2VyZSBjYXB0dXJlZCBmb3IgdGhlIHNwZWNpZXMgc2VsZWN0ZWQgYnkgdGhlIHVzZXIuXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlIChDcnVpc2UgQ29kZSlcbnNoaXAgKFNoaXAgTmFtZSlcbnNoaXBfY29kZVxub3JkZXJfb2NjdXBpZWRcbnRvd190eXBlXG5uZXRfdHlwZVxudG93X251bWJlclxubmV0X2xvY2F0aW9uXG5zdGFuZGFyZF9oYXVsX2ZhY3Rvclxudm9sdW1lX3NhbXBsZWQgKGN1YmljIG1ldGVycylcbnBlcmNlbnRfc29ydGVkICglLzEwMClcbnNhbXBsZV9xdWFsaXR5XG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGluZVxuc3RhdGlvblxudGltZSAoU3RhcnQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnNjaWVudGlmaWNfbmFtZVxuY29tbW9uX25hbWVcbml0aXNfdHNuIChJbnRlcmdyYXRlZCBUYXhvbW9taWMgSW5mb3JtYXRpb24gU3lzdGVtIFRheG9ub21pYyBTZXJpYWwgTnVtYmVyKVxuY2FsY29maV9zcGVjaWVzX2NvZGVcbmxhcnZhZV9jb3VudCAoUmF3IGNvdW50IG9mIGxhcnZhZSlcbmxhcnZhZV8xMG0yIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGZvciBvYmxpcXVlIHRvd3MsIEZpc2ggbGFydmFlIHBlciB0ZW4gbWV0ZXJzIHNxdWFyZWQgb2Ygd2F0ZXIgc2FtcGxlZClcbmxhcnZhZV8xMDAwbTMgKFN0YW5kYXJkaXplZCBjb3VudCBvZiBsYXJ2YWUgZm9yIG1hbnRhIHRvd3MsIEZpc2ggbGFydmFlIHBlciAxLDAwMCBjdWJpYyBtZXRlcnMgb2Ygd2F0ZXIgc2FtcGxlZClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9lcmRDYWxDT0ZJbHJ2Y250U1V0b1RFX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRDYWxDT0ZJbHJ2Y250U1V0b1RFX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZENhbENPRklscnZjbnRTVXRvVEUvaW5kZXguanNvbiIsICJodHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L0NhbENPRkkvY2FsY29maV9pbmZvLmh0bWwiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkQ2FsQ09GSWxydmNudFNVdG9URS5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkQ2FsQ09GSWxydmNudFNVdG9URSZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFNXRlNDIiwgImVyZENhbENPRklscnZjbnRTVXRvVEUiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudFRGdG9VLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250VEZ0b1UiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydmNudFRGdG9VLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkNhbENPRkkgTGFydmFlIENvdW50cywgU2NpZW50aWZpYyBOYW1lcyBURiB0byBVIiwgIkZpc2ggbGFydmFlIGNvdW50cyBhbmQgc3RhbmRhcmRpemVkIGNvdW50cyBmb3IgbGFydmFlIGNhcHR1cmVkIGluIENhbENPRkkgaWN0aHlvcGxhbmt0b24gbmV0cyAocHJpbWFyaWx5IHZlcnRpY2FsIFtDYWx2ZXQgb3IgUGFpcm92ZXRdLCBvYmxpcXVlIFtib25nbyBvciByaW5nIG5ldHNdLCBhbmQgc3VyZmFjZSB0b3dzIFtNYW50YSBuZXRzXSkuIFN1cmZhY2UgdG93cyBhcmUgbm9ybWFsbHkgc3RhbmRhcmRpemVkIHRvIGNvdW50IHBlciAxLDAwMCBtMyBzdHJhaW5lZC4gT2JsaXF1ZSB0b3dzIGFyZSBub3JtYWxseSBzdGFuZGFyZGl6ZWQgdG8gY291bnQgcGVyIDEwIG0yIG9mIHN1cmZhY2Ugc2FtcGxlZC4gVGhpcyB0YWJsZSBpbmNsdWRlcyBhbGwgdG93cyBieSBzcGVjaWVzLCBldmVuIGlmIHplcm8gbGFydmFlIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzLCBpLmUuLCBuZWdhdGl2ZSB0b3dzLiBUaGUgXCJMYXJ2YWUgQ291bnRzIFBvc2l0aXZlIFRvd3NcIiB0YWJsZSBpbmNsdWRlcyBvbmx5IHRvd3Mgd2hlcmUgb25lIG9yIG1vcmUgbGFydmFlIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzIHNlbGVjdGVkIGJ5IHRoZSB1c2VyLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZSAoQ3J1aXNlIENvZGUpXG5zaGlwIChTaGlwIE5hbWUpXG5zaGlwX2NvZGVcbm9yZGVyX29jY3VwaWVkXG50b3dfdHlwZVxubmV0X3R5cGVcbnRvd19udW1iZXJcbm5ldF9sb2NhdGlvblxuc3RhbmRhcmRfaGF1bF9mYWN0b3JcbnZvbHVtZV9zYW1wbGVkIChjdWJpYyBtZXRlcnMpXG5wZXJjZW50X3NvcnRlZCAoJS8xMDApXG5zYW1wbGVfcXVhbGl0eVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxpbmVcbnN0YXRpb25cbnRpbWUgKFN0YXJ0IFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zY2llbnRpZmljX25hbWVcbmNvbW1vbl9uYW1lXG5pdGlzX3RzbiAoSW50ZXJncmF0ZWQgVGF4b21vbWljIEluZm9ybWF0aW9uIFN5c3RlbSBUYXhvbm9taWMgU2VyaWFsIE51bWJlcilcbmNhbGNvZmlfc3BlY2llc19jb2RlXG5sYXJ2YWVfY291bnQgKFJhdyBjb3VudCBvZiBsYXJ2YWUpXG5sYXJ2YWVfMTBtMiAoU3RhbmRhcmRpemVkIGNvdW50IG9mIGxhcnZhZSBmb3Igb2JsaXF1ZSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgdGVuIG1ldGVycyBzcXVhcmVkIG9mIHdhdGVyIHNhbXBsZWQpXG5sYXJ2YWVfMTAwMG0zIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGZvciBtYW50YSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgMSwwMDAgY3ViaWMgbWV0ZXJzIG9mIHdhdGVyIHNhbXBsZWQpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkQ2FsQ09GSWxydmNudFRGdG9VX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRDYWxDT0ZJbHJ2Y250VEZ0b1VfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkQ2FsQ09GSWxydmNudFRGdG9VL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9DYWxDT0ZJL2NhbGNvZmlfaW5mby5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZENhbENPRklscnZjbnRURnRvVS5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkQ2FsQ09GSWxydmNudFRGdG9VJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgU1dGU0MiLCAiZXJkQ2FsQ09GSWxydmNudFRGdG9VIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZjbnRWdG9aLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250VnRvWiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJbHJ2Y250VnRvWi5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJDYWxDT0ZJIExhcnZhZSBDb3VudHMsIFNjaWVudGlmaWMgTmFtZXMgViB0byBaIiwgIkZpc2ggbGFydmFlIGNvdW50cyBhbmQgc3RhbmRhcmRpemVkIGNvdW50cyBmb3IgbGFydmFlIGNhcHR1cmVkIGluIENhbENPRkkgaWN0aHlvcGxhbmt0b24gbmV0cyAocHJpbWFyaWx5IHZlcnRpY2FsIFtDYWx2ZXQgb3IgUGFpcm92ZXRdLCBvYmxpcXVlIFtib25nbyBvciByaW5nIG5ldHNdLCBhbmQgc3VyZmFjZSB0b3dzIFtNYW50YSBuZXRzXSkuIFN1cmZhY2UgdG93cyBhcmUgbm9ybWFsbHkgc3RhbmRhcmRpemVkIHRvIGNvdW50IHBlciAxLDAwMCBtMyBzdHJhaW5lZC4gT2JsaXF1ZSB0b3dzIGFyZSBub3JtYWxseSBzdGFuZGFyZGl6ZWQgdG8gY291bnQgcGVyIDEwIG0yIG9mIHN1cmZhY2Ugc2FtcGxlZC4gVGhpcyB0YWJsZSBpbmNsdWRlcyBhbGwgdG93cyBieSBzcGVjaWVzLCBldmVuIGlmIHplcm8gbGFydmFlIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzLCBpLmUuLCBuZWdhdGl2ZSB0b3dzLiBUaGUgXCJMYXJ2YWUgQ291bnRzIFBvc2l0aXZlIFRvd3NcIiB0YWJsZSBpbmNsdWRlcyBvbmx5IHRvd3Mgd2hlcmUgb25lIG9yIG1vcmUgbGFydmFlIHdlcmUgY2FwdHVyZWQgZm9yIHRoZSBzcGVjaWVzIHNlbGVjdGVkIGJ5IHRoZSB1c2VyLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZSAoQ3J1aXNlIENvZGUpXG5zaGlwIChTaGlwIE5hbWUpXG5zaGlwX2NvZGVcbm9yZGVyX29jY3VwaWVkXG50b3dfdHlwZVxubmV0X3R5cGVcbnRvd19udW1iZXJcbm5ldF9sb2NhdGlvblxuc3RhbmRhcmRfaGF1bF9mYWN0b3JcbnZvbHVtZV9zYW1wbGVkIChjdWJpYyBtZXRlcnMpXG5wZXJjZW50X3NvcnRlZCAoJS8xMDApXG5zYW1wbGVfcXVhbGl0eVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxpbmVcbnN0YXRpb25cbnRpbWUgKFN0YXJ0IFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zY2llbnRpZmljX25hbWVcbmNvbW1vbl9uYW1lXG5pdGlzX3RzbiAoSW50ZXJncmF0ZWQgVGF4b21vbWljIEluZm9ybWF0aW9uIFN5c3RlbSBUYXhvbm9taWMgU2VyaWFsIE51bWJlcilcbmNhbGNvZmlfc3BlY2llc19jb2RlXG5sYXJ2YWVfY291bnQgKFJhdyBjb3VudCBvZiBsYXJ2YWUpXG5sYXJ2YWVfMTBtMiAoU3RhbmRhcmRpemVkIGNvdW50IG9mIGxhcnZhZSBmb3Igb2JsaXF1ZSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgdGVuIG1ldGVycyBzcXVhcmVkIG9mIHdhdGVyIHNhbXBsZWQpXG5sYXJ2YWVfMTAwMG0zIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGZvciBtYW50YSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgMSwwMDAgY3ViaWMgbWV0ZXJzIG9mIHdhdGVyIHNhbXBsZWQpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkQ2FsQ09GSWxydmNudFZ0b1pfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2VyZENhbENPRklscnZjbnRWdG9aX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZENhbENPRklscnZjbnRWdG9aL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9DYWxDT0ZJL2NhbGNvZmlfaW5mby5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZENhbENPRklscnZjbnRWdG9aLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1lcmRDYWxDT0ZJbHJ2Y250VnRvWiZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFNXRlNDIiwgImVyZENhbENPRklscnZjbnRWdG9aIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZzaXouc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZzaXoiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydnNpei5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJDYWxDT0ZJIExhcnZhZSBTaXplcyIsICJTaXplIGRhdGEgZm9yIHNlbGVjdGVkIGxhcnZhbCBmaXNoIGNhcHR1cmVkIGluIENhbENPRkkgaWN0aHlvcGxhbmt0b24gbmV0cy5cblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2UgKENydWlzZSBDb2RlKVxuc2hpcCAoU2hpcCBOYW1lKVxuc2hpcF9jb2RlXG5vcmRlcl9vY2N1cGllZFxudG93X3R5cGUgKFRvdyBUeXBlIE5hbWUpXG5uZXRfdHlwZVxudG93X251bWJlclxubmV0X2xvY2F0aW9uXG5zdGFuZGFyZF9oYXVsX2ZhY3Rvclxudm9sdW1lX3NhbXBsZWQgKGN1YmljIG1ldGVycylcbnBlcmNlbnRfc29ydGVkICglLzEwMClcbnNhbXBsZV9xdWFsaXR5XG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGluZVxuc3RhdGlvblxudGltZSAoU3RhcnQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnNjaWVudGlmaWNfbmFtZVxuY29tbW9uX25hbWVcbml0aXNfdHNuIChJbnRlcmdyYXRlZCBUYXhvbW9taWMgSW5mb3JtYXRpb24gU3lzdGVtIFRheG9ub21pYyBTZXJpYWwgTnVtYmVyKVxuY2FsY29maV9zcGVjaWVzX2NvZGVcbmxhcnZhZV9zaXplIChUb3RhbCBsZW5ndGggb2YgdGhlIGxhcnZhZSwgbW0pXG5sYXJ2YWVfY291bnQgKFJhdyBjb3VudCBvZiBsYXJ2YWUpXG5sYXJ2YWVfMTBtMiAoU3RhbmRhcmRpemVkIGNvdW50IG9mIGxhcnZhZSBpbiB0aGUgc2l6ZSBjbGFzcyBmb3Igb2JsaXF1ZSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgdGVuIG1ldGVycyBzcXVhcmVkIG9mIHdhdGVyIHNhbXBsZWQpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkQ2FsQ09GSWxydnNpel9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkQ2FsQ09GSWxydnNpel9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9lcmRDYWxDT0ZJbHJ2c2l6L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9DYWxDT0ZJL2NhbGNvZmlfaW5mby5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZENhbENPRklscnZzaXoucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZENhbENPRklscnZzaXomc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBTV0ZTQyIsICJlcmRDYWxDT0ZJbHJ2c2l6Il0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZzdGcuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklscnZzdGciLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSWxydnN0Zy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJDYWxDT0ZJIExhcnZhZSBTdGFnZXMiLCAiRGV2ZWxvcG1lbnRhbCBzdGFnZXMgKHlvbGsgc2FjLCBwcmVmbGV4aW9uLCBmbGV4aW9uLCBwb3N0ZmxleGlvbiwgb3IgdHJhbnNmb3JtYXRpb24pIG9mIHNlbGVjdGVkIGZpc2ggbGFydmFlIGNhcHR1cmVkIGluIENhbENPRkkgaWN0aHlvcGxhbmt0b24gbmV0cy5cblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2UgKENydWlzZSBDb2RlKVxuc2hpcCAoU2hpcCBOYW1lKVxuc2hpcF9jb2RlXG5vcmRlcl9vY2N1cGllZFxudG93X3R5cGUgKFRvdyBUeXBlIE5hbWUpXG5uZXRfdHlwZVxudG93X251bWJlclxubmV0X2xvY2F0aW9uXG5zdGFuZGFyZF9oYXVsX2ZhY3Rvclxudm9sdW1lX3NhbXBsZWQgKGN1YmljIG1ldGVycylcbnBlcmNlbnRfc29ydGVkICglLzEwMClcbnNhbXBsZV9xdWFsaXR5XG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGluZVxuc3RhdGlvblxudGltZSAoU3RhcnQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnNjaWVudGlmaWNfbmFtZVxuY29tbW9uX25hbWVcbml0aXNfdHNuIChJbnRlcmdyYXRlZCBUYXhvbW9taWMgSW5mb3JtYXRpb24gU3lzdGVtIFRheG9ub21pYyBTZXJpYWwgTnVtYmVyKVxuY2FsY29maV9zcGVjaWVzX2NvZGVcbmxhcnZhZV9zdGFnZVxubGFydmFlX3N0YWdlX2NvdW50IChSYXcgY291bnQgb2YgbGFydmFlIGluIHRoZSBzdGFnZSlcbmxhcnZhZV8xMG0yIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGluIHRoZSBzdGFnZSBmb3Igb2JsaXF1ZSB0b3dzLCBGaXNoIGxhcnZhZSBwZXIgdGVuIG1ldGVycyBzcXVhcmVkIG9mIHdhdGVyIHNhbXBsZWQpXG5sYXJ2YWVfMTAwMG0zIChTdGFuZGFyZGl6ZWQgY291bnQgb2YgbGFydmFlIGluIHRoZSBzdGFnZSBmb3IgbWFudGEgdG93cywgRmlzaCBsYXJ2YWUgcGVyIDEsMDAwIGN1YmljIG1ldGVycyBvZiB3YXRlciBzYW1wbGVkKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2VyZENhbENPRklscnZzdGdfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2VyZENhbENPRklscnZzdGdfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkQ2FsQ09GSWxydnN0Zy9pbmRleC5qc29uIiwgImh0dHBzOi8vb2NlYW52aWV3LnBmZWcubm9hYS5nb3YvQ2FsQ09GSS9jYWxjb2ZpX2luZm8uaHRtbCIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9lcmRDYWxDT0ZJbHJ2c3RnLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1lcmRDYWxDT0ZJbHJ2c3RnJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgU1dGU0MiLCAiZXJkQ2FsQ09GSWxydnN0ZyJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmROT0FBaHlkcm9zLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmROT0FBaHlkcm9zIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZE5PQUFoeWRyb3MuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiQ2FsQ09GSSBOT0FBSHlkcm9zIiwgIkh5ZHJvZ3JhcGhpYyBkYXRhIGNvbGxlY3RlZCBieSBidWNrZXQsIENURCwgb3IgMTAtbSBOaXNraW4gYm90dGxlIGFzIHBhcnQgb2YgQ2FsQ09GSSBhbmQgcmVsYXRlZCBjcnVpc2VzLiBOb3RlIHRoYXQgbW9zdCBveHlnZW4gYW5kIHNhbGluaXR5IHZhbHVlcyBpbiB0aGlzIHRhYmxlIGhhdmUgbm90IGJlZW4gY2FsaWJyYXRlZCB3aXRoIHdhdGVyIHNhbXBsZXMuIE1vc3QgdXNlcnMgd2lsbCB3YW50IHRvIHVzZSB0aGUgU2NyaXBwcyBoeWRyb2dyYXBoaWMgZGF0YSBpbnN0ZWFkLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZSAoQ3J1aXNlIENvZGUpXG5zaGlwIChTaGlwIE5hbWUpXG5zaGlwX2NvZGVcbm9yZGVyX29jY3VwaWVkXG50aW1lIChFc3RpbWF0ZWQgZGF0ZXRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5jYXN0X3R5cGVcbnN0YW5kYXJkX2RlcHRoIChtZXRlcnMpXG50ZW1wZXJhdHVyZSAoV2F0ZXIgVGVtcGVyYXR1cmUsIGRlZ3JlZSBDKVxuc2FsaW5pdHkgKHBzdSlcbmRlbnNpdHkgKFdhdGVyIERlbnNpdHksIDEwMDAqKGcvbCAtIDEpKVxub3h5Z2VuIChEaXNzb2x2ZWQgT3h5Z2VuIENvbnRlbnQsIG1sL2wpXG5keW5hbWljX2hlaWdodCAoZHluYW1pYyBtZXRlcilcbnBlcmNlbnRfc2F0dXJhdGlvbiAoUGVyY2VudCBPeHlnZW4gc2F0dXJhdGlvbiwgJSlcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5saW5lXG5zdGF0aW9uXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkTk9BQWh5ZHJvc19mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkTk9BQWh5ZHJvc19pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9lcmROT0FBaHlkcm9zL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9DYWxDT0ZJL2NhbGNvZmlfaW5mby5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZE5PQUFoeWRyb3MucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZE5PQUFoeWRyb3Mmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBTV0ZTQyIsICJlcmROT0FBaHlkcm9zIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3Npb2NhbGNvZmlIeWRyb0JvdHRsZS5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvc2lvY2FsY29maUh5ZHJvQm90dGxlIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3Npb2NhbGNvZmlIeWRyb0JvdHRsZS5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJDYWxDT0ZJIFNJTyBIeWRyb2dyYXBoaWMgQm90dGxlIERhdGEiLCAiU0lPIEh5ZHJvZ3JhcGhpYyBkYXRhXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3N0X2NudCAoQ2FzdCBDb3VudClcbmJ0bF9jbnQgKEJvdHRsZSBDb3VudClcbnN0YV9pZCAoTGluZSBhbmQgU3RhdGlvbilcbmRlcHRoX2lkIChCb3R0bGUgSWRlbnRpZmllcilcbmRlcHRobSAoQm90dGxlIERlcHRoLCBtZXRlcnMpXG50X2RlZ2MgKFRlbXBlcmF0dXJlLCBkZWdyZWUgQylcbnNhbGluaXR5IChwc3UpXG5vMm1sX2wgKE1lYXN1cmVkIE94eWdlbiwgbWwvTCBvZiBzZWF3YXRlcilcbnN0aGV0YSAoUG90ZW50aWFsIERlbnNpdHkgb2Ygd2F0ZXIpXG5idGxudW0gKEJvdHRsZSBOdW1iZXIpXG5yZWNpbmQgKERhdGEgRGVzY3JpcHRvciBDb2RlKVxudF9wcmVjIChUZW1wZXJhdHVyZSBQcmVjaXNpb24pXG50X3F1YWwgKFRlbXBlcmF0dXJlIFF1YWxpdHkpXG5zX3ByZWMgKFNhbGluaXR5IFByZWNpc2lvbilcbnNfcXVhbCAoU2FsaW5pdHkgUXVhbGl0eSlcbnBfcXVhbCAoUHJlc3N1cmUgUXVhbGl0eSlcbm9fcXVhbCAoT3h5Z2VuIFByZWNpc2lvbilcbnN0aHRhcSAoUG90ZW50aWFsIERlbnNpdHkgUXVhbGl0eSlcbm8yc2F0cSAoT3h5Z2VuIHNhdHVyYXRpb24gUXVhbGl0eSlcbmNobG9yYSAoQ2hsb3JvcGh5bGwtYSwgdWcvTCBvZiBzZWF3YXRlcilcbmNobHF1YSAoQ2hsb3JvcGh5bGwtYSBxdWFsaXR5KVxucGhhZW9wIChQaGFlb3BpZ21lbnQgQ29uY2VudHJhdGlvbiwgdWcvTCBvZiBzZWF3YXRlcilcbnBoYXF1YSAoUGhhZW9waWdtZW50cyBxdWFsaXR5KVxucG80dWcgKE1lYXN1cmVkIFBob3NwaGF0ZSBDb25jZW50cmF0aW9uLCB1TS9MIG9mIHNlYXdhdGVyKVxucG80cSAoUGhvc3BoYXRlIHF1YWxpdHkpXG5zaW8zdWcgKE1lYXN1cmVkIFNpbGljYXRlIGNvbmNlbnRyYXRpb24sIHVNL0wgb2Ygc2Vhd2F0ZXIpXG5zaW8zcXUgKFNpbGljYXRlIHF1YWxpdHkpXG4uLi4gKDMzIG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3Npb2NhbGNvZmlIeWRyb0JvdHRsZV9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvc2lvY2FsY29maUh5ZHJvQm90dGxlX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3Npb2NhbGNvZmlIeWRyb0JvdHRsZS9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cuY2FsY29maS5vcmcvbmV3LmRhdGEvaW5kZXgucGhwL3JlcG9ydGVkZGF0YS8yMDEzLTA5LTMwLTIzLTIzLTI3L2RhdGFiYXNlLXRhYmxlcy1kZXNjcmlwdGlvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9zaW9jYWxjb2ZpSHlkcm9Cb3R0bGUucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXNpb2NhbGNvZmlIeWRyb0JvdHRsZSZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJVQ1NEIFNJTyIsICJzaW9jYWxjb2ZpSHlkcm9Cb3R0bGUiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvc2lvY2FsY29maUh5ZHJvQm90dGxlUmVwb3J0LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9zaW9jYWxjb2ZpSHlkcm9Cb3R0bGVSZXBvcnQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvc2lvY2FsY29maUh5ZHJvQm90dGxlUmVwb3J0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkNhbENPRkkgU0lPIEh5ZHJvZ3JhcGhpYyBCb3R0bGUgUmVwb3J0IGRhdGEiLCAiU0lPIEh5ZHJvZ3JhcGhpYyBkYXRhXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3N0X2NudCAoQ2FzdCBDb3VudClcbmJ0bF9jbnQgKEJvdHRsZSBDb3VudClcbnN0YV9pZCAoTGluZSBhbmQgU3RhdGlvbilcbmRlcHRoX2lkIChCb3R0bGUgSWRlbnRpZmllcilcbnJfZGVwdGggKFJlcG9ydGVkIEJvdHRsZSBEZXB0aCwgbWV0ZXJzKVxucl90ZW1wIChSZXBvcnRlZCBUZW1wZXJhdHVyZSwgZGVncmVlIEMpXG5yX3BvdGVtcCAoUmVwb3J0ZWQgUG90ZW50aWFsIFRlbXBlcmF0dXJlLCBkZWdyZWUgQylcbnJfc2FsaW5pdHkgKFJlcG9ydGVkIFNhbGluaXR5LCBwc3UpXG5yX3NpZ21hIChSZXBvcnRlZCBQb3RlbnRpYWwgRGVuc2l0eSBvZiB3YXRlcilcbnJfc3ZhIChSZXBvcnRlZCBTcGVjaWZpYyBWb2x1bWUgQW5vbWFseSwgZGVncmVlIEMpXG5yX2R5bmh0IChSZXBvcnRlZCBEeW5hbWljIEhlaWdodCwgZHluYW1pYyBtZXRlcnMpXG5yX28yIChSZXBvcnRlZCBPeHlnZW4sIG1sL0wgb2Ygc2Vhd2F0ZXIpXG5yX28yc2F0IChSZXBvcnRlZCBPeHlnZW4gU2F0dXJhdGlvbiwgJSlcbnJfc2lvMyAoUmVwb3J0ZWQgU2lsaWNhdGUgQ29uY2VudHJhdGlvbiwgdU0vTCBvZiBzZWF3YXRlcilcbnJfcG80IChSZXBvcnRlZCBQaG9zcGhhdGUgQ29uY2VudHJhdGlvbiwgdU0vTCBvZiBzZWF3YXRlcilcbnJfbm8zIChSZXBvcnRlZCBOaXRyYXRlIENvbmNlbnRyYXRpb24sIHVNL0wgb2Ygc2Vhd2F0ZXIpXG5yX25vMiAoUmVwb3J0ZWQgTml0cml0ZSBDb25jZW50cmF0aW9uLCB1TS9MIG9mIHNlYXdhdGVyKVxucl9jaGxhIChSZXBvcnRlZCBDaGxvcm9waHlsbC1hLCB1Zy9MIG9mIHNlYXdhdGVyKVxucl9waGFlbyAoUmVwb3J0ZWQgUGhhZW9waHl0aW4sIHVnL0wgb2Ygc2Vhd2F0ZXIpXG5yX3ByZXMgKFJlcG9ydGVkIFByZXNzdXJlLCBkYilcbnJfc2FtcCAoU2FtcGxlIE51bWJlcilcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3Npb2NhbGNvZmlIeWRyb0JvdHRsZVJlcG9ydF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvc2lvY2FsY29maUh5ZHJvQm90dGxlUmVwb3J0X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3Npb2NhbGNvZmlIeWRyb0JvdHRsZVJlcG9ydC9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cuY2FsY29maS5vcmcvbmV3LmRhdGEvaW5kZXgucGhwL3JlcG9ydGVkZGF0YS8yMDEzLTA5LTMwLTIzLTIzLTI3L2RhdGFiYXNlLXRhYmxlcy1kZXNjcmlwdGlvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9zaW9jYWxjb2ZpSHlkcm9Cb3R0bGVSZXBvcnQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXNpb2NhbGNvZmlIeWRyb0JvdHRsZVJlcG9ydCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJVQ1NEIFNJTyIsICJzaW9jYWxjb2ZpSHlkcm9Cb3R0bGVSZXBvcnQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvc2lvY2FsY29maUh5ZHJvQ2FzdHMuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3Npb2NhbGNvZmlIeWRyb0Nhc3RzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3Npb2NhbGNvZmlIeWRyb0Nhc3RzLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkNhbENPRkkgU0lPIEh5ZHJvZ3JhcGhpYyBDYXN0IERhdGEiLCAiU0lPIEh5ZHJvZ3JhcGhpYyBkYXRhXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3N0X2NudCAoQ2FzdCBDb3VudClcbmNydWlzZV9pZFxuY3J1el9zdGEgKENydWlzZSBJZClcbmRic3RhX2lkIChDYWxDT0ZJIExpbmUgYW5kIFN0YXRpb24pXG5jYXN0X2lkXG5zdGFfaWQgKExpbmUgYW5kIFN0YXRpb24pXG5xdWFydGVyIChRdWFydGVyIG9mIFllYXIpXG5zdGFfY29kZSAoU3RhdGlvbiBUeXBlKVxuZGlzdGFuY2UgKERpc3RhbmNlIGZyb20gc2hvcmUpXG5kYXRlXG55ZWFyXG5tb250aFxuanVsaWFuX2RhdGVcbmp1bGlhbl9kYXlcbnRpbWVfYXNjaWkgKFRpbWUgb2YgQ2FzdClcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubGF0aXR1ZGVfZGVncmVlc1xubGF0aXR1ZGVfbWludXRlc1xubGF0aXR1ZGVfaGVtaXNwaGVyZVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5sb25naXR1ZGVfZGVncmVlc1xubG9uZ2l0dWRlX21pbnV0ZXNcbmxvbmdpdHVkZV9oZW1pc3BoZXJlXG5ycHRfbGluZSAoUmVwb3J0ZWQgTGluZSBOdW1iZXIpXG5zdF9saW5lIChOb21pbmFsIENhbENPRkkgTGluZSlcbmFjX2xpbmUgKEFjdHVhbCBMaW5lIE51bWJlcilcbnJwdF9zdGEgKFJlcG9ydGVkIFN0YXRpb24pXG4uLi4gKDM0IG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3Npb2NhbGNvZmlIeWRyb0Nhc3RzX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9zaW9jYWxjb2ZpSHlkcm9DYXN0c19pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9zaW9jYWxjb2ZpSHlkcm9DYXN0cy9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cuY2FsY29maS5vcmcvbmV3LmRhdGEvaW5kZXgucGhwL3JlcG9ydGVkZGF0YS8yMDEzLTA5LTMwLTIzLTIzLTI3L2Nhc3QtdGFibGUtY29sdW1uLWRlc2NyaXB0aW9ucyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9zaW9jYWxjb2ZpSHlkcm9DYXN0cy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9c2lvY2FsY29maUh5ZHJvQ2FzdHMmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiVUNTRCBTSU8iLCAic2lvY2FsY29maUh5ZHJvQ2FzdHMiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2FsQ09GSXN0bnMuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklzdG5zIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRklzdG5zLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkNhbENPRkkgU3RhdGlvbnMiLCAiU3VtbWFyeSBpbmZvcm1hdGlvbiBhYm91dCBzYW1wbGUgbG9jYXRpb25zIGZvciBOT0FBIENhbENPRkkgYW5kIHJlbGF0ZWQgY3J1aXNlcy5cblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2UgKENydWlzZSBDb2RlKVxuc2hpcCAoU2hpcCBOYW1lKVxuc2hpcF9jb2RlXG5vcmRlcl9vY2N1cGllZFxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5ib3R0b21fZGVwdGggKGZhdGhvbXMpXG5yZW1hcmtzXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkQ2FsQ09GSXN0bnNfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2VyZENhbENPRklzdG5zX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZENhbENPRklzdG5zL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9DYWxDT0ZJL2NhbGNvZmlfaW5mby5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZENhbENPRklzdG5zLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1lcmRDYWxDT0ZJc3RucyZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFNXRlNDIiwgImVyZENhbENPRklzdG5zIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRkl0b3d0eXAuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRkl0b3d0eXAiLCAiIiwgIiIsICIiLCAicHVibGljIiwgIkNhbENPRkkgVG93IFR5cGVzIiwgIkRlc2NyaXB0aW9uIG9mIGVhY2ggQ2FsQ09GSSBuZXQgdHlwZSBhbmQgaXRzIGFzc29jaWF0ZWQgYWJicmV2aWF0aW9uIGluIHRoZSBDYWxDT0ZJIGRhdGFiYXNlLlxuXG5jZG1fZGF0YV90eXBlID0gT3RoZXJcblZBUklBQkxFUzpcbm5ldF90eXBlXG5sb25nX25ldF90eXBlXG5kZXNjcmlwdGlvblxuIiwgIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9lcmRDYWxDT0ZJdG93dHlwL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9DYWxDT0ZJL2NhbGNvZmlfaW5mby5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZENhbENPRkl0b3d0eXAucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZENhbENPRkl0b3d0eXAmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBTV0ZTQyIsICJlcmRDYWxDT0ZJdG93dHlwIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENhbENPRkl0b3dzLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJdG93cyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDYWxDT0ZJdG93cy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJDYWxDT0ZJIFRvd3MiLCAiTG9jYXRpb24sIHBlcmZvcm1hbmNlLCBhbmQgc3VtbWFyeSBpbmZvcm1hdGlvbiBhYm91dCBpbmRpdmlkdWFsIG5ldCB0b3dzLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZSAoQ3J1aXNlIENvZGUpXG5zaGlwIChTaGlwIE5hbWUpXG5zaGlwX2NvZGVcbm9yZGVyX29jY3VwaWVkXG50b3dfdHlwZVxubmV0X3R5cGVcbnRvd19udW1iZXJcbm5ldF9sb2NhdGlvblxudGltZSAoU3RhcnQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnN0YW5kYXJkX2hhdWxfZmFjdG9yXG52b2x1bWVfc2FtcGxlZCAoY3ViaWMgbWV0ZXJzKVxucGVyY2VudF9zb3J0ZWQgKCUvMTAwKVxubWVzaF9zaXplIChOZXQgTWVzaCBTaXplLCBtaWNyb25zKVxudG90YWxfZWdnc1xuc29ydGVkX3BsYW5rdG9uX3ZvbHVtZSAobWwvMTAwMCBtXjMpXG5zYW1wbGVfcXVhbGl0eVxuc21hbGxfcGxhbmt0b25fdm9sdW1lIChtbC8xMDAwIG1eMyBvZiB3YXRlciBzdHJhaW5lZClcbnRvdGFsX3BsYW5rdG9uX3ZvbHVtZSAobWwvMTAwMCBtXjMgb2Ygd2F0ZXIgc3RyYWluZWQpXG50b3RhbF9sYXJ2YWVcbmVuZF90aW1lIChFbmQgVGltZXN0YW1wLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxudG90YWxfanV2ZW5pbGVzX29yX2FkdWx0cyAoVG90YWwgSnV2ZW5pbGUvQWR1bHRzKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxpbmVcbnN0YXRpb25cbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9lcmRDYWxDT0ZJdG93c19mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkQ2FsQ09GSXRvd3NfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkQ2FsQ09GSXRvd3MvaW5kZXguanNvbiIsICJodHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L0NhbENPRkkvY2FsY29maV9pbmZvLmh0bWwiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkQ2FsQ09GSXRvd3MucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZENhbENPRkl0b3dzJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgU1dGU0MiLCAiZXJkQ2FsQ09GSXRvd3MiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZmVkQ2FsTGFuZGluZ3Muc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZlZENhbExhbmRpbmdzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZlZENhbExhbmRpbmdzLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkNhbGlmb3JuaWEgQ29tbWVyY2lhbCBGaXNoIExhbmRpbmdzLCAxOTMxLTE5NzgiLCAiVGhlIEdyb3VuZGZpc2ggQW5hbHlzaXMgVGVhbSBhdCB0aGUgU1dGU0MgRmlzaGVyaWVzIEVjb2xvZ3kgRGl2aXNpb24gKFNhbnRhXG5DcnV6KSBjb21wbGV0ZWQgd29yayBvbiBhIENhbGlmb3JuaWEgY29tbWVyY2lhbCBsYW5kaW5ncyBkYXRhYmFzZSwgd2hpY2hcbmluY2x1ZGVzIGxhbmRpbmdzIGZyb20gMTkzMSB0aHJvdWdoIDIwMDcuIExhbmRpbmdzIGZyb20gMTkzMSB0aHJvdWdoIDE5NjhcbndlcmUgcmVjb3ZlcmVkIHVzaW5nIGZ1bmRzIGFuZCBzZXJ2aWNlcyBwcm92aWRlZCBieSB0aGUgTkVTRElTIENsaW1hdGVcbkRhdGFiYXNlIE1vZGVybml6YXRpb24gUHJvZ3JhbSAoQ0RNUCkuIFRoZSByZWNvdmVyZWQgZGF0YSwgd2hlbiBjb21iaW5lZCB3aXRoXG5tb3JlIHJlY2VudCBsYW5kaW5ncyBlc3RpbWF0ZXMgZnJvbSB0aGUgQ2FsaWZvcm5pYSBDb29wZXJhdGl2ZSBHcm91bmRmaXNoXG5TdXJ2ZXkgZnJvbSAxOTY5IHRvIDIwMDcsIGZvcm1zIG9uZSBvZiB0aGUgbG9uZ2VzdCBkZXRhaWxlZCBjYXRjaCByZWNvcmRzIGluXG50aGUgVVMuIFRoZSAxOTMxLTY4IHBlcmlvZCBpbmNsdWRlcyBtb250aGx5IHN1bW1hcmllcyBvZiBjYXRjaGVzIGJ5IDEwLW1pbnV0ZVxuZ2VvZ3JhcGhpYyBibG9ja3MuICBUaGVzZSBkYXRhIGFyZSBub3cgb3Blbmx5IGF2YWlsYWJsZSB0byB0aGUgcHVibGljIGZvciB1c2VcbmluIHN0b2NrIGFzc2Vzc21lbnRzIGFuZCBtb25pdG9yaW5nIG9mIGNsaW1hdGUgZWZmZWN0cy4gUGVhcnNvbiBpcyBjdXJyZW50bHlcbndvcmtpbmcgd2l0aCB0aGUgQ2FsaWZvcm5pYSBEZXBhcnRtZW50IG9mIEZpc2ggYW5kIEdhbWUgdG8gZXh0ZW5kIHRoZVxuZ2VvZ3JhcGhpYyBzdW1tYXJ5IGluZm9ybWF0aW9uIHRvIG1vcmUgcmVjZW50IHllYXJzLiBBbHNvLCB0aGUgdGF4YSByZXBvcnRlZFxuaW4gdGhlIGhpc3RvcmljYWwgZGF0YSBhcmUgdGhlIFwibWFya2V0IGNhdGVnb3JpZXNcIiB1c2VkIGJ5IGZpc2ggcHJvY2Vzc29ycyxcbmFuZCBtYXkgaW52b2x2ZSBtdWx0aXBsZSBzcGVjaWVzIGdyb3VwaW5ncy4gQSBwcm9qZWN0IGhhcyBiZWVuIGluaXRpYXRlZCB0b1xucmVzb2x2ZSBoaXN0b3JpY2FsIGxhbmRpbmdzIHRvIHByb3ZpZGUgYmVzdCBlc3RpbWF0ZXMgZm9yIGluZGl2aWR1YWwgc3BlY2llcy5cblxuV2hlbiB1c2luZyB0aGlzIGRhdGEgaXQgaXMgY3JpdGljYWwgdG8gdW5kZXJzdGFuZCB0aGF0IGEgbWFya2V0IGNhdGVnb3J5IGlzXG5OT1QgYSBzcGVjaWVzIGNvZGUgLSBpdCBpcyBhIHNvcnQgZ3JvdXAuICBXaGlsZSBsYW5kaW5ncyBpbiBzb21lIG1hcmtldFxuY2F0ZWdvcmllcyBtYXkgY29uc2lzdCBlbnRpcmVseSBvZiB0aGUgc3BlY2llcyBmb3Igd2hpY2ggdGhleSBhcmUgbmFtZWQsXG5sYW5kaW5ncyBpbiBvdGhlciBtYXJrZXQgY2F0ZWdvcmllcyBtYXkgY29udGFpbiBmZXcgb2YgdGhlIHNwZWNpZXMgZm9yIHdoaWNoXG50aGV5IGFyZSBuYW1lZC5cblxuR2VuZXJhbCBOb3RlczpcblRoZSBkYXRhIGZyb20gMTkzMC0xOTMyIGhhcyBhIGxvdCBvZiB1bmtub3duIGJsb2NrIGRhdGEuICBXaGVuIHRoZSB0cmF3bFxubGFuZGluZyBkYXRhIGlzIGVudGVyZWQsIHNvbWUgb2YgdGhpcyBtYXkgYmUgcmVzb2x2ZWQuICBBdCB0aGUgc2FtZSB0aW1lLFxuc29tZSBnZWFyIGRhdGEgd2lsbCBiZSBhdmFpbGFibGUuXG5cbldoZW4gU291cmNlIENvcnAgZmluaXNoZXMgZGF0YSBlbnRyeSBvZiB0aGUgbGFuZGluZyByZWNlaXB0IGRhdGEsIGdlYXIgY29kZVxuZGF0YSB3aWxsIGJlIGF2YWlsYWJsZSBmcm9tIDE5NTEtMTk2ODsgaG93ZXZlciwgdGhpcyB3aWxsIG5vdCBiZSBjb21wbGV0ZWRcbnVudGlsIGFyb3VuZCAyMDExLlxuXG5CbG9jayBNYXBzOiBodHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L1BhQ09PUy9ta3RfY2F0Y2gvY2FfbGFuZGluZ3NfaW5mby5odG1sXG5EYXRhIFNvdXJjZTogQ2FsaWZvcm5pYSBEZXBhcnRtZW50IG9mIEZpc2ggJiBHYW1lLlxuRGF0YSBBc3NlbWJseTogTk9BQSBTV0ZTQyBGRUQ7IENvbnRhY3Q6IERvbi5QZWFyc29uQG5vYWEuZ292XG5cbmNkbV9kYXRhX3R5cGUgPSBPdGhlclxuVkFSSUFCTEVTOlxubWFya2V0X2NhdGVnb3J5XG4uLi4gKDEzIG1vcmUgdmFyaWFibGVzKVxuIiwgIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9mZWRDYWxMYW5kaW5ncy9pbmRleC5qc29uIiwgImh0dHBzOi8vb2NlYW52aWV3LnBmZWcubm9hYS5nb3YvUGFDT09TL21rdF9jYXRjaCIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9mZWRDYWxMYW5kaW5ncy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZmVkQ2FsTGFuZGluZ3Mmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBTV0ZTQyBGRUQiLCAiZmVkQ2FsTGFuZGluZ3MiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ0FNYXJDYXRMTS5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ0FNYXJDYXRMTSIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDQU1hckNhdExNLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkNhbGlmb3JuaWEgRmlzaCBNYXJrZXQgQ2F0Y2ggTGFuZGluZ3MsIExvbmcgTGlzdCwgMTkyOC0yMDAyLCBNb250aGx5IiwgIkRhdGFiYXNlIG9mIGZpc2ggYW5kIGludmVydGVicmF0ZXMgY2F1Z2h0IG9mZiBDYWxpZm9ybmlhIGFuZCBsYW5kZWQgaW4gQ2FsaWZvcm5pYSwgaW5jbHVkaW5nIGNvbW1lcmNpYWwgZnJlc2h3YXRlciBjYXRjaGVzIGluIENhbGlmb3JuaWEgdGhyb3VnaCBidXQgbm90IGFmdGVyIDE5NzEgYW5kIHNvbWUgbWFyaWN1bHR1cmVkIHNoZWxsZmlzaCBzdWNoIGFzIG95c3RlcnMgdGhyb3VnaCAxOTgwLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9sYXNfZmlzaDEvZG9jL25hbWVzX2Rlc2NyaWJlLmh0bWwgYW5kXG5odHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L2xhc19maXNoMS9kb2MvbWFya2V0bGlzdC5odG1sIC5cblxuY2RtX2RhdGFfdHlwZSA9IE90aGVyXG5WQVJJQUJMRVM6XG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxueWVhclxuZmlzaCAoRmlzaCBOYW1lKVxucG9ydFxubGFuZGluZ3MgKHBvdW5kcylcbiIsICIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkQ0FNYXJDYXRMTS9pbmRleC5qc29uIiwgImh0dHBzOi8vb2NlYW52aWV3LnBmZWcubm9hYS5nb3YvbGFzX2Zpc2gxL2RvYy9uYW1lc19kZXNjcmliZS5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZENBTWFyQ2F0TE0ucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZENBTWFyQ2F0TE0mc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiQ0EgREZHLCBOT0FBIEVSRCIsICJlcmRDQU1hckNhdExNIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENBTWFyQ2F0TFkuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENBTWFyQ2F0TFkiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ0FNYXJDYXRMWS5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJDYWxpZm9ybmlhIEZpc2ggTWFya2V0IENhdGNoIExhbmRpbmdzLCBMb25nIExpc3QsIDE5MjgtMjAwMiwgWWVhcmx5IiwgIkRhdGFiYXNlIG9mIGZpc2ggYW5kIGludmVydGVicmF0ZXMgY2F1Z2h0IG9mZiBDYWxpZm9ybmlhIGFuZCBsYW5kZWQgaW4gQ2FsaWZvcm5pYSwgaW5jbHVkaW5nIGNvbW1lcmNpYWwgZnJlc2h3YXRlciBjYXRjaGVzIGluIENhbGlmb3JuaWEgdGhyb3VnaCBidXQgbm90IGFmdGVyIDE5NzEgYW5kIHNvbWUgbWFyaWN1bHR1cmVkIHNoZWxsZmlzaCBzdWNoIGFzIG95c3RlcnMgdGhyb3VnaCAxOTgwLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9sYXNfZmlzaDEvZG9jL25hbWVzX2Rlc2NyaWJlLmh0bWwgYW5kXG5odHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L2xhc19maXNoMS9kb2MvbWFya2V0bGlzdC5odG1sIC5cblxuVGhpcyBkYXRhc2V0IGhhcyB0aGUgc3VtcyBvZiB0aGUgbW9udGhseSB2YWx1ZXMgZm9yIGVhY2ggY2FsZW5kYXIgeWVhci5cblxuY2RtX2RhdGFfdHlwZSA9IE90aGVyXG5WQVJJQUJMRVM6XG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxueWVhclxuZmlzaCAoRmlzaCBOYW1lKVxucG9ydFxubGFuZGluZ3MgKHBvdW5kcylcbiIsICIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkQ0FNYXJDYXRMWS9pbmRleC5qc29uIiwgImh0dHBzOi8vb2NlYW52aWV3LnBmZWcubm9hYS5nb3YvbGFzX2Zpc2gxL2RvYy9uYW1lc19kZXNjcmliZS5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZENBTWFyQ2F0TFkucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZENBTWFyQ2F0TFkmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiQ0EgREZHLCBOT0FBIEVSRCIsICJlcmRDQU1hckNhdExZIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENBTWFyQ2F0U00uc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENBTWFyQ2F0U00iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ0FNYXJDYXRTTS5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJDYWxpZm9ybmlhIEZpc2ggTWFya2V0IENhdGNoIExhbmRpbmdzLCBTaG9ydCBMaXN0LCAxOTI4LTIwMDIsIE1vbnRobHkiLCAiRGF0YWJhc2Ugb2YgZmlzaCBhbmQgaW52ZXJ0ZWJyYXRlcyBjYXVnaHQgb2ZmIENhbGlmb3JuaWEgYW5kIGxhbmRlZCBpbiBDYWxpZm9ybmlhLCBpbmNsdWRpbmcgY29tbWVyY2lhbCBmcmVzaHdhdGVyIGNhdGNoZXMgaW4gQ2FsaWZvcm5pYSB0aHJvdWdoIGJ1dCBub3QgYWZ0ZXIgMTk3MSBhbmQgc29tZSBtYXJpY3VsdHVyZWQgc2hlbGxmaXNoIHN1Y2ggYXMgb3lzdGVycyB0aHJvdWdoIDE5ODAuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L2xhc19maXNoMS9kb2MvbmFtZXNfZGVzY3JpYmUuaHRtbCBhbmRcbmh0dHBzOi8vb2NlYW52aWV3LnBmZWcubm9hYS5nb3YvbGFzX2Zpc2gxL2RvYy9tYXJrZXRsaXN0Lmh0bWwgLlxuXG5jZG1fZGF0YV90eXBlID0gT3RoZXJcblZBUklBQkxFUzpcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG55ZWFyXG5maXNoIChGaXNoIE5hbWUpXG5wb3J0XG5sYW5kaW5ncyAocG91bmRzKVxuIiwgIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9lcmRDQU1hckNhdFNNL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9sYXNfZmlzaDEvZG9jL25hbWVzX2Rlc2NyaWJlLmh0bWwiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkQ0FNYXJDYXRTTS5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkQ0FNYXJDYXRTTSZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJDQSBERkcsIE5PQUEgRVJEIiwgImVyZENBTWFyQ2F0U00iXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ0FNYXJDYXRTWS5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ0FNYXJDYXRTWSIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDQU1hckNhdFNZLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkNhbGlmb3JuaWEgRmlzaCBNYXJrZXQgQ2F0Y2ggTGFuZGluZ3MsIFNob3J0IExpc3QsIDE5MjgtMjAwMiwgWWVhcmx5IiwgIkRhdGFiYXNlIG9mIGZpc2ggYW5kIGludmVydGVicmF0ZXMgY2F1Z2h0IG9mZiBDYWxpZm9ybmlhIGFuZCBsYW5kZWQgaW4gQ2FsaWZvcm5pYSwgaW5jbHVkaW5nIGNvbW1lcmNpYWwgZnJlc2h3YXRlciBjYXRjaGVzIGluIENhbGlmb3JuaWEgdGhyb3VnaCBidXQgbm90IGFmdGVyIDE5NzEgYW5kIHNvbWUgbWFyaWN1bHR1cmVkIHNoZWxsZmlzaCBzdWNoIGFzIG95c3RlcnMgdGhyb3VnaCAxOTgwLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9sYXNfZmlzaDEvZG9jL25hbWVzX2Rlc2NyaWJlLmh0bWwgYW5kXG5odHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L2xhc19maXNoMS9kb2MvbWFya2V0bGlzdC5odG1sIC5cblxuVGhpcyBkYXRhc2V0IGhhcyB0aGUgc3VtcyBvZiB0aGUgbW9udGhseSB2YWx1ZXMgZm9yIGVhY2ggY2FsZW5kYXIgeWVhci5cblxuY2RtX2RhdGFfdHlwZSA9IE90aGVyXG5WQVJJQUJMRVM6XG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxueWVhclxuZmlzaCAoRmlzaCBOYW1lKVxucG9ydFxubGFuZGluZ3MgKHBvdW5kcylcbiIsICIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkQ0FNYXJDYXRTWS9pbmRleC5qc29uIiwgImh0dHBzOi8vb2NlYW52aWV3LnBmZWcubm9hYS5nb3YvbGFzX2Zpc2gxL2RvYy9uYW1lc19kZXNjcmliZS5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZENBTWFyQ2F0U1kucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZENBTWFyQ2F0U1kmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiQ0EgREZHLCBOT0FBIEVSRCIsICJlcmRDQU1hckNhdFNZIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENpbnBLZm1ULnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDaW5wS2ZtVCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDaW5wS2ZtVC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJDaGFubmVsIElzbGFuZHMsIEtlbHAgRm9yZXN0IE1vbml0b3JpbmcsIFNlYSBUZW1wZXJhdHVyZSwgMTk5My0yMDA3IiwgIlRoaXMgZGF0YXNldCBmcm9tIHRoZSBDaGFubmVsIElzbGFuZHMgTmF0aW9uYWwgUGFyaydzIEtlbHAgRm9yZXN0IE1vbml0b3JpbmcgUHJvZ3JhbSBoYXMgc3VidGlkYWwgdGVtcGVyYXR1cmUgZGF0YSB0YWtlbiBhdCBwZXJtYW5lbnQgbW9uaXRvcmluZyBzaXRlcy4gIFNpbmNlIDE5OTMsIHJlbW90ZSB0ZW1wZXJhdHVyZSBsb2dnZXJzIG1hbnVmYWN0dXJlZCBieSBPbnNldCBDb21wdXRlciBDb3Jwb3JhdGlvbiB3ZXJlIGRlcGxveWVkIGF0IGVhY2ggc2l0ZSBhcHByb3hpbWF0ZWx5IDEwLTIwIGNtIGZyb20gdGhlIGJvdHRvbSBpbiBhIHVuZGVyd2F0ZXIgaG91c2luZy4gIFNpbmNlIDE5OTMsIHRocmVlIG1vZGVscyBvZiB0ZW1wZXJhdHVyZSBsb2dnZXJzIChIb2JvVGVtcCAodG0pLCBTdG93QXdheSAoUikgYW5kIFRpZGJpdChSKSkgd2VyZSB1c2VkIHRvIGNvbGxlY3QgdGVtcGVyYXR1cmUgZGF0YSBldmVyeSAxLTUgaG91cnMgZGVwZW5kaW5nIG9uIHRoZSBtb2RlbCB1c2VkLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuc3RhdGlvblxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmRlcHRoIChtKVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnRlbXBlcmF0dXJlIChTZWEgV2F0ZXIgVGVtcGVyYXR1cmUsIGRlZ3JlZV9DKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2VyZENpbnBLZm1UX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRDaW5wS2ZtVF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9lcmRDaW5wS2ZtVC9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cubnBzLmdvdi9jaGlzL25hdHVyZXNjaWVuY2UvaW5kZXguaHRtIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZENpbnBLZm1ULnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1lcmRDaW5wS2ZtVCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJDSU5QIiwgImVyZENpbnBLZm1UIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENpbnBLZm1TRk5ILnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDaW5wS2ZtU0ZOSCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDaW5wS2ZtU0ZOSC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJDaGFubmVsIElzbGFuZHMsIEtlbHAgRm9yZXN0IE1vbml0b3JpbmcsIFNpemUgYW5kIEZyZXF1ZW5jeSwgTmF0dXJhbCBIYWJpdGF0LCAxOTg1LTIwMDciLCAiVGhpcyBkYXRhc2V0IGhhcyBtZWFzdXJlbWVudHMgb2YgdGhlIHNpemUgb2Ygc2VsZWN0ZWQgYW5pbWFsIHNwZWNpZXMgYXQgc2VsZWN0ZWQgbG9jYXRpb25zIGluIHRoZSBDaGFubmVsIElzbGFuZHMgTmF0aW9uYWwgUGFyay4gU2FtcGxpbmcgaXMgY29uZHVjdGVkIGFubnVhbGx5IGJldHdlZW4gdGhlIG1vbnRocyBvZiBNYXktT2N0b2Jlciwgc28gdGhlIFRpbWUgZGF0YSBpbiB0aGlzIGZpbGUgaXMgSnVseSAxIG9mIGVhY2ggeWVhciAoYSBub21pbmFsIHZhbHVlKS4gVGhlIHNpemUgZnJlcXVlbmN5IG1lYXN1cmVtZW50cyB3ZXJlIHRha2VuIHdpdGhpbiAxMCBtZXRlcnMgb2YgdGhlIHRyYW5zZWN0IGxpbmUgYXQgZWFjaCBzaXRlLiAgRGVwdGhzIGF0IHRoZSBzaXRlIHZhcnkgc29tZSwgYnV0IHdlIGRlc2NyaWJlIHRoZSBkZXB0aCBvZiB0aGUgc2l0ZSBhbG9uZyB0aGUgdHJhbnNlY3QgbGluZSB3aGVyZSB0aGF0IHN0YXRpb24ncyB0ZW1wZXJhdHVyZSBsb2dnZXIgaXMgbG9jYXRlZCwgYSB0eXBpY2FsIGRlcHRoIGZvciB0aGUgc2l0ZS5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmlkIChTdGF0aW9uIElkZW50aWZpZXIpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxuZGVwdGggKG0pXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuY29tbW9uX25hbWVcbnNwZWNpZXNfbmFtZVxuc2l6ZSAobW0pXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkQ2lucEtmbVNGTkhfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2VyZENpbnBLZm1TRk5IX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZENpbnBLZm1TRk5IL2luZGV4Lmpzb24iLCAiaHR0cDovL3d3dy5ucHMuZ292L2NoaXMvbmF0dXJlc2NpZW5jZS9pbmRleC5odG0iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkQ2lucEtmbVNGTkgucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZENpbnBLZm1TRk5IJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkNJTlAiLCAiZXJkQ2lucEtmbVNGTkgiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2lucEtmbTFRLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDaW5wS2ZtMVEiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2lucEtmbTFRLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkNoYW5uZWwgSXNsYW5kcywgS2VscCBGb3Jlc3QgTW9uaXRvcmluZywgU3VydmV5LCAxbSBRdWFkcmF0LCAxOTgyLTIwMDciLCAiVGhpcyBkYXRhc2V0IGZyb20gdGhlIENoYW5uZWwgSXNsYW5kcyBOYXRpb25hbCBQYXJrJ3MgS2VscCBGb3Jlc3QgTW9uaXRvcmluZyBQcm9ncmFtIGhhcyBtZWFzdXJlbWVudHMgb2YgdGhlIGFidW5kYW5jZSAoZGVuc2l0eSkgb2YgcmVsYXRpdmVseSBhYnVuZGFudCBzZWxlY3RlZCBzZWRlbnRhcnkgaW5kaWNhdG9yIHNwZWNpZXMuICBUaGUgc3VtbWFyeSBkYXRhIHByZXNlbnRlZCBoZXJlIHJlcHJlc2VudHMgdGhlIG1lYW4gZGVuc2l0eSBwZXIgc3F1YXJlIG1ldGVyLiBTYW1wbGluZyBpcyBjb25kdWN0ZWQgYW5udWFsbHkgYmV0d2VlbiB0aGUgbW9udGhzIG9mIE1heS1PY3RvYmVyLCBzbyB0aGUgVGltZSBkYXRhIGluIHRoaXMgZmlsZSBpcyBKdWx5IDEgb2YgZWFjaCB5ZWFyIChhIG5vbWluYWwgdmFsdWUpLiBUaGUgYWN0dWFsIG1lYXN1cmVtZW50cyB3ZXJlIHRha2VuIGF0IHZhcmlvdXMgZGVwdGhzLCBzbyB0aGUgRGVwdGggZGF0YSBpbiB0aGlzIGZpbGUgaXMgdGhlIGRlcHRoIG9mIHRoZSBzdGF0aW9uJ3MgdGVtcGVyYXR1cmUgbG9nZ2VyLCB3aGljaCBpcyBhIHR5cGljYWwgZGVwdGguXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5zdGF0aW9uXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxuZGVwdGggKG0pXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuQWdhcnVtX2ZpbWJyaWF0dW1fYWR1bHRfTWVhbl9EZW5zaXR5IChtLTIpXG5BZ2FydW1fZmltYnJpYXR1bV9hZHVsdF9TdGREZXZcbkFnYXJ1bV9maW1icmlhdHVtX2FkdWx0X1N0ZEVyclxuQWdhcnVtX2ZpbWJyaWF0dW1fanV2ZW5pbGVfTWVhbl9EZW5zaXR5IChtLTIpXG5BZ2FydW1fZmltYnJpYXR1bV9qdXZlbmlsZV9TdGREZXZcbkFnYXJ1bV9maW1icmlhdHVtX2p1dmVuaWxlX1N0ZEVyclxuQWxsb2NsaW51c19ob2xkZXJpX01lYW5fRGVuc2l0eSAobS0yKVxuQWxsb2NsaW51c19ob2xkZXJpX1N0ZERldlxuQWxsb2NsaW51c19ob2xkZXJpX1N0ZEVyclxuQXBseXNpYV9jYWxpZm9ybmljYV9NZWFuX0RlbnNpdHkgKG0tMilcbkFwbHlzaWFfY2FsaWZvcm5pY2FfU3RkRGV2XG5BcGx5c2lhX2NhbGlmb3JuaWNhX1N0ZEVyclxuQXN0ZXJpbmFfbWluaWF0YV9NZWFuX0RlbnNpdHkgKG0tMilcbkFzdGVyaW5hX21pbmlhdGFfU3RkRGV2XG5Bc3RlcmluYV9taW5pYXRhX1N0ZEVyclxuQ2VudHJvc3RlcGhhbnVzX2Nvcm9uYXR1c19NZWFuX0RlbnNpdHkgKG0tMilcbkNlbnRyb3N0ZXBoYW51c19jb3JvbmF0dXNfU3RkRGV2XG4uLi4gKDkxIG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2VyZENpbnBLZm0xUV9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkQ2lucEtmbTFRX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZENpbnBLZm0xUS9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cubnBzLmdvdi9jaGlzL25hdHVyZXNjaWVuY2UvaW5kZXguaHRtIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZENpbnBLZm0xUS5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkQ2lucEtmbTFRJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkNJTlAiLCAiZXJkQ2lucEtmbTFRIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENpbnBLZm01US5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2lucEtmbTVRIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENpbnBLZm01US5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJDaGFubmVsIElzbGFuZHMsIEtlbHAgRm9yZXN0IE1vbml0b3JpbmcsIFN1cnZleSwgNW0gUXVhZHJhdCwgMTk5Ni0yMDA3IiwgIlRoaXMgZGF0YXNldCBmcm9tIHRoZSBDaGFubmVsIElzbGFuZHMgTmF0aW9uYWwgUGFyaydzIEtlbHAgRm9yZXN0IE1vbml0b3JpbmcgUHJvZ3JhbSBoYXMgbWVhc3VyZW1lbnRzIG9mIHRoZSBhYnVuZGFuY2Ugb2Ygc2VsZWN0ZWQgcmFyZSwgY2x1bXBlZCwgc2VkZW50YXJ5IGluZGljYXRvciBzcGVjaWVzLiBUaGUgc3VtbWFyeSBkYXRhIHByZXNlbnRlZCBoZXJlIHJlcHJlc2VudHMgdGhlIG1lYW4gZGVuc2l0eSBwZXIgc3F1YXJlIG1ldGVyLiBTYW1wbGluZyBpcyBjb25kdWN0ZWQgYW5udWFsbHkgYmV0d2VlbiB0aGUgbW9udGhzIG9mIE1heS1PY3RvYmVyLCBzbyB0aGUgVGltZSBkYXRhIGluIHRoaXMgZmlsZSBpcyBKdWx5IDEgb2YgZWFjaCB5ZWFyIChhIG5vbWluYWwgdmFsdWUpLiBUaGUgb3JpZ2luYWwgbWVhc3VyZW1lbnRzIHdlcmUgdGFrZW4gYXQgdmFyaW91cyBkZXB0aHMsIHNvIHRoZSBEZXB0aCBkYXRhIGluIHRoaXMgZmlsZSBpcyB0aGUgZGVwdGggb2YgdGhlIHN0YXRpb24ncyB0ZW1wZXJhdHVyZSBsb2dnZXIsIHdoaWNoIGlzIGEgdHlwaWNhbCBkZXB0aC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbnN0YXRpb25cbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5kZXB0aCAobSlcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5NYWNyb2N5c3Rpc19weXJpZmVyYV9BZHVsdF9NZWFuX0RlbnNpdHkgKG0tMilcbk1hY3JvY3lzdGlzX3B5cmlmZXJhX0FkdWx0X1N0ZERldlxuTWFjcm9jeXN0aXNfcHlyaWZlcmFfQWR1bHRfU3RkRXJyXG5NYWNyb2N5c3Rpc19weXJpZmVyYV9TdWJhZHVsdF9NZWFuX0RlbnNpdHkgKG0tMilcbk1hY3JvY3lzdGlzX3B5cmlmZXJhX1N1YmFkdWx0X1N0ZERldlxuTWFjcm9jeXN0aXNfcHlyaWZlcmFfU3ViYWR1bHRfU3RkRXJyXG5QaXNhc3Rlcl9naWdhbnRldXNfTWVhbl9EZW5zaXR5IChtLTIpXG5QaXNhc3Rlcl9naWdhbnRldXNfU3RkRGV2XG5QaXNhc3Rlcl9naWdhbnRldXNfU3RkRXJyXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkQ2lucEtmbTVRX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRDaW5wS2ZtNVFfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkQ2lucEtmbTVRL2luZGV4Lmpzb24iLCAiaHR0cDovL3d3dy5ucHMuZ292L2NoaXMvbmF0dXJlc2NpZW5jZS9pbmRleC5odG0iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkQ2lucEtmbTVRLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1lcmRDaW5wS2ZtNVEmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiQ0lOUCIsICJlcmRDaW5wS2ZtNVEiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2lucEtmbUJULnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDaW5wS2ZtQlQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2lucEtmbUJULmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkNoYW5uZWwgSXNsYW5kcywgS2VscCBGb3Jlc3QgTW9uaXRvcmluZywgU3VydmV5LCBCYW5kIFRyYW5zZWN0LCAxOTgzLTIwMDciLCAiVGhpcyBkYXRhc2V0IGZyb20gdGhlIENoYW5uZWwgSXNsYW5kcyBOYXRpb25hbCBQYXJrJ3MgS2VscCBGb3Jlc3QgTW9uaXRvcmluZyBQcm9ncmFtIGhhcyBtZWFzdXJlbWVudHMgb2YgdGhlIGFidW5kYW5jZSBhbmQgZGlzdHJpYnV0aW9uIG9mIHJhcmUgYW5kIGNsdW1wZWQgb3JnYW5pc21zIG5vdCBhZGVxdWF0ZWx5IHNhbXBsZWQgYnkgcXVhZHJhdHMuIFRoZSBzdW1tYXJ5IGRhdGEgcHJlc2VudGVkIGhlcmUgcmVwcmVzZW50cyB0aGUgbWVhbiBkZW5zaXR5IHBlciBzcXVhcmUgbWV0ZXIuIFNhbXBsaW5nIGlzIGNvbmR1Y3RlZCBhbm51YWxseSBiZXR3ZWVuIHRoZSBtb250aHMgb2YgTWF5LU9jdG9iZXIsIHNvIHRoZSBUaW1lIGRhdGEgaW4gdGhpcyBmaWxlIGlzIEp1bHkgMSBvZiBlYWNoIHllYXIgKGEgbm9taW5hbCB2YWx1ZSkuIFRoZSBhY3R1YWwgbWVhc3VyZW1lbnRzIHdlcmUgdGFrZW4gYXQgdmFyaW91cyBkZXB0aHMsIHNvIHRoZSBEZXB0aCBkYXRhIGluIHRoaXMgZmlsZSBpcyB0aGUgZGVwdGggb2YgdGhlIHN0YXRpb24ncyB0ZW1wZXJhdHVyZSBsb2dnZXIsIHdoaWNoIGlzIGEgdHlwaWNhbCBkZXB0aC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbnN0YXRpb25cbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5kZXB0aCAobSlcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5BcGx5c2lhX2NhbGlmb3JuaWNhX01lYW5fRGVuc2l0eSAobS0yKVxuQXBseXNpYV9jYWxpZm9ybmljYV9TdGREZXZcbkFwbHlzaWFfY2FsaWZvcm5pY2FfU3RkRXJyXG5DcmFzc2Vkb21hX2dpZ2FudGV1bV9NZWFuX0RlbnNpdHkgKG0tMilcbkNyYXNzZWRvbWFfZ2lnYW50ZXVtX1N0ZERldlxuQ3Jhc3NlZG9tYV9naWdhbnRldW1fU3RkRXJyXG5IYWxpb3Rpc19jb3JydWdhdGFfTWVhbl9EZW5zaXR5IChtLTIpXG5IYWxpb3Rpc19jb3JydWdhdGFfU3RkRGV2XG5IYWxpb3Rpc19jb3JydWdhdGFfU3RkRXJyXG5IYWxpb3Rpc19mdWxnZW5zX01lYW5fRGVuc2l0eSAobS0yKVxuSGFsaW90aXNfZnVsZ2Vuc19TdGREZXZcbkhhbGlvdGlzX2Z1bGdlbnNfU3RkRXJyXG5IYWxpb3Rpc19ydWZlc2NlbnNfTWVhbl9EZW5zaXR5IChtLTIpXG5IYWxpb3Rpc19ydWZlc2NlbnNfU3RkRGV2XG5IYWxpb3Rpc19ydWZlc2NlbnNfU3RkRXJyXG5LZWxsZXRpYV9rZWxsZXRpaV9NZWFuX0RlbnNpdHkgKG0tMilcbktlbGxldGlhX2tlbGxldGlpX1N0ZERldlxuLi4uICgzMSBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9lcmRDaW5wS2ZtQlRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2VyZENpbnBLZm1CVF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9lcmRDaW5wS2ZtQlQvaW5kZXguanNvbiIsICJodHRwOi8vd3d3Lm5wcy5nb3YvY2hpcy9uYXR1cmVzY2llbmNlL2luZGV4Lmh0bSIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9lcmRDaW5wS2ZtQlQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZENpbnBLZm1CVCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJDSU5QIiwgImVyZENpbnBLZm1CVCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDaW5wS2ZtRlQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENpbnBLZm1GVCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRDaW5wS2ZtRlQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiQ2hhbm5lbCBJc2xhbmRzLCBLZWxwIEZvcmVzdCBNb25pdG9yaW5nLCBTdXJ2ZXksIEZpc2ggVHJhbnNlY3QsIDE5ODUtMjAwNyIsICJUaGlzIGRhdGFzZXQgZnJvbSB0aGUgQ2hhbm5lbCBJc2xhbmRzIE5hdGlvbmFsIFBhcmsncyBLZWxwIEZvcmVzdCBNb25pdG9yaW5nIFByb2dyYW0gaGFzIG1lYXN1cmVtZW50cyBvZiB0aGUgYWJ1bmRhbmNlIG9mIGZpc2ggc3BlY2llcy4gVGhlIG9yaWdpbmFsIG1lYXN1cmVtZW50cyB3ZXJlIHRha2VuIGF0IHZhcmlvdXMgZGVwdGhzLCBzbyB0aGUgRGVwdGggZGF0YSBpbiB0aGlzIGZpbGUgaXMgdGhlIGRlcHRoIG9mIHRoZSBzdGF0aW9uJ3MgdGVtcGVyYXR1cmUgbG9nZ2VyLCB3aGljaCBpcyBhIHR5cGljYWwgZGVwdGguXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5zdGF0aW9uXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxuZGVwdGggKG0pXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuQ2hyb21pc19wdW5jdGlwaW5uaXNfQWR1bHQgKE51bWJlciBvZiBDaHJvbWlzIHB1bmN0aXBpbm5pcyBBZHVsdCwgcGVyIDEwMG1YMm1YMzBtIHRyYW5zZWN0KVxuQ2hyb21pc19wdW5jdGlwaW5uaXNfSnV2ZW5pbGUgKE51bWJlciBvZiBDaHJvbWlzIHB1bmN0aXBpbm5pcyBKdXZlbmlsZSwgcGVyIDEwMG1YMm1YMzBtIHRyYW5zZWN0KVxuRGFtYWxpY2h0aHlzX3ZhY2NhX0FkdWx0IChOdW1iZXIgb2YgRGFtYWxpY2h0aHlzIHZhY2NhIEFkdWx0LCBwZXIgMTAwbVgybVgzMG0gdHJhbnNlY3QpXG5EYW1hbGljaHRoeXNfdmFjY2FfSnV2ZW5pbGUgKE51bWJlciBvZiBEYW1hbGljaHRoeXMgdmFjY2EgSnV2ZW5pbGUsIHBlciAxMDBtWDJtWDMwbSB0cmFuc2VjdClcbkVtYmlvdG9jYV9qYWNrc29uaV9BZHVsdCAoTnVtYmVyIG9mIEVtYmlvdG9jYSBqYWNrc29uaSBBZHVsdCwgcGVyIDEwMG1YMm1YMzBtIHRyYW5zZWN0KVxuRW1iaW90b2NhX2phY2tzb25pX0p1dmVuaWxlIChOdW1iZXIgb2YgRW1iaW90b2NhIGphY2tzb25pIEp1dmVuaWxlLCBwZXIgMTAwbVgybVgzMG0gdHJhbnNlY3QpXG5FbWJpb3RvY2FfbGF0ZXJhbGlzX0FkdWx0IChOdW1iZXIgb2YgRW1iaW90b2NhIGxhdGVyYWxpcyBBZHVsdCwgcGVyIDEwMG1YMm1YMzBtIHRyYW5zZWN0KVxuRW1iaW90b2NhX2xhdGVyYWxpc19KdXZlbmlsZSAoTnVtYmVyIG9mIEVtYmlvdG9jYSBsYXRlcmFsaXMgSnV2ZW5pbGUsIHBlciAxMDBtWDJtWDMwbSB0cmFuc2VjdClcbkdpcmVsbGFfbmlncmljYW5zX0FkdWx0IChOdW1iZXIgb2YgR2lyZWxsYSBuaWdyaWNhbnMgQWR1bHQsIHBlciAxMDBtWDJtWDMwbSB0cmFuc2VjdClcbkdpcmVsbGFfbmlncmljYW5zX0p1dmVuaWxlIChOdW1iZXIgb2YgR2lyZWxsYSBuaWdyaWNhbnMgSnV2ZW5pbGUsIHBlciAxMDBtWDJtWDMwbSB0cmFuc2VjdClcbkhhbGljaG9lcmVzX3NlbWljaW5jdHVzX0ZlbWFsZSAoTnVtYmVyIG9mIEhhbGljaG9lcmVzIHNlbWljaW5jdHVzIEZlbWFsZSwgcGVyIDEwMG1YMm1YMzBtIHRyYW5zZWN0KVxuSGFsaWNob2VyZXNfc2VtaWNpbmN0dXNfTWFsZSAoTnVtYmVyIG9mIEhhbGljaG9lcmVzIHNlbWljaW5jdHVzIE1hbGUsIHBlciAxMDBtWDJtWDMwbSB0cmFuc2VjdClcbkh5cHN5cG9wc19ydWJpY3VuZHVzX0FkdWx0IChOdW1iZXIgb2YgSHlwc3lwb3BzIHJ1YmljdW5kdXMgQWR1bHQsIHBlciAxMDBtWDJtWDMwbSB0cmFuc2VjdClcbkh5cHN5cG9wc19ydWJpY3VuZHVzX0p1dmVuaWxlIChOdW1iZXIgb2YgSHlwc3lwb3BzIHJ1YmljdW5kdXMgSnV2ZW5pbGUsIHBlciAxMDBtWDJtWDMwbSB0cmFuc2VjdClcbk94eWp1bGlzX2NhbGlmb3JuaWNhX0FkdWx0IChOdW1iZXIgb2YgT3h5anVsaXMgY2FsaWZvcm5pY2EgQWR1bHQsIHBlciAxMDBtWDJtWDMwbSB0cmFuc2VjdClcbk94eWp1bGlzX2NhbGlmb3JuaWNhX0p1dmVuaWxlIChOdW1iZXIgb2YgT3h5anVsaXMgY2FsaWZvcm5pY2EgSnV2ZW5pbGUsIHBlciAxMDBtWDJtWDMwbSB0cmFuc2VjdClcblBhcmFsYWJyYXhfY2xhdGhyYXR1c19BZHVsdCAoTnVtYmVyIG9mIFBhcmFsYWJyYXggY2xhdGhyYXR1cyBBZHVsdCwgcGVyIDEwMG1YMm1YMzBtIHRyYW5zZWN0KVxuUGFyYWxhYnJheF9jbGF0aHJhdHVzX0p1dmVuaWxlIChOdW1iZXIgb2YgUGFyYWxhYnJheCBjbGF0aHJhdHVzIEp1dmVuaWxlLCBwZXIgMTAwbVgybVgzMG0gdHJhbnNlY3QpXG5TZWJhc3Rlc19hdHJvdmlyZW5zX0FkdWx0IChOdW1iZXIgb2YgU2ViYXN0ZXMgYXRyb3ZpcmVucyBBZHVsdCwgcGVyIDEwMG1YMm1YMzBtIHRyYW5zZWN0KVxuLi4uICg4IG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2VyZENpbnBLZm1GVF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkQ2lucEtmbUZUX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZENpbnBLZm1GVC9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cubnBzLmdvdi9jaGlzL25hdHVyZXNjaWVuY2UvaW5kZXguaHRtIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZENpbnBLZm1GVC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkQ2lucEtmbUZUJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkNJTlAiLCAiZXJkQ2lucEtmbUZUIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENpbnBLZm1SUEMuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZENpbnBLZm1SUEMiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkQ2lucEtmbVJQQy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJDaGFubmVsIElzbGFuZHMsIEtlbHAgRm9yZXN0IE1vbml0b3JpbmcsIFN1cnZleSwgUmFuZG9tIFBvaW50IENvbnRhY3QsIDE5ODItMjAwNyIsICJUaGlzIGRhdGFzZXQgZnJvbSB0aGUgQ2hhbm5lbCBJc2xhbmRzIE5hdGlvbmFsIFBhcmsncyBLZWxwIEZvcmVzdCBNb25pdG9yaW5nIFByb2dyYW0gaGFzIGVzdGltYXRlcyBvZiBzdWJzdHJhdGUgY29tcG9zaXRpb24gYW5kIHBlcmNlbnQgY292ZXIgb2Ygc2VsZWN0ZWQgYWxnYWwgYW5kIGludmVydGVicmF0ZSB0YXhhLiBUaGUgZGF0YSBzdW1tYXJ5IGRhdGEgcHJlc2VudGVkIGhlcmUgcmVwcmVzZW50cyB0aGUgbWVhbiBwZXJjZW50IGNvdmVyIG9mIHRoZSBpbmRpY2F0b3Igc3BlY2llcyBhdCB0aGUgc2l0ZS4gU2FtcGxpbmcgaXMgY29uZHVjdGVkIGFubnVhbGx5IGJldHdlZW4gdGhlIG1vbnRocyBvZiBNYXktT2N0b2Jlciwgc28gdGhlIFRpbWUgZGF0YSBpbiB0aGlzIGZpbGUgaXMgSnVseSAxIG9mIGVhY2ggeWVhciAoYSBub21pbmFsIHZhbHVlKS4gVGhlIGFjdHVhbCBtZWFzdXJlbWVudHMgd2VyZSB0YWtlbiBhdCB2YXJpb3VzIGRlcHRocywgc28gdGhlIERlcHRoIGRhdGEgaW4gdGhpcyBmaWxlIGlzIHRoZSBkZXB0aCBvZiB0aGUgc3RhdGlvbidzIHRlbXBlcmF0dXJlIGxvZ2dlciwgd2hpY2ggaXMgYSB0eXBpY2FsIGRlcHRoLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuc3RhdGlvblxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmRlcHRoIChtKVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbkFydGljdWxhdGVkX0NvcmFsbGluZV9BbGdhZV9NZWFuIChwZXJjZW50IGNvdmVyKVxuQXJ0aWN1bGF0ZWRfQ29yYWxsaW5lX0FsZ2FlX1N0ZERldlxuQXJ0aWN1bGF0ZWRfQ29yYWxsaW5lX0FsZ2FlX1N0ZEVyclxuQXN0cmFuZ2lhX2xham9sbGFlbnNpc19NZWFuIChwZXJjZW50IGNvdmVyKVxuQXN0cmFuZ2lhX2xham9sbGFlbnNpc19TdGREZXZcbkFzdHJhbmdpYV9sYWpvbGxhZW5zaXNfU3RkRXJyXG5CYWxhbm9waHlsbGlhX2VsZWdhbnNfTWVhbiAocGVyY2VudCBjb3ZlcilcbkJhbGFub3BoeWxsaWFfZWxlZ2Fuc19TdGREZXZcbkJhbGFub3BoeWxsaWFfZWxlZ2Fuc19TdGRFcnJcbkJhbGFudXNfc3BwX01lYW4gKHBlcmNlbnQgY292ZXIpXG5CYWxhbnVzX3NwcF9TdGREZXZcbkJhbGFudXNfc3BwX1N0ZEVyclxuQmFyZV9TdWJzdHJhdGVfTWVhbiAocGVyY2VudCBjb3ZlcilcbkJhcmVfU3Vic3RyYXRlX1N0ZERldlxuQmFyZV9TdWJzdHJhdGVfU3RkRXJyXG5Db2JibGVfTWVhbiAocGVyY2VudCBjb3ZlcilcbkNvYmJsZV9TdGREZXZcbi4uLiAoMTAwIG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2VyZENpbnBLZm1SUENfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2VyZENpbnBLZm1SUENfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkQ2lucEtmbVJQQy9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cubnBzLmdvdi9jaGlzL25hdHVyZXNjaWVuY2UvaW5kZXguaHRtIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZENpbnBLZm1SUEMucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZENpbnBLZm1SUEMmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiQ0lOUCIsICJlcmRDaW5wS2ZtUlBDIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL0ZSRENQU1RyYXdsTEhIYXVsQ2F0Y2guc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL0ZSRENQU1RyYXdsTEhIYXVsQ2F0Y2giLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvRlJEQ1BTVHJhd2xMSEhhdWxDYXRjaC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJDUFMgVHJhd2wgTGlmZSBIaXN0b3J5IEhhdWwgQ2F0Y2ggRGF0YSIsICJXZWlnaHQgaW4ga2lsb2dyYW1zIGZvciBhbGwgc3BlY2llcyAoaWRlbnRpZmllZCB0byBsb3dlc3QgdGF4b25vbWljIGNyaXRlcmlhKSBjYXVnaHQgZHVyaW5nIFNXRlNDLUZSRCBmaXNoZXJ5IGluZGVwZW5kZW50IHN1cnZleXMgKGluY2x1ZGluZyBERVBNLCBBVE0sIFNhS2UpIG9mIGNvYXN0YWwgcGVsYWdpYyBzcGVjaWVzIHVzaW5nIG1pZC13YXRlciB0cmF3bHMgKHdpdGggbW9zdCB0b3dzIHBlcmZvcm1lZCBuZWFyIHRoZSBzdXJmYWNlKSBhdCBwb3NpdGlvbiBhbmQgdGltZXMgbGlzdGVkLiBBZGRpdGlvbmFsIGluZm9ybWF0aW9uIGZvciBhIHN1YnNldCBvZiBpbmRpdmlkdWFscyBmcm9tIHNvbWUgc3BlY2llcyBjYW4gYmUgZm91bmQgaW4gZWl0aGVyIENQUyBUcmF3bCBMaWZlIEhpc3RvcnkgTGVuZ3RoIEZyZXF1ZW5jeSBvciB0aGUgQ1BTIFRyYXdsIExpZmUgSGlzdG9yeSBTcGVjaW1lbiBkYXRhc2V0cy5cblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2VcbnNoaXBcbmhhdWwgKEhhdWwgTnVtYmVyKVxuY29sbGVjdGlvblxubGF0aXR1ZGUgKFN0YXJ0IExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChTdGFydCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbnN0b3BfbGF0aXR1ZGVcbnN0b3BfbG9uZ2l0dWRlXG50aW1lIChFcXVpbGlicml1bSBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuaGF1bGJhY2tfdGltZSAoSGF1bCBCYWNrIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zdXJmYWNlX3RlbXAgKFN1cmZhY2UgVGVtcGVyYXR1cmUsIGRlZ3JlZSBDKVxuc3VyZmFjZV90ZW1wX21ldGhvZCAoU3VyZmFjZSBUZW1wZXJhdHVyZSBNZXRob2QpXG5zaGlwX3NwZF90aHJvdWdoX3dhdGVyIChTaGlwIFNwZWVkIFRocm91Z2ggV2F0ZXIsIGtub3QpXG5pdGlzX3RzbiAoSXRpc1RTTilcbnNjaWVudGlmaWNfbmFtZVxuc3Vic2FtcGxlX2NvdW50XG5zdWJzYW1wbGVfd2VpZ2h0IChrZylcbnJlbWFpbmluZ193ZWlnaHQgKGtnKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL0ZSRENQU1RyYXdsTEhIYXVsQ2F0Y2hfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL0ZSRENQU1RyYXdsTEhIYXVsQ2F0Y2hfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vRlJEQ1BTVHJhd2xMSEhhdWxDYXRjaC9pbmRleC5qc29uIiwgImh0dHBzOi8vc3dmc2Mubm9hYS5nb3YvRlJELyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9GUkRDUFNUcmF3bExISGF1bENhdGNoLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1GUkRDUFNUcmF3bExISGF1bENhdGNoJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEtRmlzaGVyaWVzL1NvdXRod2VzdCBGaXNoZXJpZXMgU2NpZW5jZSBDZW50ZXIiLCAiRlJEQ1BTVHJhd2xMSEhhdWxDYXRjaCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9GUkRDUFNUcmF3bExITGVuZ3RoRnJlcXVlbmN5LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9GUkRDUFNUcmF3bExITGVuZ3RoRnJlcXVlbmN5IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL0ZSRENQU1RyYXdsTEhMZW5ndGhGcmVxdWVuY3kuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiQ1BTIFRyYXdsIExpZmUgSGlzdG9yeSBMZW5ndGggRnJlcXVlbmN5IERhdGEiLCAiTGVuZ3RoIGRpc3RyaWJ1dGlvbiBvZiBhIHN1YnNldCBvZiBpbmRpdmlkdWFscyBmcm9tIGEgc3BlY2llcyAobWFpbmx5IG5vbi10YXJnZXQpIGNhdWdodCBkdXJpbmcgU1dGU0MtRlJEIGZpc2hlcnkgaW5kZXBlbmRlbnQgdHJhd2wgc3VydmV5cyBvZiBjb2FzdGFsIHBlbGFnaWMgc3BlY2llcy4gTWVhc3VyZWQgbGVuZ3RocyBmb3IgaW5kaWNhdGVkIGxlbmd0aCB0eXBlIChmb3JrLCBzdGFuZGFyZCwgdG90YWwsIG9yIG1hbnRsZSkgd2VyZSBncm91cGVkIGluIDEwIG1tIGJpbnMgKGlkZW50aWZpZWQgYnkgdGhlIG1pZHBvaW50IG9mIHRoZSBsZW5ndGggY2xhc3MpIGFuZCBjb3VudHMgYXJlIHJlY29yZGVkIGJ5IHNleC4gRG9lcyBub3QgaW5jbHVkZSBzcGVjaWVzIHdpdGggaW5kaXZpZHVhbCBsZW5ndGhzIHJlY29yZGVkIGluIHRoZSBDUFMgVHJhd2wgTGlmZSBIaXN0b3J5IFNwZWNpbWVuIGRhdGFzZXQuXG5cbmNkbV9kYXRhX3R5cGUgPSBPdGhlclxuVkFSSUFCTEVTOlxuY3J1aXNlXG5zaGlwXG5oYXVsIChIYXVsIE51bWJlcilcbmNvbGxlY3Rpb25cbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuaXRpc190c24gKEl0aXNUU04pXG5zY2llbnRpZmljX25hbWVcbmxlbmd0aF9jbGFzc1xubGVuZ3RoX3R5cGVcbm1hbGVcbmZlbWFsZVxudW5rbm93blxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL0ZSRENQU1RyYXdsTEhMZW5ndGhGcmVxdWVuY3lfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL0ZSRENQU1RyYXdsTEhMZW5ndGhGcmVxdWVuY3lfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vRlJEQ1BTVHJhd2xMSExlbmd0aEZyZXF1ZW5jeS9pbmRleC5qc29uIiwgImh0dHBzOi8vc3dmc2Mubm9hYS5nb3YvRlJELyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9GUkRDUFNUcmF3bExITGVuZ3RoRnJlcXVlbmN5LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1GUkRDUFNUcmF3bExITGVuZ3RoRnJlcXVlbmN5JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEtRmlzaGVyaWVzL1NvdXRod2VzdCBGaXNoZXJpZXMgU2NpZW5jZSBDZW50ZXIiLCAiRlJEQ1BTVHJhd2xMSExlbmd0aEZyZXF1ZW5jeSJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9GUkRDUFNUcmF3bExIU3BlY2ltZW4uc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL0ZSRENQU1RyYXdsTEhTcGVjaW1lbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9GUkRDUFNUcmF3bExIU3BlY2ltZW4uZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiQ1BTIFRyYXdsIExpZmUgSGlzdG9yeSBTcGVjaW1lbiBEYXRhIiwgIkluZGl2aWR1YWwgc3BlY2ltZW5zIG1lYXN1cmVkICh3ZWlnaHQgaW4gZ3JhbXMgYW5kIGxlbmd0aCBpbiBtbSkgYW5kIHNleGVkIGZyb20gbWFpbmx5IHRhcmdldGVkIHNwZWNpZXMgY2F1Z2h0IGR1cmluZyBTV0ZTQy1GUkQgZmlzaGVyeSBpbmRlcGVuZGVudCB0cmF3bCBzdXJ2ZXlzIG9mIGNvYXN0YWwgcGVsYWdpYyBzcGVjaWVzLiBJbmRpdmlkdWFscyBhcmUgY2F0ZWdvcml6ZWQgYXMgcmFuZG9tIG9yIG5vbi1yYW5kb20gc2FtcGxlcy4gRG9lcyBub3QgaW5jbHVkZSBzcGVjaWVzIHdpdGggbGVuZ3RoIGJpbnMgcmVjb3JkZWQgaW4gdGhlIENQUyBUcmF3bCBMaWZlIEhpc3RvcnkgTGVuZ3RoIEZyZXF1ZW5jeSBkYXRhc2V0LlxuXG5jZG1fZGF0YV90eXBlID0gT3RoZXJcblZBUklBQkxFUzpcbmNydWlzZVxuc2hpcFxuaGF1bCAoSGF1bCBOdW1iZXIpXG5jb2xsZWN0aW9uXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbml0aXNfdHNuIChJdGlzVFNOKVxuc2NpZW50aWZpY19uYW1lXG5zcGVjaW1lbl9udW1iZXJcbnNleFxuaXNfcmFuZG9tX3NhbXBsZVxud2VpZ2h0IChnKVxuc3RhbmRhcmRfbGVuZ3RoIChtbSlcbmZvcmtfbGVuZ3RoIChtbSlcbnRvdGFsX2xlbmd0aCAobW0pXG5tYW50bGVfbGVuZ3RoIChtbSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9GUkRDUFNUcmF3bExIU3BlY2ltZW5fZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL0ZSRENQU1RyYXdsTEhTcGVjaW1lbl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9GUkRDUFNUcmF3bExIU3BlY2ltZW4vaW5kZXguanNvbiIsICJodHRwczovL3N3ZnNjLm5vYWEuZ292L0ZSRC8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvRlJEQ1BTVHJhd2xMSFNwZWNpbWVuLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1GUkRDUFNUcmF3bExIU3BlY2ltZW4mc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQS1GaXNoZXJpZXMvU291dGh3ZXN0IEZpc2hlcmllcyBTY2llbmNlIENlbnRlciIsICJGUkRDUFNUcmF3bExIU3BlY2ltZW4iXSwKICAgICAgWyIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2Vjb2Nhc3RfaW5wdXRzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2Vjb2Nhc3RfaW5wdXRzLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkVjb2Nhc3Qgc3BlY2llcyB3ZWlnaHRpbmdzIGFuZCBlbnZpcm9ubWVudGFsIGRhdGEgZGF0ZXMiLCAiVGhlIGRhdGFzZXQgY29udGFpbnMgdGhlIHNwZWNpZXMgd2VpZ2h0aW5ncyBhbmQgdGhlIGRhdGVzIG9mIHRoZSBlbnZpcm9ubWVudGFsIGRhdGEgdXNlZCBmb3IgZWFjaCBFY29DYXN0IE1hcCBkYXRhc2V0IChodHRwczovL2NvYXN0d2F0Y2gucGZlZy5ub2FhLmdvdi9lcmRkYXAvZ3JpZGRhcC9lY29jYXN0KVxuXG5jZG1fZGF0YV90eXBlID0gR3JpZFxuVkFSSUFCTEVTOlxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRhdGVcbmJsdWVzaGFyayAoQmx1ZSBTaGFyayBCeWNhdGNoIE1vZGVsIFdlaWdodGluZylcbmJsdWVzaGFya1RSSyAoQmx1ZSBTaGFyayBUcmFja2luZyBNb2RlbCBXZWlnaHRpbmcpXG5zZWFsaW9ucyAoQ2FsaWZvcm5pYSBTZWEgTGlvbnMgVHJhY2tpbmcgTW9kZWwgV2VpZ2h0aW5nKVxubGVhdGhlcmJhY2tzIChMZWF0aGVyYmFjayBUdXJ0bGVzIE1vZGVsIFdlaWdodGluZylcbnN3b3JkZmlzaCAoU3dvcmRmaXNoIE1vZGVsIFdlaWdodGluZylcbnNzdF90aW1lIChEYXRlIG9mIFNlYSBTdXJmYWNlIFRlbXBlcmF0dXJlIERhdGEsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5jaGxfdGltZSAoRGF0ZSBvZiBDaGxvcm9waHlsbC1hIERhdGEsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5la2VfdGltZSAoRGF0ZSBvZiBFZGR5IEtpbmV0aWMgRW5lcmd5IERhdGEsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zc2hfdGltZSAoRGF0ZSBvZiBTZWEgU3VyZmFjZSBIZWlnaHQgRGF0YSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbndpbmRfdGltZSAoRGF0ZSBvZiBXaW5kIERhdGEsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG4iLCAiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2Vjb2Nhc3RfaW5wdXRzL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9jb2FzdHdhdGNoLnBmZWcubm9hYS5nb3YvZWNvY2FzdCIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9lY29jYXN0X2lucHV0cy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZWNvY2FzdF9pbnB1dHMmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBOTUZTIFNXRlNDIEVSRCIsICJlY29jYXN0X2lucHV0cyJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcHJib1NlZmlEaWV0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3ByYm9TZWZpRGlldC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJGYXJhbGxvbiBJc2xhbmQgU2VhYmlyZCBEaWV0IFN1bW1hcnkiLCAiRGlldCBzdW1tYXJ5IGRhdGEgZm9yIENhc3NpbidzIEF1a2xldHMsIENvbW1vbiBNdXJyZXMsIFBpZ2VvbiBHdWlsbGVtb3RzLCBhbmQgUmhpbm9jZXJvcyBBdWtsZXRzIGZyb20gdGhlIEZhcmFsbG9uIElzbGFuZHMuIERhdGEgcHJlc2VudGVkIGFyZSB0aGUgcHJvcG9ydGlvbiBieSBudW1iZXIgb2YgdGhlIG1vc3QgaW1wb3J0YW50IHByZXkgaXRlbXMgZm9yIGVhY2ggc3BlY2llcy5cblxuVGhlIHByb3BvcnRpb25zIHByZXNlbnRlZCBpbiB0aGlzIHRhYmxlIGFyZSBkZWZpbmVkIGFzIHRoZSBudW1iZXIgb2YgdGhlIHNwZWNpZmljIHByZXkgaXRlbXMgb2JzZXJ2ZWQgZGl2aWRlZCBieSB0aGUgdG90YWwgbnVtYmVyIG9mIGlkZW50aWZpZWQgcHJleSBpdGVtcyBmb3IgdGhhdCBzZWFzb24uIERhdGEgZm9yIHRoZSBtb3N0IGltcG9ydGFudCBwcmV5IHNwZWNpZXMgYXJlIHByZXNlbnRlZCBoZXJlIHdpdGggYWxsIG90aGVyIHByZXkgbHVtcGVkIHRvZ2V0aGVyIGFzIFwib3RoZXJcIi4gU2VlIHRoZSBTRUZJIFJlc2VhcmNoIFBsYW5zIGFuZCBQcm90b2NvbHMgZG9jdW1lbnQgdW5kZXIgUmVzZWFyY2ggVG9vbHMgZm9yIG1vcmUgaW5mb3JtYXRpb24gb24gaG93IGRpZXQgZGF0YSBpcyBjb2xsZWN0ZWQgZm9yIGVhY2ggc3BlY2llcy5cblxuY2RtX2RhdGFfdHlwZSA9IE90aGVyXG5WQVJJQUJMRVM6XG55ZWFyXG5SSEFVX1JvY2tmaXNoIChSb2NrZmlzaCBpbiBSaGlub2Nlcm9zIEF1a2xldCdzIERpZXQsIHBlcmNlbnQpXG5SSEFVX0FuY2hvdnkgKEFuY2hvdnkgaW4gUmhpbm9jZXJvcyBBdWtsZXQncyBEaWV0LCBwZXJjZW50KVxuUkhBVV9TYXVyeSAoU2F1cnkgaW4gUmhpbm9jZXJvcyBBdWtsZXQncyBEaWV0LCBwZXJjZW50KVxuUkhBVV9PdGhlciAoT3RoZXIgaW4gUmhpbm9jZXJvcyBBdWtsZXQncyBEaWV0LCBwZXJjZW50KVxuQ09NVV9Sb2NrZmlzaCAoUm9ja2Zpc2ggaW4gQ29tbW9uIE11cnJlJ3MgRGlldCwgcGVyY2VudClcbkNPTVVfQW5jaG92eVNhcmRpbmUgKEFuY2hvdnkmU2FyZGluZSBpbiBDb21tb24gTXVycmUncyBEaWV0LCBwZXJjZW50KVxuQ09NVV9PdGhlciAoT3RoZXIgaW4gQ29tbW9uIE11cnJlJ3MgRGlldCwgcGVyY2VudClcblBJR1VfUm9ja2Zpc2ggKFJvY2tmaXNoIGluIFBpZ2VvbiBHdWlsbGVtb3QncyBEaWV0LCBwZXJjZW50KVxuUElHVV9TY3VscGluIChTY3VscGluIGluIFBpZ2VvbiBHdWlsbGVtb3QncyBEaWV0LCBwZXJjZW50KVxuUElHVV9GbGF0ZmlzaCAoRmxhdGZpc2ggaW4gUGlnZW9uIEd1aWxsZW1vdCdzIERpZXQsIHBlcmNlbnQpXG5QSUdVX090aGVyIChPdGhlciBpbiBQaWdlb24gR3VpbGxlbW90J3MgRGlldCwgcGVyY2VudClcbkNBQVVfRXVwYWh1c2lpZHMgKEV1cGFodXNpaWRzIGluIENhc3NpbidzIEF1a2xldCdzIERpZXQsIHBlcmNlbnQpXG5DQUFVX015c2lpZHMgKE15c2lpZHMgaW4gQ2Fzc2luJ3MgQXVrbGV0J3MgRGlldCwgcGVyY2VudClcbkNBQVVfQW1waGlwb2RzIChBbXBoaXBvZHMgaW4gQ2Fzc2luJ3MgQXVrbGV0J3MgRGlldCwgcGVyY2VudClcbkNBQVVfUGljZXMgKFBpY2VzIGluIENhc3NpbidzIEF1a2xldCdzIERpZXQsIHBlcmNlbnQpXG5DQUFVX090aGVyIChPdGhlciBpbiBDYXNzaW4ncyBBdWtsZXQncyBEaWV0LCBwZXJjZW50KVxuIiwgIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wcmJvU2VmaURpZXQvaW5kZXguanNvbiIsICJodHRwOi8vZGF0YS5wcmJvLm9yZy9jYWRjMi9pbmRleC5waHA/bWFjdD1MaW5rZWRBcnRpY2xlcyxjbnRudDAxLGRldGFpbCwwJmNudG50MDFhcnRpY2xlX2lkPTE1NSZjbnRudDAxcmV0dXJuaWQ9MTUwIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3ByYm9TZWZpRGlldC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cHJib1NlZmlEaWV0JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIlBSQk8iLCAicHJib1NlZmlEaWV0Il0sCiAgICAgIFsiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wcmJvU2VmaVBoZW4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcHJib1NlZmlQaGVuLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkZhcmFsbG9uIElzbGFuZCBTZWFiaXJkIFBoZW5vbG9neSBTdW1tYXJ5IiwgIlBoZW5vbG9neSAodGltaW5nIG9mIGJyZWVkaW5nKSBzdW1tYXJ5IGRhdGEgZm9yIEJyYW5kdCdzIENvcm1vcmFudCwgQ2Fzc2luJ3MgQXVrbGV0LCBDb21tb24gTXVycmUsIFBpZ2VvbiBHdWlsbGVtb3QsIGFuZCBSaGlub2Nlcm9zIEF1a2xldCBicmVlZGluZyBhdCB0aGUgRmFyYWxsb24gSXNsYW5kcy4gRGF0YSBwcmVzZW50ZWQgYXJlIGFubnVhbCBtZWFuIGxheWluZyBkYXRlIGZvciB0aGUgZmlyc3Qgb3Igb25seSBlZ2cgbGFpZCBhbG9uZyB3aXRoIHRoZSBzdGFuZGFyZCBkZXZpYXRpb24uXG5cblRoZSBtZWFuIGxheWluZyBkYXRlIGlzIGNhbGN1bGF0ZWQgZnJvbSBhbGwgc2l0ZXMgd2hlcmUgdGhlIGV4YWN0IGxheWluZyBkYXRlIGlzIGtub3duIHdpdGhpbiB0aGUgY2hlY2sgcGVyaW9kIGZvciB0aGF0IHNwZWNpZXMgKDEtNSBkYXlzKS4gVGhlIG1lYW4gbGF5IGRhdGVzIGFyZSBwcmVzZW50ZWQgYXMganVsaWFuIGRhdGVzIChkYXkgb2YgeWVhcikgYW5kIHRoZSBzdGFuZGFyZCBkZXZpYXRpb24gaXMgaW4gZGF5cy4gU2VlIHRoZSBTRUZJIFJlc2VhcmNoIFBsYW5zIGFuZCBQcm90b2NvbHMgZG9jdW1lbnQgdW5kZXIgUmVzZWFyY2ggVG9vbHMgZm9yIG1vcmUgaW5mb3JtYXRpb24gb24gaG93IGxheSBkYXRlcyBhcmUgZGV0ZXJtaW5lZCBmb3IgZWFjaCBzcGVjaWVzLlxuXG5jZG1fZGF0YV90eXBlID0gT3RoZXJcblZBUklBQkxFUzpcbnllYXJcbkJSQUNfbWVhbiAoQnJhbmR0J3MgQ29ybW9yYW50IE1lYW4sIGRheV9vZl95ZWFyKVxuQlJBQ19zZCAoQnJhbmR0J3MgQ29ybW9yYW50IFN0YW5kYXJkIERldmlhdGlvbiwgZGF5cylcbkNBQVVfbWVhbiAoQ2Fzc2luJ3MgQXVrbGV0IE1lYW4sIGRheV9vZl95ZWFyKVxuQ0FBVV9zZCAoQ2Fzc2luJ3MgQXVrbGV0IFN0YW5kYXJkIERldmlhdGlvbiwgZGF5cylcbkNPTVVfbWVhbiAoQ29tbW9uIE11cnJlIE1lYW4sIGRheV9vZl95ZWFyKVxuQ09NVV9zZCAoQ29tbW9uIE11cnJlIFN0YW5kYXJkIERldmlhdGlvbiwgZGF5cylcblBJR1VfbWVhbiAoUGlnZW9uIEd1aWxsZW1vdCBNZWFuLCBkYXlfb2ZfeWVhcilcblBJR1Vfc2QgKFBpZ2VvbiBHdWlsbGVtb3QgU3RhbmRhcmQgRGV2aWF0aW9uLCBkYXlzKVxuUkhBVV9tZWFuIChSaGlub2Nlcm9zIEF1a2xldCBNZWFuLCBkYXlfb2ZfeWVhcilcblJIQVVfc2QgKFJoaW5vY2Vyb3MgQXVrbGV0IFN0YW5kYXJkIERldmlhdGlvbiwgZGF5cylcbiIsICIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcHJib1NlZmlQaGVuL2luZGV4Lmpzb24iLCAiaHR0cDovL2RhdGEucHJiby5vcmcvY2FkYzIvaW5kZXgucGhwP21hY3Q9TGlua2VkQXJ0aWNsZXMsY250bnQwMSxkZXRhaWwsMCZjbnRudDAxYXJ0aWNsZV9pZD0xNTYmY250bnQwMXJldHVybmlkPTE1MCIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wcmJvU2VmaVBoZW4ucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXByYm9TZWZpUGhlbiZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJQUkJPIiwgInByYm9TZWZpUGhlbiJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcHJib1NlZmlQb3AiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcHJib1NlZmlQb3AuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiRmFyYWxsb24gSXNsYW5kIFNlYWJpcmQgUG9wdWxhdGlvbiBTdW1tYXJ5IiwgIkFubnVhbCBicmVlZGluZyBwb3B1bGF0aW9uIGVzdGltYXRlcyBmb3IgQnJhbmR0J3MgQ29ybW9yYW50LCBDYXNzaW4ncyBBdWtsZXQsIENvbW1vbiBNdXJyZSwgRG91YmxlLWNyZXN0ZWQgQ29ybW9yYW50LCBQZWxhZ2ljIENvcm1vcmFudCwgUGlnZW9uIEd1aWxsZW1vdCwgVHVmdGVkIFB1ZmZpbiwgYW5kIFdlc3Rlcm4gR3VsbCBhdCB0aGUgRmFyYWxsb24gSXNsYW5kcy4gRGF0YSBwcmVzZW50ZWQgYXJlIHRoZSBudW1iZXIgb2YgYnJlZWRpbmcgYWR1bHRzIGVzdGltYXRlZCBmb3IgZWFjaCBzZWFzb24uXG5cbkJyZWVkaW5nIHBvcHVsYXRpb24gZXN0aW1hdGVzIGZvciBtb3N0IHNwZWNpZXMgYXJlIGJhc2VkIG9uIGVpdGhlciBkaXJlY3QgY291bnRzIG9mIGFuaW1hbHMgb3IgbmVzdHMuIENhc3NpbidzIGF1a2xldCBlc3RpbWF0ZXMgYXJlIGJhc2VkIG9uIHRoZSBwZXJjZW50IGNoYW5nZSBpbiBidXJyb3cvY3JldmljZSBkZW5zaXR5IHdpdGhpbiBhIHNlcmllcyBvZiBpbmRleCBwbG90cy4gVGhpcyByZWxhdGl2ZSBjaGFuZ2UgaXMgdGhlbiBhcHBsaWVkIHRvIHRoZSBsYXN0IGZ1bGwgY2Vuc3VzIGZyb20gMTk4OSB0byBhcnJpdmUgYXQgYSBjdXJyZW50IHBvcHVsYXRpb24gZXN0aW1hdGUuIFNlZSB0aGUgU0VGSSBSZXNlYXJjaCBQbGFucyBhbmQgUHJvdG9jb2xzIGRvY3VtZW50IHVuZGVyIFJlc2VhcmNoIFRvb2xzIGZvciBtb3JlIGluZm9ybWF0aW9uIG9uIGhvdyB0aGVzZSBlc3RpbWF0ZXMgd2VyZSBkZXRlcm1pbmVkLlxuXG5Ob3RlOiBDYXNzaW4ncyBhdWtsZXQgcG9wdWxhdGlvbiBlc3RpbWF0ZSBpcyBmb3IgU291dGhlYXN0IEZhcmFsbG9uIElzbGFuZCBvbmx5LlxuXG5jZG1fZGF0YV90eXBlID0gT3RoZXJcblZBUklBQkxFUzpcbnllYXJcbkJSQUMgKFBvcHVsYXRpb24gb2YgQnJhbmR0J3MgQ29ybW9yYW50LCBjb3VudClcbkNBQVUgKFBvcHVsYXRpb24gb2YgQ2Fzc2luJ3MgQXVrbGV0LCBjb3VudClcbkNPTVUgKFBvcHVsYXRpb24gb2YgQ29tbW9uIE11cnJlLCBjb3VudClcbkRDQ08gKFBvcHVsYXRpb24gb2YgRG91YmxlLWNyZXN0ZWQgQ29ybW9yYW50LCBjb3VudClcblBFQ08gKFBvcHVsYXRpb24gb2YgUGVsYWdpYyBDb3Jtb3JhbnQsIGNvdW50KVxuUElHVSAoUG9wdWxhdGlvbiBvZiBQaWdlb24gR3VpbGxlbW90LCBjb3VudClcblRVUFUgKFBvcHVsYXRpb24gb2YgVHVmdGVkIFB1ZmZpbiwgY291bnQpXG5XRUdVIChQb3B1bGF0aW9uIG9mIFdlc3Rlcm4gR3VsbCwgY291bnQpXG4iLCAiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3ByYm9TZWZpUG9wL2luZGV4Lmpzb24iLCAiaHR0cDovL2RhdGEucHJiby5vcmcvY2FkYzIvaW5kZXgucGhwP21hY3Q9TGlua2VkQXJ0aWNsZXMsY250bnQwMSxkZXRhaWwsMCZjbnRudDAxYXJ0aWNsZV9pZD0xNTQmY250bnQwMXJldHVybmlkPTE1MCIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wcmJvU2VmaVBvcC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cHJib1NlZmlQb3Amc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiUFJCTyIsICJwcmJvU2VmaVBvcCJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcHJib1NlZmlQcm9kIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3ByYm9TZWZpUHJvZC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJGYXJhbGxvbiBJc2xhbmQgU2VhYmlyZCBQcm9kdWN0aXZpdHkgU3VtbWFyeSIsICJBbm51YWwgbWVhbiBwcm9kdWN0aXZpdHkgZm9yIEFzaHkgU3Rvcm0tcGV0cmVsLCBCcmFuZHQncyBDb3Jtb3JhbnQsIENhc3NpbidzIEF1a2xldCwgQ29tbW9uIE11cnJlLCBQZWxhZ2ljIENvcm1vcmFudCwgUGlnZW9uIEd1aWxsZW1vdCwgUmhpbm9jZXJvcyBBdWtsZXQgYW5kIFdlc3Rlcm4gR3VsbCBicmVlZGluZyBvbiB0aGUgRmFyYWxsb24gSXNsYW5kcy4gRGF0YSBwcmVzZW50ZWQgYXJlIHRoZSBtZWFuIG51bWJlciBvZiBjaGlja3MgZmxlZGdlZCBwZXIgYnJlZWRpbmcgcGFpciBhbG9uZyB3aXRoIHRoZSBzdGFuZGFyZCBkZXZpYXRpb24uXG5cbk1lYW4gYW5udWFsIHByb2R1Y3Rpdml0eSAobnVtYmVyIG9mIGNoaWNrcyBmbGVkZ2VkIHBlciBicmVlZGluZyBwYWlyKSBpcyBkZXRlcm1pbmVkIHRocm91Z2ggcmVndWxhciBjaGVja3Mgb2YgYnJlZWRpbmcgc2l0ZXMgYW5kIGluY2x1ZGVzIGRhdGEgZnJvbSBhbGwgYnJlZWRpbmcgYXR0ZW1wdHMgd2l0aGluIHRoYXQgc2Vhc29uLiBTZWUgdGhlIFNFRkkgUmVzZWFyY2ggUGxhbnMgYW5kIFByb3RvY29scyBkb2N1bWVudCB1bmRlciBSZXNlYXJjaCBUb29scyBmb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBob3cgdGhlc2UgZXN0aW1hdGVzIHdlcmUgZGV0ZXJtaW5lZC5cblxuY2RtX2RhdGFfdHlwZSA9IE90aGVyXG5WQVJJQUJMRVM6XG55ZWFyXG5BU1NQX3JzIChBc2h5IFN0b3JtLXBldHJlbCBDaGlja3MgcGVyIEJyZWVkaW5nIFBhaXIsIG1lYW4pXG5BU1NQX3NkIChBc2h5IFN0b3JtLXBldHJlbCBTdGFuZGFyZCBEZXZpYXRpb24pXG5CUkFDX3JzIChCcmFuZHQncyBDb3Jtb3JhbnQgQ2hpY2tzIHBlciBCcmVlZGluZyBQYWlyLCBtZWFuKVxuQlJBQ19zZCAoQnJhbmR0J3MgQ29ybW9yYW50IFN0YW5kYXJkIERldmlhdGlvbilcbkNBQVVfcnMgKENhc3NpbidzIEF1a2xldCBDaGlja3MgcGVyIEJyZWVkaW5nIFBhaXIsIG1lYW4pXG5DQUFVX3NkIChDYXNzaW4ncyBBdWtsZXQgU3RhbmRhcmQgRGV2aWF0aW9uKVxuQ09NVV9ycyAoQ29tbW9uIE11cnJlIENoaWNrcyBwZXIgQnJlZWRpbmcgUGFpciwgbWVhbilcbkNPTVVfc2QgKENvbW1vbiBNdXJyZSBTdGFuZGFyZCBEZXZpYXRpb24pXG5QSUdVX3JzIChQaWdlb24gR3VpbGxlbW90IENoaWNrcyBwZXIgQnJlZWRpbmcgUGFpciwgbWVhbilcblBJR1Vfc2QgKFBpZ2VvbiBHdWlsbGVtb3QgU3RhbmRhcmQgRGV2aWF0aW9uKVxuUEVDT19ycyAoUGVsYWdpYyBDb3Jtb3JhbnQgQ2hpY2tzIHBlciBCcmVlZGluZyBQYWlyLCBtZWFuKVxuUEVDT19zZCAoUGVsYWdpYyBDb3Jtb3JhbnQgU3RhbmRhcmQgRGV2aWF0aW9uKVxuUkhBVV9ycyAoUmhpbm9jZXJvcyBBdWtsZXQgQ2hpY2tzIHBlciBCcmVlZGluZyBQYWlyLCBtZWFuKVxuUkhBVV9zZCAoUmhpbm9jZXJvcyBBdWtsZXQgU3RhbmRhcmQgRGV2aWF0aW9uKVxuV0VHVV9ycyAoV2VzdGVybiBHdWxsIENoaWNrcyBwZXIgQnJlZWRpbmcgUGFpciwgbWVhbilcbldFR1Vfc2QgKFdlc3Rlcm4gR3VsbCBTdGFuZGFyZCBEZXZpYXRpb24pXG4iLCAiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3ByYm9TZWZpUHJvZC9pbmRleC5qc29uIiwgImh0dHA6Ly9kYXRhLnByYm8ub3JnL2NhZGMyL2luZGV4LnBocD9tYWN0PUxpbmtlZEFydGljbGVzLGNudG50MDEsZGV0YWlsLDAmY250bnQwMWFydGljbGVfaWQ9MTUzJmNudG50MDFyZXR1cm5pZD0xNTAiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcHJib1NlZmlQcm9kLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wcmJvU2VmaVByb2Qmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiUFJCTyIsICJwcmJvU2VmaVByb2QiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvc2NyaXBwc0dsaWRlcnMuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3NjcmlwcHNHbGlkZXJzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3NjcmlwcHNHbGlkZXJzLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkdsaWRlcnMsIFNjcmlwcHMgSW5zdGl0dXRpb24gb2YgT2NlYW5vZ3JhcGh5LCAyMDE0LXByZXNlbnQiLCAiU3ByYXkgZ2xpZGVyIGRhdGEgZnJvbSBTY3JpcHBzIEluc3RpdHV0aW9uIG9mIE9jZWFub2dyYXBoeSwgSW5zdHJ1bWVudCBEZXZlbG9wbWVudCBHcm91cC4gR2xpZGVycyBhcmUgc21hbGwsIGZyZWUtc3dpbW1pbmcsIHVubWFubmVkIHZlaGljbGVzIHRoYXQgdXNlIGNoYW5nZXMgaW4gYnVveWFuY3kgdG8gbW92ZSB2ZXJ0aWNhbGx5IGFuZCBob3Jpem9udGFsbHkgdGhyb3VnaCB0aGUgd2F0ZXIgY29sdW1uIGluIGEgc2F3LXRvb3RoIHBhdHRlcm4uIFRoZXkgYXJlIGRlcGxveWVkIGZvciBkYXlzIHRvIHNldmVyYWwgbW9udGhzIGFuZCBnYXRoZXIgZGV0YWlsZWQgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHBoeXNpY2FsLCBjaGVtaWNhbCBhbmQgYmlvbG9naWNhbCBwcm9jZXNzZXMgb2YgdGhlIHdvcmxkJ3Mgb2NlYW5zLlxuXG5jZG1fZGF0YV90eXBlID0gVHJhamVjdG9yeVByb2ZpbGVcblZBUklBQkxFUzpcbnRyYWplY3RvcnkgKFRyYWplY3RvcnkgTmFtZSlcbmluc3RpdHV0aW9uXG5wbGF0Zm9ybV9pZFxucGxhdGZvcm1fdHlwZVxud21vX2lkXG5jdGRfbWFrZV9tb2RlbCAoQ1REIE1ha2UgYW5kIE1vZGVsKVxuc2VnbWVudF9pZFxudGltZV91diAoRGVwdGgtYXZlcmFnZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxhdF91diAoRGVwdGgtYXZlcmFnZWQgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG5sb25fdXYgKERlcHRoLWF2ZXJhZ2VkIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxudSAoRGVwdGgtYXZlcmFnZWQgRWFzdHdhcmQgU2VhIFdhdGVyIFZlbG9jaXR5LCBtIHMtMSlcbnYgKERlcHRoLWF2ZXJhZ2VkIE5vcnRod2FyZCBTZWEgV2F0ZXIgVmVsb2NpdHksIG0gcy0xKVxudXZfcWMgKHV2IFF1YWxpdHkgRmxhZylcbnByb2ZpbGVfaWRcbnByb2ZpbGVfcWMgKFByb2ZpbGUgdGltZSwgbGF0aXR1ZGUsIGxvbmdpdHVkZSBRdWFsaXR5IEZsYWcpXG50aW1lIChQcm9maWxlIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoUHJvZmlsZSBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoUHJvZmlsZSBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmRlcHRoIChtKVxuZF9xYyAoZGVwdGggcXVhbGl0eSBmbGFnKVxucHJlc3N1cmUgKFNlYSBXYXRlciBQcmVzc3VyZSwgZGJhcilcbnBfcWMgKHByZXNzdXJlIHF1YWxpdHkgZmxhZylcbnRlbXBlcmF0dXJlIChTZWEgV2F0ZXIgVGVtcGVyYXR1cmUsIENlbHNpdXMpXG4uLi4gKDExIG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3NjcmlwcHNHbGlkZXJzX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9zY3JpcHBzR2xpZGVyc19pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9zY3JpcHBzR2xpZGVycy9pbmRleC5qc29uIiwgImh0dHA6Ly9zcHJheS51Y3NkLmVkdSIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9zY3JpcHBzR2xpZGVycy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9c2NyaXBwc0dsaWRlcnMmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiU2NyaXBwcyBJbnN0aXR1dGlvbiBvZiBPY2Vhbm9ncmFwaHkiLCAic2NyaXBwc0dsaWRlcnMiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkR3RzcHBCZXN0LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRHdHNwcEJlc3QiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkR3RzcHBCZXN0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkdsb2JhbCBUZW1wZXJhdHVyZSBhbmQgU2FsaW5pdHkgUHJvZmlsZSBQcm9ncmFtbWUgKEdUU1BQKSBEYXRhLCAxOTg1LXByZXNlbnQiLCAiVGhlIEdsb2JhbCBUZW1wZXJhdHVyZS1TYWxpbml0eSBQcm9maWxlIFByb2dyYW1tZSAoR1RTUFApIGRldmVsb3BzIGFuZCBtYWludGFpbnMgYSBnbG9iYWwgb2NlYW4gdGVtcGVyYXR1cmUgYW5kIHNhbGluaXR5IHJlc291cmNlIHdpdGggZGF0YSB0aGF0IGFyZSBib3RoIHVwLXRvLWRhdGUgYW5kIG9mIHRoZSBoaWdoZXN0IHF1YWxpdHkuIEl0IGlzIGEgam9pbnQgV29ybGQgTWV0ZW9yb2xvZ2ljYWwgT3JnYW5pemF0aW9uIChXTU8pIGFuZCBJbnRlcmdvdmVybm1lbnRhbCBPY2Vhbm9ncmFwaGljIENvbW1pc3Npb24gKElPQykgcHJvZ3JhbS4gIEl0IGluY2x1ZGVzIGRhdGEgZnJvbSBYQlRzLCBDVERzLCBtb29yZWQgYW5kIGRyaWZ0aW5nIGJ1b3lzLCBhbmQgUEFMQUNFIGZsb2F0cy4gRm9yIGluZm9ybWF0aW9uIGFib3V0IG9yZ2FuaXphdGlvbnMgY29udHJpYnV0aW5nIGRhdGEgdG8gR1RTUFAsIHNlZSBodHRwOi8vZ29zaWMub3JnL2dvb3MvR1RTUFAtZGF0YS1mbG93Lmh0bSAuICBUaGUgVS5TLiBOYXRpb25hbCBPY2Vhbm9ncmFwaGljIERhdGEgQ2VudGVyIChOT0RDKSBtYWludGFpbnMgdGhlIEdUU1BQIENvbnRpbnVvdXNseSBNYW5hZ2VkIERhdGEgQmFzZSBhbmQgcmVsZWFzZXMgbmV3ICdiZXN0LWNvcHknIGRhdGEgb25jZSBwZXIgbW9udGguXG5cbldBUk5JTkc6IFRoaXMgZGF0YXNldCBoYXMgYSAqbG90KiBvZiBkYXRhLiAgSWYgeW91IHJlcXVlc3QgdG9vIG11Y2ggZGF0YSwgeW91ciByZXF1ZXN0IHdpbGwgZmFpbC5cbiogSWYgeW91IGRvbid0IHNwZWNpZnkgYSBsb25naXR1ZGUgYW5kIGxhdGl0dWRlIGJvdW5kaW5nIGJveCwgZG9uJ3QgcmVxdWVzdCBtb3JlIHRoYW4gYSBtb250aCdzIGRhdGEgYXQgYSB0aW1lLlxuKiBJZiB5b3UgZG8gc3BlY2lmeSBhIGxvbmdpdHVkZSBhbmQgbGF0aXR1ZGUgYm91bmRpbmcgYm94LCB5b3UgY2FuIHJlcXVlc3QgZGF0YSBmb3IgYSBwcm9wb3J0aW9uYWxseSBsb25nZXIgdGltZSBwZXJpb2QuXG5SZXF1ZXN0aW5nIGRhdGEgZm9yIGEgc3BlY2lmaWMgc3RhdGlvbl9pZCBtYXkgYmUgc2xvdywgYnV0IGl0IHdvcmtzLlxuXG4qKiogVGhpcyBFUkREQVAgZGF0YXNldCBoYXMgZGF0YSBmb3IgdGhlIGVudGlyZSB3b3JsZCBmb3IgYWxsIGF2YWlsYWJsZSB0aW1lcyAoY3VycmVudGx5LCB1cCB0byBhbmQgaW5jbHVkaW5nIHRoZSBNYXJjaCAyMDE5IGRhdGEpIGJ1dCBpcyBhIHN1YnNldCBvZiB0aGUgb3JpZ2luYWwgTk9EQyAnYmVzdC1jb3B5JyBkYXRhLiAgSXQgb25seSBpbmNsdWRlcyBkYXRhIHdoZXJlIHRoZSBxdWFsaXR5IGZsYWdzIGluZGljYXRlIHRoZSBkYXRhIGlzIDE9Q09SUkVDVCwgMj1QUk9CQUJMWSBHT09ELCBvciA1PU1PRElGSUVELiBJdCBkb2VzIG5vdCBpbmNsdWRlIHNvbWUgb2YgdGhlIG1ldGFkYXRhLCBhbnkgb2YgdGhlIGhpc3RvcnkgZGF0YSwgb3IgYW55IG9mIHRoZSBxdWFsaXR5IGZsYWcgZGF0YSBvZiB0aGUgb3JpZ2luYWwgZGF0YXNldC4gWW91IGNhbiBhbHdheXMgZ2V0IHRoZSBjb21wbGV0ZSwgdXAtdG8tZGF0ZSBkYXRhc2V0IChhbmQgYWRkaXRpb25hbCwgbmVhci1yZWFsLXRpbWUgZGF0YSkgZnJvbSB0aGUgc291cmNlOiBodHRwczovL3d3dy5ub2RjLm5vYWEuZ292L0dUU1BQLyAuICBTcGVjaWZpYyBkaWZmZXJlbmNlcyBhcmU6XG4qIFByb2ZpbGVzIHdpdGggYSBwb3NpdGlvbl9xdWFsaXR5X2ZsYWcgb3IgYSB0aW1lX3F1YWxpdHlfZmxhZyBvdGhlciB0aGFuIDF8Mnw1IHdlcmUgcmVtb3ZlZC5cbiogUm93cyB3aXRoIGEgZGVwdGggKHopIHZhbHVlIGxlc3MgdGhhbiAtMC40IG9yIGdyZWF0ZXIgdGhhbiAxMDAwMCBvciBhIHpfdmFyaWFibGVfcXVhbGl0eV9mbGFnIG90aGVyIHRoYW4gMXwyfDUgd2VyZSByZW1vdmVkLlxuKiBUZW1wZXJhdHVyZSB2YWx1ZXMgbGVzcyB0aGFuIC00IG9yIGdyZWF0ZXIgdGhhbiA0MCBvciB3aXRoIGEgdGVtcGVyYXR1cmVfcXVhbGl0eV9mbGFnIG90aGVyIHRoYW4gMXwyfDUgd2VyZSBzZXQgdG8gTmFOLlxuKiBTYWxpbml0eSB2YWx1ZXMgbGVzcyB0aGFuIDAgb3IgZ3JlYXRlciB0aGFuIDQxIG9yIHdpdGggYSBzYWxpbml0eV9xdWFsaXR5X2ZsYWcgb3RoZXIgdGhhbiAxfDJ8NSB3ZXJlIHNldCB0byBOYU4uXG4qIFRpbWUgdmFsdWVzIHdlcmUgY29udmVydGVkIGZyb20gXCJkYXlzIHNpbmNlIDE5MDAtMDEtMDEgMDA6MDA6MDBcIiB0byBcInNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFwiLlxuXG5TZWUgdGhlIFF1YWxpdHkgRmxhZyBkZWZpbml0aW9ucyBvbiBwYWdlIDUgYW5kIFwiVGFibGUgMi4xOiBHbG9iYWwgSW1wb3NzaWJsZSBQYXJhbWV0ZXIgVmFsdWVzXCIgb24gcGFnZSA2MSBvZlxuaHR0cHM6Ly93d3cubm9kYy5ub2FhLmdvdi9HVFNQUC9kb2N1bWVudC9xY21hbnMvR1RTUFBfUlRfUUNfTWFudWFsXzIwMDkwOTE2LnBkZiAuXG5UaGUgUXVhbGl0eSBGbGFnIGRlZmluaXRpb25zIGFyZSBhbHNvIGF0XG5odHRwczovL3d3dy5ub2RjLm5vYWEuZ292L0dUU1BQL2RvY3VtZW50L3FjbWFucy9xY2ZsYWdzLmh0bSAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUcmFqZWN0b3J5UHJvZmlsZVxuVkFSSUFCTEVTOlxudHJhamVjdG9yeSAoVHJhamVjdG9yeSBJRClcbi4uLiAoMTEgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkR3RzcHBCZXN0X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRHdHNwcEJlc3RfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkR3RzcHBCZXN0L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cubm9kYy5ub2FhLmdvdi9HVFNQUC8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkR3RzcHBCZXN0LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1lcmRHdHNwcEJlc3Qmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBOT0RDIiwgImVyZEd0c3BwQmVzdCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRHbG9iZWNNb2MxLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRHbG9iZWNNb2MxIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZEdsb2JlY01vYzEuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiR0xPQkVDIE5FUCBNT0NORVNTIFBsYW5rdG9uIChNT0MxKSBEYXRhLCAyMDAwLTIwMDIiLCAiR0xPQkVDIChHTE9CYWwgT2NlYW4gRUNvc3lzdGVtcyBEeW5hbWljcykgTkVQIChOb3J0aGVhc3QgUGFjaWZpYykgQ2FsaWZvcm5pYSBDdXJyZW50IFByb2dyYW1cbk1PQ05FU1MgUGxhbmt0b24gKE1PQzEpIERhdGFcblRoZSBNT0NORVNTIGlzIGJhc2VkIG9uIHRoZSBUdWNrZXIgVHJhd2wgcHJpbmNpcGxlIChUdWNrZXIsIDE5NTEpLiBUaGUgTU9DTkVTUy0xIGhhcyBuaW5lIHJlY3Rhbmd1bGFyIG5ldHMgKDFtIHggMS40IG0pIHdoaWNoIGFyZSBvcGVuZWQgYW5kIGNsb3NlZCBzZXF1ZW50aWFsbHkgYnkgY29tbWFuZHMgdGhyb3VnaCBjb25kdWN0aW5nIGNhYmxlIGZyb20gdGhlIHN1cmZhY2UgKFdpZWJlIGV0IGFsLiwgMTk3NikuIEluIE1PQ05FU1Mgc3lzdGVtcywgXCJ0aGUgdW5kZXJ3YXRlciB1bml0IHNlbmRzIGEgZGF0YSBmcmFtZSwgY29tcHJpc2VkIG9mIHRlbXBlcmF0dXJlLCBkZXB0aCwgY29uZHVjdGl2aXR5LCBuZXQtZnJhbWUgYW5nbGUsIGZsb3cgY291bnQsIHRpbWUsIG51bWJlciBvZiBvcGVuIG5ldCwgYW5kIG5ldCBvcGVuaW5nL2Nsb3NpbmcsIHRvIHRoZSBkZWNrIHVuaXQgaW4gYSBjb21wcmVzc2VkIGhleGFkZWNpbWFsIGZvcm1hdCBldmVyeSAyIHNlY29uZHMgYW5kIGZyb20gdGhlIGRlY2sgdW5pdCB0byBhIG1pY3JvY29tcHV0ZXIgZXZlcnkgNCBzZWNvbmRzLi4uIFRlbXBlcmF0dXJlICh0byBhcHByb3hpbWF0ZWx5IDAuMDEgZGVnIEMpIGFuZCBjb25kdWN0aXZpdHkgYXJlIG1lYXN1cmVkIHdpdGggU0VBQklSRCBzZW5zb3JzLiBOb3JtYWxseSwgYSBtb2RpZmllZCBULlMuSy4tZmxvd21ldGVyIGlzIHVzZWQuLi4gQm90aCB0aGUgdGVtcGVyYXR1cmUgYW5kIGNvbmR1Y3Rpdml0eSBzZW5zb3JzIGFuZCB0aGUgZmxvd21ldGVyIGFyZSBtb3VudGVkIG9uIHRvcCBvZiB0aGUgZnJhbWUgc28gdGhhdCB0aGV5IGZhY2UgaG9yaXpvbnRhbGx5IHdoZW4gdGhlIGZyYW1lIGlzIGF0IGEgdG93aW5nIGFuZ2xlIG9mIDQ1ZGVnLi4uIENhbGN1bGF0aW9ucyBvZiBzYWxpbml0eSAodG8gYXBwcm94aW1hdGVseSAwLjAxIG8vb28gUyksIHBvdGVudGlhbCB0ZW1wZXJhdHVyZSAodGhldGEpLCBwb3RlbnRpYWwgZGVuc2l0eSAoc2lnbWEpLCB0aGUgb2JsaXF1ZSBhbmQgdmVydGljYWwgdmVsb2NpdGllcyBvZiB0aGUgbmV0LCBhbmQgdGhlIGFwcHJveGltYXRlIHZvbHVtZSBmaWx0ZXJlZCBieSBlYWNoIG5ldCBhcmUgbWFkZSBhZnRlciBlYWNoIHN0cmluZyBvZiBkYXRhIGhhcyBiZWVuIHJlY2VpdmVkIGJ5IHRoZSBjb21wdXRlci5cIiAoV2llYmUgZXQgYWwuLCAxOTg1KSBJbiBhZGRpdGlvbiwgZGVwZW5kaW5nIG9uIHRoZSBwYXJ0aWN1bGFyIGNvbmZpZ3VyYXRpb24gb2YgdGhlIE1PQ05FU1MtMSwgZGF0YSBtYXkgaGF2ZSBiZWVuIGNvbGxlY3RlZCBmcm9tIG90aGVyIHNlbnNvcnMgYXR0YWNoZWQgdG8gdGhlIGZyYW1lIDogKFRyYW5zbWlzc29tZXRlciwgRmx1b3JvbWV0ZXIsIERvd253ZWxsaW5nIGxpZ2h0IHNlbnNvciwgYW5kIHRoZSBPeHlnZW4gc2Vuc29yKS4gQSBTZWFCaXJkIHVuZGVyd2F0ZXIgcHVtcCB3YXMgYWxzbyBpbmNsdWRlZCBpbiB0aGUgc2Vuc29yIHN1aXQgZS5cbkFmdGVyIHJldHJpZXZhbCB0byBkZWNrLCB0aGUgY29udGVudHMgb2YgdGhlIG5ldHMgd2VyZSByaW5zZWQgaW50byB0aGUgY29kZW5kcyBhIG5kIHRyYW5zZmVycmVkIHRvIHN0b3JhZ2UgYm90dGxlcywgYW5kIGZpeGVkIGFuZCBwcmVzZXJ2ZWQgd2l0aCBmb3JtYWxpbi4gSW4gdGhlIHNob3JlIGxhYm9yYXRvcnksIHRoZSBjb250ZW50cyBvZiB0aGUgYm90dGxlcyB3ZXJlIHN1YnNhbXBsZWQgYW5kIGNvdW50cyBhbmQgYmlvbWFzcyBlc3RpbWF0ZXMgbWFkZSBmb3Igc2VsZWN0ZWQgdGF4YSAoc2VlIHRoZSBQcm9jX1Byb3RvY29sIGluZm8gYmVsb3cpLiBUaGlzIGRhdGEgb2JqZWN0IHJlcG9ydHMgb25seSB0aGUgY291bnQgaW5mb3JtYXRpb24uXG5cbkZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHA6Ly9jaXMud2hvaS5lZHUvc2NpZW5jZS9iY29kbW8vZGF0YXNldC5jZm0/aWQ9MTAxODImZmxhZz12aWV3XG5vclxuaHR0cDovL2dsb2JlYy53aG9pLmVkdS9qZy9pbmZvL2dsb2JlYy9uZXAvY2NzL01PQzElN0JkaXI9Z2xvYmVjLndob2kuZWR1L2pnL2Rpci9nbG9iZWMvbmVwL2Njcy8sZGF0YT1nbG9iZWMuY29hcy5vcmVnb25zdGF0ZS5lZHUvamcvc2Vydi9NT0MxLmh0bWwwJTdEXG5cbkFsbCBpbnF1aXJpZXMgYWJvdXQgdGhpcyBkYXRhIHNob3VsZCBiZSBkaXJlY3RlZCB0byBEci4gV2lsbGlhbSBQZXRlcnNvbiAoYmlsbC5wZXRlcnNvbkBub2FhLmdvdikuXG5JbnF1aXJpZXMgYWJvdXQgaG93IHRvIGFjY2VzcyB0aGlzIGRhdGEgc2hvdWxkIGJlIGRpcmVjdGVkIHRvIERyLiBIYWwgQmF0Y2hlbGRlciAoaGJhdGNoZWxkZXJAY29hcy5vcmVnb25zdGF0ZS5lZHUpLlxuXG5jZG1fZGF0YV90eXBlID0gVHJhamVjdG9yeVxuVkFSSUFCTEVTOlxuY3J1aXNlX2lkXG4uLi4gKDIyIG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2VyZEdsb2JlY01vYzFfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2VyZEdsb2JlY01vYzFfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkR2xvYmVjTW9jMS9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cuZ2xvYmVjLm9yZy8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkR2xvYmVjTW9jMS5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkR2xvYmVjTW9jMSZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJHTE9CRUMiLCAiZXJkR2xvYmVjTW9jMSJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRHbG9iZWNCaXJkcy5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkR2xvYmVjQmlyZHMiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkR2xvYmVjQmlyZHMuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiR0xPQkVDIE5FUCBOb3J0aGVybiBDYWxpZm9ybmlhIEN1cnJlbnQgQmlyZCBEYXRhIE5IMDAwNSwgMjAwMC0yMDAwLCAwMDA3IiwgIkdMT0JFQyAoR0xPQmFsIE9jZWFuIEVDb3N5c3RlbXMgRHluYW1pY3MpIE5FUCAoTm9ydGhlYXN0IFBhY2lmaWMpXG5Ob3J0aGVybiBDYWxpZm9ybmlhIEN1cnJlbnQgQmlyZCBEYXRhIGZyb20gUi9WIE5ldyBIb3Jpem9uIGNydWlzZXMgTkgwMDA1IGFuZCAwMDA3LlxuXG5BcyBhIHBhcnQgb2YgdGhlIEdMT0JFQy1Ob3J0aGVhc3QgUGFjaWZpYyBwcm9qZWN0LCB3ZSBpbnZlc3RpZ2F0ZWQgdmFyaWF0aW9uIGluIHRoZSBhYnVuZGFuY2Ugb2YgbWFyaW5lIGJpcmRzIGluIHRoZSBjb250ZXh0IG9mIGJpb2xvZ2ljYWwgYW5kIHBoeXNpY2FsIGhhYml0YXQgY29uZGl0aW9ucyBpbiB0aGUgbm9ydGhlcm4gcG9ydGlvbiBvZiB0aGUgQ2FsaWZvcm5pYSBDdXJyZW50IFN5c3RlbSAoQ0NTKSBkdXJpbmcgY3J1aXNlcyBkdXJpbmcgdGhlIHVwd2VsbGluZyBzZWFzb24gMjAwMC4gQ29udGludW91cyBzdXJ2ZXlzIG9mIHNlYWJpcmRzIHdlcmUgY29uZHVjdGVkIHNpbXVsdGFuZW91c2x5IGluIEp1bmUgKG9uc2V0IG9mIHVwd2VsbGluZykgYW5kIEF1Z3VzdCAobWF0dXJlIHBoYXNlIG9mIHVwd2VsbGluZykuXG5cblNlYWJpcmQgc3VydmV5cyB3ZXJlIGNvbmR1Y3RlZCBjb250aW51b3VzbHkgZHVyaW5nIGRheWxpZ2h0LCB1c2luZyBhIDMwMC1tLXdpZGUgdHJhbnNlY3Qgc3RyaXAuIFdpdGhpbiB0aGF0IHN0cmlwLCBiaXJkcyB3ZXJlIGNvdW50ZWQgdGhhdCBvY2N1cnJlZCB3aXRoaW4gdGhlIDkwIGRlZ3JlZSBxdWFkcmFudCBvZmYgdGhlIHNoaXAncyBib3cgdGhhdCBvZmZlcmVkIHRoZSBiZXN0IG9ic2VydmF0aW9uIGNvbmRpdGlvbnMuXG5cbk9ic2VydmVkIGNvdW50cyBvZiBzZWFiaXJkcyByZWNvcmRlZCBhcyBmbHlpbmcgaW4gYSBzdGVhZHkgZGlyZWN0aW9uIHdlcmUgYWRqdXN0ZWQgZm9yIHRoZSBlZmZlY3Qgb2YgZmxpZ2h0IHNwZWVkIGFuZCBkaXJlY3Rpb24gcmVsYXRpdmUgdG8gdGhhdCBvZiB0aGUgc2hpcCAoU3BlYXIgZXQgYWwuLCAxOTkyOyBTcGVhciBhbmQgQWlubGV5LCAxOTk3YikuIFRoZSBlZmZlY3Qgb2Ygc3VjaCBmbHV4IGlzIHRoZSBtb3N0IHNlcmlvdXMgYmlhcyBlbmNvdW50ZXJlZCBkdXJpbmcgc2VhYmlyZCBzdXJ2ZXlzIGF0IHNlYSAoU3BlYXIgZXQgYWwuLCAyMDA1KS4gS25vd24gYXMgcmFuZG9tIGRpcmVjdGlvbmFsIG1vdmVtZW50IChhcyBvcHBvc2VkIHRvIG5vbnJhbmRvbSBkaXJlY3Rpb25hbCBtb3ZlbWVudCwgd2hpY2ggb2NjdXJzIHdoZW4gYmlyZHMgYXJlIGF0dHJhY3RlZCBvciByZXBlbGxlZCBmcm9tIHRoZSBzdXJ2ZXkgdmVzc2VsKSwgdGhpcyBwcm9ibGVtIHVzdWFsbHkgcmVzdWx0cyBpbiBkZW5zaXR5IG92ZXJlc3RpbWF0aW9uIGJlY2F1c2UgbW9zdCBzcGVjaWVzIGZseSBmYXN0ZXIgdGhhbiBzdXJ2ZXkgdmVzc2VsczsgZGVuc2l0aWVzIG9mIGJpcmRzIHRoYXQgZmx5IHNsb3dlciBvciBhdCBhIHNpbWlsYXIgc3BlZWQgYXMgdGhlIHN1cnZleSB2ZXNzZWwgKGUuZy4sIHN0b3JtLXBldHJlbHMpLCBvciBhcmUgZmx5aW5nIGluIHRoZSBzYW1lIGRpcmVjdGlvbiwgYXJlIHVzdWFsbHkgdW5kZXJlc3RpbWF0ZWQgKFNwZWFyIGV0IGFsLiwgMTk5MilcblxuKGV4dHJhY3RlZCBmcm9tOiBEYXZpZCBHLiBBaW5sZXksIExhcnJ5IEIuIFNwZWFyLCBDeW50aGlhIFQuIFR5bmFuLCBKb2huIEEuIEJhcnRoLCBTdGVwaGVuIEQuIFBpZXJjZSwgUi4gR2xlbm4gRm9yZCBhbmQgVGltb3RoeSBKLiBDb3dsZXMsIDIwMDUuIFBoeXNpY2FsIGFuZCBiaW9sb2dpY2FsIHZhcmlhYmxlcyBhZmZlY3Rpbmcgc2VhYmlyZCBkaXN0cmlidXRpb25zIGR1cmluZyB0aGUgdXB3ZWxsaW5nIHNlYXNvbiBvZiB0aGUgbm9ydGhlcm4gQ2FsaWZvcm5pYSBDdXJyZW50LiBEZWVwIFNlYSBSZXNlYXJjaCBQYXJ0IElJOiBUb3BpY2FsIFN0dWRpZXMgaW4gT2NlYW5vZ3JhcGh5LCBWb2x1bWUgNTIsIElzc3VlcyAxLTIsIEphbnVhcnkgMjAwNSwgUGFnZXMgMTIzLTE0MylcblxuRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cDovL2Npcy53aG9pLmVkdS9zY2llbmNlL2Jjb2Rtby9kYXRhc2V0LmNmbT9pZD0xMDA1MyZmbGFnPXZpZXdcbm9yXG5odHRwOi8vZ2xvYmVjLndob2kuZWR1L2pnL2luZm8vZ2xvYmVjL25lcC9jY3MvYmlyZHMlN0JkaXI9Z2xvYmVjLndob2kuZWR1L2pnL2Rpci9nbG9iZWMvbmVwL2Njcy8sZGF0YT1nbG9iZWMud2hvaS5lZHUvamcvc2Vydi9nbG9iZWMvbmVwL2Njcy9iaXJkcy5odG1sMCU3RFxuXG5Db250YWN0OlxuQ3ludGhpYSBULiBUeW5hbiwgY3R5bmFuQHdob2kuZWR1LCBXb29kcyBIb2xlIE9jZWFub2dyYXBoaWMgSW5zdGl0dXRpb25cbkRhdmlkIEcuIEFpbmxleSwgZGFpbmxleUBwZW5ndWluc2NpZW5jZS5jb20sIEguVC4gSGFydmV5ICYgQXNzb2NpYXRlc1xuXG5jZG1fZGF0YV90eXBlID0gVHJhamVjdG9yeVxuVkFSSUFCTEVTOlxudHJhbnNfbm8gKFRyYW5zZWN0IE51bWJlcilcbi4uLiAoMTIgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkR2xvYmVjQmlyZHNfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2VyZEdsb2JlY0JpcmRzX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZEdsb2JlY0JpcmRzL2luZGV4Lmpzb24iLCAiaHR0cDovL3d3dy5nbG9iZWMub3JnLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9lcmRHbG9iZWNCaXJkcy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkR2xvYmVjQmlyZHMmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiR0xPQkVDIiwgImVyZEdsb2JlY0JpcmRzIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZEdsb2JlY0NldGFjZWFucy5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkR2xvYmVjQ2V0YWNlYW5zIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZEdsb2JlY0NldGFjZWFucy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJHTE9CRUMgTkVQIE5vcnRoZXJuIENhbGlmb3JuaWEgQ3VycmVudCBDZXRhY2VhbiBTdXJ2ZXkgRGF0YSwgTkgwMDA1LCAyMDAwLTIwMDAsIDAwMDciLCAiR0xPQkVDIChHTE9CYWwgT2NlYW4gRUNvc3lzdGVtcyBEeW5hbWljcykgTkVQIChOb3J0aGVhc3QgUGFjaWZpYylcbk5vcnRoZXJuIENhbGlmb3JuaWEgQ3VycmVudCBDZXRhY2VhbiBTdXJ2ZXkgRGF0YSBmcm9tIFIvViBOZXcgSG9yaXpvbiBjcnVpc2VzIE5IMDAwNSBhbmQgMDAwNy5cblxuTGluZS10cmFuc2VjdCBzdXJ2ZXlzIG9mIGNldGFjZWFucyB3ZXJlIGNvbmR1Y3RlZCBkdXJpbmcgdHdvIGNydWlzZXMgb2YgdGhlIEdMT0JFQyBOb3J0aGVhc3QgUGFjaWZpYyBOb3J0aGVybiBDYWxpZm9ybmlhIEN1cnJlbnQgKE5DQykgcHJvZ3JhbSBpbiAyMDAwOiBNYXkgMjkgLUp1bmUgMTMgYW5kIEp1bHkgMjcgLSBBdWd1c3QgMTIuICAgU3VydmV5cyB3ZXJlIGNvbmR1Y3RlZCBhY3Jvc3MgdGhlIHNoZWxmIGFuZCBzbG9wZSBvZmYgT3JlZ29uIGFuZCBub3J0aGVybiBDYWxpZm9ybmlhICg0MS45IC0gNDQuNjVOKSBmcm9tIHRoZSBjb2FzdCB0byB+MTI1LjVXLiAgIFN1cnZleXMgd2VyZSBjb25kdWN0ZWQgaW4gcGFzc2luZyBtb2RlIHdoaWxlIHRoZSBSL1YgTmV3IEhvcml6b24gd2FzIGluIHRyYW5zaXQgYmV0d2VlbiBzdGF0aW9ucyBmb3IgaHlkcm9ncmFwaGljIGFuZCB6b29wbGFua3RvbiBzYW1wbGluZy4gICBPYnNlcnZhdGlvbnMgd2VyZSBjb25kdWN0ZWQgZnJvbSB0aGUgZmx5aW5nIGJyaWRnZSBkdXJpbmcgZGF5bGlnaHQgKH4wNjAwIHRvIDIwMzApIHdoZW5ldmVyIHN1ZmZpY2llbnQgdmlzaWJpbGl0eSAoaS5lLiwgPiAyIG5tKSBhbmQgd2VhdGhlciAoaS5lLiwgPCBCZWF1Zm9ydCA2KSBhbGxvd2VkLiAgIFR3byBvYnNlcnZlcnMgc2ltdWx0YW5lb3VzbHkgc3VydmV5ZWQgdG8gdGhlIGhvcml6b24gd2l0aCAyNSB4IDE1MCBiaW5vY3VsYXJzLCBlcXVpcHBlZCB3aXRoIGNvbXBhc3MgYW5kIHJldGljbGUuICAgRWFjaCBvYnNlcnZlciBzdXJ2ZXllZCBhIDEwMCBkZWdyZWUgYXJjIGZyb20gMTAgZGVncmVlcyBvZmYgdGhlIGJvdyAob3Bwb3NpdGUgc2lkZSkgdG8gOTAgZGVncmVlcyBvbiB0aGVpciBzaWRlIG9mIHRoZSBzaGlwLiAgIEEgdGhpcmQgb2JzZXJ2ZXIgZm9jdXNlZCBvbiB0aGUgdHJhY2stbGluZSBieSBleWUsIGFpZGVkIHdpdGggNyB4IDUwIGhhbmQtaGVsZCBiaW5vY3VsYXJzLiAgIFNpZ2h0aW5ncyB3ZXJlIGVudGVyZWQgaW1tZWRpYXRlbHkgb24gYSBsYXB0b3AgY29tcHV0ZXIgY29ubmVjdGVkIHRvIHRoZSBzaGlwJ3MgR1BTIHN5c3RlbS4gICBQb3NpdGlvbnMgb2YgYWxsIHNpZ2h0aW5ncyB3ZXJlIGNvcnJlY3RlZCB0byByZWZsZWN0IHRoZSBhY3R1YWwgbG9jYXRpb24gb2YgdGhlIGNldGFjZWFucywgcmF0aGVyIHRoYW4gdGhlIHNoaXAncyBwb3NpdGlvbi4gICBUaGUgaGVpZ2h0IGZyb20gdGhlIHN1cmZhY2Ugb2YgdGhlIHdhdGVyIHRvIHRoZSBleWVzIG9mIG9ic2VydmVycyBvbiB0aGUgMjUgeCAxNTAgYmlub2N1bGFycyB3YXMgMTAuODcgbS5cblxuRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZTpcbmh0dHA6Ly9jaXMud2hvaS5lZHUvc2NpZW5jZS9iY29kbW8vZGF0YXNldC5jZm0/aWQ9MTAwNTUmZmxhZz12aWV3XG5vclxuaHR0cDovL2dsb2JlYy53aG9pLmVkdS9qZy9pbmZvL2dsb2JlYy9uZXAvY2NzL2NldGFjZWFucyU3QmRpcj1nbG9iZWMud2hvaS5lZHUvamcvZGlyL2dsb2JlYy9uZXAvY2NzLyxkYXRhPWdsb2JlYy53aG9pLmVkdS9qZy9zZXJ2L2dsb2JlYy9uZXAvY2NzL2NldGFjZWFucy5odG1sMCU3RFxuXG5Db250YWN0IFBJczpcbkN5bnRoaWEgVC4gVHluYW4sIGN0eW5hbkB3aG9pLmVkdSwgV29vZHMgSG9sZSBPY2Vhbm9ncmFwaGljIEluc3RpdHV0aW9uXG5EYXZpZCBHLiBBaW5sZXksIGRhaW5sZXlAcGVuZ3VpbnNjaWVuY2UuY29tLCBILlQuIEhhcnZleSAmIEFzc29jaWF0ZXNcblxuY2RtX2RhdGFfdHlwZSA9IFRyYWplY3RvcnlcblZBUklBQkxFUzpcbmNydWlzZV9pZFxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG4uLi4gKDcgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkR2xvYmVjQ2V0YWNlYW5zX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRHbG9iZWNDZXRhY2VhbnNfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkR2xvYmVjQ2V0YWNlYW5zL2luZGV4Lmpzb24iLCAiaHR0cDovL3d3dy5nbG9iZWMub3JnLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9lcmRHbG9iZWNDZXRhY2VhbnMucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZEdsb2JlY0NldGFjZWFucyZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJHTE9CRUMiLCAiZXJkR2xvYmVjQ2V0YWNlYW5zIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZEdsb2JlY0JvdHRsZS5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkR2xvYmVjQm90dGxlIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZEdsb2JlY0JvdHRsZS5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJHTE9CRUMgTkVQIFJvc2V0dGUgQm90dGxlIERhdGEgKDIwMDIpIiwgIkdMT0JFQyAoR0xPQmFsIE9jZWFuIEVDb3N5c3RlbXMgRHluYW1pY3MpIE5FUCAoTm9ydGhlYXN0IFBhY2lmaWMpXG5Sb3NldHRlIEJvdHRsZSBEYXRhIGZyb20gTmV3IEhvcml6b24gQ3J1aXNlIChOSDAyMDc6IDEtMTkgQXVndXN0IDIwMDIpLlxuTm90ZXM6XG5QaHlzaWNhbCBkYXRhIHByb2Nlc3NlZCBieSBKYW5lIEZsZWlzY2hiZWluIChPU1UpLlxuQ2hsb3JvcGh5bGwgcmVhZGluZ3MgZG9uZSBieSBMZWFoIEZlaW5iZXJnIChPU1UpLlxuTnV0cmllbnQgYW5hbHlzaXMgZG9uZSBieSBCdXJrZSBIYWxlcyAoT1NVKS5cblNhbDAwIC0gc2FsaW5pdHkgY2FsY3VsYXRlZCBmcm9tIHByaW1hcnkgc2Vuc29ycyAoQzAsVDApLlxuU2FsMTEgLSBzYWxpbml0eSBjYWxjdWxhdGVkIGZyb20gc2Vjb25kYXJ5IHNlbnNvcnMgKEMxLFQxKS5cbnNlY29uZGFyeSBzZW5zb3IgcGFpciB3YXMgdXNlZCBpbiBmaW5hbCBwcm9jZXNzaW5nIG9mIENURCBkYXRhIGZvclxubW9zdCBzdGF0aW9ucyBiZWNhdXNlIHRoZSBwcmltYXJ5IGhhZCBtb3JlIG5vaXNlIGFuZCBzcGlrZXMuIFRoZVxucHJpbWFyeSBwYWlyIHdlcmUgdXNlZCBmb3IgY2FzdCAjOSwgMjQsIDQ4LCAxMTEgYW5kIDE1MCBkdWUgdG9cbm11bHRpcGxlIHNwaWtlcyBvciBvZmZzZXRzIGluIHRoZSBzZWNvbmRhcnkgcGFpci5cbk51dHJpZW50IHNhbXBsZXMgd2VyZSBjb2xsZWN0ZWQgZnJvbSBtb3N0IGJvdHRsZXM7IGFsbCBudXRyaWVudCBkYXRhXG5kZXZlbG9wZWQgZnJvbSBzYW1wbGVzIGZyb3plbiBkdXJpbmcgdGhlIGNydWlzZSBhbmQgYW5hbHl6ZWQgYXNob3JlO1xuZGF0YSBkZXZlbG9wZWQgYnkgQnVya2UgSGFsZXMgKE9TVSkuXG5PcGVyYXRpb24gRGV0ZWN0aW9uIExpbWl0cyBmb3IgTnV0cmllbnQgQ29uY2VudHJhdGlvbnNcbk51dHJpZW50ICBSYW5nZSAgICAgICAgIE1lYW4gICAgVmFyaWFibGUgICAgICAgICBVbml0c1xuUE80ICAgICAgIDAuMDAzLTAuMDA0ICAgMC4wMDQgICBQaG9zcGhhdGUgICAgICAgIG1pY3JvbW9sZXMgcGVyIGxpdGVyXG5OK04gICAgICAgMC4wNC0wLjA4ICAgICAwLjA2ICAgIE5pdHJhdGUrTml0cml0ZSAgbWljcm9tb2xlcyBwZXIgbGl0ZXJcblNpICAgICAgICAwLjEzLTAuMjQgICAgIDAuMTYgICAgU2lsaWNhdGUgICAgICAgICBtaWNyb21vbGVzIHBlciBsaXRlclxuTk8yICAgICAgIDAuMDAzLTAuMDA0ICAgMC4wMDMgICBOaXRyaXRlICAgICAgICAgIG1pY3JvbW9sZXMgcGVyIGxpdGVyXG5EYXRlcyBhbmQgVGltZXMgYXJlIFVUQy5cblxuRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cDovL2Npcy53aG9pLmVkdS9zY2llbmNlL2Jjb2Rtby9kYXRhc2V0LmNmbT9pZD0xMDE4MCZmbGFnPXZpZXdcblxuSW5xdWlyaWVzIGFib3V0IGhvdyB0byBhY2Nlc3MgdGhpcyBkYXRhIHNob3VsZCBiZSBkaXJlY3RlZCB0b1xuRHIuIEhhbCBCYXRjaGVsZGVyIChoYmF0Y2hlbGRlckBjb2FzLm9yZWdvbnN0YXRlLmVkdSkuXG5cbmNkbV9kYXRhX3R5cGUgPSBUcmFqZWN0b3J5UHJvZmlsZVxuVkFSSUFCTEVTOlxuY3J1aXNlX2lkXG4uLi4gKDI0IG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2VyZEdsb2JlY0JvdHRsZV9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkR2xvYmVjQm90dGxlX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZEdsb2JlY0JvdHRsZS9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cuZ2xvYmVjLm9yZy8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkR2xvYmVjQm90dGxlLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1lcmRHbG9iZWNCb3R0bGUmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiR0xPQkVDIiwgImVyZEdsb2JlY0JvdHRsZSJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRHbG9iZWNWcHQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZEdsb2JlY1ZwdCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRHbG9iZWNWcHQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiR0xPQkVDIE5FUCBWZXJ0aWNhbCBQbGFua3RvbiBUb3cgKFZQVCkgRGF0YSwgMTk5Ny0yMDAxIiwgIkdMT0JFQyAoR0xPQmFsIE9jZWFuIEVDb3N5c3RlbXMgRHluYW1pY3MpIE5FUCAoTm9ydGhlYXN0IFBhY2lmaWMpXG5DYWxpZm9ybmlhIEN1cnJlbnQgUHJvZ3JhbVxuVmVydGljYWwgUGxhbmt0b24gVG93IChWUFQpIERhdGFcblxuRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cDovL2Npcy53aG9pLmVkdS9zY2llbmNlL2Jjb2Rtby9kYXRhc2V0LmNmbT9pZD0xMDE4MSZmbGFnPXZpZXdcbm9yXG5odHRwOi8vZ2xvYmVjLndob2kuZWR1L2pnL2luZm8vZ2xvYmVjL25lcC9jY3MvdnB0JTdCZGlyPWdsb2JlYy53aG9pLmVkdS9qZy9kaXIvZ2xvYmVjL25lcC9jY3MvLGRhdGE9Z2xvYmVjLmNvYXMub3JlZ29uc3RhdGUuZWR1L2pnL3NlcnYvdnB0Lmh0bWwwJTdEXG5cbkFsbCBpbnF1aXJpZXMgYWJvdXQgdGhpcyBkYXRhIHNob3VsZCBiZSBkaXJlY3RlZCB0byBEci4gV2lsbGlhbSBQZXRlcnNvbiAoYmlsbC5wZXRlcnNvbkBub2FhLmdvdikuXG5JbnF1aXJpZXMgYWJvdXQgaG93IHRvIGFjY2VzcyB0aGlzIGRhdGEgc2hvdWxkIGJlIGRpcmVjdGVkIHRvIERyLiBIYWwgQmF0Y2hlbGRlciAoaGJhdGNoZWxkZXJAY29hcy5vcmVnb25zdGF0ZS5lZHUpLlxuXG5jZG1fZGF0YV90eXBlID0gVHJhamVjdG9yeVxuVkFSSUFCTEVTOlxuY3J1aXNlX2lkXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmNhc3Rfbm8gKENhc3QgTnVtYmVyIFdpdGhpbiB0aGUgQ3J1aXNlKVxuc3RhdGlvbl9pZFxuYWJ1bmRfbTMgKEFidW5kYW5jZSwgY291bnQgbS0zKVxuY29tbWVudHNcbmNvdW50ZXJfaWRcbmRfbl9mbGFnIChEYXkvTmlnaHQgRmxhZylcbmdlYXJfYXJlYSAoTW91dGggQXJlYSBvZiBOZXQsIG0yKVxuZ2Vhcl9tZXNoIChOZXQncyBNZXNoIFNpemUsIG1tKVxuZ2Vhcl90eXBlXG5nZW51c19zcGVjaWVzXG5saWZlX3N0YWdlXG5sb2NhbF9jb2RlXG4uLi4gKDggbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkR2xvYmVjVnB0X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRHbG9iZWNWcHRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkR2xvYmVjVnB0L2luZGV4Lmpzb24iLCAiaHR0cDovL3d3dy5nbG9iZWMub3JnLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9lcmRHbG9iZWNWcHQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZEdsb2JlY1ZwdCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJHTE9CRUMiLCAiZXJkR2xvYmVjVnB0Il0sCiAgICAgIFsiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRHb2RhZVNmY29icyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRHb2RhZVNmY29icy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJHT0RBRSwgU0ZDT0JTIC0gU3VyZmFjZSBUZW1wZXJhdHVyZSBPYnNlcnZhdGlvbnMsIDE5OTgtcHJlc2VudCIsICJHT0RBRSwgU0ZDT0JTIC0gU3VyZmFjZSBUZW1wZXJhdHVyZSBPYnNlcnZhdGlvbnM6IFNoaXAsIGZpeGVkL2RyaWZ0aW5nIGJ1b3ksIGFuZCBDTUFOIGluLXNpdHUgc3VyZmFjZSB0ZW1wZXJhdHVyZS4gIEdsb2JhbCBUZWxlY29tbXVuaWNhdGlvbiBTeXN0ZW0gKEdUUykgRGF0YS5cbiAgICAgICAgXG5UaGUgR2xvYmFsIE9jZWFuIERhdGEgQXNzaW1pbGF0aW9uIEV4cGVyaW1lbnQgKEdPREFFKSBpcyBhIHByYWN0aWNhbCBkZW1vbnN0cmF0aW9uIG9mIG5lYXItcmVhbC10aW1lLCBnbG9iYWwgb2NlYW4gZGF0YSBhc3NpbWlsYXRpb24gdGhhdCBwcm92aWRlcywgcmVndWxhciwgY29tcGxldGUgZGVzY3JpcHRpb25zIG9mIHRoZSB0ZW1wZXJhdHVyZSwgc2FsaW5pdHkgYW5kIHZlbG9jaXR5IHN0cnVjdHVyZXMgb2YgdGhlIG9jZWFuIGluIHN1cHBvcnQgb2Ygb3BlcmF0aW9uYWwgb2NlYW5vZ3JhcGh5LCBzZWFzb25hbC10by1kZWNhZGFsIGNsaW1hdGUgZm9yZWNhc3RzIGFuZCBhbmFseXNlcywgYW5kIG9jZWFub2dyYXBoaWMgcmVzZWFyY2guIFRoZSBHT0RBRSBNb250ZXJleSBTZXJ2ZXIsIHNwb25zb3JlZCBtYWlubHkgYnkgdGhlIE9mZmljZSBvZiBOYXZhbCBSZXNlYXJjaCAoT05SKSwgaXMgaW50ZW5kZWQgdG8gYmUgYSBwcmluY2lwYWwgbm9kZSBpbiB0aGUgR09EQUUgYXJjaGl0ZWN0dXJlLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG50aW1lIChPYnNlcnZhdGlvbiBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxub2JfY2xtXG5vYl9jc2dtXG5vYl9nbGJcbm9iX2dzZ21cbm9iX3FjXG5vYl9yY3B0IChTU1Qgb2JzZXJ2YXRpb24gcmVjZWlwdCB0aW1lIGF0IEZOTU9DLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxub2JfcmduXG5vYl9yc2dtXG5vYl9zaWduXG5vYl9zc3Rcbm9iX3R5cFxub2Jfd21cbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9lcmRHb2RhZVNmY29ic19mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkR29kYWVTZmNvYnNfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkR29kYWVTZmNvYnMvaW5kZXguanNvbiIsICJodHRwczovL3d3dy51c2dvZGFlLm9yZy9jZ2ktYmluL2RhdGFsaXN0LnBsP3N1bW1hcnk9R28mZHNldD1mbm1vY19vYnNfc2Zjb2JzIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZEdvZGFlU2Zjb2JzLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1lcmRHb2RhZVNmY29icyZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJGTk1PQyBHT0RBRSIsICJlcmRHb2RhZVNmY29icyJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ud2lvb3NBZGNwMTk5NS5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbndpb29zQWRjcDE5OTUiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbndpb29zQWRjcDE5OTUuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiSGFrZSBTdXJ2ZXkgQURDUCAoMTk5NSkiLCAiU2hpcGJvYXJkIGFjb3VzdGljIERvcHBsZXIgY3VycmVudCBwcm9maWxlciBkYXRhIGNvbGxlY3RlZCBkdXJpbmcgdGhlXG5JbnRlZ3JhdGVkIEFjb3VzdGljIGFuZCBUcmF3bCBTdXJ2ZXlzIG9mIFBhY2lmaWMgSGFrZS5cblByb2Nlc3NpbmcgYnk6ICBTdGVwaGVuIFBpZXJjZSwgT3JlZ29uIFN0YXRlIFVuaXZlcnNpdHlcbihQLiBNLiBLb3NybyBhbHNvIHBlcmZvcm1lZCBzb21lIHByb2Nlc3Npbmcgc3RlcHMgaW4gdGhlIDE5OTggY2FzZSlcbkRhdGU6ICAxNiBBdWd1c3QgMjAwNlxuRGF0YSBxdWFsaXR5OiBHb29kIGluIGdlbmVyYWxcbk1pc3Npbmcgb3IgcG9vci1xdWFsaXR5IGRhdGEgaGF2ZSBiZWVuIG9taXR0ZWQuXG5cblRoaXMgZGF0YXNldCBoYXMgYSBzaW1wbGUgc2ltcGxlIHZlcnNpb24gb2Ygb2JzZXJ2ZWQgdmVsb2NpdGllcywgdXNlZnVsXG5mb3IgbW9zdCBwdXJwb3Nlcy4gIFRoZSBjb21wbGV0ZSBkYXRhIHNldHMgd2l0aCBhbGwgY29uZmlndXJhdGlvbiBhbmRcbnByb2Nlc3NpbmcgZGV0YWlscyBhbmQgZGlhZ25vc3RpYyBkYXRhIChlLmcuIGVycm9yIHZlbG9jaXR5LCBBR0MsXG5zcGVjdHJhbCB3aWR0aCkgYXJlIGF2YWlsYWJsZSBmcm9tIHRoZSBOT0RDIEpvaW50IEFyY2hpdmUgZm9yIFNoaXBib2FyZFxuQURDUCwgb3IgYnkgcmVxdWVzdCBmcm9tIFMuIFBpZXJjZS5cblxuUHJvY2Vzc2luZyBzdGVwcyBpbmNsdWRlZDogIGVkaXRpbmcgb2YgdGhlIGRhdGEgdXNpbmcgdmFyaW91c1xuZGlhZ25vc3RpY3MsIGNhbGlicmF0aW9uIG9mIHRoZSBwaGFzZSBhbmQgYW1wbGl0dWRlIGVycm9ycyBvZiB0aGVcbkFEQ1AvbmF2aWdhdGlvbi9neXJvY29tcGFzcyBzeXN0ZW0gYnkgY292YXJpYWJpbGl0eSBhbmFseXNpcyBiZXR3ZWVuXG5jdXJyZW50cyBhbmQgc2hpcCB2ZWxvY2l0eSwgcmVmZXJlbmNlIGxheWVyIHZlbG9jaXR5IHNtb290aGluZywgYW5kXG5maW5hbCBwcm9kdWN0aW9uIG9mIGVhcnRoLXJlZmVyZW5jZWQgdmVsb2NpdGllcy4gIEZvciBtb3JlIGRldGFpbHNcbnJlZ2FyZGluZyBtZXRob2RzLCBzZWU6ICBQaWVyY2UgZXQgYWwuICgyMDAwKSwgRFNSIElJIDQ3LCA4MTEtODI5LlxuXG5Db250YWN0OiBEci4gU3RlcGhlbiBELiBQaWVyY2UsIHNwaWVyY2VAY29hcy5vcmVnb25zdGF0ZS5lZHVcblxuY2RtX2RhdGFfdHlwZSA9IE90aGVyXG5WQVJJQUJMRVM6XG55ZWFyXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxuZGVwdGggKG0pXG55ZWFyZGF5ICh0aW1lKVxuZWFzdHYgKEVhc3R3YXJkIFNlYSBXYXRlciBWZWxvY2l0eSwgbSBzLTEpXG5ub3J0aHYgKE5vcnRod2FyZCBTZWEgV2F0ZXIgVmVsb2NpdHksIG0gcy0xKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL253aW9vc0FkY3AxOTk1X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9ud2lvb3NBZGNwMTk5NV9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9ud2lvb3NBZGNwMTk5NS9pbmRleC5qc29uIiwgImh0dHA6Ly9ud2lvb3MuY29hcy5vcmVnb25zdGF0ZS5lZHU6ODA4MC9kb2RzL2RyZHMvMTk5NSUyMEhha2UlMjBTdXJ2ZXklMjBBRENQLmluZm8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3Mvbndpb29zQWRjcDE5OTUucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPW53aW9vc0FkY3AxOTk1JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk9TVSIsICJud2lvb3NBZGNwMTk5NSJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ud2lvb3NBZGNwMTk5OC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbndpb29zQWRjcDE5OTgiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbndpb29zQWRjcDE5OTguZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiSGFrZSBTdXJ2ZXkgQURDUCAoMTk5OCkiLCAiU2hpcGJvYXJkIGFjb3VzdGljIERvcHBsZXIgY3VycmVudCBwcm9maWxlciBkYXRhIGNvbGxlY3RlZCBkdXJpbmcgdGhlXG5JbnRlZ3JhdGVkIEFjb3VzdGljIGFuZCBUcmF3bCBTdXJ2ZXlzIG9mIFBhY2lmaWMgSGFrZS5cblByb2Nlc3NpbmcgYnk6ICBTdGVwaGVuIFBpZXJjZSwgT3JlZ29uIFN0YXRlIFVuaXZlcnNpdHlcbihQLiBNLiBLb3NybyBhbHNvIHBlcmZvcm1lZCBzb21lIHByb2Nlc3Npbmcgc3RlcHMgaW4gdGhlIDE5OTggY2FzZSlcbkRhdGU6ICAxNiBBdWd1c3QgMjAwNlxuRGF0YSBxdWFsaXR5OiBHb29kIGluIGdlbmVyYWxcbk1pc3Npbmcgb3IgcG9vci1xdWFsaXR5IGRhdGEgaGF2ZSBiZWVuIG9taXR0ZWQuXG5cblRoaXMgZGF0YXNldCBoYXMgYSBzaW1wbGUgc2ltcGxlIHZlcnNpb24gb2Ygb2JzZXJ2ZWQgdmVsb2NpdGllcywgdXNlZnVsXG5mb3IgbW9zdCBwdXJwb3Nlcy4gIFRoZSBjb21wbGV0ZSBkYXRhIHNldHMgd2l0aCBhbGwgY29uZmlndXJhdGlvbiBhbmRcbnByb2Nlc3NpbmcgZGV0YWlscyBhbmQgZGlhZ25vc3RpYyBkYXRhIChlLmcuIGVycm9yIHZlbG9jaXR5LCBBR0MsXG5zcGVjdHJhbCB3aWR0aCkgYXJlIGF2YWlsYWJsZSBmcm9tIHRoZSBOT0RDIEpvaW50IEFyY2hpdmUgZm9yIFNoaXBib2FyZFxuQURDUCwgb3IgYnkgcmVxdWVzdCBmcm9tIFMuIFBpZXJjZS5cblxuUHJvY2Vzc2luZyBzdGVwcyBpbmNsdWRlZDogIGVkaXRpbmcgb2YgdGhlIGRhdGEgdXNpbmcgdmFyaW91c1xuZGlhZ25vc3RpY3MsIGNhbGlicmF0aW9uIG9mIHRoZSBwaGFzZSBhbmQgYW1wbGl0dWRlIGVycm9ycyBvZiB0aGVcbkFEQ1AvbmF2aWdhdGlvbi9neXJvY29tcGFzcyBzeXN0ZW0gYnkgY292YXJpYWJpbGl0eSBhbmFseXNpcyBiZXR3ZWVuXG5jdXJyZW50cyBhbmQgc2hpcCB2ZWxvY2l0eSwgcmVmZXJlbmNlIGxheWVyIHZlbG9jaXR5IHNtb290aGluZywgYW5kXG5maW5hbCBwcm9kdWN0aW9uIG9mIGVhcnRoLXJlZmVyZW5jZWQgdmVsb2NpdGllcy4gIEZvciBtb3JlIGRldGFpbHNcbnJlZ2FyZGluZyBtZXRob2RzLCBzZWU6ICBQaWVyY2UgZXQgYWwuICgyMDAwKSwgRFNSIElJIDQ3LCA4MTEtODI5LlxuXG5Db250YWN0OiBEci4gU3RlcGhlbiBELiBQaWVyY2UsIHNwaWVyY2VAY29hcy5vcmVnb25zdGF0ZS5lZHVcblxuY2RtX2RhdGFfdHlwZSA9IE90aGVyXG5WQVJJQUJMRVM6XG55ZWFyXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxuZGVwdGggKG0pXG55ZWFyZGF5ICh0aW1lKVxuZWFzdHYgKEVhc3R3YXJkIFNlYSBXYXRlciBWZWxvY2l0eSwgbSBzLTEpXG5ub3J0aHYgKE5vcnRod2FyZCBTZWEgV2F0ZXIgVmVsb2NpdHksIG0gcy0xKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL253aW9vc0FkY3AxOTk4X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9ud2lvb3NBZGNwMTk5OF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9ud2lvb3NBZGNwMTk5OC9pbmRleC5qc29uIiwgImh0dHA6Ly9ud2lvb3MuY29hcy5vcmVnb25zdGF0ZS5lZHU6ODA4MC9kb2RzL2RyZHMvMTk5OCUyMEhha2UlMjBTdXJ2ZXklMjBBRENQLmluZm8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3Mvbndpb29zQWRjcDE5OTgucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPW53aW9vc0FkY3AxOTk4JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk9TVSIsICJud2lvb3NBZGNwMTk5OCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ud2lvb3NBZGNwMjAwMS5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbndpb29zQWRjcDIwMDEiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbndpb29zQWRjcDIwMDEuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiSGFrZSBTdXJ2ZXkgQURDUCAoMjAwMSkiLCAiU2hpcGJvYXJkIGFjb3VzdGljIERvcHBsZXIgY3VycmVudCBwcm9maWxlciBkYXRhIGNvbGxlY3RlZCBkdXJpbmcgdGhlXG5JbnRlZ3JhdGVkIEFjb3VzdGljIGFuZCBUcmF3bCBTdXJ2ZXlzIG9mIFBhY2lmaWMgSGFrZS5cblByb2Nlc3NpbmcgYnk6ICBTdGVwaGVuIFBpZXJjZSwgT3JlZ29uIFN0YXRlIFVuaXZlcnNpdHlcbihQLiBNLiBLb3NybyBhbHNvIHBlcmZvcm1lZCBzb21lIHByb2Nlc3Npbmcgc3RlcHMgaW4gdGhlIDE5OTggY2FzZSlcbkRhdGU6ICAxNiBBdWd1c3QgMjAwNlxuRGF0YSBxdWFsaXR5OiBHb29kIGluIGdlbmVyYWxcbk1pc3Npbmcgb3IgcG9vci1xdWFsaXR5IGRhdGEgaGF2ZSBiZWVuIG9taXR0ZWQuXG5cblRoaXMgZGF0YXNldCBoYXMgYSBzaW1wbGUgc2ltcGxlIHZlcnNpb24gb2Ygb2JzZXJ2ZWQgdmVsb2NpdGllcywgdXNlZnVsXG5mb3IgbW9zdCBwdXJwb3Nlcy4gIFRoZSBjb21wbGV0ZSBkYXRhIHNldHMgd2l0aCBhbGwgY29uZmlndXJhdGlvbiBhbmRcbnByb2Nlc3NpbmcgZGV0YWlscyBhbmQgZGlhZ25vc3RpYyBkYXRhIChlLmcuIGVycm9yIHZlbG9jaXR5LCBBR0MsXG5zcGVjdHJhbCB3aWR0aCkgYXJlIGF2YWlsYWJsZSBmcm9tIHRoZSBOT0RDIEpvaW50IEFyY2hpdmUgZm9yIFNoaXBib2FyZFxuQURDUCwgb3IgYnkgcmVxdWVzdCBmcm9tIFMuIFBpZXJjZS5cblxuUHJvY2Vzc2luZyBzdGVwcyBpbmNsdWRlZDogIGVkaXRpbmcgb2YgdGhlIGRhdGEgdXNpbmcgdmFyaW91c1xuZGlhZ25vc3RpY3MsIGNhbGlicmF0aW9uIG9mIHRoZSBwaGFzZSBhbmQgYW1wbGl0dWRlIGVycm9ycyBvZiB0aGVcbkFEQ1AvbmF2aWdhdGlvbi9neXJvY29tcGFzcyBzeXN0ZW0gYnkgY292YXJpYWJpbGl0eSBhbmFseXNpcyBiZXR3ZWVuXG5jdXJyZW50cyBhbmQgc2hpcCB2ZWxvY2l0eSwgcmVmZXJlbmNlIGxheWVyIHZlbG9jaXR5IHNtb290aGluZywgYW5kXG5maW5hbCBwcm9kdWN0aW9uIG9mIGVhcnRoLXJlZmVyZW5jZWQgdmVsb2NpdGllcy4gIEZvciBtb3JlIGRldGFpbHNcbnJlZ2FyZGluZyBtZXRob2RzLCBzZWU6ICBQaWVyY2UgZXQgYWwuICgyMDAwKSwgRFNSIElJIDQ3LCA4MTEtODI5LlxuXG5Db250YWN0OiBEci4gU3RlcGhlbiBELiBQaWVyY2UsIHNwaWVyY2VAY29hcy5vcmVnb25zdGF0ZS5lZHVcblxuY2RtX2RhdGFfdHlwZSA9IE90aGVyXG5WQVJJQUJMRVM6XG55ZWFyXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxuZGVwdGggKEFsdGl0dWRlLCBtKVxueWVhcmRheSAodGltZSlcbmVhc3R2IChFYXN0d2FyZCBTZWEgV2F0ZXIgVmVsb2NpdHksIG0gcy0xKVxubm9ydGh2IChOb3J0aHdhcmQgU2VhIFdhdGVyIFZlbG9jaXR5LCBtIHMtMSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9ud2lvb3NBZGNwMjAwMV9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvbndpb29zQWRjcDIwMDFfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vbndpb29zQWRjcDIwMDEvaW5kZXguanNvbiIsICJodHRwOi8vbndpb29zLmNvYXMub3JlZ29uc3RhdGUuZWR1OjgwODAvZG9kcy9kcmRzLzIwMDElMjBIYWtlJTIwU3VydmV5JTIwQURDUC5pbmZvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL253aW9vc0FkY3AyMDAxLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1ud2lvb3NBZGNwMjAwMSZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJPU1UiLCAibndpb29zQWRjcDIwMDEiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbndpb29zQWRjcDIwMDMuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL253aW9vc0FkY3AyMDAzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL253aW9vc0FkY3AyMDAzLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkhha2UgU3VydmV5IEFEQ1AgKDIwMDMpIiwgIlNoaXBib2FyZCBhY291c3RpYyBEb3BwbGVyIGN1cnJlbnQgcHJvZmlsZXIgZGF0YSBjb2xsZWN0ZWQgZHVyaW5nIHRoZVxuSW50ZWdyYXRlZCBBY291c3RpYyBhbmQgVHJhd2wgU3VydmV5cyBvZiBQYWNpZmljIEhha2UuXG5Qcm9jZXNzaW5nIGJ5OiAgU3RlcGhlbiBQaWVyY2UsIE9yZWdvbiBTdGF0ZSBVbml2ZXJzaXR5XG4oUC4gTS4gS29zcm8gYWxzbyBwZXJmb3JtZWQgc29tZSBwcm9jZXNzaW5nIHN0ZXBzIGluIHRoZSAxOTk4IGNhc2UpXG5EYXRlOiAgMTYgQXVndXN0IDIwMDZcbkRhdGEgcXVhbGl0eTogR29vZCBpbiBnZW5lcmFsXG5NaXNzaW5nIG9yIHBvb3ItcXVhbGl0eSBkYXRhIGhhdmUgYmVlbiBvbWl0dGVkLlxuXG5UaGlzIGRhdGFzZXQgaGFzIGEgc2ltcGxlIHNpbXBsZSB2ZXJzaW9uIG9mIG9ic2VydmVkIHZlbG9jaXRpZXMsIHVzZWZ1bFxuZm9yIG1vc3QgcHVycG9zZXMuICBUaGUgY29tcGxldGUgZGF0YSBzZXRzIHdpdGggYWxsIGNvbmZpZ3VyYXRpb24gYW5kXG5wcm9jZXNzaW5nIGRldGFpbHMgYW5kIGRpYWdub3N0aWMgZGF0YSAoZS5nLiBlcnJvciB2ZWxvY2l0eSwgQUdDLFxuc3BlY3RyYWwgd2lkdGgpIGFyZSBhdmFpbGFibGUgZnJvbSB0aGUgTk9EQyBKb2ludCBBcmNoaXZlIGZvciBTaGlwYm9hcmRcbkFEQ1AsIG9yIGJ5IHJlcXVlc3QgZnJvbSBTLiBQaWVyY2UuXG5cblByb2Nlc3Npbmcgc3RlcHMgaW5jbHVkZWQ6ICBlZGl0aW5nIG9mIHRoZSBkYXRhIHVzaW5nIHZhcmlvdXNcbmRpYWdub3N0aWNzLCBjYWxpYnJhdGlvbiBvZiB0aGUgcGhhc2UgYW5kIGFtcGxpdHVkZSBlcnJvcnMgb2YgdGhlXG5BRENQL25hdmlnYXRpb24vZ3lyb2NvbXBhc3Mgc3lzdGVtIGJ5IGNvdmFyaWFiaWxpdHkgYW5hbHlzaXMgYmV0d2VlblxuY3VycmVudHMgYW5kIHNoaXAgdmVsb2NpdHksIHJlZmVyZW5jZSBsYXllciB2ZWxvY2l0eSBzbW9vdGhpbmcsIGFuZFxuZmluYWwgcHJvZHVjdGlvbiBvZiBlYXJ0aC1yZWZlcmVuY2VkIHZlbG9jaXRpZXMuICBGb3IgbW9yZSBkZXRhaWxzXG5yZWdhcmRpbmcgbWV0aG9kcywgc2VlOiAgUGllcmNlIGV0IGFsLiAoMjAwMCksIERTUiBJSSA0NywgODExLTgyOS5cblxuQ29udGFjdDogRHIuIFN0ZXBoZW4gRC4gUGllcmNlLCBzcGllcmNlQGNvYXMub3JlZ29uc3RhdGUuZWR1XG5cbmNkbV9kYXRhX3R5cGUgPSBPdGhlclxuVkFSSUFCTEVTOlxueWVhclxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmRlcHRoIChtKVxueWVhcmRheSAodGltZSlcbmVhc3R2IChFYXN0d2FyZCBTZWEgV2F0ZXIgVmVsb2NpdHksIG0gcy0xKVxubm9ydGh2IChOb3J0aHdhcmQgU2VhIFdhdGVyIFZlbG9jaXR5LCBtIHMtMSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9ud2lvb3NBZGNwMjAwM19mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvbndpb29zQWRjcDIwMDNfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vbndpb29zQWRjcDIwMDMvaW5kZXguanNvbiIsICJodHRwOi8vbndpb29zLmNvYXMub3JlZ29uc3RhdGUuZWR1OjgwODAvZG9kcy9kcmRzLzIwMDMlMjBIYWtlJTIwU3VydmV5JTIwQURDUC5pbmZvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL253aW9vc0FkY3AyMDAzLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1ud2lvb3NBZGNwMjAwMyZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJPU1UiLCAibndpb29zQWRjcDIwMDMiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbndpb29zQWRjcDIwMDUuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL253aW9vc0FkY3AyMDA1IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL253aW9vc0FkY3AyMDA1LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkhha2UgU3VydmV5IEFEQ1AgKDIwMDUpIiwgIlNoaXBib2FyZCBhY291c3RpYyBEb3BwbGVyIGN1cnJlbnQgcHJvZmlsZXIgZGF0YSBjb2xsZWN0ZWQgZHVyaW5nIHRoZVxuSW50ZWdyYXRlZCBBY291c3RpYyBhbmQgVHJhd2wgU3VydmV5cyBvZiBQYWNpZmljIEhha2UuXG5Qcm9jZXNzaW5nIGJ5OiAgU3RlcGhlbiBQaWVyY2UsIE9yZWdvbiBTdGF0ZSBVbml2ZXJzaXR5XG4oUC4gTS4gS29zcm8gYWxzbyBwZXJmb3JtZWQgc29tZSBwcm9jZXNzaW5nIHN0ZXBzIGluIHRoZSAxOTk4IGNhc2UpXG5EYXRlOiAgMTYgQXVndXN0IDIwMDZcbkRhdGEgcXVhbGl0eTogR29vZCBpbiBnZW5lcmFsXG5NaXNzaW5nIG9yIHBvb3ItcXVhbGl0eSBkYXRhIGhhdmUgYmVlbiBvbWl0dGVkLlxuXG5UaGlzIGRhdGFzZXQgaGFzIGEgc2ltcGxlIHNpbXBsZSB2ZXJzaW9uIG9mIG9ic2VydmVkIHZlbG9jaXRpZXMsIHVzZWZ1bFxuZm9yIG1vc3QgcHVycG9zZXMuICBUaGUgY29tcGxldGUgZGF0YSBzZXRzIHdpdGggYWxsIGNvbmZpZ3VyYXRpb24gYW5kXG5wcm9jZXNzaW5nIGRldGFpbHMgYW5kIGRpYWdub3N0aWMgZGF0YSAoZS5nLiBlcnJvciB2ZWxvY2l0eSwgQUdDLFxuc3BlY3RyYWwgd2lkdGgpIGFyZSBhdmFpbGFibGUgZnJvbSB0aGUgTk9EQyBKb2ludCBBcmNoaXZlIGZvciBTaGlwYm9hcmRcbkFEQ1AsIG9yIGJ5IHJlcXVlc3QgZnJvbSBTLiBQaWVyY2UuXG5cblByb2Nlc3Npbmcgc3RlcHMgaW5jbHVkZWQ6ICBlZGl0aW5nIG9mIHRoZSBkYXRhIHVzaW5nIHZhcmlvdXNcbmRpYWdub3N0aWNzLCBjYWxpYnJhdGlvbiBvZiB0aGUgcGhhc2UgYW5kIGFtcGxpdHVkZSBlcnJvcnMgb2YgdGhlXG5BRENQL25hdmlnYXRpb24vZ3lyb2NvbXBhc3Mgc3lzdGVtIGJ5IGNvdmFyaWFiaWxpdHkgYW5hbHlzaXMgYmV0d2VlblxuY3VycmVudHMgYW5kIHNoaXAgdmVsb2NpdHksIHJlZmVyZW5jZSBsYXllciB2ZWxvY2l0eSBzbW9vdGhpbmcsIGFuZFxuZmluYWwgcHJvZHVjdGlvbiBvZiBlYXJ0aC1yZWZlcmVuY2VkIHZlbG9jaXRpZXMuICBGb3IgbW9yZSBkZXRhaWxzXG5yZWdhcmRpbmcgbWV0aG9kcywgc2VlOiAgUGllcmNlIGV0IGFsLiAoMjAwMCksIERTUiBJSSA0NywgODExLTgyOS5cblxuQ29udGFjdDogRHIuIFN0ZXBoZW4gRC4gUGllcmNlLCBzcGllcmNlQGNvYXMub3JlZ29uc3RhdGUuZWR1XG5cbmNkbV9kYXRhX3R5cGUgPSBPdGhlclxuVkFSSUFCTEVTOlxueWVhclxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmRlcHRoIChtKVxueWVhcmRheSAodGltZSlcbmVhc3R2IChFYXN0d2FyZCBTZWEgV2F0ZXIgVmVsb2NpdHksIG0gcy0xKVxubm9ydGh2IChOb3J0aHdhcmQgU2VhIFdhdGVyIFZlbG9jaXR5LCBtIHMtMSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9ud2lvb3NBZGNwMjAwNV9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvbndpb29zQWRjcDIwMDVfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vbndpb29zQWRjcDIwMDUvaW5kZXguanNvbiIsICJodHRwOi8vbndpb29zLmNvYXMub3JlZ29uc3RhdGUuZWR1OjgwODAvZG9kcy9kcmRzLzIwMDUlMjBIYWtlJTIwU3VydmV5JTIwQURDUC5pbmZvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL253aW9vc0FkY3AyMDA1LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1ud2lvb3NBZGNwMjAwNSZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJPU1UiLCAibndpb29zQWRjcDIwMDUiXSwKICAgICAgWyIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF9lNWI0X2Q5MDVfOTllZiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfZTViNF9kOTA1Xzk5ZWYuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiSGF3YWlpIENsZWFuIFdhdGVyIEJyYW5jaCAoQ1dCKSBCZWFjaCBXYXRlciBRdWFsaXR5IERhdGEiLCAiRXhwb3N1cmUgdG8gc2V3YWdlIGNvbnRhbWluYXRlZCByZWNyZWF0aW9uYWwgd2F0ZXJzIG1heSBjYXVzZSBnYXN0cm9pbnRlc3RpbmFsIGlsbG5lc3NlcyBpbiBzd2ltbWVycy4gVGhlIFN0YXRlIG9mIEhhd2FpaSBEZXBhcnRtZW50IG9mIEhlYWx0aCAoSElET0gpIENsZWFuIFdhdGVyIEJyYW5jaCAoQ1dCKSBtb25pdG9ycyB0aGUgd2F0ZXJzIG9mIEhhd2FpaSdzIGJlYWNoZXMgZm9yIGNvbmNlbnRyYXRpb25zIG9mIEVudGVyb2NvY2N1cywgd2hpY2ggYWN0cyBhcyBhbiBpbmRpY2F0b3Igb2YgcGF0aG9nZW5zLiBUaGUgQ1dCIGFsc28gdXNlcyBDbG9zdHJpZGl1bSBwZXJmcmluZ2VucyBhcyBhIHNlY29uZGFyeSB0cmFjZXIgb2Ygc2V3YWdlIGNvbnRhbWluYXRpb24uIFJlc3VsdHMgb2YgdGhpcyBtb25pdG9yaW5nIGFyZSBldmFsdWF0ZWQgdXNpbmcgYSBkZWNpc2lvbiBydWxlIHRvIGRldGVybWluZSB3aGV0aGVyIGEgYmVhY2ggaXMgc2FmZSAoXCJDb21wbGlhbnRcIikgb3Igbm90IHNhZmUgKG9uIFwiQWxlcnRcIikgZm9yIHN3aW1taW5nIGFuZCBvdGhlciB3YXRlciBjb250YWN0IGFjdGl2aXRpZXMuIElmIGEgYmVhY2ggaXMgZm91bmQgdG8gYmUgb24gXCJBbGVydFwiIGR1ZSB0byBlbGV2YXRlZCBpbmRpY2F0b3IgYmFjdGVyaWEgbGV2ZWxzLCB0aGUgQ1dCIGlzc3VlcyBwdWJsaWMgd2FybmluZ3MgYW5kIGFsZXJ0cyBhbmQgZGV0ZXJtaW5lcyB3aGV0aGVyIHJlc2FtcGxpbmcgb2YgdGhlIGFyZWEgaXMgbmVjZXNzYXJ5LlxuXG5VbmRlciB0aGUgVS5TLiBCRUFDSCBBY3QsIHRoZSBTdGF0ZSBvZiBIYXdhaWkgcmVjZWl2ZXMgYW4gYW5udWFsIGdyYW50IHRvIGltcGxlbWVudCBpdHMgYmVhY2ggbW9uaXRvcmluZyBwcm9ncmFtLiBUaGlzIHJlcXVpcmVzIHRoZSBTdGF0ZSB0byBjb25kdWN0IGEgbW9uaXRvcmluZyBhbmQgbm90aWZpY2F0aW9uIHByb2dyYW0gdGhhdCBpcyBjb25zaXN0ZW50IHdpdGggcGVyZm9ybWFuY2UgY3JpdGVyaWEgcHVibGlzaGVkIGJ5IHRoZSBVLlMuIEVudmlyb25tZW50YWwgUHJvdGVjdGlvbiBBZ2VuY3kgKEVQQSkgaW4gMjAwMi4gSW4gTWFyY2ggMjAxMCwgRVBBIGFwcHJvdmVkIGFtZW5kbWVudHMgdG8gdGhlIEhhd2FpaSBBZG1pbmlzdHJhdGl2ZSBSdWxlcyAoSEFSKSwgQ2hhcHRlciAxMS01NCwgV2F0ZXIgUXVhbGl0eSBTdGFuZGFyZHMgKENXQiBRQVByZ1AsIEhJRE9IIDIwMTEsIEFwcGVuZGl4IEQpLCB3aGljaCByZXZpc2VkIHRoZSBwcmV2aW91cyBTdGF0ZSBFbnRlcm9jb2NjdXMgY3JpdGVyaWEgb2YgYSBnZW9tZXRyaWMgbWVhbiAoR00pIG9mIDcgY29sb255LWZvcm1pbmcgdW5pdHMgKENGVSkgcGVyIDEwMCBtTCBhbmQgYSBzaW5nbGUgc2FtcGxlIG1heGltdW0gKFNTTSkgb2YgMTAwIENGVS8xMDAgbUwgdG8gbWVldCBjdXJyZW50IEVQQSBndWlkZWxpbmVzLiBUaGUgU3RhdGUgb2YgSGF3YWlpIG5vdyB1c2VzIHRoZSBFUEEgcmVjb21tZW5kZWQgRW50ZXJvY29jY3VzIEdNIGFuZCBTU00gZm9yIHJlY3JlYXRpb25hbCB3YXRlcnMgY29uc2lzdGVudCBpbiB0aGUgMTk4NiBBbWJpZW50IFdhdGVyIFF1YWxpdHkgQ3JpdGVyaWEgZm9yIEJhY3RlcmlhLiBUaGUgY3JpdGVyaW9uIGxpc3RzIHRoZSBHTSBhbmQgU1NNIGZvciBtYXJpbmUgd2F0ZXJzIGFzIDM1IENGVS8xMDAgbUwgYW5kIDEwNCBDRlUvMTAwIG1MLCByZXNwZWN0aXZlbHkuXG5cblRoZSBDV0IgdXRpbGl6ZXMgQ2xvc3RyaWRpdW0gcGVyZnJpbmdlbnMgYXMgYSBzZWNvbmRhcnkgdHJhY2VyIGluIGFkZGl0aW9uIHRvIHRoZSBFbnRlcm9jb2NjdXMgaW5kaWNhdG9yIHRvIGhlbHAgZGlzdGluZ3Vpc2ggYmV0d2VlbiBzZXdhZ2UgYW5kIG5vbi1zZXdhZ2Ugc291cmNlcyBvZiBlbGV2YXRlZCBFbnRlcm9jb2NjdXMgbGV2ZWxzIGluIG1hcmluZSBjb2FzdGFsIHdhdGVycy4gVGhlIHJlbGlhYmlsaXR5IG9mIEVudGVyb2NvY2N1cyBhcyBhbiBpbmRpY2F0b3Igb3JnYW5pc20gaW4gdHJvcGljYWwgZW52aXJvbm1lbnRzIGhhcyBiZWVuIHF1ZXN0aW9uZWQuIFRoaXMgaXNzdWUgd2FzIGZvcm1hbGx5IGRvY3VtZW50ZWQgaW4gdGhlIHJlcG9ydCwgVHJvcGljYWwgV2F0ZXIgUXVhbGl0eSBJbmRpY2F0b3IgV29ya3Nob3AgKEZ1amlva2EgYW5kIEJ5YXBwYW5haGFsbGksIDIwMDMpLlxuXG5PbmUgb2YgdGhlIGxpbWl0YXRpb25zIG9mIGFsbCBhdmFpbGFibGUgYW5kIEVQQS1hcHByb3ZlZCB0ZXN0IG1ldGhvZHMgaXMgdGhhdCB0aGUgc2FtcGxlIG11c3QgYmUgaW5jdWJhdGVkIGZvciBhYm91dCAyNCBob3Vycy4gQXMgYSByZXN1bHQsIHRoZSBwdWJsaWMgZmluZHMgb3V0IHRvZGF5IHdoZW4gdGhleSBzaG91bGRuJ3QgaGF2ZSBnb25lIGluIHRoZSB3YXRlciB5ZXN0ZXJkYXkuIEFzIGEgcmVzdWx0LCB3YXJuaW5nIHNpZ25zIG9uIHRoZSBiZWFjaCBtYXkgb3IgbWF5IG5vdCBiZSByZWZsZWN0aXZlIG9mIGFjdHVhbCB3YXRlciBxdWFsaXR5IGJlY2F1c2UgdGhleSBhcmUgYmFzZWQgb24gdGVzdHMgcGVyZm9ybWVkIG9uZSBvciBtb3JlIGRheXMgYWdvLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG4uLi4gKDEzIG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2hhd2FpaV9zb2VzdF9lNWI0X2Q5MDVfOTllZl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvaGF3YWlpX3NvZXN0X2U1YjRfZDkwNV85OWVmX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2hhd2FpaV9zb2VzdF9lNWI0X2Q5MDVfOTllZi9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cuYmVhY2hhcGVkaWEub3JnL1N0YXRlX29mX3RoZV9CZWFjaC9TdGF0ZV9SZXBvcnRzL0hJL1dhdGVyX1F1YWxpdHkiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvaGF3YWlpX3NvZXN0X2U1YjRfZDkwNV85OWVmLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1oYXdhaWlfc29lc3RfZTViNF9kOTA1Xzk5ZWYmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiU3RhdGUgb2YgSGF3YWlpIENsZWFuIFdhdGVyIEJyYW5jaCAoQ1dCKSIsICJoYXdhaWlfc29lc3RfZTViNF9kOTA1Xzk5ZWYiXSwKICAgICAgWyIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VhcnRoQ3ViZUxpc2lyZEhpc3RUc2kiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZWFydGhDdWJlTGlzaXJkSGlzdFRzaS5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJIaXN0b3JpY2FsIFRvdGFsIFNvbGFyIElycmFkaWFuY2UgUmVjb25zdHJ1Y3Rpb24iLCAiSGlzdG9yaWNhbCBUb3RhbCBTb2xhciBJcnJhZGlhbmNlIChUU0kpIFJlY29uc3RydWN0aW9uIGVjb25zdHJ1Y3Rpb24gZnJvbSBXYW5nLCBMZWFuLCBTaGVlbGV5IChBcEosIDIwMDUpLiAgT2Zmc2V0IC00LjgxNzggVy9tXjIgdG8gbWF0Y2ggU09SQ0UvVElNIGFic29sdXRlIHZhbHVlIGZyb20gS29wcCwgTGF3cmVuY2UsIGFuZCBSb3R0bWFuIChTb2xhciBQaHlzLCAyMDA1KS4gRXh0ZW5kZWQgdXNpbmcgU09SQ0UvVElNIGFubnVhbCBhdmVyYWdlcyBmcm9tIDIwMDMgb253YXJkLiBDb21wdXRlZCBieSBHcmVnIEtvcHAuICBGcm9tIHRoZSBMQVNQIEludGVyYWN0aXZlIFNvbGFyIElycmFkaWFuY2UgRGF0YSAoTElTSVJEKSBDZW50ZXJcblxuY2RtX2RhdGFfdHlwZSA9IE90aGVyXG5WQVJJQUJMRVM6XG55ZWFyXG5pcnJhZGlhbmNlIChUb3RhbCBTb2xhciBJcnJhZGlhbmNlLCBXL21eMilcbiIsICIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZWFydGhDdWJlTGlzaXJkSGlzdFRzaS9pbmRleC5qc29uIiwgImh0dHA6Ly9sYXNwLmNvbG9yYWRvLmVkdS9saXNpcmQvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VhcnRoQ3ViZUxpc2lyZEhpc3RUc2kucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVhcnRoQ3ViZUxpc2lyZEhpc3RUc2kmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTElTSVJEIiwgImVhcnRoQ3ViZUxpc2lyZEhpc3RUc2kiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvTGlxdWlkUl9IQkczXzIwMTVfYWlzLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9MaXF1aWRSX0hCRzNfMjAxNV9haXMiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvTGlxdWlkUl9IQkczXzIwMTVfYWlzLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkxpcXVpZCBSb2JvdGljcyBXYXZlIEdsaWRlciwgSG9uZXkgQmFkZ2VyIChHMyksIDIwMTUsIEFJUyIsICJMaXF1aWQgUm9ib3RpY3MgV2F2ZSBHbGlkZXIsIEhvbmV5IEJhZGdlciAoRzMpLCAyMDE1LCBBSVMuIFRoZSBNQUdJIG1pc3Npb24gaXMgdG8gdXNlIHRoZSBXYXZlIEdsaWRlciB0byBzYW1wbGUgdGhlIGxhdGUgc3VtbWVyIGNobG9yb3BoeWxsIGJsb29tIHRoYXQgZGV2ZWxvcHMgbmVhciAzMFx1MDBiME4sIHdpdGggdGhlIGdvYWwgb2YgdXNpbmcgdGhlIGNhbWVyYSBhbmQgTElTU1QtSG9sbyB0byB0cnkgdG8gaWRlbnRpZnkgc3BlY2llcyBpbiB0aGUgYmxvb21zIGFuZCB0aGVuIGZvbGxvdyB0aGUgZGV2ZWxvcG1lbnQgb2YgcGh5dG9wbGFua3RvbiBhZ2dyZWdhdGVzLiBUaGVzZSBhZ2dyZWdhdGVzIGhhdmUgcmVjZW50bHkgYmVlbiBzaG93biB0byBiZSBhIHNpZ25pZmljYW50IHBhcnQgb2YgdGhlIHRvdGFsIGFtb3VudCBvZiBjYXJib24gdGhhdCBzaW5rcyB0byB0aGUgZGVlcCBzZWEuIEthcmwgZXQgYWwgKDIwMTIpIGZvdW5kIHRoYXQgaW4gZWFjaCBvZiB0aGUgcGFzdCAxMyB5ZWFycywgdGhlcmUgd2FzIGEgZmx1eCBvZiBtYXRlcmlhbCB0byA0LDAwMCBtICh0aGUgc3VtbWVyIGV4cG9ydCBwdWxzZSkgdGhhdCByZXByZXNlbnRlZCB+MjAlIG9mIHRoZSB0b3RhbCBhbm51YWwgZmx1eC4gV29yayBiYXNlZCBvbiBzYXRlbGxpdGUgb2NlYW4gY29sb3IgZGF0YSBvdmVyIHRoZSBwYXN0IGRlY2FkZSBoYXMgcmV2ZWFsZWQgdGhlIGV4aXN0ZW5jZSBvZiBsYXJnZSBwaHl0b3BsYW5rdG9uIGJsb29tcyBpbiB0aGUgUGFjaWZpYyBPY2VhbiB0aGF0IGNvdmVyIHRob3VzYW5kcyBvZiBrbTIsIHBlcnNpc3QgZm9yIHdlZWtzIG9yIGxvbmdlciwgYW5kIGFyZSBvZnRlbiBkb21pbmF0ZWQgYnkgbml0cm9nZW4tZml4aW5nIGRpYXRvbSBzeW1iaW9zZXMgKFdpbHNvbiBldCBhbC4gMjAwOCkuIFdlIGhvcGUgdG8gYmUgYWJsZSB0byBleGFtaW5lIHdoZXRoZXIgdGhpcyBhZ2dyZWdhdGlvbiBpcyBvY2N1cnJpbmcgaW4gdGhlIHZhc3Qgb2NlYW5pYyByZWdpb25zIG5vcnRoIGFuZCBlYXN0IG9mIEhhd2FpJ2kgYW5kIHByb3ZpZGUgYSBiYXNpbi1zY2FsZSBjb250ZXh0IGZvciB0aGUgQUxPSEEgb2JzZXJ2YXRpb25zLiBUaGVzZSBldmVudHMgaGF2ZSBwcm92ZW4gZGlmZmljdWx0IHRvIHN0dWR5IG91dHNpZGUgb2YgdGhlIHRpbWUgc2VyaWVzIHN0YXRpb24gQUxPSEEgYXQgSGF3YWknaS5cblxuY2RtX2RhdGFfdHlwZSA9IFRyYWplY3RvcnlcblZBUklBQkxFUzpcbnZlaGljbGVOYW1lIChWZWhpY2xlIE5hbWUpXG5haXNcbmZlZWRfdmVyc2lvblxudGltZSAoRGF0ZXRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuTU1TSSAoTWFyaXRpbWUgTW9iaWxlIFNlcnZpY2UgSWRlbnRpdHkpXG5DT0cgKENvdXJzZSBPdmVyIEdyb3VuZCwgZGVncmVlc190cnVlKVxuU09HIChTcGVlZCBPdmVyIEdyb3VuZCwga25vdHMpXG5ST1QgKFJhdGUgT2YgVHVybiwgZGVncmVlcy9taW4pXG5IZWFkaW5nIChkZWdyZWVzX3RydWUpXG5OYXZpZ2F0aW9uU3RhdHVzIChOYXZpZ2F0aW9uIFN0YXR1cylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9MaXF1aWRSX0hCRzNfMjAxNV9haXNfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL0xpcXVpZFJfSEJHM18yMDE1X2Fpc19pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9MaXF1aWRSX0hCRzNfMjAxNV9haXMvaW5kZXguanNvbiIsICJodHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L01BR0kvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL0xpcXVpZFJfSEJHM18yMDE1X2Fpcy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9TGlxdWlkUl9IQkczXzIwMTVfYWlzJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkxpcXVpZCBSb2JvdGljcywgVVQgQXVzdGluLCBOT0FBIE5NRlMgU1dGU0MgRVJEIiwgIkxpcXVpZFJfSEJHM18yMDE1X2FpcyJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9MaXF1aWRSX0hCRzNfMjAxNV9jMy5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvTGlxdWlkUl9IQkczXzIwMTVfYzMiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvTGlxdWlkUl9IQkczXzIwMTVfYzMuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiTGlxdWlkIFJvYm90aWNzIFdhdmUgR2xpZGVyLCBIb25leSBCYWRnZXIgKEczKSwgMjAxNSwgQzMiLCAiTGlxdWlkIFJvYm90aWNzIFdhdmUgR2xpZGVyLCBIb25leSBCYWRnZXIgKEczKSwgMjAxNSwgQzMuXG5DMyBib2FyZCBudW1iZXIgODIxNSAobm90IGNvYXRlZCkgYXBwZWFycyBhcyBib2FyZF9pZD0zMiwgdGFza19pZD0yMy5cbkMzIGJvYXJkIG51bWJlciA3NzEgKGNvYXRlZCkgYXBwZWFycyBhcyBib2FyZF9pZD0zLCB0YXNrX2lkPTMuIFRoZSBNQUdJIG1pc3Npb24gaXMgdG8gdXNlIHRoZSBXYXZlIEdsaWRlciB0byBzYW1wbGUgdGhlIGxhdGUgc3VtbWVyIGNobG9yb3BoeWxsIGJsb29tIHRoYXQgZGV2ZWxvcHMgbmVhciAzMFx1MDBiME4sIHdpdGggdGhlIGdvYWwgb2YgdXNpbmcgdGhlIGNhbWVyYSBhbmQgTElTU1QtSG9sbyB0byB0cnkgdG8gaWRlbnRpZnkgc3BlY2llcyBpbiB0aGUgYmxvb21zIGFuZCB0aGVuIGZvbGxvdyB0aGUgZGV2ZWxvcG1lbnQgb2YgcGh5dG9wbGFua3RvbiBhZ2dyZWdhdGVzLiBUaGVzZSBhZ2dyZWdhdGVzIGhhdmUgcmVjZW50bHkgYmVlbiBzaG93biB0byBiZSBhIHNpZ25pZmljYW50IHBhcnQgb2YgdGhlIHRvdGFsIGFtb3VudCBvZiBjYXJib24gdGhhdCBzaW5rcyB0byB0aGUgZGVlcCBzZWEuIEthcmwgZXQgYWwgKDIwMTIpIGZvdW5kIHRoYXQgaW4gZWFjaCBvZiB0aGUgcGFzdCAxMyB5ZWFycywgdGhlcmUgd2FzIGEgZmx1eCBvZiBtYXRlcmlhbCB0byA0LDAwMCBtICh0aGUgc3VtbWVyIGV4cG9ydCBwdWxzZSkgdGhhdCByZXByZXNlbnRlZCB+MjAlIG9mIHRoZSB0b3RhbCBhbm51YWwgZmx1eC4gV29yayBiYXNlZCBvbiBzYXRlbGxpdGUgb2NlYW4gY29sb3IgZGF0YSBvdmVyIHRoZSBwYXN0IGRlY2FkZSBoYXMgcmV2ZWFsZWQgdGhlIGV4aXN0ZW5jZSBvZiBsYXJnZSBwaHl0b3BsYW5rdG9uIGJsb29tcyBpbiB0aGUgUGFjaWZpYyBPY2VhbiB0aGF0IGNvdmVyIHRob3VzYW5kcyBvZiBrbTIsIHBlcnNpc3QgZm9yIHdlZWtzIG9yIGxvbmdlciwgYW5kIGFyZSBvZnRlbiBkb21pbmF0ZWQgYnkgbml0cm9nZW4tZml4aW5nIGRpYXRvbSBzeW1iaW9zZXMgKFdpbHNvbiBldCBhbC4gMjAwOCkuIFdlIGhvcGUgdG8gYmUgYWJsZSB0byBleGFtaW5lIHdoZXRoZXIgdGhpcyBhZ2dyZWdhdGlvbiBpcyBvY2N1cnJpbmcgaW4gdGhlIHZhc3Qgb2NlYW5pYyByZWdpb25zIG5vcnRoIGFuZCBlYXN0IG9mIEhhd2FpJ2kgYW5kIHByb3ZpZGUgYSBiYXNpbi1zY2FsZSBjb250ZXh0IGZvciB0aGUgQUxPSEEgb2JzZXJ2YXRpb25zLiBUaGVzZSBldmVudHMgaGF2ZSBwcm92ZW4gZGlmZmljdWx0IHRvIHN0dWR5IG91dHNpZGUgb2YgdGhlIHRpbWUgc2VyaWVzIHN0YXRpb24gQUxPSEEgYXQgSGF3YWknaS5cblxuY2RtX2RhdGFfdHlwZSA9IFRyYWplY3RvcnlcblZBUklBQkxFUzpcbnZlaGljbGVOYW1lIChWZWhpY2xlIE5hbWUpXG5ib2FyZF9pZFxudGFza19pZFxuYzNfIChDMylcbmZlZWRfdmVyc2lvblxudGltZSAoRGF0ZXRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxudW5peF90aW1lc3RhbXAgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5jMV9jaGxvcm9waHlsbCAoQ2hhbm5lbCAxOiBDaGxvcm9waHlsbCwgUkZVKVxuYzJfQ0RPTSAoQ2hhbm5lbCAyOiBDRE9NLCBSRlUpXG5jM19waHljb2VyeXRocmluIChDaGFubmVsIDM6IFBoeWNvZXJ5dGhyaW4sIFJGVSlcbnByZXNzdXJlICg/KVxudGVtcGVyYXR1cmUgKGRlZ3JlZV9DKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL0xpcXVpZFJfSEJHM18yMDE1X2MzX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9MaXF1aWRSX0hCRzNfMjAxNV9jM19pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9MaXF1aWRSX0hCRzNfMjAxNV9jMy9pbmRleC5qc29uIiwgImh0dHBzOi8vb2NlYW52aWV3LnBmZWcubm9hYS5nb3YvTUFHSS8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvTGlxdWlkUl9IQkczXzIwMTVfYzMucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPUxpcXVpZFJfSEJHM18yMDE1X2MzJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkxpcXVpZCBSb2JvdGljcywgVVQgQXVzdGluLCBOT0FBIE5NRlMgU1dGU0MgRVJEIiwgIkxpcXVpZFJfSEJHM18yMDE1X2MzIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL0xpcXVpZFJfSEJHM18yMDE1X2N0ZC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvTGlxdWlkUl9IQkczXzIwMTVfY3RkIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL0xpcXVpZFJfSEJHM18yMDE1X2N0ZC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJMaXF1aWQgUm9ib3RpY3MgV2F2ZSBHbGlkZXIsIEhvbmV5IEJhZGdlciAoRzMpLCAyMDE1LCBDVEQiLCAiTGlxdWlkIFJvYm90aWNzIFdhdmUgR2xpZGVyLCBIb25leSBCYWRnZXIgKEczKSwgMjAxNSwgQ1RELiBUaGUgTUFHSSBtaXNzaW9uIGlzIHRvIHVzZSB0aGUgV2F2ZSBHbGlkZXIgdG8gc2FtcGxlIHRoZSBsYXRlIHN1bW1lciBjaGxvcm9waHlsbCBibG9vbSB0aGF0IGRldmVsb3BzIG5lYXIgMzBcdTAwYjBOLCB3aXRoIHRoZSBnb2FsIG9mIHVzaW5nIHRoZSBjYW1lcmEgYW5kIExJU1NULUhvbG8gdG8gdHJ5IHRvIGlkZW50aWZ5IHNwZWNpZXMgaW4gdGhlIGJsb29tcyBhbmQgdGhlbiBmb2xsb3cgdGhlIGRldmVsb3BtZW50IG9mIHBoeXRvcGxhbmt0b24gYWdncmVnYXRlcy4gVGhlc2UgYWdncmVnYXRlcyBoYXZlIHJlY2VudGx5IGJlZW4gc2hvd24gdG8gYmUgYSBzaWduaWZpY2FudCBwYXJ0IG9mIHRoZSB0b3RhbCBhbW91bnQgb2YgY2FyYm9uIHRoYXQgc2lua3MgdG8gdGhlIGRlZXAgc2VhLiBLYXJsIGV0IGFsICgyMDEyKSBmb3VuZCB0aGF0IGluIGVhY2ggb2YgdGhlIHBhc3QgMTMgeWVhcnMsIHRoZXJlIHdhcyBhIGZsdXggb2YgbWF0ZXJpYWwgdG8gNCwwMDAgbSAodGhlIHN1bW1lciBleHBvcnQgcHVsc2UpIHRoYXQgcmVwcmVzZW50ZWQgfjIwJSBvZiB0aGUgdG90YWwgYW5udWFsIGZsdXguIFdvcmsgYmFzZWQgb24gc2F0ZWxsaXRlIG9jZWFuIGNvbG9yIGRhdGEgb3ZlciB0aGUgcGFzdCBkZWNhZGUgaGFzIHJldmVhbGVkIHRoZSBleGlzdGVuY2Ugb2YgbGFyZ2UgcGh5dG9wbGFua3RvbiBibG9vbXMgaW4gdGhlIFBhY2lmaWMgT2NlYW4gdGhhdCBjb3ZlciB0aG91c2FuZHMgb2Yga20yLCBwZXJzaXN0IGZvciB3ZWVrcyBvciBsb25nZXIsIGFuZCBhcmUgb2Z0ZW4gZG9taW5hdGVkIGJ5IG5pdHJvZ2VuLWZpeGluZyBkaWF0b20gc3ltYmlvc2VzIChXaWxzb24gZXQgYWwuIDIwMDgpLiBXZSBob3BlIHRvIGJlIGFibGUgdG8gZXhhbWluZSB3aGV0aGVyIHRoaXMgYWdncmVnYXRpb24gaXMgb2NjdXJyaW5nIGluIHRoZSB2YXN0IG9jZWFuaWMgcmVnaW9ucyBub3J0aCBhbmQgZWFzdCBvZiBIYXdhaSdpIGFuZCBwcm92aWRlIGEgYmFzaW4tc2NhbGUgY29udGV4dCBmb3IgdGhlIEFMT0hBIG9ic2VydmF0aW9ucy4gVGhlc2UgZXZlbnRzIGhhdmUgcHJvdmVuIGRpZmZpY3VsdCB0byBzdHVkeSBvdXRzaWRlIG9mIHRoZSB0aW1lIHNlcmllcyBzdGF0aW9uIEFMT0hBIGF0IEhhd2FpJ2kuXG5cbmNkbV9kYXRhX3R5cGUgPSBUcmFqZWN0b3J5XG5WQVJJQUJMRVM6XG52ZWhpY2xlTmFtZSAoVmVoaWNsZSBOYW1lKVxuYm9hcmRfaWRcbnRhc2tfaWRcbmN0ZFxuZmVlZF92ZXJzaW9uXG50aW1lIChEYXRldGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG51bml4X3RpbWVzdGFtcCAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnRlbXBlcmF0dXJlIChkZWdyZWVfQylcbnByZXNzdXJlIChkQmFyKVxuY29uZHVjdGl2aXR5IChTZWEgV2F0ZXIgRWxlY3RyaWNhbCBDb25kdWN0aXZpdHksIFMvbSlcbmRpc3NvbHZlZF9PX3VuY2FsaWJyYXRlZCAoSHopXG5wcmFjdGljYWxfc2FsaW5pdHkgKFNlYSBXYXRlciBQcmFjdGljYWwgU2FsaW5pdHksIFBTVSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9MaXF1aWRSX0hCRzNfMjAxNV9jdGRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL0xpcXVpZFJfSEJHM18yMDE1X2N0ZF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9MaXF1aWRSX0hCRzNfMjAxNV9jdGQvaW5kZXguanNvbiIsICJodHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L01BR0kvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL0xpcXVpZFJfSEJHM18yMDE1X2N0ZC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9TGlxdWlkUl9IQkczXzIwMTVfY3RkJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkxpcXVpZCBSb2JvdGljcywgVVQgQXVzdGluLCBOT0FBIE5NRlMgU1dGU0MgRVJEIiwgIkxpcXVpZFJfSEJHM18yMDE1X2N0ZCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9MaXF1aWRSX0hCRzNfMjAxNV9tb3NlLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9MaXF1aWRSX0hCRzNfMjAxNV9tb3NlIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL0xpcXVpZFJfSEJHM18yMDE1X21vc2UuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiTGlxdWlkIFJvYm90aWNzIFdhdmUgR2xpZGVyLCBIb25leSBCYWRnZXIgKEczKSwgMjAxNSwgTU9TRSIsICJMaXF1aWQgUm9ib3RpY3MgV2F2ZSBHbGlkZXIsIEhvbmV5IEJhZGdlciAoRzMpLCAyMDE1LCBNT1NFLiBUaGUgTUFHSSBtaXNzaW9uIGlzIHRvIHVzZSB0aGUgV2F2ZSBHbGlkZXIgdG8gc2FtcGxlIHRoZSBsYXRlIHN1bW1lciBjaGxvcm9waHlsbCBibG9vbSB0aGF0IGRldmVsb3BzIG5lYXIgMzBcdTAwYjBOLCB3aXRoIHRoZSBnb2FsIG9mIHVzaW5nIHRoZSBjYW1lcmEgYW5kIExJU1NULUhvbG8gdG8gdHJ5IHRvIGlkZW50aWZ5IHNwZWNpZXMgaW4gdGhlIGJsb29tcyBhbmQgdGhlbiBmb2xsb3cgdGhlIGRldmVsb3BtZW50IG9mIHBoeXRvcGxhbmt0b24gYWdncmVnYXRlcy4gVGhlc2UgYWdncmVnYXRlcyBoYXZlIHJlY2VudGx5IGJlZW4gc2hvd24gdG8gYmUgYSBzaWduaWZpY2FudCBwYXJ0IG9mIHRoZSB0b3RhbCBhbW91bnQgb2YgY2FyYm9uIHRoYXQgc2lua3MgdG8gdGhlIGRlZXAgc2VhLiBLYXJsIGV0IGFsICgyMDEyKSBmb3VuZCB0aGF0IGluIGVhY2ggb2YgdGhlIHBhc3QgMTMgeWVhcnMsIHRoZXJlIHdhcyBhIGZsdXggb2YgbWF0ZXJpYWwgdG8gNCwwMDAgbSAodGhlIHN1bW1lciBleHBvcnQgcHVsc2UpIHRoYXQgcmVwcmVzZW50ZWQgfjIwJSBvZiB0aGUgdG90YWwgYW5udWFsIGZsdXguIFdvcmsgYmFzZWQgb24gc2F0ZWxsaXRlIG9jZWFuIGNvbG9yIGRhdGEgb3ZlciB0aGUgcGFzdCBkZWNhZGUgaGFzIHJldmVhbGVkIHRoZSBleGlzdGVuY2Ugb2YgbGFyZ2UgcGh5dG9wbGFua3RvbiBibG9vbXMgaW4gdGhlIFBhY2lmaWMgT2NlYW4gdGhhdCBjb3ZlciB0aG91c2FuZHMgb2Yga20yLCBwZXJzaXN0IGZvciB3ZWVrcyBvciBsb25nZXIsIGFuZCBhcmUgb2Z0ZW4gZG9taW5hdGVkIGJ5IG5pdHJvZ2VuLWZpeGluZyBkaWF0b20gc3ltYmlvc2VzIChXaWxzb24gZXQgYWwuIDIwMDgpLiBXZSBob3BlIHRvIGJlIGFibGUgdG8gZXhhbWluZSB3aGV0aGVyIHRoaXMgYWdncmVnYXRpb24gaXMgb2NjdXJyaW5nIGluIHRoZSB2YXN0IG9jZWFuaWMgcmVnaW9ucyBub3J0aCBhbmQgZWFzdCBvZiBIYXdhaSdpIGFuZCBwcm92aWRlIGEgYmFzaW4tc2NhbGUgY29udGV4dCBmb3IgdGhlIEFMT0hBIG9ic2VydmF0aW9ucy4gVGhlc2UgZXZlbnRzIGhhdmUgcHJvdmVuIGRpZmZpY3VsdCB0byBzdHVkeSBvdXRzaWRlIG9mIHRoZSB0aW1lIHNlcmllcyBzdGF0aW9uIEFMT0hBIGF0IEhhd2FpJ2kuXG5cbmNkbV9kYXRhX3R5cGUgPSBUcmFqZWN0b3J5XG5WQVJJQUJMRVM6XG52ZWhpY2xlTmFtZSAoVmVoaWNsZSBOYW1lKVxuYm9hcmRfaWRcbnRhc2tfaWRcbm1vc2VcbmZlZWRfdmVyc2lvblxudGltZSAoRGF0ZXRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxudW5peF90aW1lc3RhbXAgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zaWduaWZpY2FudF93YXZlX2hlaWdodCAoU2VhIFN1cmZhY2UgV2F2ZSBTaWduaWZpY2FudCBIZWlnaHQsIG0pXG5hdmVyYWdlX3BlcmlvZF9hbGxfd2F2ZXMgKFNlYSBTdXJmYWNlIFN3ZWxsIFdhdmUgUGVyaW9kLCBzKVxucGVyaW9kX2JldHdlZW5fc2lnbmlmaWNhbnRfd2F2ZXMgKFNlYSBTdXJmYWNlIFN3ZWxsIFdhdmUgUGVyaW9kLCBzKVxuZGlyZWN0aW9uX29mX3NpZ25pZmljYW50X3dhdmVzIChTZWEgU3VyZmFjZSBXYXZlIFRvIERpcmVjdGlvbiwgZGVncmVlc190cnVlKVxubnVtYmVyX2F2ZXJhZ2VkX3NwZWN0cmFcbm51bWJlcl9zYW1wbGVzX3Blcl9zcGVjdHJ1bVxubnVtYmVyX3NhbXBsZV9nYXBzXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvTGlxdWlkUl9IQkczXzIwMTVfbW9zZV9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvTGlxdWlkUl9IQkczXzIwMTVfbW9zZV9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9MaXF1aWRSX0hCRzNfMjAxNV9tb3NlL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9NQUdJLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9MaXF1aWRSX0hCRzNfMjAxNV9tb3NlLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1MaXF1aWRSX0hCRzNfMjAxNV9tb3NlJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkxpcXVpZCBSb2JvdGljcywgVVQgQXVzdGluLCBOT0FBIE5NRlMgU1dGU0MgRVJEIiwgIkxpcXVpZFJfSEJHM18yMDE1X21vc2UiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvTGlxdWlkUl9IQkczXzIwMTVfcGh5dG9mbGFzaC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvTGlxdWlkUl9IQkczXzIwMTVfcGh5dG9mbGFzaCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9MaXF1aWRSX0hCRzNfMjAxNV9waHl0b2ZsYXNoLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkxpcXVpZCBSb2JvdGljcyBXYXZlIEdsaWRlciwgSG9uZXkgQmFkZ2VyIChHMyksIDIwMTUsIFBoeXRvZmxhc2giLCAiTGlxdWlkIFJvYm90aWNzIFdhdmUgR2xpZGVyLCBIb25leSBCYWRnZXIgKEczKSwgMjAxNSwgUGh5dG9mbGFzaC4gVGhlIE1BR0kgbWlzc2lvbiBpcyB0byB1c2UgdGhlIFdhdmUgR2xpZGVyIHRvIHNhbXBsZSB0aGUgbGF0ZSBzdW1tZXIgY2hsb3JvcGh5bGwgYmxvb20gdGhhdCBkZXZlbG9wcyBuZWFyIDMwXHUwMGIwTiwgd2l0aCB0aGUgZ29hbCBvZiB1c2luZyB0aGUgY2FtZXJhIGFuZCBMSVNTVC1Ib2xvIHRvIHRyeSB0byBpZGVudGlmeSBzcGVjaWVzIGluIHRoZSBibG9vbXMgYW5kIHRoZW4gZm9sbG93IHRoZSBkZXZlbG9wbWVudCBvZiBwaHl0b3BsYW5rdG9uIGFnZ3JlZ2F0ZXMuIFRoZXNlIGFnZ3JlZ2F0ZXMgaGF2ZSByZWNlbnRseSBiZWVuIHNob3duIHRvIGJlIGEgc2lnbmlmaWNhbnQgcGFydCBvZiB0aGUgdG90YWwgYW1vdW50IG9mIGNhcmJvbiB0aGF0IHNpbmtzIHRvIHRoZSBkZWVwIHNlYS4gS2FybCBldCBhbCAoMjAxMikgZm91bmQgdGhhdCBpbiBlYWNoIG9mIHRoZSBwYXN0IDEzIHllYXJzLCB0aGVyZSB3YXMgYSBmbHV4IG9mIG1hdGVyaWFsIHRvIDQsMDAwIG0gKHRoZSBzdW1tZXIgZXhwb3J0IHB1bHNlKSB0aGF0IHJlcHJlc2VudGVkIH4yMCUgb2YgdGhlIHRvdGFsIGFubnVhbCBmbHV4LiBXb3JrIGJhc2VkIG9uIHNhdGVsbGl0ZSBvY2VhbiBjb2xvciBkYXRhIG92ZXIgdGhlIHBhc3QgZGVjYWRlIGhhcyByZXZlYWxlZCB0aGUgZXhpc3RlbmNlIG9mIGxhcmdlIHBoeXRvcGxhbmt0b24gYmxvb21zIGluIHRoZSBQYWNpZmljIE9jZWFuIHRoYXQgY292ZXIgdGhvdXNhbmRzIG9mIGttMiwgcGVyc2lzdCBmb3Igd2Vla3Mgb3IgbG9uZ2VyLCBhbmQgYXJlIG9mdGVuIGRvbWluYXRlZCBieSBuaXRyb2dlbi1maXhpbmcgZGlhdG9tIHN5bWJpb3NlcyAoV2lsc29uIGV0IGFsLiAyMDA4KS4gV2UgaG9wZSB0byBiZSBhYmxlIHRvIGV4YW1pbmUgd2hldGhlciB0aGlzIGFnZ3JlZ2F0aW9uIGlzIG9jY3VycmluZyBpbiB0aGUgdmFzdCBvY2VhbmljIHJlZ2lvbnMgbm9ydGggYW5kIGVhc3Qgb2YgSGF3YWknaSBhbmQgcHJvdmlkZSBhIGJhc2luLXNjYWxlIGNvbnRleHQgZm9yIHRoZSBBTE9IQSBvYnNlcnZhdGlvbnMuIFRoZXNlIGV2ZW50cyBoYXZlIHByb3ZlbiBkaWZmaWN1bHQgdG8gc3R1ZHkgb3V0c2lkZSBvZiB0aGUgdGltZSBzZXJpZXMgc3RhdGlvbiBBTE9IQSBhdCBIYXdhaSdpLlxuXG5jZG1fZGF0YV90eXBlID0gVHJhamVjdG9yeVxuVkFSSUFCTEVTOlxudmVoaWNsZU5hbWUgKFZlaGljbGUgTmFtZSlcbmJvYXJkX2lkXG50YXNrX2lkXG5waHl0b2ZsYXNoXG5mZWVkX3ZlcnNpb25cbnRpbWUgKERhdGV0aW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbnVuaXhfdGltZXN0YW1wIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuRm9cbkZtXG5CbGFua1xuRnZcbllpZWxkXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvTGlxdWlkUl9IQkczXzIwMTVfcGh5dG9mbGFzaF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvTGlxdWlkUl9IQkczXzIwMTVfcGh5dG9mbGFzaF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9MaXF1aWRSX0hCRzNfMjAxNV9waHl0b2ZsYXNoL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9NQUdJLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9MaXF1aWRSX0hCRzNfMjAxNV9waHl0b2ZsYXNoLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1MaXF1aWRSX0hCRzNfMjAxNV9waHl0b2ZsYXNoJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkxpcXVpZCBSb2JvdGljcywgVVQgQXVzdGluLCBOT0FBIE5NRlMgU1dGU0MgRVJEIiwgIkxpcXVpZFJfSEJHM18yMDE1X3BoeXRvZmxhc2giXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvTGlxdWlkUl9IQkczXzIwMTVfdGVsZW1ldHJ5LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9MaXF1aWRSX0hCRzNfMjAxNV90ZWxlbWV0cnkiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvTGlxdWlkUl9IQkczXzIwMTVfdGVsZW1ldHJ5LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkxpcXVpZCBSb2JvdGljcyBXYXZlIEdsaWRlciwgSG9uZXkgQmFkZ2VyIChHMyksIDIwMTUsIFRlbGVtZXRyeSIsICJMaXF1aWQgUm9ib3RpY3MgV2F2ZSBHbGlkZXIsIEhvbmV5IEJhZGdlciAoRzMpLCAyMDE1LCBUZWxlbWV0cnkuIFRoZSBNQUdJIG1pc3Npb24gaXMgdG8gdXNlIHRoZSBXYXZlIEdsaWRlciB0byBzYW1wbGUgdGhlIGxhdGUgc3VtbWVyIGNobG9yb3BoeWxsIGJsb29tIHRoYXQgZGV2ZWxvcHMgbmVhciAzMFx1MDBiME4sIHdpdGggdGhlIGdvYWwgb2YgdXNpbmcgdGhlIGNhbWVyYSBhbmQgTElTU1QtSG9sbyB0byB0cnkgdG8gaWRlbnRpZnkgc3BlY2llcyBpbiB0aGUgYmxvb21zIGFuZCB0aGVuIGZvbGxvdyB0aGUgZGV2ZWxvcG1lbnQgb2YgcGh5dG9wbGFua3RvbiBhZ2dyZWdhdGVzLiBUaGVzZSBhZ2dyZWdhdGVzIGhhdmUgcmVjZW50bHkgYmVlbiBzaG93biB0byBiZSBhIHNpZ25pZmljYW50IHBhcnQgb2YgdGhlIHRvdGFsIGFtb3VudCBvZiBjYXJib24gdGhhdCBzaW5rcyB0byB0aGUgZGVlcCBzZWEuIEthcmwgZXQgYWwgKDIwMTIpIGZvdW5kIHRoYXQgaW4gZWFjaCBvZiB0aGUgcGFzdCAxMyB5ZWFycywgdGhlcmUgd2FzIGEgZmx1eCBvZiBtYXRlcmlhbCB0byA0LDAwMCBtICh0aGUgc3VtbWVyIGV4cG9ydCBwdWxzZSkgdGhhdCByZXByZXNlbnRlZCB+MjAlIG9mIHRoZSB0b3RhbCBhbm51YWwgZmx1eC4gV29yayBiYXNlZCBvbiBzYXRlbGxpdGUgb2NlYW4gY29sb3IgZGF0YSBvdmVyIHRoZSBwYXN0IGRlY2FkZSBoYXMgcmV2ZWFsZWQgdGhlIGV4aXN0ZW5jZSBvZiBsYXJnZSBwaHl0b3BsYW5rdG9uIGJsb29tcyBpbiB0aGUgUGFjaWZpYyBPY2VhbiB0aGF0IGNvdmVyIHRob3VzYW5kcyBvZiBrbTIsIHBlcnNpc3QgZm9yIHdlZWtzIG9yIGxvbmdlciwgYW5kIGFyZSBvZnRlbiBkb21pbmF0ZWQgYnkgbml0cm9nZW4tZml4aW5nIGRpYXRvbSBzeW1iaW9zZXMgKFdpbHNvbiBldCBhbC4gMjAwOCkuIFdlIGhvcGUgdG8gYmUgYWJsZSB0byBleGFtaW5lIHdoZXRoZXIgdGhpcyBhZ2dyZWdhdGlvbiBpcyBvY2N1cnJpbmcgaW4gdGhlIHZhc3Qgb2NlYW5pYyByZWdpb25zIG5vcnRoIGFuZCBlYXN0IG9mIEhhd2FpJ2kgYW5kIHByb3ZpZGUgYSBiYXNpbi1zY2FsZSBjb250ZXh0IGZvciB0aGUgQUxPSEEgb2JzZXJ2YXRpb25zLiBUaGVzZSBldmVudHMgaGF2ZSBwcm92ZW4gZGlmZmljdWx0IHRvIHN0dWR5IG91dHNpZGUgb2YgdGhlIHRpbWUgc2VyaWVzIHN0YXRpb24gQUxPSEEgYXQgSGF3YWknaS5cblxuY2RtX2RhdGFfdHlwZSA9IFRyYWplY3RvcnlcblZBUklBQkxFUzpcbnZlaGljbGVOYW1lIChWZWhpY2xlIE5hbWUpXG50ZWxlbWV0cnlcbmZlZWRfdmVyc2lvblxudGltZSAoRGF0ZXRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuZGlzdGFuY2Vfb3Zlcl9ncm91bmQgKG0pXG5kZXNpcmVkX2hlYWRpbmcgKGRlZ3JlZXMpXG5zdWJfaGVhZGluZyAoZGVncmVlcylcbnRhcmdldF93YXlwb2ludFxuc3ViX3RlbXBlcmF0dXJlIChkZWdyZWVfQylcbnRvdGFsX3Bvd2VyIChtV2gpXG53YXRlcl9zcGVlZCAoa25vdHMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvTGlxdWlkUl9IQkczXzIwMTVfdGVsZW1ldHJ5X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9MaXF1aWRSX0hCRzNfMjAxNV90ZWxlbWV0cnlfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vTGlxdWlkUl9IQkczXzIwMTVfdGVsZW1ldHJ5L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9NQUdJLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9MaXF1aWRSX0hCRzNfMjAxNV90ZWxlbWV0cnkucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPUxpcXVpZFJfSEJHM18yMDE1X3RlbGVtZXRyeSZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJMaXF1aWQgUm9ib3RpY3MsIFVUIEF1c3RpbiwgTk9BQSBOTUZTIFNXRlNDIEVSRCIsICJMaXF1aWRSX0hCRzNfMjAxNV90ZWxlbWV0cnkiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvTGlxdWlkUl9IQkczXzIwMTVfd2VhdGhlci5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvTGlxdWlkUl9IQkczXzIwMTVfd2VhdGhlciIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9MaXF1aWRSX0hCRzNfMjAxNV93ZWF0aGVyLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIkxpcXVpZCBSb2JvdGljcyBXYXZlIEdsaWRlciwgSG9uZXkgQmFkZ2VyIChHMyksIDIwMTUsIFdlYXRoZXIiLCAiTGlxdWlkIFJvYm90aWNzIFdhdmUgR2xpZGVyLCBIb25leSBCYWRnZXIgKEczKSwgMjAxNSwgV2VhdGhlci4gVGhlIE1BR0kgbWlzc2lvbiBpcyB0byB1c2UgdGhlIFdhdmUgR2xpZGVyIHRvIHNhbXBsZSB0aGUgbGF0ZSBzdW1tZXIgY2hsb3JvcGh5bGwgYmxvb20gdGhhdCBkZXZlbG9wcyBuZWFyIDMwXHUwMGIwTiwgd2l0aCB0aGUgZ29hbCBvZiB1c2luZyB0aGUgY2FtZXJhIGFuZCBMSVNTVC1Ib2xvIHRvIHRyeSB0byBpZGVudGlmeSBzcGVjaWVzIGluIHRoZSBibG9vbXMgYW5kIHRoZW4gZm9sbG93IHRoZSBkZXZlbG9wbWVudCBvZiBwaHl0b3BsYW5rdG9uIGFnZ3JlZ2F0ZXMuIFRoZXNlIGFnZ3JlZ2F0ZXMgaGF2ZSByZWNlbnRseSBiZWVuIHNob3duIHRvIGJlIGEgc2lnbmlmaWNhbnQgcGFydCBvZiB0aGUgdG90YWwgYW1vdW50IG9mIGNhcmJvbiB0aGF0IHNpbmtzIHRvIHRoZSBkZWVwIHNlYS4gS2FybCBldCBhbCAoMjAxMikgZm91bmQgdGhhdCBpbiBlYWNoIG9mIHRoZSBwYXN0IDEzIHllYXJzLCB0aGVyZSB3YXMgYSBmbHV4IG9mIG1hdGVyaWFsIHRvIDQsMDAwIG0gKHRoZSBzdW1tZXIgZXhwb3J0IHB1bHNlKSB0aGF0IHJlcHJlc2VudGVkIH4yMCUgb2YgdGhlIHRvdGFsIGFubnVhbCBmbHV4LiBXb3JrIGJhc2VkIG9uIHNhdGVsbGl0ZSBvY2VhbiBjb2xvciBkYXRhIG92ZXIgdGhlIHBhc3QgZGVjYWRlIGhhcyByZXZlYWxlZCB0aGUgZXhpc3RlbmNlIG9mIGxhcmdlIHBoeXRvcGxhbmt0b24gYmxvb21zIGluIHRoZSBQYWNpZmljIE9jZWFuIHRoYXQgY292ZXIgdGhvdXNhbmRzIG9mIGttMiwgcGVyc2lzdCBmb3Igd2Vla3Mgb3IgbG9uZ2VyLCBhbmQgYXJlIG9mdGVuIGRvbWluYXRlZCBieSBuaXRyb2dlbi1maXhpbmcgZGlhdG9tIHN5bWJpb3NlcyAoV2lsc29uIGV0IGFsLiAyMDA4KS4gV2UgaG9wZSB0byBiZSBhYmxlIHRvIGV4YW1pbmUgd2hldGhlciB0aGlzIGFnZ3JlZ2F0aW9uIGlzIG9jY3VycmluZyBpbiB0aGUgdmFzdCBvY2VhbmljIHJlZ2lvbnMgbm9ydGggYW5kIGVhc3Qgb2YgSGF3YWknaSBhbmQgcHJvdmlkZSBhIGJhc2luLXNjYWxlIGNvbnRleHQgZm9yIHRoZSBBTE9IQSBvYnNlcnZhdGlvbnMuIFRoZXNlIGV2ZW50cyBoYXZlIHByb3ZlbiBkaWZmaWN1bHQgdG8gc3R1ZHkgb3V0c2lkZSBvZiB0aGUgdGltZSBzZXJpZXMgc3RhdGlvbiBBTE9IQSBhdCBIYXdhaSdpLlxuXG5jZG1fZGF0YV90eXBlID0gVHJhamVjdG9yeVxuVkFSSUFCTEVTOlxudmVoaWNsZU5hbWUgKFZlaGljbGUgTmFtZSlcbndlYXRoZXJcbmZlZWRfdmVyc2lvblxudGltZSAoRGF0ZXRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxudGVtcGVyYXR1cmUgKGRlZ3JlZV9DKVxucHJlc3N1cmUgKG1CYXIpXG5hdmdfd2luZF9zcGVlZCAoV2luZCBTcGVlZCwga25vdHMpXG5zdGRfZGV2X3dpbmRfc3BlZWQgKFdpbmQgU3BlZWQsIGtub3RzKVxuYXZnX3dpbmRfZGlyZWN0aW9uIChXaW5kIEZyb20gRGlyZWN0aW9uLCBkZWdyZWVzX3RydWUpXG5zdGRfZGV2X3dpbmRfZGlyZWN0aW9uIChXaW5kIEZyb20gRGlyZWN0aW9uLCBkZWdyZWVzX3RydWUpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvTGlxdWlkUl9IQkczXzIwMTVfd2VhdGhlcl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvTGlxdWlkUl9IQkczXzIwMTVfd2VhdGhlcl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9MaXF1aWRSX0hCRzNfMjAxNV93ZWF0aGVyL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9NQUdJLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9MaXF1aWRSX0hCRzNfMjAxNV93ZWF0aGVyLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1MaXF1aWRSX0hCRzNfMjAxNV93ZWF0aGVyJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkxpcXVpZCBSb2JvdGljcywgVVQgQXVzdGluLCBOT0FBIE5NRlMgU1dGU0MgRVJEIiwgIkxpcXVpZFJfSEJHM18yMDE1X3dlYXRoZXIiXSwKICAgICAgWyIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF8xOTBmXzFmZThfNGNjNCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfMTkwZl8xZmU4XzRjYzQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiTWF1aSBDaXRpemVuIFNjaWVuY2UgQ29hc3RhbCBXYXRlciBRdWFsaXR5IERhdGEiLCAiQSBuZXR3b3JrIG9mIGNpdGl6ZW4gc2NpZW5jZSB2b2x1bnRlZXJzIHBlcmlvZGljYWxseSBtb25pdG9ycyB3YXRlciBxdWFsaXR5IGF0IHNldmVyYWwgYmVhY2hlcyBhY3Jvc3MgdGhlIGlzbGFuZCBvZiBNYXVpIGluIHRoZSBTdGF0ZSBvZiBIYXdhaWkuIFRoaXMgY29tbXVuaXR5LWJhc2VkIG1vbml0b3JpbmcgZWZmb3J0IHByb3ZpZGVzIHZhbHVhYmxlIGRhdGEgZm9yIHJlc291cmNlIG1hbmFnZW1lbnQgcHVycG9zZXMuIEluZm9ybWVkIHZvbHVudGVlciBuZXR3b3JrcyBjYW4gc2VydmUgYXMgYSBjb21tdW5pdHkncyBcImV5ZXMgYW5kIGVhcnNcIiBhbmQgd2lsbCBvZnRlbiBwcm92aWRlIHRoZSBmaXJzdCBpbmRpY2F0aW9ucyBvZiBjaGFuZ2VzIHRvIGEgc3lzdGVtLiBJbiBhZGRpdGlvbiB0byB0aGUgdmFsdWUgb2YgZWFybHkgZGV0ZWN0aW9uLCBpdCBpcyBpbXBvcnRhbnQgdG8gbWFpbnRhaW4gb25nb2luZyBtb25pdG9yaW5nIGVmZm9ydHMgdG8gY29tcGlsZSBkYXRhIGFuZCBkb2N1bWVudCByZXNvdXJjZSBjb25kaXRpb25zLlxuXG5JbiBhZGRpdGlvbiB0byB3YXRlciB0ZW1wZXJhdHVyZSwgc2FsaW5pdHksIHR1cmJpZGl0eSAod2F0ZXIgY2xhcml0eSksIGFuZCBwSCwgc2FtcGxpbmcgc2l0ZXMgYXJlIGFsc28gbW9uaXRvcmVkIGZvciBoYXJtZnVsIGJhY3RlcmlhIGxldmVscyBvZiBFbnRlcm9jb2NjdXMuIFRoaXMgaW5kaWNhdG9yIGJhY3RlcmlhIGhhcyBiZWVuIGNvcnJlbGF0ZWQgd2l0aCB0aGUgcHJlc2VuY2Ugb2YgaHVtYW4gcGF0aG9nZW5zIChkaXNlYXNlLWNhdXNpbmcgb3JnYW5pc21zKSBhbmQgdGhlcmVmb3JlIHdpdGggaHVtYW4gaWxsbmVzc2VzIHN1Y2ggYXMgZ2FzdHJvZW50ZXJpdGlzLCBkaWFycmhlYSwgYW5kIHZhcmlvdXMgaW5mZWN0aW9ucyBpbiBlcGlkZW1pb2xvZ2ljYWwgc3R1ZGllcy4gQXMgc3VjaCwgaXQgaXMgY29tbW9ubHkgbWVhc3VyZWQgaW4gYmVhY2ggd2F0ZXIgcXVhbGl0eSBtb25pdG9yaW5nIHByb2dyYW1zLiBGb3IgcmVmZXJlbmNlLCB0aGUgVS5TLiBFbnZpcm9ubWVudGFsIFByb3RlY3Rpb24gQWdlbmN5IChFUEEpIDE5ODYgQW1iaWVudCBXYXRlciBRdWFsaXR5IENyaXRlcmlhIGZvciBCYWN0ZXJpYSByZWNvbW1lbmRzIHRoYXQgYSB3YXRlciBxdWFsaXR5IGFsZXJ0IGlzIHBvc3RlZCBpZiBlaXRoZXI6IChhLikgdGhlIGxhdGVzdCB3YXRlciBzYW1wbGUgZXhjZWVkcyAxMDQgQ0ZVLzEwMCBtTCBvZiBFbnRlcm9jb2NjdXMsIG9yIChiLikgdGhlIGdlb21ldHJpYyBtZWFuIG9mIHRoZSBwYXN0IDMwIGRheXMgb2Ygd2F0ZXIgc2FtcGxlcyBleGNlZWRzIDM1IENGVS8xMDAgbUwuICBPbmUgb2YgdGhlIGxpbWl0YXRpb25zIG9mIGFsbCBhdmFpbGFibGUgYW5kIEVQQS1hcHByb3ZlZCB0ZXN0IG1ldGhvZHMgaXMgdGhhdCB0aGUgc2FtcGxlIG11c3QgYmUgaW5jdWJhdGVkIGZvciBhYm91dCAyNCBob3Vycy4gXG5cbkRhdGEgYXJlIG1hbmFnZWQgdGhyb3VnaCBhbiBvbmxpbmUgcmVwb3NpdG9yeSwgdGhlIENvcmFsIFJlZWYgTW9uaXRvcmluZyBEYXRhIFBvcnRhbCAoaHR0cDovL21vbml0b3JpbmcuY29yYWwub3JnKSwgZGV2ZWxvcGVkIGFuZCBjb29yZGluYXRlZCBieSB0aGUgQ29yYWwgUmVlZiBBbGxpYW5jZSAoQ09SQUwpIGFuZCBpdHMgcGFydG5lcnMgd2l0aCBmdW5kaW5nIHByb3ZpZGVkIGJ5IHRoZSBIYXdhaWkgVG91cmlzbSBBdXRob3JpdHkgKEhUQSkgYW5kIHRoZSBOYXRpb25hbCBPY2VhbmljIGFuZCBBdG1vc3BoZXJpYyBBZG1pbmlzdHJhdGlvbiAoTk9BQSkuIERhdGEgY29sbGVjdGlvbiBpcyBjb29yZGluYXRlZCBieSB0aGUgSGF3YWlpIERpdmlzaW9uIG9mIEFxdWF0aWMgUmVzb3VyY2VzIChEQVIpLCB0aGUgSGF3YWlpYW4gSXNsYW5kcyBIdW1wYmFjayBXaGFsZSBOYXRpb25hbCBNYXJpbmUgU2FuY3R1YXJ5IChISUhXTk1TKSwgQXF1YW5pbWl0eSBOb3csIHRoZSBEaWdpdGFsIEJ1cywgU2F2ZSBIb25vbHVhIENvYWxpdGlvbiwgUHJvamVjdCBTLkUuQS4tTGluaywgYW5kIG90aGVyIGxvY2FsIG9yZ2FuaXphdGlvbnMgYW5kIGFnZW5jaWVzLiBEYXRhIGFyZSBwdWJsaWNseSBkaXN0cmlidXRlZCBieSB0aGUgUGFjaWZpYyBJc2xhbmRzIE9jZWFuIE9ic2VydmluZyBTeXN0ZW0gKFBhY0lPT1MpLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbi4uLiAoMTAgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvaGF3YWlpX3NvZXN0XzE5MGZfMWZlOF80Y2M0X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9oYXdhaWlfc29lc3RfMTkwZl8xZmU4XzRjYzRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vaGF3YWlpX3NvZXN0XzE5MGZfMWZlOF80Y2M0L2luZGV4Lmpzb24iLCAiaHR0cDovL21vbml0b3JpbmcuY29yYWwub3JnIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2hhd2FpaV9zb2VzdF8xOTBmXzFmZThfNGNjNC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9aGF3YWlpX3NvZXN0XzE5MGZfMWZlOF80Y2M0JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkNvcmFsIFJlZWYgQWxsaWFuY2UgKENPUkFMKSIsICJoYXdhaWlfc29lc3RfMTkwZl8xZmU4XzRjYzQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvY3d3Y05EQkNNZXQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2N3d2NOREJDTWV0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2N3d2NOREJDTWV0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5EQkMgU3RhbmRhcmQgTWV0ZW9yb2xvZ2ljYWwgQnVveSBEYXRhLCAxOTcwLXByZXNlbnQiLCAiVGhlIE5hdGlvbmFsIERhdGEgQnVveSBDZW50ZXIgKE5EQkMpIGRpc3RyaWJ1dGVzIG1ldGVvcm9sb2dpY2FsIGRhdGEgZnJvbVxubW9vcmVkIGJ1b3lzIG1haW50YWluZWQgYnkgTkRCQyBhbmQgb3RoZXJzLiBNb29yZWQgYnVveXMgYXJlIHRoZSB3ZWF0aGVyXG5zZW50aW5lbHMgb2YgdGhlIHNlYS4gVGhleSBhcmUgZGVwbG95ZWQgaW4gdGhlIGNvYXN0YWwgYW5kIG9mZnNob3JlIHdhdGVyc1xuZnJvbSB0aGUgd2VzdGVybiBBdGxhbnRpYyB0byB0aGUgUGFjaWZpYyBPY2VhbiBhcm91bmQgSGF3YWlpLCBhbmQgZnJvbSB0aGVcbkJlcmluZyBTZWEgdG8gdGhlIFNvdXRoIFBhY2lmaWMuIE5EQkMncyBtb29yZWQgYnVveXMgbWVhc3VyZSBhbmQgdHJhbnNtaXRcbmJhcm9tZXRyaWMgcHJlc3N1cmU7IHdpbmQgZGlyZWN0aW9uLCBzcGVlZCwgYW5kIGd1c3Q7IGFpciBhbmQgc2VhXG50ZW1wZXJhdHVyZTsgYW5kIHdhdmUgZW5lcmd5IHNwZWN0cmEgZnJvbSB3aGljaCBzaWduaWZpY2FudCB3YXZlIGhlaWdodCxcbmRvbWluYW50IHdhdmUgcGVyaW9kLCBhbmQgYXZlcmFnZSB3YXZlIHBlcmlvZCBhcmUgZGVyaXZlZC4gRXZlbiB0aGVcbmRpcmVjdGlvbiBvZiB3YXZlIHByb3BhZ2F0aW9uIGlzIG1lYXN1cmVkIG9uIG1hbnkgbW9vcmVkIGJ1b3lzLlxuXG5UaGUgZGF0YSBpcyBmcm9tIE5PQUEgTkRCQy4gSXQgaGFzIGJlZW4gcmVmb3JtYXR0ZWQgYnkgTk9BQSBDb2FzdHdhdGNoLFxuV2VzdCBDb2FzdCBOb2RlLiBUaGlzIGRhdGFzZXQgb25seSBoYXMgdGhlIGRhdGEgdGhhdCBpcyBjbG9zZXN0IHRvIGFcbmdpdmVuIGhvdXIuIFRoZSB0aW1lIHZhbHVlcyBpbiB0aGUgZGF0YXNldCBhcmUgcm91bmRlZCB0byB0aGUgbmVhcmVzdCBob3VyLlxuXG5UaGlzIGRhdGFzZXQgaGFzIGJvdGggaGlzdG9yaWNhbCBkYXRhIChxdWFsaXR5IGNvbnRyb2xsZWQsIGJlZm9yZVxuMjAxOS0wNC0wMVQwMDowMDowMFopIGFuZCBuZWFyIHJlYWwgdGltZSBkYXRhIChsZXNzIHF1YWxpdHkgY29udHJvbGxlZCwgZnJvbVxuMjAxOS0wNC0wMVQwMDowMDowMFogb24pLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuc3RhdGlvbiAoU3RhdGlvbiBOYW1lKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG53ZCAoV2luZCBEaXJlY3Rpb24sIGRlZ3JlZXNfdHJ1ZSlcbndzcGQgKFdpbmQgU3BlZWQsIG0gcy0xKVxuZ3N0IChXaW5kIEd1c3QgU3BlZWQsIG0gcy0xKVxud3ZodCAoV2F2ZSBIZWlnaHQsIG0pXG5kcGQgKFdhdmUgUGVyaW9kLCBEb21pbmFudCwgcylcbmFwZCAoV2F2ZSBQZXJpb2QsIEF2ZXJhZ2UsIHMpXG5td2QgKFdhdmUgRGlyZWN0aW9uLCBkZWdyZWVzX3RydWUpXG4uLi4gKDkgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvY3d3Y05EQkNNZXRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2N3d2NOREJDTWV0X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2N3d2NOREJDTWV0L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cubmRiYy5ub2FhLmdvdi8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvY3d3Y05EQkNNZXQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWN3d2NOREJDTWV0JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgTkRCQywgTk9BQSBOTUZTIFNXRlNDIEVSRCIsICJjd3djTkRCQ01ldCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC93b2NlY3ByLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC93b2NlY3ByIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3dvY2VjcHIuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiTkVGU0MgQ29udGludW91cyBQbGFua3RvbiBSZWNvcmRlciIsICJBIHN1bW1hcnkgZm9yIHRoZSBkYXRhXG5cbmNkbV9kYXRhX3R5cGUgPSBPdGhlclxuVkFSSUFCTEVTOlxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmNydWlzZVxuc2FtcGxlXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxucGh5dG9fY29sb3JfaW5keCAoUGh5dG9wbGFua3RvbiBDb2xvciBJbmRleClcbm1hcm1hcF90YXhfY29kZSAoTWFybWFwIFRheG9ub21pYyBDb2RlKVxubWFybWFwX3N0YWdlX2NvZGVcbmFidW5kYW5jZSAocGVyIDEwMCBjdWJpYyBtZXRlcnMpXG5saWZlX3N0YWdlXG50YXhvbm9taWNfbmFtZVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3dvY2VjcHJfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3dvY2VjcHJfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vd29jZWNwci9pbmRleC5qc29uIiwgImh0dHBzOi8vY29hc3R3YXRjaC5wZmVnLm5vYWEuZ292L2VyZGRhcCIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy93b2NlY3ByLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD13b2NlY3ByJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5FRlNDIiwgIndvY2VjcHIiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkTmV3cG9ydEN0ZC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkTmV3cG9ydEN0ZCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmROZXdwb3J0Q3RkLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5ld3BvcnQgTGFiIENURCBDYXN0cywgMTk5Ny0yMDA4IiwgIlRoZSBOZXdwb3J0IEh5ZHJvZ3JhcGhpYyAoTkgpIExpbmUgYWxvbmcgNDQuNjVcdTAwYjBOIG9mZiBjZW50cmFsIE9yZWdvbiB3YXMgc2FtcGxlZCBzZWFzb25hbGx5IGR1cmluZyB0d28gZXBvY2hzOiAxOTYxLTE5NzEgdGhyb3VnaCB0aGUgVEVOT0MgcHJvZ3JhbSBhbmQgMTk5Ny0yMDAzIHRocm91Z2ggdGhlIEdMT0JFQyBOb3J0aGVhc3QgUGFjaWZpYyBMb25nIFRlcm0gT2JzZXJ2YXRpb25zIFByb2dyYW0gKExUT1ApOyBzb21lIG9ic2VydmF0aW9ucyBhcmUgYXZhaWxhYmxlIGZvciAyMDA0IGFuZCAyMDA1LiBEdXJpbmcgVEVOT0MsIHRoZSBsaW5lIGV4dGVuZGVkIDMwNSBrbSBvZmZzaG9yZSB0byAxMjhcdTAwYjBXLCB3aXRoIHN0YXRpb25zIDE4IGttIGFwYXJ0IG92ZXIgdGhlIGNvbnRpbmVudGFsIHNoZWxmIGFuZCAzNiBrbSBvZmZzaG9yZS4gRHVyaW5nIExUT1AsIHRoZSBsaW5lIHdhcyBzaG9ydGVyICh0byAxMjZcdTAwYjBXKSB3aXRoIGNsb3NlciBzdGF0aW9uIHNwYWNpbmcgb3ZlciB0aGUgY29udGluZW50YWwgc2hlbGYgKDkga20gYXBhcnQpIGFuZCBzbG9wZSAoMTgga20gYXBhcnQpLiBMVE9QIGNydWlzZXMgaW5jbHVkZWQgYmlvY2hlbWljYWwgc2FtcGxpbmcgYW5kIHVuZGVyd2F5IGN1cnJlbnQgbWVhc3VyZW1lbnRzLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1Byb2ZpbGVcblZBUklBQkxFUzpcbmxpbmVcbnRyYW5zZWN0XG5zdGF0aW9uXG5wbGFpbl9zdGF0aW9uXG5wcm9qZWN0XG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxuc3RhdGlvbl9jb2RlIChDVEQgU3RhdGlvbiBDb2RlKVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuZGVuc2l0eSAoc2lnbWEpXG5mbHVvcmVzY2VuY2UgKHZvbHRzKVxuc2FsaW5pdHkgKFNlYSBXYXRlciBQcmFjdGljYWwgU2FsaW5pdHksIFBTVSlcbnRlbXBlcmF0dXJlIChkZWdyZWVfQylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9lcmROZXdwb3J0Q3RkX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmROZXdwb3J0Q3RkX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZE5ld3BvcnRDdGQvaW5kZXguanNvbiIsICJodHRwOi8vbGlua2luZ2h1Yi5lbHNldmllci5jb20vcmV0cmlldmUvcGlpL1MwMDc5NjYxMTA3MDAxNDc0IiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZE5ld3BvcnRDdGQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZE5ld3BvcnRDdGQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTldGU0MiLCAiZXJkTmV3cG9ydEN0ZCJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbmNlcE5pbm9TU1R3ayIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9uY2VwTmlub1NTVHdrLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5pbm8gUmVnaW9uIFdlZWtseSBTU1QgT0lTU1QudjIiLCAiV2Vla2x5IE9JU1NULnYyICgxOTgxLTIwMTAgYmFzZSBwZXJpb2QpIE5pXHUwMGYxbyAxKzIgKDAtMTBcdTAwYjBTb3V0aCkoOTBcdTAwYjBXZXN0LTgwXHUwMGIwV2VzdCkgTmlcdTAwZjFvIDMgKDVcdTAwYjBOb3J0aC01XHUwMGIwU291dGgpKDE1MFx1MDBiMFdlc3QtOTBcdTAwYjBXZXN0KSBOaVx1MDBmMW8gNCAoNVx1MDBiME5vcnRoLTVcdTAwYjBTb3V0aCkgKDE2MFx1MDBiMEVhc3QtMTUwXHUwMGIwV2VzdCkgTmlcdTAwZjFvIDMuNCAoNVx1MDBiME5vcnRoLTVcdTAwYjBTb3V0aCkoMTcwLTEyMFx1MDBiMFdlc3QpXG5cbmNkbV9kYXRhX3R5cGUgPSBPdGhlclxuVkFSSUFCTEVTOlxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbk5pbm8xXzJfc3N0IChkZWdyZWVzIEMpXG5OaW5vMV8yX3NzdGEgKE5pbm8xKzIgU1NUIEFub21hbHksIGRlZ3JlZXMgQylcbk5pbm8zX3NzdCAoZGVncmVlcyBDKVxuTmlubzNfc3N0YSAoTmlubzMgU1NUIEFub21hbHksIGRlZ3JlZXMgQylcbk5pbm8zNF9zc3QgKE5pbm8zLjQgU1NULCBkZWdyZWVzIEMpXG5OaW5vMzRfc3N0YSAoTmlubzMuNCBTU1QgQW5vbWFseSwgZGVncmVlcyBDKVxuTmlubzRfc3N0IChkZWdyZWVzIEMpXG5OaW5vNF9zc3RhIChOaW5vNCBTU1QgQW5vbWFseSwgZGVncmVlcyBDKVxuIiwgIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9uY2VwTmlub1NTVHdrL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cuY3BjLm5jZXAubm9hYS5nb3YvZGF0YS9pbmRpY2VzLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9uY2VwTmlub1NTVHdrLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1uY2VwTmlub1NTVHdrJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5DRVAiLCAibmNlcE5pbm9TU1R3ayJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9uZGJjU29zV1RlbXAuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25kYmNTb3NXVGVtcCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9uZGJjU29zV1RlbXAuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiTk9BQSBOREJDIFNPUywgMjAwNi1wcmVzZW50LCBzZWFfd2F0ZXJfdGVtcGVyYXR1cmUiLCAiVGhlIE5PQUEgTkRCQyBTT1Mgc2VydmVyIGlzIHBhcnQgb2YgdGhlIElPT1MgRElGIFNPUyBQcm9qZWN0LiAgVGhlIHN0YXRpb25zIGluIHRoaXMgZGF0YXNldCBoYXZlIHNlYV93YXRlcl90ZW1wZXJhdHVyZSBkYXRhLlxuXG5CZWNhdXNlIG9mIHRoZSBuYXR1cmUgb2YgU09TIHJlcXVlc3RzLCByZXF1ZXN0cyBmb3IgZGF0YSBNVVNUIGluY2x1ZGUgY29uc3RyYWludHMgZm9yIHRoZSBsb25naXR1ZGUsIGxhdGl0dWRlLCB0aW1lLCBhbmQvb3Igc3RhdGlvbl9pZCB2YXJpYWJsZXMuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxuc3RhdGlvbl9pZFxuYWx0aXR1ZGUgKG0pXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuc2Vuc29yX2lkXG5zZWFfd2F0ZXJfdGVtcGVyYXR1cmUgKGRlZ3JlZV9DKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL25kYmNTb3NXVGVtcF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvbmRiY1Nvc1dUZW1wX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL25kYmNTb3NXVGVtcC9pbmRleC5qc29uIiwgImh0dHBzOi8vc2RmLm5kYmMubm9hYS5nb3Yvc29zLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9uZGJjU29zV1RlbXAucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPW5kYmNTb3NXVGVtcCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIE5EQkMiLCAibmRiY1Nvc1dUZW1wIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25kYmNTb3NXaW5kLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9uZGJjU29zV2luZCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9uZGJjU29zV2luZC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOT0FBIE5EQkMgU09TLCAyMDA2LXByZXNlbnQsIHdpbmRzIiwgIlRoZSBOT0FBIE5EQkMgU09TIHNlcnZlciBpcyBwYXJ0IG9mIHRoZSBJT09TIERJRiBTT1MgUHJvamVjdC4gIFRoZSBzdGF0aW9ucyBpbiB0aGlzIGRhdGFzZXQgaGF2ZSB3aW5kcyBkYXRhLlxuXG5CZWNhdXNlIG9mIHRoZSBuYXR1cmUgb2YgU09TIHJlcXVlc3RzLCByZXF1ZXN0cyBmb3IgZGF0YSBNVVNUIGluY2x1ZGUgY29uc3RyYWludHMgZm9yIHRoZSBsb25naXR1ZGUsIGxhdGl0dWRlLCB0aW1lLCBhbmQvb3Igc3RhdGlvbl9pZCB2YXJpYWJsZXMuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxuc3RhdGlvbl9pZFxuYWx0aXR1ZGUgKG0pXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuc2Vuc29yX2lkXG53aW5kX2Zyb21fZGlyZWN0aW9uIChkZWdyZWVzX3RydWUpXG53aW5kX3NwZWVkIChtIHMtMSlcbndpbmRfc3BlZWRfb2ZfZ3VzdCAobSBzLTEpXG51cHdhcmRfYWlyX3ZlbG9jaXR5IChtIHMtMSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9uZGJjU29zV2luZF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvbmRiY1Nvc1dpbmRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vbmRiY1Nvc1dpbmQvaW5kZXguanNvbiIsICJodHRwczovL3NkZi5uZGJjLm5vYWEuZ292L3Nvcy8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvbmRiY1Nvc1dpbmQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPW5kYmNTb3NXaW5kJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgTkRCQyIsICJuZGJjU29zV2luZCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9uZGJjU29zQ3VycmVudHMuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25kYmNTb3NDdXJyZW50cyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9uZGJjU29zQ3VycmVudHMuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiTk9BQSBOREJDIFNPUywgMjAwNy1wcmVzZW50LCBjdXJyZW50cyIsICJUaGUgTk9BQSBOREJDIFNPUyBzZXJ2ZXIgaXMgcGFydCBvZiB0aGUgSU9PUyBESUYgU09TIFByb2plY3QuICBUaGUgc3RhdGlvbnMgaW4gdGhpcyBkYXRhc2V0IGhhdmUgY3VycmVudHMgZGF0YS5cblxuQmVjYXVzZSBvZiB0aGUgbmF0dXJlIG9mIFNPUyByZXF1ZXN0cywgcmVxdWVzdHMgZm9yIGRhdGEgTVVTVCBpbmNsdWRlIGNvbnN0cmFpbnRzIGZvciB0aGUgbG9uZ2l0dWRlLCBsYXRpdHVkZSwgdGltZSwgYW5kL29yIHN0YXRpb25faWQgdmFyaWFibGVzLlxuXG5XQVJOSU5HOiBBbHdheXMgY2hlY2sgdGhlIHF1YWxpdHlfZmxhZ3MgYmVmb3JlIHVzaW5nIHRoaXMgZGF0YS4gQSBzaW1wbGUgY3JpdGVyaW9uIGlzOiBvbmx5IHVzZSBhIHJvdyBvZiBkYXRhIGlmIHRoZSBmaXJzdCBxdWFsaXR5X2ZsYWdzIHZhbHVlIGZvciB0aGUgcm93IChvdmVyYWxsIGJpbiBzdGF0dXMpIGlzIDMgKGdvb2QgZGF0YS9wYXNzZWQgcXVhbGl0eSB0ZXN0KS4gWW91IGNhbiBkbyB0aGlzIGJ5IGFwcGVuZGluZyAmcXVhbGl0eV9mbGFncz1+XCIzOy4qXCIgdG8geW91ciByZXF1ZXN0LlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1Byb2ZpbGVcblZBUklBQkxFUzpcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5zdGF0aW9uX2lkXG5hbHRpdHVkZSAobSlcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zZW5zb3JfaWRcbmJpbiAoY291bnQpXG5kaXJlY3Rpb25fb2Zfc2VhX3dhdGVyX3ZlbG9jaXR5IChkZWdyZWVzX3RydWUpXG5zZWFfd2F0ZXJfc3BlZWQgKGNtL3MpXG51cHdhcmRfc2VhX3dhdGVyX3ZlbG9jaXR5IChjbS9zKVxuZXJyb3JfdmVsb2NpdHkgKGNtL3MpXG5wbGF0Zm9ybV9vcmllbnRhdGlvbiAoZGVncmVlc190cnVlKVxucGxhdGZvcm1fcGl0Y2hfYW5nbGUgKGRlZ3JlZSlcbnBsYXRmb3JtX3JvbGxfYW5nbGUgKGRlZ3JlZSlcbnNlYV93YXRlcl90ZW1wZXJhdHVyZSAoQ2VsKVxucGN0X2dvb2RfM19iZWFtIChQZXJjZW50IEdvb2QgMyBCZWFtLCBwZXJjZW50KVxucGN0X2dvb2RfNF9iZWFtIChQZXJjZW50IEdvb2QgNCBCZWFtLCBwZXJjZW50KVxucGN0X3JlamVjdGVkIChQZXJjZW50IFJlamVjdGVkLCBwZXJjZW50KVxucGN0X2JhZCAoUGVyY2VudCBCYWQsIHBlcmNlbnQpXG4uLi4gKDkgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvbmRiY1Nvc0N1cnJlbnRzX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9uZGJjU29zQ3VycmVudHNfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vbmRiY1Nvc0N1cnJlbnRzL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9zZGYubmRiYy5ub2FhLmdvdi9zb3MvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL25kYmNTb3NDdXJyZW50cy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9bmRiY1Nvc0N1cnJlbnRzJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgTkRCQyIsICJuZGJjU29zQ3VycmVudHMiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbmRiY1Nvc1NhbGluaXR5LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9uZGJjU29zU2FsaW5pdHkiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbmRiY1Nvc1NhbGluaXR5LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5PQUEgTkRCQyBTT1MsIDIwMDctcHJlc2VudCwgc2VhX3dhdGVyX3ByYWN0aWNhbF9zYWxpbml0eSIsICJUaGUgTk9BQSBOREJDIFNPUyBzZXJ2ZXIgaXMgcGFydCBvZiB0aGUgSU9PUyBESUYgU09TIFByb2plY3QuICBUaGUgc3RhdGlvbnMgaW4gdGhpcyBkYXRhc2V0IGhhdmUgc2VhX3dhdGVyX3ByYWN0aWNhbF9zYWxpbml0eSBkYXRhLlxuXG5CZWNhdXNlIG9mIHRoZSBuYXR1cmUgb2YgU09TIHJlcXVlc3RzLCByZXF1ZXN0cyBmb3IgZGF0YSBNVVNUIGluY2x1ZGUgY29uc3RyYWludHMgZm9yIHRoZSBsb25naXR1ZGUsIGxhdGl0dWRlLCB0aW1lLCBhbmQvb3Igc3RhdGlvbl9pZCB2YXJpYWJsZXMuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxuc3RhdGlvbl9pZFxuYWx0aXR1ZGUgKG0pXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuc2Vuc29yX2lkXG5zZWFfd2F0ZXJfc2FsaW5pdHkgKFNlYSBXYXRlciBQcmFjdGljYWwgU2FsaW5pdHksIFBTVSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9uZGJjU29zU2FsaW5pdHlfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL25kYmNTb3NTYWxpbml0eV9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9uZGJjU29zU2FsaW5pdHkvaW5kZXguanNvbiIsICJodHRwczovL3NkZi5uZGJjLm5vYWEuZ292L3Nvcy8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvbmRiY1Nvc1NhbGluaXR5LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1uZGJjU29zU2FsaW5pdHkmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBOREJDIiwgIm5kYmNTb3NTYWxpbml0eSJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9uZGJjU29zV0xldmVsLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9uZGJjU29zV0xldmVsIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25kYmNTb3NXTGV2ZWwuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiTk9BQSBOREJDIFNPUywgMjAwOC1wcmVzZW50LCBzZWFfZmxvb3JfZGVwdGhfYmVsb3dfc2VhX3N1cmZhY2UiLCAiVGhlIE5PQUEgTkRCQyBTT1Mgc2VydmVyIGlzIHBhcnQgb2YgdGhlIElPT1MgRElGIFNPUyBQcm9qZWN0LiAgVGhlIHN0YXRpb25zIGluIHRoaXMgZGF0YXNldCBoYXZlIHNlYV9mbG9vcl9kZXB0aF9iZWxvd19zZWFfc3VyZmFjZSBkYXRhLlxuXG5CZWNhdXNlIG9mIHRoZSBuYXR1cmUgb2YgU09TIHJlcXVlc3RzLCByZXF1ZXN0cyBmb3IgZGF0YSBNVVNUIGluY2x1ZGUgY29uc3RyYWludHMgZm9yIHRoZSBsb25naXR1ZGUsIGxhdGl0dWRlLCB0aW1lLCBhbmQvb3Igc3RhdGlvbl9pZCB2YXJpYWJsZXMuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxuc3RhdGlvbl9pZFxuYWx0aXR1ZGUgKG0pXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuc2Vuc29yX2lkXG5hdmVyYWdpbmdfaW50ZXJ2YWwgKHMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvbmRiY1Nvc1dMZXZlbF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvbmRiY1Nvc1dMZXZlbF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9uZGJjU29zV0xldmVsL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9zZGYubmRiYy5ub2FhLmdvdi9zb3MvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL25kYmNTb3NXTGV2ZWwucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPW5kYmNTb3NXTGV2ZWwmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBOREJDIiwgIm5kYmNTb3NXTGV2ZWwiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm9zU29zQVRlbXAuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25vc1Nvc0FUZW1wIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25vc1Nvc0FUZW1wLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5PQUEgTk9TIFNPUywgRVhQRVJJTUVOVEFMLCAxODUzLXByZXNlbnQsIEFpciBUZW1wZXJhdHVyZSIsICJUaGUgTk9BQSBOT1MgU09TIHNlcnZlciBpcyBwYXJ0IG9mIHRoZSBJT09TIERJRiBTT1MgUHJvamVjdC4gIFRoZSBzdGF0aW9ucyBpbiB0aGlzIGRhdGFzZXQgaGF2ZSBhaXIgdGVtcGVyYXR1cmUgZGF0YS4gICoqKipUaGVzZSBzZXJ2aWNlcyBhcmUgZm9yIHRlc3RpbmcgYW5kIGV2YWx1YXRpb24gdXNlIG9ubHkqKioqXG5cbkJlY2F1c2Ugb2YgdGhlIG5hdHVyZSBvZiBTT1MgcmVxdWVzdHMsIHJlcXVlc3RzIGZvciBkYXRhIE1VU1QgaW5jbHVkZSBjb25zdHJhaW50cyBmb3IgdGhlIGxvbmdpdHVkZSwgbGF0aXR1ZGUsIHRpbWUsIGFuZC9vciBzdGF0aW9uX2lkIHZhcmlhYmxlcy5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5zdGF0aW9uX2lkXG5hbHRpdHVkZSAobSlcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zZW5zb3JfaWRcbmFpcl90ZW1wZXJhdHVyZSAoZGVncmVlX0MpXG5xdWFsaXR5X2ZsYWdzXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvbm9zU29zQVRlbXBfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL25vc1Nvc0FUZW1wX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL25vc1Nvc0FUZW1wL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vcGVuZGFwLmNvLW9wcy5ub3Mubm9hYS5nb3YvaW9vcy1kaWYtc29zLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9ub3NTb3NBVGVtcC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9bm9zU29zQVRlbXAmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBOT1MiLCAibm9zU29zQVRlbXAiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm9zU29zQlByZXMuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25vc1Nvc0JQcmVzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25vc1Nvc0JQcmVzLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5PQUEgTk9TIFNPUywgRVhQRVJJTUVOVEFMLCAxODUzLXByZXNlbnQsIEJhcm9tZXRyaWMgUHJlc3N1cmUiLCAiVGhlIE5PQUEgTk9TIFNPUyBzZXJ2ZXIgaXMgcGFydCBvZiB0aGUgSU9PUyBESUYgU09TIFByb2plY3QuICBUaGUgc3RhdGlvbnMgaW4gdGhpcyBkYXRhc2V0IGhhdmUgYmFyb21ldHJpYyBwcmVzc3VyZSBkYXRhLiAgKioqKlRoZXNlIHNlcnZpY2VzIGFyZSBmb3IgdGVzdGluZyBhbmQgZXZhbHVhdGlvbiB1c2Ugb25seSoqKipcblxuQmVjYXVzZSBvZiB0aGUgbmF0dXJlIG9mIFNPUyByZXF1ZXN0cywgcmVxdWVzdHMgZm9yIGRhdGEgTVVTVCBpbmNsdWRlIGNvbnN0cmFpbnRzIGZvciB0aGUgbG9uZ2l0dWRlLCBsYXRpdHVkZSwgdGltZSwgYW5kL29yIHN0YXRpb25faWQgdmFyaWFibGVzLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbnN0YXRpb25faWRcbmFsdGl0dWRlIChtKVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnNlbnNvcl9pZFxuYWlyX3ByZXNzdXJlIChCYXJvbWV0cmljIFByZXNzdXJlLCBtaWxsaWJhcnMpXG5xdWFsaXR5X2ZsYWdzXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvbm9zU29zQlByZXNfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL25vc1Nvc0JQcmVzX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL25vc1Nvc0JQcmVzL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vcGVuZGFwLmNvLW9wcy5ub3Mubm9hYS5nb3YvaW9vcy1kaWYtc29zLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9ub3NTb3NCUHJlcy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9bm9zU29zQlByZXMmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBOT1MiLCAibm9zU29zQlByZXMiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm9zU29zV0xldmVsLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ub3NTb3NXTGV2ZWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm9zU29zV0xldmVsLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5PQUEgTk9TIFNPUywgRVhQRVJJTUVOVEFMLCAxODUzLXByZXNlbnQsIFdhdGVyIExldmVsIiwgIlRoZSBOT0FBIE5PUyBTT1Mgc2VydmVyIGlzIHBhcnQgb2YgdGhlIElPT1MgRElGIFNPUyBQcm9qZWN0LiAgVGhlIHN0YXRpb25zIGluIHRoaXMgZGF0YXNldCBoYXZlIHdhdGVyIHN1cmZhY2UgaGVpZ2h0IGFib3ZlIGEgcmVmZXJlbmNlIGRhdHVtLiAgKioqKlRoZXNlIHNlcnZpY2VzIGFyZSBmb3IgdGVzdGluZyBhbmQgZXZhbHVhdGlvbiB1c2Ugb25seSoqKipcblxuQmVjYXVzZSBvZiB0aGUgbmF0dXJlIG9mIFNPUyByZXF1ZXN0cywgcmVxdWVzdHMgZm9yIGRhdGEgTVVTVCBpbmNsdWRlIGNvbnN0cmFpbnRzIGZvciB0aGUgbG9uZ2l0dWRlLCBsYXRpdHVkZSwgdGltZSwgYW5kL29yIHN0YXRpb25faWQgdmFyaWFibGVzLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbnN0YXRpb25faWRcbmFsdGl0dWRlIChtKVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnNlbnNvcl9pZFxud2F0ZXJfbGV2ZWwgKHdhdGVyX3N1cmZhY2VfaGVpZ2h0X2Fib3ZlX3JlZmVyZW5jZV9kYXR1bSwgbSlcbmRhdHVtX2lkXG52ZXJ0aWNhbF9wb3NpdGlvbiAobSlcbnNpZ21hXG5xdWFsaXR5X2ZsYWdzXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvbm9zU29zV0xldmVsX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9ub3NTb3NXTGV2ZWxfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vbm9zU29zV0xldmVsL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vcGVuZGFwLmNvLW9wcy5ub3Mubm9hYS5nb3YvaW9vcy1kaWYtc29zLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9ub3NTb3NXTGV2ZWwucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPW5vc1Nvc1dMZXZlbCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIE5PUyIsICJub3NTb3NXTGV2ZWwiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm9zU29zV1RlbXAuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25vc1Nvc1dUZW1wIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25vc1Nvc1dUZW1wLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5PQUEgTk9TIFNPUywgRVhQRVJJTUVOVEFMLCAxODUzLXByZXNlbnQsIFdhdGVyIFRlbXBlcmF0dXJlIiwgIlRoZSBOT0FBIE5PUyBTT1Mgc2VydmVyIGlzIHBhcnQgb2YgdGhlIElPT1MgRElGIFNPUyBQcm9qZWN0LiAgVGhlIHN0YXRpb25zIGluIHRoaXMgZGF0YXNldCBoYXZlIHdhdGVyIHRlbXBlcmF0dXJlIGRhdGEuICAqKioqVGhlc2Ugc2VydmljZXMgYXJlIGZvciB0ZXN0aW5nIGFuZCBldmFsdWF0aW9uIHVzZSBvbmx5KioqKlxuXG5CZWNhdXNlIG9mIHRoZSBuYXR1cmUgb2YgU09TIHJlcXVlc3RzLCByZXF1ZXN0cyBmb3IgZGF0YSBNVVNUIGluY2x1ZGUgY29uc3RyYWludHMgZm9yIHRoZSBsb25naXR1ZGUsIGxhdGl0dWRlLCB0aW1lLCBhbmQvb3Igc3RhdGlvbl9pZCB2YXJpYWJsZXMuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxuc3RhdGlvbl9pZFxuYWx0aXR1ZGUgKG0pXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuc2Vuc29yX2lkXG5zZWFfd2F0ZXJfdGVtcGVyYXR1cmUgKGRlZ3JlZV9DKVxucXVhbGl0eV9mbGFnc1xuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL25vc1Nvc1dUZW1wX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9ub3NTb3NXVGVtcF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9ub3NTb3NXVGVtcC9pbmRleC5qc29uIiwgImh0dHBzOi8vb3BlbmRhcC5jby1vcHMubm9zLm5vYWEuZ292L2lvb3MtZGlmLXNvcy8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3Mvbm9zU29zV1RlbXAucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPW5vc1Nvc1dUZW1wJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgTk9TIiwgIm5vc1Nvc1dUZW1wIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25vc1Nvc0NvbmQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25vc1Nvc0NvbmQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm9zU29zQ29uZC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOT0FBIE5PUyBTT1MsIEVYUEVSSU1FTlRBTCwgMTkwMi1wcmVzZW50LCBDb25kdWN0aXZpdHkiLCAiVGhlIE5PQUEgTk9TIFNPUyBzZXJ2ZXIgaXMgcGFydCBvZiB0aGUgSU9PUyBESUYgU09TIFByb2plY3QuICBUaGUgc3RhdGlvbnMgaW4gdGhpcyBkYXRhc2V0IGhhdmUgY29uZHVjdGl2aXR5IGRhdGEuICAqKioqVGhlc2Ugc2VydmljZXMgYXJlIGZvciB0ZXN0aW5nIGFuZCBldmFsdWF0aW9uIHVzZSBvbmx5KioqKlxuXG5CZWNhdXNlIG9mIHRoZSBuYXR1cmUgb2YgU09TIHJlcXVlc3RzLCByZXF1ZXN0cyBmb3IgZGF0YSBNVVNUIGluY2x1ZGUgY29uc3RyYWludHMgZm9yIHRoZSBsb25naXR1ZGUsIGxhdGl0dWRlLCB0aW1lLCBhbmQvb3Igc3RhdGlvbl9pZCB2YXJpYWJsZXMuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxuc3RhdGlvbl9pZFxuYWx0aXR1ZGUgKG0pXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuc2Vuc29yX2lkXG5jb25kdWN0aXZpdHkgKEVsZWN0cmljYWwgQ29uZHVjdGl2aXR5LCBtUyBjbS0xKVxucXVhbGl0eV9mbGFnc1xuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL25vc1Nvc0NvbmRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL25vc1Nvc0NvbmRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vbm9zU29zQ29uZC9pbmRleC5qc29uIiwgImh0dHBzOi8vb3BlbmRhcC5jby1vcHMubm9zLm5vYWEuZ292L2lvb3MtZGlmLXNvcy8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3Mvbm9zU29zQ29uZC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9bm9zU29zQ29uZCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIE5PUyIsICJub3NTb3NDb25kIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25vc1Nvc1NhbGluaXR5LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ub3NTb3NTYWxpbml0eSIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ub3NTb3NTYWxpbml0eS5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOT0FBIE5PUyBTT1MsIEVYUEVSSU1FTlRBTCwgMTkwMi1wcmVzZW50LCBTYWxpbml0eSIsICJUaGUgTk9BQSBOT1MgU09TIHNlcnZlciBpcyBwYXJ0IG9mIHRoZSBJT09TIERJRiBTT1MgUHJvamVjdC4gIFRoZSBzdGF0aW9ucyBpbiB0aGlzIGRhdGFzZXQgaGF2ZSBzYWxpbml0eSBkYXRhLiAgKioqKlRoZXNlIHNlcnZpY2VzIGFyZSBmb3IgdGVzdGluZyBhbmQgZXZhbHVhdGlvbiB1c2Ugb25seSoqKipcblxuQmVjYXVzZSBvZiB0aGUgbmF0dXJlIG9mIFNPUyByZXF1ZXN0cywgcmVxdWVzdHMgZm9yIGRhdGEgTVVTVCBpbmNsdWRlIGNvbnN0cmFpbnRzIGZvciB0aGUgbG9uZ2l0dWRlLCBsYXRpdHVkZSwgdGltZSwgYW5kL29yIHN0YXRpb25faWQgdmFyaWFibGVzLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbnN0YXRpb25faWRcbmFsdGl0dWRlIChtKVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnNlbnNvcl9pZFxuc2VhX3dhdGVyX3NhbGluaXR5IChTZWEgV2F0ZXIgUHJhY3RpY2FsIFNhbGluaXR5LCBQU1UpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvbm9zU29zU2FsaW5pdHlfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL25vc1Nvc1NhbGluaXR5X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL25vc1Nvc1NhbGluaXR5L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vcGVuZGFwLmNvLW9wcy5ub3Mubm9hYS5nb3YvaW9vcy1kaWYtc29zLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9ub3NTb3NTYWxpbml0eS5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9bm9zU29zU2FsaW5pdHkmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBOT1MiLCAibm9zU29zU2FsaW5pdHkiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVEVEbnJ0LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdURURucnQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVEVEbnJ0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5PQUEgU2hpcCBCZWxsIE0uIFNoaW1hZGEgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSwgTmVhciBSZWFsIFRpbWUiLCAiTk9BQSBTaGlwIEJlbGwgTS4gU2hpbWFkYSBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhIChOZWFyIFJlYWwgVGltZSwgdXBkYXRlZCBkYWlseSkgYXJlIGZyb20gdGhlIFNoaXBib2FyZCBBdXRvbWF0ZWQgTWV0ZW9yb2xvZ2ljYWwgYW5kIE9jZWFub2dyYXBoaWMgU3lzdGVtIChTQU1PUykgcHJvZ3JhbS5cblxuSU1QT1JUQU5UOiBBTFdBWVMgVVNFIFRIRSBRVUFMSVRZIEZMQUcgREFUQSEgRWFjaCBkYXRhIHZhcmlhYmxlJ3MgbWV0YWRhdGEgaW5jbHVkZXMgYSBxY2luZGV4IGF0dHJpYnV0ZSB3aGljaCBpbmRpY2F0ZXMgYSBjaGFyYWN0ZXIgbnVtYmVyIGluIHRoZSBmbGFnIGRhdGEuICBBTFdBWVMgY2hlY2sgdGhlIGZsYWcgZGF0YSBmb3IgZWFjaCByb3cgb2YgZGF0YSB0byBzZWUgd2hpY2ggZGF0YSBpcyBnb29kIChmbGFnPSdaJykgYW5kIHdoaWNoIGRhdGEgaXNuJ3QuICBGb3IgZXhhbXBsZSwgdG8gZXh0cmFjdCBqdXN0IGRhdGEgd2hlcmUgdGltZSAocWNpbmRleD0xKSwgbGF0aXR1ZGUgKHFjaW5kZXg9MiksIGxvbmdpdHVkZSAocWNpbmRleD0zKSwgYW5kIGFpclRlbXBlcmF0dXJlIChxY2luZGV4PTEyKSBhcmUgJ2dvb2QnIGRhdGEsIGluY2x1ZGUgdGhpcyBjb25zdHJhaW50IGluIHlvdXIgRVJEREFQIHF1ZXJ5OlxuICBmbGFnPX5cIlpaWi4uLi4uLi4uWi4qXCJcbmluIHlvdXIgcXVlcnkuICBcblwiPX5cIiBpbmRpY2F0ZXMgdGhpcyBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBjb25zdHJhaW50LlxuVGhlICdaJ3MgYXJlIGxpdGVyYWwgY2hhcmFjdGVycy4gIEluIHRoaXMgZGF0YXNldCwgJ1onIGluZGljYXRlcyAnZ29vZCcgZGF0YS4gXG5UaGUgJy4ncyBzYXkgdG8gbWF0Y2ggYW55IGNoYXJhY3Rlci4gIFxuVGhlICcqJyBzYXlzIHRvIG1hdGNoIHRoZSBwcmV2aW91cyBjaGFyYWN0ZXIgMCBvciBtb3JlIHRpbWVzLiAgXG5TZWUgdGhlIHR1dG9yaWFsIGZvciByZWd1bGFyIGV4cHJlc3Npb25zIGF0XG5odHRwOi8vd3d3LnZvZ2VsbGEuY29tL3R1dG9yaWFscy9KYXZhUmVndWxhckV4cHJlc3Npb25zL2FydGljbGUuaHRtbFxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZV9pZFxuZXhwb2NvZGVcbmZhY2lsaXR5XG5JRFxuSU1PXG5wbGF0Zm9ybVxucGxhdGZvcm1fdmVyc2lvblxuc2l0ZVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5haXJQcmVzc3VyZSAoQXRtb3NwaGVyaWMgUHJlc3N1cmUsIG1pbGxpYmFyKVxuLi4uICgxOSBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9mc3VOb2FhU2hpcFdURURucnRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2ZzdU5vYWFTaGlwV1RFRG5ydF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9mc3VOb2FhU2hpcFdURURucnQvaW5kZXguanNvbiIsICJodHRwczovL3NhbW9zLmNvYXBzLmZzdS5lZHUvaHRtbC8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZnN1Tm9hYVNoaXBXVEVEbnJ0LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1mc3VOb2FhU2hpcFdURURucnQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiRlNVIiwgImZzdU5vYWFTaGlwV1RFRG5ydCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdURUQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RFRCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdURUQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiTk9BQSBTaGlwIEJlbGwgTS4gU2hpbWFkYSBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhLCBRdWFsaXR5IENvbnRyb2xsZWQiLCAiTk9BQSBTaGlwIEJlbGwgTS4gU2hpbWFkYSBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhIChkZWxheWVkIH4xMCBkYXlzIGZvciBxdWFsaXR5IGNvbnRyb2wpIGFyZSBmcm9tIHRoZSBTaGlwYm9hcmQgQXV0b21hdGVkIE1ldGVvcm9sb2dpY2FsIGFuZCBPY2Vhbm9ncmFwaGljIFN5c3RlbSAoU0FNT1MpIHByb2dyYW0uXG5cbklNUE9SVEFOVDogQUxXQVlTIFVTRSBUSEUgUVVBTElUWSBGTEFHIERBVEEhIEVhY2ggZGF0YSB2YXJpYWJsZSdzIG1ldGFkYXRhIGluY2x1ZGVzIGEgcWNpbmRleCBhdHRyaWJ1dGUgd2hpY2ggaW5kaWNhdGVzIGEgY2hhcmFjdGVyIG51bWJlciBpbiB0aGUgZmxhZyBkYXRhLiAgQUxXQVlTIGNoZWNrIHRoZSBmbGFnIGRhdGEgZm9yIGVhY2ggcm93IG9mIGRhdGEgdG8gc2VlIHdoaWNoIGRhdGEgaXMgZ29vZCAoZmxhZz0nWicpIGFuZCB3aGljaCBkYXRhIGlzbid0LiAgRm9yIGV4YW1wbGUsIHRvIGV4dHJhY3QganVzdCBkYXRhIHdoZXJlIHRpbWUgKHFjaW5kZXg9MSksIGxhdGl0dWRlIChxY2luZGV4PTIpLCBsb25naXR1ZGUgKHFjaW5kZXg9MyksIGFuZCBhaXJUZW1wZXJhdHVyZSAocWNpbmRleD0xMikgYXJlICdnb29kJyBkYXRhLCBpbmNsdWRlIHRoaXMgY29uc3RyYWludCBpbiB5b3VyIEVSRERBUCBxdWVyeTpcbiAgZmxhZz1+XCJaWlouLi4uLi4uLlouKlwiXG5pbiB5b3VyIHF1ZXJ5LiAgXG5cIj1+XCIgaW5kaWNhdGVzIHRoaXMgaXMgYSByZWd1bGFyIGV4cHJlc3Npb24gY29uc3RyYWludC5cblRoZSAnWidzIGFyZSBsaXRlcmFsIGNoYXJhY3RlcnMuICBJbiB0aGlzIGRhdGFzZXQsICdaJyBpbmRpY2F0ZXMgJ2dvb2QnIGRhdGEuIFxuVGhlICcuJ3Mgc2F5IHRvIG1hdGNoIGFueSBjaGFyYWN0ZXIuICBcblRoZSAnKicgc2F5cyB0byBtYXRjaCB0aGUgcHJldmlvdXMgY2hhcmFjdGVyIDAgb3IgbW9yZSB0aW1lcy4gIFxuU2VlIHRoZSB0dXRvcmlhbCBmb3IgcmVndWxhciBleHByZXNzaW9ucyBhdFxuaHR0cDovL3d3dy52b2dlbGxhLmNvbS90dXRvcmlhbHMvSmF2YVJlZ3VsYXJFeHByZXNzaW9ucy9hcnRpY2xlLmh0bWxcblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2VfaWRcbmV4cG9jb2RlXG5mYWNpbGl0eVxuSURcbklNT1xucGxhdGZvcm1cbnBsYXRmb3JtX3ZlcnNpb25cbnNpdGVcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuYWlyUHJlc3N1cmUgKEF0bW9zcGhlcmljIFByZXNzdXJlLCBtaWxsaWJhcilcbi4uLiAoMTkgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZnN1Tm9hYVNoaXBXVEVEX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9mc3VOb2FhU2hpcFdURURfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZnN1Tm9hYVNoaXBXVEVEL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9zYW1vcy5jb2Fwcy5mc3UuZWR1L2h0bWwvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2ZzdU5vYWFTaGlwV1RFRC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZnN1Tm9hYVNoaXBXVEVEJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkZTVSIsICJmc3VOb2FhU2hpcFdURUQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVERLLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdUREsiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVERLLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5PQUEgU2hpcCBEYXZpZCBTdGFyciBKb3JkYW4gVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSwgUXVhbGl0eSBDb250cm9sbGVkIiwgIk5PQUEgU2hpcCBEYXZpZCBTdGFyciBKb3JkYW4gVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSAoZGVsYXllZCB+MTAgZGF5cyBmb3IgcXVhbGl0eSBjb250cm9sKSBhcmUgZnJvbSB0aGUgU2hpcGJvYXJkIEF1dG9tYXRlZCBNZXRlb3JvbG9naWNhbCBhbmQgT2NlYW5vZ3JhcGhpYyBTeXN0ZW0gKFNBTU9TKSBwcm9ncmFtLlxuXG5JTVBPUlRBTlQ6IEFMV0FZUyBVU0UgVEhFIFFVQUxJVFkgRkxBRyBEQVRBISBFYWNoIGRhdGEgdmFyaWFibGUncyBtZXRhZGF0YSBpbmNsdWRlcyBhIHFjaW5kZXggYXR0cmlidXRlIHdoaWNoIGluZGljYXRlcyBhIGNoYXJhY3RlciBudW1iZXIgaW4gdGhlIGZsYWcgZGF0YS4gIEFMV0FZUyBjaGVjayB0aGUgZmxhZyBkYXRhIGZvciBlYWNoIHJvdyBvZiBkYXRhIHRvIHNlZSB3aGljaCBkYXRhIGlzIGdvb2QgKGZsYWc9J1onKSBhbmQgd2hpY2ggZGF0YSBpc24ndC4gIEZvciBleGFtcGxlLCB0byBleHRyYWN0IGp1c3QgZGF0YSB3aGVyZSB0aW1lIChxY2luZGV4PTEpLCBsYXRpdHVkZSAocWNpbmRleD0yKSwgbG9uZ2l0dWRlIChxY2luZGV4PTMpLCBhbmQgYWlyVGVtcGVyYXR1cmUgKHFjaW5kZXg9MTIpIGFyZSAnZ29vZCcgZGF0YSwgaW5jbHVkZSB0aGlzIGNvbnN0cmFpbnQgaW4geW91ciBFUkREQVAgcXVlcnk6XG4gIGZsYWc9flwiWlpaLi4uLi4uLi5aLipcIlxuaW4geW91ciBxdWVyeS4gIFxuXCI9flwiIGluZGljYXRlcyB0aGlzIGlzIGEgcmVndWxhciBleHByZXNzaW9uIGNvbnN0cmFpbnQuXG5UaGUgJ1oncyBhcmUgbGl0ZXJhbCBjaGFyYWN0ZXJzLiAgSW4gdGhpcyBkYXRhc2V0LCAnWicgaW5kaWNhdGVzICdnb29kJyBkYXRhLiBcblRoZSAnLidzIHNheSB0byBtYXRjaCBhbnkgY2hhcmFjdGVyLiAgXG5UaGUgJyonIHNheXMgdG8gbWF0Y2ggdGhlIHByZXZpb3VzIGNoYXJhY3RlciAwIG9yIG1vcmUgdGltZXMuICBcblNlZSB0aGUgdHV0b3JpYWwgZm9yIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYXRcbmh0dHA6Ly93d3cudm9nZWxsYS5jb20vdHV0b3JpYWxzL0phdmFSZWd1bGFyRXhwcmVzc2lvbnMvYXJ0aWNsZS5odG1sXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlX2lkXG5leHBvY29kZVxuZmFjaWxpdHlcbklEXG5JTU9cbnBsYXRmb3JtXG5wbGF0Zm9ybV92ZXJzaW9uXG5zaXRlXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmFpclByZXNzdXJlIChBdG1vc3BoZXJpYyBQcmVzc3VyZSwgbWlsbGliYXIpXG4uLi4gKDEzIG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2ZzdU5vYWFTaGlwV1RES19mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZnN1Tm9hYVNoaXBXVERLX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2ZzdU5vYWFTaGlwV1RESy9pbmRleC5qc29uIiwgImh0dHBzOi8vc2Ftb3MuY29hcHMuZnN1LmVkdS9odG1sLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9mc3VOb2FhU2hpcFdUREsucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWZzdU5vYWFTaGlwV1RESyZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJGU1UiLCAiZnN1Tm9hYVNoaXBXVERLIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwS05CRC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBLTkJEIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwS05CRC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOT0FBIFNoaXAgRGVsYXdhcmUgSUkgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSwgUXVhbGl0eSBDb250cm9sbGVkIiwgIk5PQUEgU2hpcCBEZWxhd2FyZSBJSSBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhIChkZWxheWVkIH4xMCBkYXlzIGZvciBxdWFsaXR5IGNvbnRyb2wpIGFyZSBmcm9tIHRoZSBTaGlwYm9hcmQgQXV0b21hdGVkIE1ldGVvcm9sb2dpY2FsIGFuZCBPY2Vhbm9ncmFwaGljIFN5c3RlbSAoU0FNT1MpIHByb2dyYW0uXG5cbklNUE9SVEFOVDogQUxXQVlTIFVTRSBUSEUgUVVBTElUWSBGTEFHIERBVEEhIEVhY2ggZGF0YSB2YXJpYWJsZSdzIG1ldGFkYXRhIGluY2x1ZGVzIGEgcWNpbmRleCBhdHRyaWJ1dGUgd2hpY2ggaW5kaWNhdGVzIGEgY2hhcmFjdGVyIG51bWJlciBpbiB0aGUgZmxhZyBkYXRhLiAgQUxXQVlTIGNoZWNrIHRoZSBmbGFnIGRhdGEgZm9yIGVhY2ggcm93IG9mIGRhdGEgdG8gc2VlIHdoaWNoIGRhdGEgaXMgZ29vZCAoZmxhZz0nWicpIGFuZCB3aGljaCBkYXRhIGlzbid0LiAgRm9yIGV4YW1wbGUsIHRvIGV4dHJhY3QganVzdCBkYXRhIHdoZXJlIHRpbWUgKHFjaW5kZXg9MSksIGxhdGl0dWRlIChxY2luZGV4PTIpLCBsb25naXR1ZGUgKHFjaW5kZXg9MyksIGFuZCBhaXJUZW1wZXJhdHVyZSAocWNpbmRleD0xMikgYXJlICdnb29kJyBkYXRhLCBpbmNsdWRlIHRoaXMgY29uc3RyYWludCBpbiB5b3VyIEVSRERBUCBxdWVyeTpcbiAgZmxhZz1+XCJaWlouLi4uLi4uLlouKlwiXG5pbiB5b3VyIHF1ZXJ5LiAgXG5cIj1+XCIgaW5kaWNhdGVzIHRoaXMgaXMgYSByZWd1bGFyIGV4cHJlc3Npb24gY29uc3RyYWludC5cblRoZSAnWidzIGFyZSBsaXRlcmFsIGNoYXJhY3RlcnMuICBJbiB0aGlzIGRhdGFzZXQsICdaJyBpbmRpY2F0ZXMgJ2dvb2QnIGRhdGEuIFxuVGhlICcuJ3Mgc2F5IHRvIG1hdGNoIGFueSBjaGFyYWN0ZXIuICBcblRoZSAnKicgc2F5cyB0byBtYXRjaCB0aGUgcHJldmlvdXMgY2hhcmFjdGVyIDAgb3IgbW9yZSB0aW1lcy4gIFxuU2VlIHRoZSB0dXRvcmlhbCBmb3IgcmVndWxhciBleHByZXNzaW9ucyBhdFxuaHR0cDovL3d3dy52b2dlbGxhLmNvbS90dXRvcmlhbHMvSmF2YVJlZ3VsYXJFeHByZXNzaW9ucy9hcnRpY2xlLmh0bWxcblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2VfaWRcbmV4cG9jb2RlXG5mYWNpbGl0eVxuSURcbklNT1xucGxhdGZvcm1cbnBsYXRmb3JtX3ZlcnNpb25cbnNpdGVcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuYWlyUHJlc3N1cmUgKEF0bW9zcGhlcmljIFByZXNzdXJlLCBtaWxsaWJhcilcbi4uLiAoMTMgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZnN1Tm9hYVNoaXBLTkJEX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9mc3VOb2FhU2hpcEtOQkRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZnN1Tm9hYVNoaXBLTkJEL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9zYW1vcy5jb2Fwcy5mc3UuZWR1L2h0bWwvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2ZzdU5vYWFTaGlwS05CRC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZnN1Tm9hYVNoaXBLTkJEJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkZTVSIsICJmc3VOb2FhU2hpcEtOQkQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVEVCbnJ0LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdURUJucnQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVEVCbnJ0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5PQUEgU2hpcCBGYWlyd2VhdGhlciBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhLCBOZWFyIFJlYWwgVGltZSIsICJOT0FBIFNoaXAgRmFpcndlYXRoZXIgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSAoTmVhciBSZWFsIFRpbWUsIHVwZGF0ZWQgZGFpbHkpIGFyZSBmcm9tIHRoZSBTaGlwYm9hcmQgQXV0b21hdGVkIE1ldGVvcm9sb2dpY2FsIGFuZCBPY2Vhbm9ncmFwaGljIFN5c3RlbSAoU0FNT1MpIHByb2dyYW0uXG5cbklNUE9SVEFOVDogQUxXQVlTIFVTRSBUSEUgUVVBTElUWSBGTEFHIERBVEEhIEVhY2ggZGF0YSB2YXJpYWJsZSdzIG1ldGFkYXRhIGluY2x1ZGVzIGEgcWNpbmRleCBhdHRyaWJ1dGUgd2hpY2ggaW5kaWNhdGVzIGEgY2hhcmFjdGVyIG51bWJlciBpbiB0aGUgZmxhZyBkYXRhLiAgQUxXQVlTIGNoZWNrIHRoZSBmbGFnIGRhdGEgZm9yIGVhY2ggcm93IG9mIGRhdGEgdG8gc2VlIHdoaWNoIGRhdGEgaXMgZ29vZCAoZmxhZz0nWicpIGFuZCB3aGljaCBkYXRhIGlzbid0LiAgRm9yIGV4YW1wbGUsIHRvIGV4dHJhY3QganVzdCBkYXRhIHdoZXJlIHRpbWUgKHFjaW5kZXg9MSksIGxhdGl0dWRlIChxY2luZGV4PTIpLCBsb25naXR1ZGUgKHFjaW5kZXg9MyksIGFuZCBhaXJUZW1wZXJhdHVyZSAocWNpbmRleD0xMikgYXJlICdnb29kJyBkYXRhLCBpbmNsdWRlIHRoaXMgY29uc3RyYWludCBpbiB5b3VyIEVSRERBUCBxdWVyeTpcbiAgZmxhZz1+XCJaWlouLi4uLi4uLlouKlwiXG5pbiB5b3VyIHF1ZXJ5LiAgXG5cIj1+XCIgaW5kaWNhdGVzIHRoaXMgaXMgYSByZWd1bGFyIGV4cHJlc3Npb24gY29uc3RyYWludC5cblRoZSAnWidzIGFyZSBsaXRlcmFsIGNoYXJhY3RlcnMuICBJbiB0aGlzIGRhdGFzZXQsICdaJyBpbmRpY2F0ZXMgJ2dvb2QnIGRhdGEuIFxuVGhlICcuJ3Mgc2F5IHRvIG1hdGNoIGFueSBjaGFyYWN0ZXIuICBcblRoZSAnKicgc2F5cyB0byBtYXRjaCB0aGUgcHJldmlvdXMgY2hhcmFjdGVyIDAgb3IgbW9yZSB0aW1lcy4gIFxuU2VlIHRoZSB0dXRvcmlhbCBmb3IgcmVndWxhciBleHByZXNzaW9ucyBhdFxuaHR0cDovL3d3dy52b2dlbGxhLmNvbS90dXRvcmlhbHMvSmF2YVJlZ3VsYXJFeHByZXNzaW9ucy9hcnRpY2xlLmh0bWxcblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2VfaWRcbmV4cG9jb2RlXG5mYWNpbGl0eVxuSURcbklNT1xucGxhdGZvcm1cbnBsYXRmb3JtX3ZlcnNpb25cbnNpdGVcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuYWlyUHJlc3N1cmUgKEF0bW9zcGhlcmljIFByZXNzdXJlLCBtaWxsaWJhcilcbi4uLiAoMTMgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZnN1Tm9hYVNoaXBXVEVCbnJ0X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9mc3VOb2FhU2hpcFdURUJucnRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZnN1Tm9hYVNoaXBXVEVCbnJ0L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9zYW1vcy5jb2Fwcy5mc3UuZWR1L2h0bWwvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2ZzdU5vYWFTaGlwV1RFQm5ydC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZnN1Tm9hYVNoaXBXVEVCbnJ0JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkZTVSIsICJmc3VOb2FhU2hpcFdURUJucnQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVEVCLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdURUIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVEVCLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5PQUEgU2hpcCBGYWlyd2VhdGhlciBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhLCBRdWFsaXR5IENvbnRyb2xsZWQiLCAiTk9BQSBTaGlwIEZhaXJ3ZWF0aGVyIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEgKGRlbGF5ZWQgfjEwIGRheXMgZm9yIHF1YWxpdHkgY29udHJvbCkgYXJlIGZyb20gdGhlIFNoaXBib2FyZCBBdXRvbWF0ZWQgTWV0ZW9yb2xvZ2ljYWwgYW5kIE9jZWFub2dyYXBoaWMgU3lzdGVtIChTQU1PUykgcHJvZ3JhbS5cblxuSU1QT1JUQU5UOiBBTFdBWVMgVVNFIFRIRSBRVUFMSVRZIEZMQUcgREFUQSEgRWFjaCBkYXRhIHZhcmlhYmxlJ3MgbWV0YWRhdGEgaW5jbHVkZXMgYSBxY2luZGV4IGF0dHJpYnV0ZSB3aGljaCBpbmRpY2F0ZXMgYSBjaGFyYWN0ZXIgbnVtYmVyIGluIHRoZSBmbGFnIGRhdGEuICBBTFdBWVMgY2hlY2sgdGhlIGZsYWcgZGF0YSBmb3IgZWFjaCByb3cgb2YgZGF0YSB0byBzZWUgd2hpY2ggZGF0YSBpcyBnb29kIChmbGFnPSdaJykgYW5kIHdoaWNoIGRhdGEgaXNuJ3QuICBGb3IgZXhhbXBsZSwgdG8gZXh0cmFjdCBqdXN0IGRhdGEgd2hlcmUgdGltZSAocWNpbmRleD0xKSwgbGF0aXR1ZGUgKHFjaW5kZXg9MiksIGxvbmdpdHVkZSAocWNpbmRleD0zKSwgYW5kIGFpclRlbXBlcmF0dXJlIChxY2luZGV4PTEyKSBhcmUgJ2dvb2QnIGRhdGEsIGluY2x1ZGUgdGhpcyBjb25zdHJhaW50IGluIHlvdXIgRVJEREFQIHF1ZXJ5OlxuICBmbGFnPX5cIlpaWi4uLi4uLi4uWi4qXCJcbmluIHlvdXIgcXVlcnkuICBcblwiPX5cIiBpbmRpY2F0ZXMgdGhpcyBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBjb25zdHJhaW50LlxuVGhlICdaJ3MgYXJlIGxpdGVyYWwgY2hhcmFjdGVycy4gIEluIHRoaXMgZGF0YXNldCwgJ1onIGluZGljYXRlcyAnZ29vZCcgZGF0YS4gXG5UaGUgJy4ncyBzYXkgdG8gbWF0Y2ggYW55IGNoYXJhY3Rlci4gIFxuVGhlICcqJyBzYXlzIHRvIG1hdGNoIHRoZSBwcmV2aW91cyBjaGFyYWN0ZXIgMCBvciBtb3JlIHRpbWVzLiAgXG5TZWUgdGhlIHR1dG9yaWFsIGZvciByZWd1bGFyIGV4cHJlc3Npb25zIGF0XG5odHRwOi8vd3d3LnZvZ2VsbGEuY29tL3R1dG9yaWFscy9KYXZhUmVndWxhckV4cHJlc3Npb25zL2FydGljbGUuaHRtbFxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZV9pZFxuZXhwb2NvZGVcbmZhY2lsaXR5XG5JRFxuSU1PXG5wbGF0Zm9ybVxucGxhdGZvcm1fdmVyc2lvblxuc2l0ZVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5haXJQcmVzc3VyZSAoQXRtb3NwaGVyaWMgUHJlc3N1cmUsIG1pbGxpYmFyKVxuLi4uICgxMyBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9mc3VOb2FhU2hpcFdURUJfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2ZzdU5vYWFTaGlwV1RFQl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9mc3VOb2FhU2hpcFdURUIvaW5kZXguanNvbiIsICJodHRwczovL3NhbW9zLmNvYXBzLmZzdS5lZHUvaHRtbC8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZnN1Tm9hYVNoaXBXVEVCLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1mc3VOb2FhU2hpcFdURUImc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiRlNVIiwgImZzdU5vYWFTaGlwV1RFQiJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdURU9ucnQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RFT25ydCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdURU9ucnQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiTk9BQSBTaGlwIEdvcmRvbiBHdW50ZXIgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSwgTmVhciBSZWFsIFRpbWUiLCAiTk9BQSBTaGlwIEdvcmRvbiBHdW50ZXIgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSAoTmVhciBSZWFsIFRpbWUsIHVwZGF0ZWQgZGFpbHkpIGFyZSBmcm9tIHRoZSBTaGlwYm9hcmQgQXV0b21hdGVkIE1ldGVvcm9sb2dpY2FsIGFuZCBPY2Vhbm9ncmFwaGljIFN5c3RlbSAoU0FNT1MpIHByb2dyYW0uXG5cbklNUE9SVEFOVDogQUxXQVlTIFVTRSBUSEUgUVVBTElUWSBGTEFHIERBVEEhIEVhY2ggZGF0YSB2YXJpYWJsZSdzIG1ldGFkYXRhIGluY2x1ZGVzIGEgcWNpbmRleCBhdHRyaWJ1dGUgd2hpY2ggaW5kaWNhdGVzIGEgY2hhcmFjdGVyIG51bWJlciBpbiB0aGUgZmxhZyBkYXRhLiAgQUxXQVlTIGNoZWNrIHRoZSBmbGFnIGRhdGEgZm9yIGVhY2ggcm93IG9mIGRhdGEgdG8gc2VlIHdoaWNoIGRhdGEgaXMgZ29vZCAoZmxhZz0nWicpIGFuZCB3aGljaCBkYXRhIGlzbid0LiAgRm9yIGV4YW1wbGUsIHRvIGV4dHJhY3QganVzdCBkYXRhIHdoZXJlIHRpbWUgKHFjaW5kZXg9MSksIGxhdGl0dWRlIChxY2luZGV4PTIpLCBsb25naXR1ZGUgKHFjaW5kZXg9MyksIGFuZCBhaXJUZW1wZXJhdHVyZSAocWNpbmRleD0xMikgYXJlICdnb29kJyBkYXRhLCBpbmNsdWRlIHRoaXMgY29uc3RyYWludCBpbiB5b3VyIEVSRERBUCBxdWVyeTpcbiAgZmxhZz1+XCJaWlouLi4uLi4uLlouKlwiXG5pbiB5b3VyIHF1ZXJ5LiAgXG5cIj1+XCIgaW5kaWNhdGVzIHRoaXMgaXMgYSByZWd1bGFyIGV4cHJlc3Npb24gY29uc3RyYWludC5cblRoZSAnWidzIGFyZSBsaXRlcmFsIGNoYXJhY3RlcnMuICBJbiB0aGlzIGRhdGFzZXQsICdaJyBpbmRpY2F0ZXMgJ2dvb2QnIGRhdGEuIFxuVGhlICcuJ3Mgc2F5IHRvIG1hdGNoIGFueSBjaGFyYWN0ZXIuICBcblRoZSAnKicgc2F5cyB0byBtYXRjaCB0aGUgcHJldmlvdXMgY2hhcmFjdGVyIDAgb3IgbW9yZSB0aW1lcy4gIFxuU2VlIHRoZSB0dXRvcmlhbCBmb3IgcmVndWxhciBleHByZXNzaW9ucyBhdFxuaHR0cDovL3d3dy52b2dlbGxhLmNvbS90dXRvcmlhbHMvSmF2YVJlZ3VsYXJFeHByZXNzaW9ucy9hcnRpY2xlLmh0bWxcblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2VfaWRcbmV4cG9jb2RlXG5mYWNpbGl0eVxuSURcbklNT1xucGxhdGZvcm1cbnBsYXRmb3JtX3ZlcnNpb25cbnNpdGVcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuYWlyUHJlc3N1cmUgKEF0bW9zcGhlcmljIFByZXNzdXJlLCBtaWxsaWJhcilcbi4uLiAoMTMgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZnN1Tm9hYVNoaXBXVEVPbnJ0X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9mc3VOb2FhU2hpcFdURU9ucnRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZnN1Tm9hYVNoaXBXVEVPbnJ0L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9zYW1vcy5jb2Fwcy5mc3UuZWR1L2h0bWwvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2ZzdU5vYWFTaGlwV1RFT25ydC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZnN1Tm9hYVNoaXBXVEVPbnJ0JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkZTVSIsICJmc3VOb2FhU2hpcFdURU9ucnQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVEVPLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdURU8iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVEVPLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5PQUEgU2hpcCBHb3Jkb24gR3VudGVyIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEsIFF1YWxpdHkgQ29udHJvbGxlZCIsICJOT0FBIFNoaXAgR29yZG9uIEd1bnRlciBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhIChkZWxheWVkIH4xMCBkYXlzIGZvciBxdWFsaXR5IGNvbnRyb2wpIGFyZSBmcm9tIHRoZSBTaGlwYm9hcmQgQXV0b21hdGVkIE1ldGVvcm9sb2dpY2FsIGFuZCBPY2Vhbm9ncmFwaGljIFN5c3RlbSAoU0FNT1MpIHByb2dyYW0uXG5cbklNUE9SVEFOVDogQUxXQVlTIFVTRSBUSEUgUVVBTElUWSBGTEFHIERBVEEhIEVhY2ggZGF0YSB2YXJpYWJsZSdzIG1ldGFkYXRhIGluY2x1ZGVzIGEgcWNpbmRleCBhdHRyaWJ1dGUgd2hpY2ggaW5kaWNhdGVzIGEgY2hhcmFjdGVyIG51bWJlciBpbiB0aGUgZmxhZyBkYXRhLiAgQUxXQVlTIGNoZWNrIHRoZSBmbGFnIGRhdGEgZm9yIGVhY2ggcm93IG9mIGRhdGEgdG8gc2VlIHdoaWNoIGRhdGEgaXMgZ29vZCAoZmxhZz0nWicpIGFuZCB3aGljaCBkYXRhIGlzbid0LiAgRm9yIGV4YW1wbGUsIHRvIGV4dHJhY3QganVzdCBkYXRhIHdoZXJlIHRpbWUgKHFjaW5kZXg9MSksIGxhdGl0dWRlIChxY2luZGV4PTIpLCBsb25naXR1ZGUgKHFjaW5kZXg9MyksIGFuZCBhaXJUZW1wZXJhdHVyZSAocWNpbmRleD0xMikgYXJlICdnb29kJyBkYXRhLCBpbmNsdWRlIHRoaXMgY29uc3RyYWludCBpbiB5b3VyIEVSRERBUCBxdWVyeTpcbiAgZmxhZz1+XCJaWlouLi4uLi4uLlouKlwiXG5pbiB5b3VyIHF1ZXJ5LiAgXG5cIj1+XCIgaW5kaWNhdGVzIHRoaXMgaXMgYSByZWd1bGFyIGV4cHJlc3Npb24gY29uc3RyYWludC5cblRoZSAnWidzIGFyZSBsaXRlcmFsIGNoYXJhY3RlcnMuICBJbiB0aGlzIGRhdGFzZXQsICdaJyBpbmRpY2F0ZXMgJ2dvb2QnIGRhdGEuIFxuVGhlICcuJ3Mgc2F5IHRvIG1hdGNoIGFueSBjaGFyYWN0ZXIuICBcblRoZSAnKicgc2F5cyB0byBtYXRjaCB0aGUgcHJldmlvdXMgY2hhcmFjdGVyIDAgb3IgbW9yZSB0aW1lcy4gIFxuU2VlIHRoZSB0dXRvcmlhbCBmb3IgcmVndWxhciBleHByZXNzaW9ucyBhdFxuaHR0cDovL3d3dy52b2dlbGxhLmNvbS90dXRvcmlhbHMvSmF2YVJlZ3VsYXJFeHByZXNzaW9ucy9hcnRpY2xlLmh0bWxcblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2VfaWRcbmV4cG9jb2RlXG5mYWNpbGl0eVxuSURcbklNT1xucGxhdGZvcm1cbnBsYXRmb3JtX3ZlcnNpb25cbnNpdGVcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuYWlyUHJlc3N1cmUgKEF0bW9zcGhlcmljIFByZXNzdXJlLCBtaWxsaWJhcilcbi4uLiAoMTMgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZnN1Tm9hYVNoaXBXVEVPX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9mc3VOb2FhU2hpcFdURU9faXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZnN1Tm9hYVNoaXBXVEVPL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9zYW1vcy5jb2Fwcy5mc3UuZWR1L2h0bWwvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2ZzdU5vYWFTaGlwV1RFTy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZnN1Tm9hYVNoaXBXVEVPJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkZTVSIsICJmc3VOb2FhU2hpcFdURU8iXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVERGbnJ0LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdUREZucnQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVERGbnJ0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5PQUEgU2hpcCBIZW5yeSBCLiBCaWdlbG93IFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEsIE5lYXIgUmVhbCBUaW1lIiwgIk5PQUEgU2hpcCBIZW5yeSBCLiBCaWdlbG93IFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEgKE5lYXIgUmVhbCBUaW1lLCB1cGRhdGVkIGRhaWx5KSBhcmUgZnJvbSB0aGUgU2hpcGJvYXJkIEF1dG9tYXRlZCBNZXRlb3JvbG9naWNhbCBhbmQgT2NlYW5vZ3JhcGhpYyBTeXN0ZW0gKFNBTU9TKSBwcm9ncmFtLlxuXG5JTVBPUlRBTlQ6IEFMV0FZUyBVU0UgVEhFIFFVQUxJVFkgRkxBRyBEQVRBISBFYWNoIGRhdGEgdmFyaWFibGUncyBtZXRhZGF0YSBpbmNsdWRlcyBhIHFjaW5kZXggYXR0cmlidXRlIHdoaWNoIGluZGljYXRlcyBhIGNoYXJhY3RlciBudW1iZXIgaW4gdGhlIGZsYWcgZGF0YS4gIEFMV0FZUyBjaGVjayB0aGUgZmxhZyBkYXRhIGZvciBlYWNoIHJvdyBvZiBkYXRhIHRvIHNlZSB3aGljaCBkYXRhIGlzIGdvb2QgKGZsYWc9J1onKSBhbmQgd2hpY2ggZGF0YSBpc24ndC4gIEZvciBleGFtcGxlLCB0byBleHRyYWN0IGp1c3QgZGF0YSB3aGVyZSB0aW1lIChxY2luZGV4PTEpLCBsYXRpdHVkZSAocWNpbmRleD0yKSwgbG9uZ2l0dWRlIChxY2luZGV4PTMpLCBhbmQgYWlyVGVtcGVyYXR1cmUgKHFjaW5kZXg9MTIpIGFyZSAnZ29vZCcgZGF0YSwgaW5jbHVkZSB0aGlzIGNvbnN0cmFpbnQgaW4geW91ciBFUkREQVAgcXVlcnk6XG4gIGZsYWc9flwiWlpaLi4uLi4uLi5aLipcIlxuaW4geW91ciBxdWVyeS4gIFxuXCI9flwiIGluZGljYXRlcyB0aGlzIGlzIGEgcmVndWxhciBleHByZXNzaW9uIGNvbnN0cmFpbnQuXG5UaGUgJ1oncyBhcmUgbGl0ZXJhbCBjaGFyYWN0ZXJzLiAgSW4gdGhpcyBkYXRhc2V0LCAnWicgaW5kaWNhdGVzICdnb29kJyBkYXRhLiBcblRoZSAnLidzIHNheSB0byBtYXRjaCBhbnkgY2hhcmFjdGVyLiAgXG5UaGUgJyonIHNheXMgdG8gbWF0Y2ggdGhlIHByZXZpb3VzIGNoYXJhY3RlciAwIG9yIG1vcmUgdGltZXMuICBcblNlZSB0aGUgdHV0b3JpYWwgZm9yIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYXRcbmh0dHA6Ly93d3cudm9nZWxsYS5jb20vdHV0b3JpYWxzL0phdmFSZWd1bGFyRXhwcmVzc2lvbnMvYXJ0aWNsZS5odG1sXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlX2lkXG5leHBvY29kZVxuZmFjaWxpdHlcbklEXG5JTU9cbnBsYXRmb3JtXG5wbGF0Zm9ybV92ZXJzaW9uXG5zaXRlXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmFpclByZXNzdXJlIChBdG1vc3BoZXJpYyBQcmVzc3VyZSwgbWlsbGliYXIpXG4uLi4gKDEzIG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2ZzdU5vYWFTaGlwV1RERm5ydF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZnN1Tm9hYVNoaXBXVERGbnJ0X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2ZzdU5vYWFTaGlwV1RERm5ydC9pbmRleC5qc29uIiwgImh0dHBzOi8vc2Ftb3MuY29hcHMuZnN1LmVkdS9odG1sLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9mc3VOb2FhU2hpcFdUREZucnQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWZzdU5vYWFTaGlwV1RERm5ydCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJGU1UiLCAiZnN1Tm9hYVNoaXBXVERGbnJ0Il0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RERi5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVERGIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RERi5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOT0FBIFNoaXAgSGVucnkgQi4gQmlnZWxvdyBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhLCBRdWFsaXR5IENvbnRyb2xsZWQiLCAiTk9BQSBTaGlwIEhlbnJ5IEIuIEJpZ2Vsb3cgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSAoZGVsYXllZCB+MTAgZGF5cyBmb3IgcXVhbGl0eSBjb250cm9sKSBhcmUgZnJvbSB0aGUgU2hpcGJvYXJkIEF1dG9tYXRlZCBNZXRlb3JvbG9naWNhbCBhbmQgT2NlYW5vZ3JhcGhpYyBTeXN0ZW0gKFNBTU9TKSBwcm9ncmFtLlxuXG5JTVBPUlRBTlQ6IEFMV0FZUyBVU0UgVEhFIFFVQUxJVFkgRkxBRyBEQVRBISBFYWNoIGRhdGEgdmFyaWFibGUncyBtZXRhZGF0YSBpbmNsdWRlcyBhIHFjaW5kZXggYXR0cmlidXRlIHdoaWNoIGluZGljYXRlcyBhIGNoYXJhY3RlciBudW1iZXIgaW4gdGhlIGZsYWcgZGF0YS4gIEFMV0FZUyBjaGVjayB0aGUgZmxhZyBkYXRhIGZvciBlYWNoIHJvdyBvZiBkYXRhIHRvIHNlZSB3aGljaCBkYXRhIGlzIGdvb2QgKGZsYWc9J1onKSBhbmQgd2hpY2ggZGF0YSBpc24ndC4gIEZvciBleGFtcGxlLCB0byBleHRyYWN0IGp1c3QgZGF0YSB3aGVyZSB0aW1lIChxY2luZGV4PTEpLCBsYXRpdHVkZSAocWNpbmRleD0yKSwgbG9uZ2l0dWRlIChxY2luZGV4PTMpLCBhbmQgYWlyVGVtcGVyYXR1cmUgKHFjaW5kZXg9MTIpIGFyZSAnZ29vZCcgZGF0YSwgaW5jbHVkZSB0aGlzIGNvbnN0cmFpbnQgaW4geW91ciBFUkREQVAgcXVlcnk6XG4gIGZsYWc9flwiWlpaLi4uLi4uLi5aLipcIlxuaW4geW91ciBxdWVyeS4gIFxuXCI9flwiIGluZGljYXRlcyB0aGlzIGlzIGEgcmVndWxhciBleHByZXNzaW9uIGNvbnN0cmFpbnQuXG5UaGUgJ1oncyBhcmUgbGl0ZXJhbCBjaGFyYWN0ZXJzLiAgSW4gdGhpcyBkYXRhc2V0LCAnWicgaW5kaWNhdGVzICdnb29kJyBkYXRhLiBcblRoZSAnLidzIHNheSB0byBtYXRjaCBhbnkgY2hhcmFjdGVyLiAgXG5UaGUgJyonIHNheXMgdG8gbWF0Y2ggdGhlIHByZXZpb3VzIGNoYXJhY3RlciAwIG9yIG1vcmUgdGltZXMuICBcblNlZSB0aGUgdHV0b3JpYWwgZm9yIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYXRcbmh0dHA6Ly93d3cudm9nZWxsYS5jb20vdHV0b3JpYWxzL0phdmFSZWd1bGFyRXhwcmVzc2lvbnMvYXJ0aWNsZS5odG1sXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlX2lkXG5leHBvY29kZVxuZmFjaWxpdHlcbklEXG5JTU9cbnBsYXRmb3JtXG5wbGF0Zm9ybV92ZXJzaW9uXG5zaXRlXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmFpclByZXNzdXJlIChBdG1vc3BoZXJpYyBQcmVzc3VyZSwgbWlsbGliYXIpXG4uLi4gKDEzIG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2ZzdU5vYWFTaGlwV1RERl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZnN1Tm9hYVNoaXBXVERGX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2ZzdU5vYWFTaGlwV1RERi9pbmRleC5qc29uIiwgImh0dHBzOi8vc2Ftb3MuY29hcHMuZnN1LmVkdS9odG1sLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9mc3VOb2FhU2hpcFdUREYucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWZzdU5vYWFTaGlwV1RERiZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJGU1UiLCAiZnN1Tm9hYVNoaXBXVERGIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RFWW5ydC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVEVZbnJ0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RFWW5ydC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOT0FBIFNoaXAgSGknaWFsYWthaSBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhLCBOZWFyIFJlYWwgVGltZSIsICJOT0FBIFNoaXAgSGknaWFsYWthaSBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhIChOZWFyIFJlYWwgVGltZSwgdXBkYXRlZCBkYWlseSkgYXJlIGZyb20gdGhlIFNoaXBib2FyZCBBdXRvbWF0ZWQgTWV0ZW9yb2xvZ2ljYWwgYW5kIE9jZWFub2dyYXBoaWMgU3lzdGVtIChTQU1PUykgcHJvZ3JhbS5cblxuSU1QT1JUQU5UOiBBTFdBWVMgVVNFIFRIRSBRVUFMSVRZIEZMQUcgREFUQSEgRWFjaCBkYXRhIHZhcmlhYmxlJ3MgbWV0YWRhdGEgaW5jbHVkZXMgYSBxY2luZGV4IGF0dHJpYnV0ZSB3aGljaCBpbmRpY2F0ZXMgYSBjaGFyYWN0ZXIgbnVtYmVyIGluIHRoZSBmbGFnIGRhdGEuICBBTFdBWVMgY2hlY2sgdGhlIGZsYWcgZGF0YSBmb3IgZWFjaCByb3cgb2YgZGF0YSB0byBzZWUgd2hpY2ggZGF0YSBpcyBnb29kIChmbGFnPSdaJykgYW5kIHdoaWNoIGRhdGEgaXNuJ3QuICBGb3IgZXhhbXBsZSwgdG8gZXh0cmFjdCBqdXN0IGRhdGEgd2hlcmUgdGltZSAocWNpbmRleD0xKSwgbGF0aXR1ZGUgKHFjaW5kZXg9MiksIGxvbmdpdHVkZSAocWNpbmRleD0zKSwgYW5kIGFpclRlbXBlcmF0dXJlIChxY2luZGV4PTEyKSBhcmUgJ2dvb2QnIGRhdGEsIGluY2x1ZGUgdGhpcyBjb25zdHJhaW50IGluIHlvdXIgRVJEREFQIHF1ZXJ5OlxuICBmbGFnPX5cIlpaWi4uLi4uLi4uWi4qXCJcbmluIHlvdXIgcXVlcnkuICBcblwiPX5cIiBpbmRpY2F0ZXMgdGhpcyBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBjb25zdHJhaW50LlxuVGhlICdaJ3MgYXJlIGxpdGVyYWwgY2hhcmFjdGVycy4gIEluIHRoaXMgZGF0YXNldCwgJ1onIGluZGljYXRlcyAnZ29vZCcgZGF0YS4gXG5UaGUgJy4ncyBzYXkgdG8gbWF0Y2ggYW55IGNoYXJhY3Rlci4gIFxuVGhlICcqJyBzYXlzIHRvIG1hdGNoIHRoZSBwcmV2aW91cyBjaGFyYWN0ZXIgMCBvciBtb3JlIHRpbWVzLiAgXG5TZWUgdGhlIHR1dG9yaWFsIGZvciByZWd1bGFyIGV4cHJlc3Npb25zIGF0XG5odHRwOi8vd3d3LnZvZ2VsbGEuY29tL3R1dG9yaWFscy9KYXZhUmVndWxhckV4cHJlc3Npb25zL2FydGljbGUuaHRtbFxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZV9pZFxuZXhwb2NvZGVcbmZhY2lsaXR5XG5JRFxuSU1PXG5wbGF0Zm9ybVxucGxhdGZvcm1fdmVyc2lvblxuc2l0ZVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5haXJQcmVzc3VyZSAoQXRtb3NwaGVyaWMgUHJlc3N1cmUsIG1pbGxpYmFyKVxuLi4uICgxMyBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9mc3VOb2FhU2hpcFdURVlucnRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2ZzdU5vYWFTaGlwV1RFWW5ydF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9mc3VOb2FhU2hpcFdURVlucnQvaW5kZXguanNvbiIsICJodHRwczovL3NhbW9zLmNvYXBzLmZzdS5lZHUvaHRtbC8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZnN1Tm9hYVNoaXBXVEVZbnJ0LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1mc3VOb2FhU2hpcFdURVlucnQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiRlNVIiwgImZzdU5vYWFTaGlwV1RFWW5ydCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdURVkuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RFWSIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdURVkuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiTk9BQSBTaGlwIEhpJ2lhbGFrYWkgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSwgUXVhbGl0eSBDb250cm9sbGVkIiwgIk5PQUEgU2hpcCBIaSdpYWxha2FpIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEgKGRlbGF5ZWQgfjEwIGRheXMgZm9yIHF1YWxpdHkgY29udHJvbCkgYXJlIGZyb20gdGhlIFNoaXBib2FyZCBBdXRvbWF0ZWQgTWV0ZW9yb2xvZ2ljYWwgYW5kIE9jZWFub2dyYXBoaWMgU3lzdGVtIChTQU1PUykgcHJvZ3JhbS5cblxuSU1QT1JUQU5UOiBBTFdBWVMgVVNFIFRIRSBRVUFMSVRZIEZMQUcgREFUQSEgRWFjaCBkYXRhIHZhcmlhYmxlJ3MgbWV0YWRhdGEgaW5jbHVkZXMgYSBxY2luZGV4IGF0dHJpYnV0ZSB3aGljaCBpbmRpY2F0ZXMgYSBjaGFyYWN0ZXIgbnVtYmVyIGluIHRoZSBmbGFnIGRhdGEuICBBTFdBWVMgY2hlY2sgdGhlIGZsYWcgZGF0YSBmb3IgZWFjaCByb3cgb2YgZGF0YSB0byBzZWUgd2hpY2ggZGF0YSBpcyBnb29kIChmbGFnPSdaJykgYW5kIHdoaWNoIGRhdGEgaXNuJ3QuICBGb3IgZXhhbXBsZSwgdG8gZXh0cmFjdCBqdXN0IGRhdGEgd2hlcmUgdGltZSAocWNpbmRleD0xKSwgbGF0aXR1ZGUgKHFjaW5kZXg9MiksIGxvbmdpdHVkZSAocWNpbmRleD0zKSwgYW5kIGFpclRlbXBlcmF0dXJlIChxY2luZGV4PTEyKSBhcmUgJ2dvb2QnIGRhdGEsIGluY2x1ZGUgdGhpcyBjb25zdHJhaW50IGluIHlvdXIgRVJEREFQIHF1ZXJ5OlxuICBmbGFnPX5cIlpaWi4uLi4uLi4uWi4qXCJcbmluIHlvdXIgcXVlcnkuICBcblwiPX5cIiBpbmRpY2F0ZXMgdGhpcyBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBjb25zdHJhaW50LlxuVGhlICdaJ3MgYXJlIGxpdGVyYWwgY2hhcmFjdGVycy4gIEluIHRoaXMgZGF0YXNldCwgJ1onIGluZGljYXRlcyAnZ29vZCcgZGF0YS4gXG5UaGUgJy4ncyBzYXkgdG8gbWF0Y2ggYW55IGNoYXJhY3Rlci4gIFxuVGhlICcqJyBzYXlzIHRvIG1hdGNoIHRoZSBwcmV2aW91cyBjaGFyYWN0ZXIgMCBvciBtb3JlIHRpbWVzLiAgXG5TZWUgdGhlIHR1dG9yaWFsIGZvciByZWd1bGFyIGV4cHJlc3Npb25zIGF0XG5odHRwOi8vd3d3LnZvZ2VsbGEuY29tL3R1dG9yaWFscy9KYXZhUmVndWxhckV4cHJlc3Npb25zL2FydGljbGUuaHRtbFxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZV9pZFxuZXhwb2NvZGVcbmZhY2lsaXR5XG5JRFxuSU1PXG5wbGF0Zm9ybVxucGxhdGZvcm1fdmVyc2lvblxuc2l0ZVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5haXJQcmVzc3VyZSAoQXRtb3NwaGVyaWMgUHJlc3N1cmUsIG1pbGxpYmFyKVxuLi4uICgxMyBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9mc3VOb2FhU2hpcFdURVlfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2ZzdU5vYWFTaGlwV1RFWV9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9mc3VOb2FhU2hpcFdURVkvaW5kZXguanNvbiIsICJodHRwczovL3NhbW9zLmNvYXBzLmZzdS5lZHUvaHRtbC8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZnN1Tm9hYVNoaXBXVEVZLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1mc3VOb2FhU2hpcFdURVkmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiRlNVIiwgImZzdU5vYWFTaGlwV1RFWSJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdURVUuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RFVSIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdURVUuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiTk9BQSBTaGlwIEthJ2ltaW1vYW5hIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEsIFF1YWxpdHkgQ29udHJvbGxlZCIsICJOT0FBIFNoaXAgS2EnaW1pbW9hbmEgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSAoZGVsYXllZCB+MTAgZGF5cyBmb3IgcXVhbGl0eSBjb250cm9sKSBhcmUgZnJvbSB0aGUgU2hpcGJvYXJkIEF1dG9tYXRlZCBNZXRlb3JvbG9naWNhbCBhbmQgT2NlYW5vZ3JhcGhpYyBTeXN0ZW0gKFNBTU9TKSBwcm9ncmFtLlxuXG5JTVBPUlRBTlQ6IEFMV0FZUyBVU0UgVEhFIFFVQUxJVFkgRkxBRyBEQVRBISBFYWNoIGRhdGEgdmFyaWFibGUncyBtZXRhZGF0YSBpbmNsdWRlcyBhIHFjaW5kZXggYXR0cmlidXRlIHdoaWNoIGluZGljYXRlcyBhIGNoYXJhY3RlciBudW1iZXIgaW4gdGhlIGZsYWcgZGF0YS4gIEFMV0FZUyBjaGVjayB0aGUgZmxhZyBkYXRhIGZvciBlYWNoIHJvdyBvZiBkYXRhIHRvIHNlZSB3aGljaCBkYXRhIGlzIGdvb2QgKGZsYWc9J1onKSBhbmQgd2hpY2ggZGF0YSBpc24ndC4gIEZvciBleGFtcGxlLCB0byBleHRyYWN0IGp1c3QgZGF0YSB3aGVyZSB0aW1lIChxY2luZGV4PTEpLCBsYXRpdHVkZSAocWNpbmRleD0yKSwgbG9uZ2l0dWRlIChxY2luZGV4PTMpLCBhbmQgYWlyVGVtcGVyYXR1cmUgKHFjaW5kZXg9MTIpIGFyZSAnZ29vZCcgZGF0YSwgaW5jbHVkZSB0aGlzIGNvbnN0cmFpbnQgaW4geW91ciBFUkREQVAgcXVlcnk6XG4gIGZsYWc9flwiWlpaLi4uLi4uLi5aLipcIlxuaW4geW91ciBxdWVyeS4gIFxuXCI9flwiIGluZGljYXRlcyB0aGlzIGlzIGEgcmVndWxhciBleHByZXNzaW9uIGNvbnN0cmFpbnQuXG5UaGUgJ1oncyBhcmUgbGl0ZXJhbCBjaGFyYWN0ZXJzLiAgSW4gdGhpcyBkYXRhc2V0LCAnWicgaW5kaWNhdGVzICdnb29kJyBkYXRhLiBcblRoZSAnLidzIHNheSB0byBtYXRjaCBhbnkgY2hhcmFjdGVyLiAgXG5UaGUgJyonIHNheXMgdG8gbWF0Y2ggdGhlIHByZXZpb3VzIGNoYXJhY3RlciAwIG9yIG1vcmUgdGltZXMuICBcblNlZSB0aGUgdHV0b3JpYWwgZm9yIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYXRcbmh0dHA6Ly93d3cudm9nZWxsYS5jb20vdHV0b3JpYWxzL0phdmFSZWd1bGFyRXhwcmVzc2lvbnMvYXJ0aWNsZS5odG1sXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlX2lkXG5leHBvY29kZVxuZmFjaWxpdHlcbklEXG5JTU9cbnBsYXRmb3JtXG5wbGF0Zm9ybV92ZXJzaW9uXG5zaXRlXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmFpclByZXNzdXJlIChBdG1vc3BoZXJpYyBQcmVzc3VyZSwgbWlsbGliYXIpXG4uLi4gKDE2IG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2ZzdU5vYWFTaGlwV1RFVV9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZnN1Tm9hYVNoaXBXVEVVX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2ZzdU5vYWFTaGlwV1RFVS9pbmRleC5qc29uIiwgImh0dHBzOi8vc2Ftb3MuY29hcHMuZnN1LmVkdS9odG1sLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9mc3VOb2FhU2hpcFdURVUucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWZzdU5vYWFTaGlwV1RFVSZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJGU1UiLCAiZnN1Tm9hYVNoaXBXVEVVIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RFSi5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVEVKIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RFSi5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOT0FBIFNoaXAgTWNBcnRodXJJSSBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhLCBRdWFsaXR5IENvbnRyb2xsZWQiLCAiTk9BQSBTaGlwIE1jQXJ0aHVyIElJIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEgKGRlbGF5ZWQgfjEwIGRheXMgZm9yIHF1YWxpdHkgY29udHJvbCkgYXJlIGZyb20gdGhlIFNoaXBib2FyZCBBdXRvbWF0ZWQgTWV0ZW9yb2xvZ2ljYWwgYW5kIE9jZWFub2dyYXBoaWMgU3lzdGVtIChTQU1PUykgcHJvZ3JhbS5cblxuSU1QT1JUQU5UOiBBTFdBWVMgVVNFIFRIRSBRVUFMSVRZIEZMQUcgREFUQSEgRWFjaCBkYXRhIHZhcmlhYmxlJ3MgbWV0YWRhdGEgaW5jbHVkZXMgYSBxY2luZGV4IGF0dHJpYnV0ZSB3aGljaCBpbmRpY2F0ZXMgYSBjaGFyYWN0ZXIgbnVtYmVyIGluIHRoZSBmbGFnIGRhdGEuICBBTFdBWVMgY2hlY2sgdGhlIGZsYWcgZGF0YSBmb3IgZWFjaCByb3cgb2YgZGF0YSB0byBzZWUgd2hpY2ggZGF0YSBpcyBnb29kIChmbGFnPSdaJykgYW5kIHdoaWNoIGRhdGEgaXNuJ3QuICBGb3IgZXhhbXBsZSwgdG8gZXh0cmFjdCBqdXN0IGRhdGEgd2hlcmUgdGltZSAocWNpbmRleD0xKSwgbGF0aXR1ZGUgKHFjaW5kZXg9MiksIGxvbmdpdHVkZSAocWNpbmRleD0zKSwgYW5kIGFpclRlbXBlcmF0dXJlIChxY2luZGV4PTEyKSBhcmUgJ2dvb2QnIGRhdGEsIGluY2x1ZGUgdGhpcyBjb25zdHJhaW50IGluIHlvdXIgRVJEREFQIHF1ZXJ5OlxuICBmbGFnPX5cIlpaWi4uLi4uLi4uWi4qXCJcbmluIHlvdXIgcXVlcnkuICBcblwiPX5cIiBpbmRpY2F0ZXMgdGhpcyBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBjb25zdHJhaW50LlxuVGhlICdaJ3MgYXJlIGxpdGVyYWwgY2hhcmFjdGVycy4gIEluIHRoaXMgZGF0YXNldCwgJ1onIGluZGljYXRlcyAnZ29vZCcgZGF0YS4gXG5UaGUgJy4ncyBzYXkgdG8gbWF0Y2ggYW55IGNoYXJhY3Rlci4gIFxuVGhlICcqJyBzYXlzIHRvIG1hdGNoIHRoZSBwcmV2aW91cyBjaGFyYWN0ZXIgMCBvciBtb3JlIHRpbWVzLiAgXG5TZWUgdGhlIHR1dG9yaWFsIGZvciByZWd1bGFyIGV4cHJlc3Npb25zIGF0XG5odHRwOi8vd3d3LnZvZ2VsbGEuY29tL3R1dG9yaWFscy9KYXZhUmVndWxhckV4cHJlc3Npb25zL2FydGljbGUuaHRtbFxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZV9pZFxuZXhwb2NvZGVcbmZhY2lsaXR5XG5JRFxuSU1PXG5wbGF0Zm9ybVxucGxhdGZvcm1fdmVyc2lvblxuc2l0ZVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5haXJQcmVzc3VyZSAoQXRtb3NwaGVyaWMgUHJlc3N1cmUsIG1pbGxpYmFyKVxuLi4uICgxMyBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9mc3VOb2FhU2hpcFdURUpfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2ZzdU5vYWFTaGlwV1RFSl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9mc3VOb2FhU2hpcFdURUovaW5kZXguanNvbiIsICJodHRwczovL3NhbW9zLmNvYXBzLmZzdS5lZHUvaHRtbC8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZnN1Tm9hYVNoaXBXVEVKLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1mc3VOb2FhU2hpcFdURUomc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiRlNVIiwgImZzdU5vYWFTaGlwV1RFSiJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdURE0uc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RETSIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdURE0uZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiTk9BQSBTaGlwIE1pbGxlciBGcmVlbWFuIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEsIFF1YWxpdHkgQ29udHJvbGxlZCIsICJOT0FBIFNoaXAgTWlsbGVyIEZyZWVtYW4gVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSAoZGVsYXllZCB+MTAgZGF5cyBmb3IgcXVhbGl0eSBjb250cm9sKSBhcmUgZnJvbSB0aGUgU2hpcGJvYXJkIEF1dG9tYXRlZCBNZXRlb3JvbG9naWNhbCBhbmQgT2NlYW5vZ3JhcGhpYyBTeXN0ZW0gKFNBTU9TKSBwcm9ncmFtLlxuXG5JTVBPUlRBTlQ6IEFMV0FZUyBVU0UgVEhFIFFVQUxJVFkgRkxBRyBEQVRBISBFYWNoIGRhdGEgdmFyaWFibGUncyBtZXRhZGF0YSBpbmNsdWRlcyBhIHFjaW5kZXggYXR0cmlidXRlIHdoaWNoIGluZGljYXRlcyBhIGNoYXJhY3RlciBudW1iZXIgaW4gdGhlIGZsYWcgZGF0YS4gIEFMV0FZUyBjaGVjayB0aGUgZmxhZyBkYXRhIGZvciBlYWNoIHJvdyBvZiBkYXRhIHRvIHNlZSB3aGljaCBkYXRhIGlzIGdvb2QgKGZsYWc9J1onKSBhbmQgd2hpY2ggZGF0YSBpc24ndC4gIEZvciBleGFtcGxlLCB0byBleHRyYWN0IGp1c3QgZGF0YSB3aGVyZSB0aW1lIChxY2luZGV4PTEpLCBsYXRpdHVkZSAocWNpbmRleD0yKSwgbG9uZ2l0dWRlIChxY2luZGV4PTMpLCBhbmQgYWlyVGVtcGVyYXR1cmUgKHFjaW5kZXg9MTIpIGFyZSAnZ29vZCcgZGF0YSwgaW5jbHVkZSB0aGlzIGNvbnN0cmFpbnQgaW4geW91ciBFUkREQVAgcXVlcnk6XG4gIGZsYWc9flwiWlpaLi4uLi4uLi5aLipcIlxuaW4geW91ciBxdWVyeS4gIFxuXCI9flwiIGluZGljYXRlcyB0aGlzIGlzIGEgcmVndWxhciBleHByZXNzaW9uIGNvbnN0cmFpbnQuXG5UaGUgJ1oncyBhcmUgbGl0ZXJhbCBjaGFyYWN0ZXJzLiAgSW4gdGhpcyBkYXRhc2V0LCAnWicgaW5kaWNhdGVzICdnb29kJyBkYXRhLiBcblRoZSAnLidzIHNheSB0byBtYXRjaCBhbnkgY2hhcmFjdGVyLiAgXG5UaGUgJyonIHNheXMgdG8gbWF0Y2ggdGhlIHByZXZpb3VzIGNoYXJhY3RlciAwIG9yIG1vcmUgdGltZXMuICBcblNlZSB0aGUgdHV0b3JpYWwgZm9yIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYXRcbmh0dHA6Ly93d3cudm9nZWxsYS5jb20vdHV0b3JpYWxzL0phdmFSZWd1bGFyRXhwcmVzc2lvbnMvYXJ0aWNsZS5odG1sXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlX2lkXG5leHBvY29kZVxuZmFjaWxpdHlcbklEXG5JTU9cbnBsYXRmb3JtXG5wbGF0Zm9ybV92ZXJzaW9uXG5zaXRlXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmFpclByZXNzdXJlIChBdG1vc3BoZXJpYyBQcmVzc3VyZSwgbWlsbGliYXIpXG4uLi4gKDEzIG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2ZzdU5vYWFTaGlwV1RETV9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZnN1Tm9hYVNoaXBXVERNX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2ZzdU5vYWFTaGlwV1RETS9pbmRleC5qc29uIiwgImh0dHBzOi8vc2Ftb3MuY29hcHMuZnN1LmVkdS9odG1sLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9mc3VOb2FhU2hpcFdURE0ucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWZzdU5vYWFTaGlwV1RETSZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJGU1UiLCAiZnN1Tm9hYVNoaXBXVERNIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RFUm5ydC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVEVSbnJ0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RFUm5ydC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOT0FBIFNoaXAgTmFuY3kgRm9zdGVyIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEsIE5lYXIgUmVhbCBUaW1lIiwgIk5PQUEgU2hpcCBOYW5jeSBGb3N0ZXIgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSAoTmVhciBSZWFsIFRpbWUsIHVwZGF0ZWQgZGFpbHkpIGFyZSBmcm9tIHRoZSBTaGlwYm9hcmQgQXV0b21hdGVkIE1ldGVvcm9sb2dpY2FsIGFuZCBPY2Vhbm9ncmFwaGljIFN5c3RlbSAoU0FNT1MpIHByb2dyYW0uXG5cbklNUE9SVEFOVDogQUxXQVlTIFVTRSBUSEUgUVVBTElUWSBGTEFHIERBVEEhIEVhY2ggZGF0YSB2YXJpYWJsZSdzIG1ldGFkYXRhIGluY2x1ZGVzIGEgcWNpbmRleCBhdHRyaWJ1dGUgd2hpY2ggaW5kaWNhdGVzIGEgY2hhcmFjdGVyIG51bWJlciBpbiB0aGUgZmxhZyBkYXRhLiAgQUxXQVlTIGNoZWNrIHRoZSBmbGFnIGRhdGEgZm9yIGVhY2ggcm93IG9mIGRhdGEgdG8gc2VlIHdoaWNoIGRhdGEgaXMgZ29vZCAoZmxhZz0nWicpIGFuZCB3aGljaCBkYXRhIGlzbid0LiAgRm9yIGV4YW1wbGUsIHRvIGV4dHJhY3QganVzdCBkYXRhIHdoZXJlIHRpbWUgKHFjaW5kZXg9MSksIGxhdGl0dWRlIChxY2luZGV4PTIpLCBsb25naXR1ZGUgKHFjaW5kZXg9MyksIGFuZCBhaXJUZW1wZXJhdHVyZSAocWNpbmRleD0xMikgYXJlICdnb29kJyBkYXRhLCBpbmNsdWRlIHRoaXMgY29uc3RyYWludCBpbiB5b3VyIEVSRERBUCBxdWVyeTpcbiAgZmxhZz1+XCJaWlouLi4uLi4uLlouKlwiXG5pbiB5b3VyIHF1ZXJ5LiAgXG5cIj1+XCIgaW5kaWNhdGVzIHRoaXMgaXMgYSByZWd1bGFyIGV4cHJlc3Npb24gY29uc3RyYWludC5cblRoZSAnWidzIGFyZSBsaXRlcmFsIGNoYXJhY3RlcnMuICBJbiB0aGlzIGRhdGFzZXQsICdaJyBpbmRpY2F0ZXMgJ2dvb2QnIGRhdGEuIFxuVGhlICcuJ3Mgc2F5IHRvIG1hdGNoIGFueSBjaGFyYWN0ZXIuICBcblRoZSAnKicgc2F5cyB0byBtYXRjaCB0aGUgcHJldmlvdXMgY2hhcmFjdGVyIDAgb3IgbW9yZSB0aW1lcy4gIFxuU2VlIHRoZSB0dXRvcmlhbCBmb3IgcmVndWxhciBleHByZXNzaW9ucyBhdFxuaHR0cDovL3d3dy52b2dlbGxhLmNvbS90dXRvcmlhbHMvSmF2YVJlZ3VsYXJFeHByZXNzaW9ucy9hcnRpY2xlLmh0bWxcblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2VfaWRcbmV4cG9jb2RlXG5mYWNpbGl0eVxuSURcbklNT1xucGxhdGZvcm1cbnBsYXRmb3JtX3ZlcnNpb25cbnNpdGVcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuYWlyUHJlc3N1cmUgKEF0bW9zcGhlcmljIFByZXNzdXJlLCBtaWxsaWJhcilcbi4uLiAoMTQgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZnN1Tm9hYVNoaXBXVEVSbnJ0X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9mc3VOb2FhU2hpcFdURVJucnRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZnN1Tm9hYVNoaXBXVEVSbnJ0L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9zYW1vcy5jb2Fwcy5mc3UuZWR1L2h0bWwvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2ZzdU5vYWFTaGlwV1RFUm5ydC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZnN1Tm9hYVNoaXBXVEVSbnJ0JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkZTVSIsICJmc3VOb2FhU2hpcFdURVJucnQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVEVSLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdURVIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVEVSLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5PQUEgU2hpcCBOYW5jeSBGb3N0ZXIgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSwgUXVhbGl0eSBDb250cm9sbGVkIiwgIk5PQUEgU2hpcCBOYW5jeSBGb3N0ZXIgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSAoZGVsYXllZCB+MTAgZGF5cyBmb3IgcXVhbGl0eSBjb250cm9sKSBhcmUgZnJvbSB0aGUgU2hpcGJvYXJkIEF1dG9tYXRlZCBNZXRlb3JvbG9naWNhbCBhbmQgT2NlYW5vZ3JhcGhpYyBTeXN0ZW0gKFNBTU9TKSBwcm9ncmFtLlxuXG5JTVBPUlRBTlQ6IEFMV0FZUyBVU0UgVEhFIFFVQUxJVFkgRkxBRyBEQVRBISBFYWNoIGRhdGEgdmFyaWFibGUncyBtZXRhZGF0YSBpbmNsdWRlcyBhIHFjaW5kZXggYXR0cmlidXRlIHdoaWNoIGluZGljYXRlcyBhIGNoYXJhY3RlciBudW1iZXIgaW4gdGhlIGZsYWcgZGF0YS4gIEFMV0FZUyBjaGVjayB0aGUgZmxhZyBkYXRhIGZvciBlYWNoIHJvdyBvZiBkYXRhIHRvIHNlZSB3aGljaCBkYXRhIGlzIGdvb2QgKGZsYWc9J1onKSBhbmQgd2hpY2ggZGF0YSBpc24ndC4gIEZvciBleGFtcGxlLCB0byBleHRyYWN0IGp1c3QgZGF0YSB3aGVyZSB0aW1lIChxY2luZGV4PTEpLCBsYXRpdHVkZSAocWNpbmRleD0yKSwgbG9uZ2l0dWRlIChxY2luZGV4PTMpLCBhbmQgYWlyVGVtcGVyYXR1cmUgKHFjaW5kZXg9MTIpIGFyZSAnZ29vZCcgZGF0YSwgaW5jbHVkZSB0aGlzIGNvbnN0cmFpbnQgaW4geW91ciBFUkREQVAgcXVlcnk6XG4gIGZsYWc9flwiWlpaLi4uLi4uLi5aLipcIlxuaW4geW91ciBxdWVyeS4gIFxuXCI9flwiIGluZGljYXRlcyB0aGlzIGlzIGEgcmVndWxhciBleHByZXNzaW9uIGNvbnN0cmFpbnQuXG5UaGUgJ1oncyBhcmUgbGl0ZXJhbCBjaGFyYWN0ZXJzLiAgSW4gdGhpcyBkYXRhc2V0LCAnWicgaW5kaWNhdGVzICdnb29kJyBkYXRhLiBcblRoZSAnLidzIHNheSB0byBtYXRjaCBhbnkgY2hhcmFjdGVyLiAgXG5UaGUgJyonIHNheXMgdG8gbWF0Y2ggdGhlIHByZXZpb3VzIGNoYXJhY3RlciAwIG9yIG1vcmUgdGltZXMuICBcblNlZSB0aGUgdHV0b3JpYWwgZm9yIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYXRcbmh0dHA6Ly93d3cudm9nZWxsYS5jb20vdHV0b3JpYWxzL0phdmFSZWd1bGFyRXhwcmVzc2lvbnMvYXJ0aWNsZS5odG1sXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlX2lkXG5leHBvY29kZVxuZmFjaWxpdHlcbklEXG5JTU9cbnBsYXRmb3JtXG5wbGF0Zm9ybV92ZXJzaW9uXG5zaXRlXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmFpclByZXNzdXJlIChBdG1vc3BoZXJpYyBQcmVzc3VyZSwgbWlsbGliYXIpXG4uLi4gKDE0IG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2ZzdU5vYWFTaGlwV1RFUl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZnN1Tm9hYVNoaXBXVEVSX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2ZzdU5vYWFTaGlwV1RFUi9pbmRleC5qc29uIiwgImh0dHBzOi8vc2Ftb3MuY29hcHMuZnN1LmVkdS9odG1sLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9mc3VOb2FhU2hpcFdURVIucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWZzdU5vYWFTaGlwV1RFUiZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJGU1UiLCAiZnN1Tm9hYVNoaXBXVEVSIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RESG5ydC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVERIbnJ0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RESG5ydC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOT0FBIFNoaXAgT2tlYW5vcyBFeHBsb3JlciBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhLCBOZWFyIFJlYWwgVGltZSIsICJOT0FBIFNoaXAgT2tlYW5vcyBFeHBsb3JlciBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhIChOZWFyIFJlYWwgVGltZSwgdXBkYXRlZCBkYWlseSkgYXJlIGZyb20gdGhlIFNoaXBib2FyZCBBdXRvbWF0ZWQgTWV0ZW9yb2xvZ2ljYWwgYW5kIE9jZWFub2dyYXBoaWMgU3lzdGVtIChTQU1PUykgcHJvZ3JhbS5cblxuSU1QT1JUQU5UOiBBTFdBWVMgVVNFIFRIRSBRVUFMSVRZIEZMQUcgREFUQSEgRWFjaCBkYXRhIHZhcmlhYmxlJ3MgbWV0YWRhdGEgaW5jbHVkZXMgYSBxY2luZGV4IGF0dHJpYnV0ZSB3aGljaCBpbmRpY2F0ZXMgYSBjaGFyYWN0ZXIgbnVtYmVyIGluIHRoZSBmbGFnIGRhdGEuICBBTFdBWVMgY2hlY2sgdGhlIGZsYWcgZGF0YSBmb3IgZWFjaCByb3cgb2YgZGF0YSB0byBzZWUgd2hpY2ggZGF0YSBpcyBnb29kIChmbGFnPSdaJykgYW5kIHdoaWNoIGRhdGEgaXNuJ3QuICBGb3IgZXhhbXBsZSwgdG8gZXh0cmFjdCBqdXN0IGRhdGEgd2hlcmUgdGltZSAocWNpbmRleD0xKSwgbGF0aXR1ZGUgKHFjaW5kZXg9MiksIGxvbmdpdHVkZSAocWNpbmRleD0zKSwgYW5kIGFpclRlbXBlcmF0dXJlIChxY2luZGV4PTEyKSBhcmUgJ2dvb2QnIGRhdGEsIGluY2x1ZGUgdGhpcyBjb25zdHJhaW50IGluIHlvdXIgRVJEREFQIHF1ZXJ5OlxuICBmbGFnPX5cIlpaWi4uLi4uLi4uWi4qXCJcbmluIHlvdXIgcXVlcnkuICBcblwiPX5cIiBpbmRpY2F0ZXMgdGhpcyBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBjb25zdHJhaW50LlxuVGhlICdaJ3MgYXJlIGxpdGVyYWwgY2hhcmFjdGVycy4gIEluIHRoaXMgZGF0YXNldCwgJ1onIGluZGljYXRlcyAnZ29vZCcgZGF0YS4gXG5UaGUgJy4ncyBzYXkgdG8gbWF0Y2ggYW55IGNoYXJhY3Rlci4gIFxuVGhlICcqJyBzYXlzIHRvIG1hdGNoIHRoZSBwcmV2aW91cyBjaGFyYWN0ZXIgMCBvciBtb3JlIHRpbWVzLiAgXG5TZWUgdGhlIHR1dG9yaWFsIGZvciByZWd1bGFyIGV4cHJlc3Npb25zIGF0XG5odHRwOi8vd3d3LnZvZ2VsbGEuY29tL3R1dG9yaWFscy9KYXZhUmVndWxhckV4cHJlc3Npb25zL2FydGljbGUuaHRtbFxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZV9pZFxuZXhwb2NvZGVcbmZhY2lsaXR5XG5JRFxuSU1PXG5wbGF0Zm9ybVxucGxhdGZvcm1fdmVyc2lvblxuc2l0ZVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5haXJQcmVzc3VyZSAoQXRtb3NwaGVyaWMgUHJlc3N1cmUsIG1pbGxpYmFyKVxuLi4uICgxMyBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9mc3VOb2FhU2hpcFdUREhucnRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2ZzdU5vYWFTaGlwV1RESG5ydF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9mc3VOb2FhU2hpcFdUREhucnQvaW5kZXguanNvbiIsICJodHRwczovL3NhbW9zLmNvYXBzLmZzdS5lZHUvaHRtbC8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZnN1Tm9hYVNoaXBXVERIbnJ0LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1mc3VOb2FhU2hpcFdUREhucnQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiRlNVIiwgImZzdU5vYWFTaGlwV1RESG5ydCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdUREguc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RESCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdUREguZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiTk9BQSBTaGlwIE9rZWFub3MgRXhwbG9yZXIgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSwgUXVhbGl0eSBDb250cm9sbGVkIiwgIk5PQUEgU2hpcCBPa2Vhbm9zIEV4cGxvcmVyIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEgKGRlbGF5ZWQgfjEwIGRheXMgZm9yIHF1YWxpdHkgY29udHJvbCkgYXJlIGZyb20gdGhlIFNoaXBib2FyZCBBdXRvbWF0ZWQgTWV0ZW9yb2xvZ2ljYWwgYW5kIE9jZWFub2dyYXBoaWMgU3lzdGVtIChTQU1PUykgcHJvZ3JhbS5cblxuSU1QT1JUQU5UOiBBTFdBWVMgVVNFIFRIRSBRVUFMSVRZIEZMQUcgREFUQSEgRWFjaCBkYXRhIHZhcmlhYmxlJ3MgbWV0YWRhdGEgaW5jbHVkZXMgYSBxY2luZGV4IGF0dHJpYnV0ZSB3aGljaCBpbmRpY2F0ZXMgYSBjaGFyYWN0ZXIgbnVtYmVyIGluIHRoZSBmbGFnIGRhdGEuICBBTFdBWVMgY2hlY2sgdGhlIGZsYWcgZGF0YSBmb3IgZWFjaCByb3cgb2YgZGF0YSB0byBzZWUgd2hpY2ggZGF0YSBpcyBnb29kIChmbGFnPSdaJykgYW5kIHdoaWNoIGRhdGEgaXNuJ3QuICBGb3IgZXhhbXBsZSwgdG8gZXh0cmFjdCBqdXN0IGRhdGEgd2hlcmUgdGltZSAocWNpbmRleD0xKSwgbGF0aXR1ZGUgKHFjaW5kZXg9MiksIGxvbmdpdHVkZSAocWNpbmRleD0zKSwgYW5kIGFpclRlbXBlcmF0dXJlIChxY2luZGV4PTEyKSBhcmUgJ2dvb2QnIGRhdGEsIGluY2x1ZGUgdGhpcyBjb25zdHJhaW50IGluIHlvdXIgRVJEREFQIHF1ZXJ5OlxuICBmbGFnPX5cIlpaWi4uLi4uLi4uWi4qXCJcbmluIHlvdXIgcXVlcnkuICBcblwiPX5cIiBpbmRpY2F0ZXMgdGhpcyBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBjb25zdHJhaW50LlxuVGhlICdaJ3MgYXJlIGxpdGVyYWwgY2hhcmFjdGVycy4gIEluIHRoaXMgZGF0YXNldCwgJ1onIGluZGljYXRlcyAnZ29vZCcgZGF0YS4gXG5UaGUgJy4ncyBzYXkgdG8gbWF0Y2ggYW55IGNoYXJhY3Rlci4gIFxuVGhlICcqJyBzYXlzIHRvIG1hdGNoIHRoZSBwcmV2aW91cyBjaGFyYWN0ZXIgMCBvciBtb3JlIHRpbWVzLiAgXG5TZWUgdGhlIHR1dG9yaWFsIGZvciByZWd1bGFyIGV4cHJlc3Npb25zIGF0XG5odHRwOi8vd3d3LnZvZ2VsbGEuY29tL3R1dG9yaWFscy9KYXZhUmVndWxhckV4cHJlc3Npb25zL2FydGljbGUuaHRtbFxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZV9pZFxuZXhwb2NvZGVcbmZhY2lsaXR5XG5JRFxuSU1PXG5wbGF0Zm9ybVxucGxhdGZvcm1fdmVyc2lvblxuc2l0ZVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5haXJQcmVzc3VyZSAoQXRtb3NwaGVyaWMgUHJlc3N1cmUsIG1pbGxpYmFyKVxuLi4uICgxMyBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9mc3VOb2FhU2hpcFdUREhfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2ZzdU5vYWFTaGlwV1RESF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9mc3VOb2FhU2hpcFdUREgvaW5kZXguanNvbiIsICJodHRwczovL3NhbW9zLmNvYXBzLmZzdS5lZHUvaHRtbC8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZnN1Tm9hYVNoaXBXVERILnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1mc3VOb2FhU2hpcFdUREgmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiRlNVIiwgImZzdU5vYWFTaGlwV1RESCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdURE9ucnQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RET25ydCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdURE9ucnQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiTk9BQSBTaGlwIE9yZWdvbiBJSSBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhLCBOZWFyIFJlYWwgVGltZSIsICJOT0FBIFNoaXAgT3JlZ29uIElJIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEgKE5lYXIgUmVhbCBUaW1lLCB1cGRhdGVkIGRhaWx5KSBhcmUgZnJvbSB0aGUgU2hpcGJvYXJkIEF1dG9tYXRlZCBNZXRlb3JvbG9naWNhbCBhbmQgT2NlYW5vZ3JhcGhpYyBTeXN0ZW0gKFNBTU9TKSBwcm9ncmFtLlxuXG5JTVBPUlRBTlQ6IEFMV0FZUyBVU0UgVEhFIFFVQUxJVFkgRkxBRyBEQVRBISBFYWNoIGRhdGEgdmFyaWFibGUncyBtZXRhZGF0YSBpbmNsdWRlcyBhIHFjaW5kZXggYXR0cmlidXRlIHdoaWNoIGluZGljYXRlcyBhIGNoYXJhY3RlciBudW1iZXIgaW4gdGhlIGZsYWcgZGF0YS4gIEFMV0FZUyBjaGVjayB0aGUgZmxhZyBkYXRhIGZvciBlYWNoIHJvdyBvZiBkYXRhIHRvIHNlZSB3aGljaCBkYXRhIGlzIGdvb2QgKGZsYWc9J1onKSBhbmQgd2hpY2ggZGF0YSBpc24ndC4gIEZvciBleGFtcGxlLCB0byBleHRyYWN0IGp1c3QgZGF0YSB3aGVyZSB0aW1lIChxY2luZGV4PTEpLCBsYXRpdHVkZSAocWNpbmRleD0yKSwgbG9uZ2l0dWRlIChxY2luZGV4PTMpLCBhbmQgYWlyVGVtcGVyYXR1cmUgKHFjaW5kZXg9MTIpIGFyZSAnZ29vZCcgZGF0YSwgaW5jbHVkZSB0aGlzIGNvbnN0cmFpbnQgaW4geW91ciBFUkREQVAgcXVlcnk6XG4gIGZsYWc9flwiWlpaLi4uLi4uLi5aLipcIlxuaW4geW91ciBxdWVyeS4gIFxuXCI9flwiIGluZGljYXRlcyB0aGlzIGlzIGEgcmVndWxhciBleHByZXNzaW9uIGNvbnN0cmFpbnQuXG5UaGUgJ1oncyBhcmUgbGl0ZXJhbCBjaGFyYWN0ZXJzLiAgSW4gdGhpcyBkYXRhc2V0LCAnWicgaW5kaWNhdGVzICdnb29kJyBkYXRhLiBcblRoZSAnLidzIHNheSB0byBtYXRjaCBhbnkgY2hhcmFjdGVyLiAgXG5UaGUgJyonIHNheXMgdG8gbWF0Y2ggdGhlIHByZXZpb3VzIGNoYXJhY3RlciAwIG9yIG1vcmUgdGltZXMuICBcblNlZSB0aGUgdHV0b3JpYWwgZm9yIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYXRcbmh0dHA6Ly93d3cudm9nZWxsYS5jb20vdHV0b3JpYWxzL0phdmFSZWd1bGFyRXhwcmVzc2lvbnMvYXJ0aWNsZS5odG1sXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlX2lkXG5leHBvY29kZVxuZmFjaWxpdHlcbklEXG5JTU9cbnBsYXRmb3JtXG5wbGF0Zm9ybV92ZXJzaW9uXG5zaXRlXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmFpclByZXNzdXJlIChBdG1vc3BoZXJpYyBQcmVzc3VyZSwgbWlsbGliYXIpXG4uLi4gKDEzIG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2ZzdU5vYWFTaGlwV1RET25ydF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZnN1Tm9hYVNoaXBXVERPbnJ0X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2ZzdU5vYWFTaGlwV1RET25ydC9pbmRleC5qc29uIiwgImh0dHBzOi8vc2Ftb3MuY29hcHMuZnN1LmVkdS9odG1sLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9mc3VOb2FhU2hpcFdURE9ucnQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWZzdU5vYWFTaGlwV1RET25ydCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJGU1UiLCAiZnN1Tm9hYVNoaXBXVERPbnJ0Il0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RETy5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVERPIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RETy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOT0FBIFNoaXAgT3JlZ29uIElJIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEsIFF1YWxpdHkgQ29udHJvbGxlZCIsICJOT0FBIFNoaXAgT3JlZ29uIElJIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEgKGRlbGF5ZWQgfjEwIGRheXMgZm9yIHF1YWxpdHkgY29udHJvbCkgYXJlIGZyb20gdGhlIFNoaXBib2FyZCBBdXRvbWF0ZWQgTWV0ZW9yb2xvZ2ljYWwgYW5kIE9jZWFub2dyYXBoaWMgU3lzdGVtIChTQU1PUykgcHJvZ3JhbS5cblxuSU1QT1JUQU5UOiBBTFdBWVMgVVNFIFRIRSBRVUFMSVRZIEZMQUcgREFUQSEgRWFjaCBkYXRhIHZhcmlhYmxlJ3MgbWV0YWRhdGEgaW5jbHVkZXMgYSBxY2luZGV4IGF0dHJpYnV0ZSB3aGljaCBpbmRpY2F0ZXMgYSBjaGFyYWN0ZXIgbnVtYmVyIGluIHRoZSBmbGFnIGRhdGEuICBBTFdBWVMgY2hlY2sgdGhlIGZsYWcgZGF0YSBmb3IgZWFjaCByb3cgb2YgZGF0YSB0byBzZWUgd2hpY2ggZGF0YSBpcyBnb29kIChmbGFnPSdaJykgYW5kIHdoaWNoIGRhdGEgaXNuJ3QuICBGb3IgZXhhbXBsZSwgdG8gZXh0cmFjdCBqdXN0IGRhdGEgd2hlcmUgdGltZSAocWNpbmRleD0xKSwgbGF0aXR1ZGUgKHFjaW5kZXg9MiksIGxvbmdpdHVkZSAocWNpbmRleD0zKSwgYW5kIGFpclRlbXBlcmF0dXJlIChxY2luZGV4PTEyKSBhcmUgJ2dvb2QnIGRhdGEsIGluY2x1ZGUgdGhpcyBjb25zdHJhaW50IGluIHlvdXIgRVJEREFQIHF1ZXJ5OlxuICBmbGFnPX5cIlpaWi4uLi4uLi4uWi4qXCJcbmluIHlvdXIgcXVlcnkuICBcblwiPX5cIiBpbmRpY2F0ZXMgdGhpcyBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBjb25zdHJhaW50LlxuVGhlICdaJ3MgYXJlIGxpdGVyYWwgY2hhcmFjdGVycy4gIEluIHRoaXMgZGF0YXNldCwgJ1onIGluZGljYXRlcyAnZ29vZCcgZGF0YS4gXG5UaGUgJy4ncyBzYXkgdG8gbWF0Y2ggYW55IGNoYXJhY3Rlci4gIFxuVGhlICcqJyBzYXlzIHRvIG1hdGNoIHRoZSBwcmV2aW91cyBjaGFyYWN0ZXIgMCBvciBtb3JlIHRpbWVzLiAgXG5TZWUgdGhlIHR1dG9yaWFsIGZvciByZWd1bGFyIGV4cHJlc3Npb25zIGF0XG5odHRwOi8vd3d3LnZvZ2VsbGEuY29tL3R1dG9yaWFscy9KYXZhUmVndWxhckV4cHJlc3Npb25zL2FydGljbGUuaHRtbFxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZV9pZFxuZXhwb2NvZGVcbmZhY2lsaXR5XG5JRFxuSU1PXG5wbGF0Zm9ybVxucGxhdGZvcm1fdmVyc2lvblxuc2l0ZVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5haXJQcmVzc3VyZSAoQXRtb3NwaGVyaWMgUHJlc3N1cmUsIG1pbGxpYmFyKVxuLi4uICgxMyBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9mc3VOb2FhU2hpcFdURE9fZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2ZzdU5vYWFTaGlwV1RET19pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9mc3VOb2FhU2hpcFdURE8vaW5kZXguanNvbiIsICJodHRwczovL3NhbW9zLmNvYXBzLmZzdS5lZHUvaHRtbC8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZnN1Tm9hYVNoaXBXVERPLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1mc3VOb2FhU2hpcFdURE8mc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiRlNVIiwgImZzdU5vYWFTaGlwV1RETyJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdURVBucnQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RFUG5ydCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdURVBucnQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiTk9BQSBTaGlwIE9zY2FyIER5c29uIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEsIE5lYXIgUmVhbCBUaW1lIiwgIk5PQUEgU2hpcCBPc2NhciBEeXNvbiBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhIChOZWFyIFJlYWwgVGltZSwgdXBkYXRlZCBkYWlseSkgYXJlIGZyb20gdGhlIFNoaXBib2FyZCBBdXRvbWF0ZWQgTWV0ZW9yb2xvZ2ljYWwgYW5kIE9jZWFub2dyYXBoaWMgU3lzdGVtIChTQU1PUykgcHJvZ3JhbS5cblxuSU1QT1JUQU5UOiBBTFdBWVMgVVNFIFRIRSBRVUFMSVRZIEZMQUcgREFUQSEgRWFjaCBkYXRhIHZhcmlhYmxlJ3MgbWV0YWRhdGEgaW5jbHVkZXMgYSBxY2luZGV4IGF0dHJpYnV0ZSB3aGljaCBpbmRpY2F0ZXMgYSBjaGFyYWN0ZXIgbnVtYmVyIGluIHRoZSBmbGFnIGRhdGEuICBBTFdBWVMgY2hlY2sgdGhlIGZsYWcgZGF0YSBmb3IgZWFjaCByb3cgb2YgZGF0YSB0byBzZWUgd2hpY2ggZGF0YSBpcyBnb29kIChmbGFnPSdaJykgYW5kIHdoaWNoIGRhdGEgaXNuJ3QuICBGb3IgZXhhbXBsZSwgdG8gZXh0cmFjdCBqdXN0IGRhdGEgd2hlcmUgdGltZSAocWNpbmRleD0xKSwgbGF0aXR1ZGUgKHFjaW5kZXg9MiksIGxvbmdpdHVkZSAocWNpbmRleD0zKSwgYW5kIGFpclRlbXBlcmF0dXJlIChxY2luZGV4PTEyKSBhcmUgJ2dvb2QnIGRhdGEsIGluY2x1ZGUgdGhpcyBjb25zdHJhaW50IGluIHlvdXIgRVJEREFQIHF1ZXJ5OlxuICBmbGFnPX5cIlpaWi4uLi4uLi4uWi4qXCJcbmluIHlvdXIgcXVlcnkuXG4nPX4nIGluZGljYXRlcyB0aGlzIGlzIGEgcmVndWxhciBleHByZXNzaW9uIGNvbnN0cmFpbnQuXG5UaGUgJ1oncyBhcmUgbGl0ZXJhbCBjaGFyYWN0ZXJzLiAgSW4gdGhpcyBkYXRhc2V0LCAnWicgaW5kaWNhdGVzICdnb29kJyBkYXRhLlxuVGhlICcuJ3Mgc2F5IHRvIG1hdGNoIGFueSBjaGFyYWN0ZXIuXG5UaGUgJyonIHNheXMgdG8gbWF0Y2ggdGhlIHByZXZpb3VzIGNoYXJhY3RlciAwIG9yIG1vcmUgdGltZXMuXG4oRG9uJ3QgaW5jbHVkZSBiYWNrc2xhc2hlcyBpbiB5b3VyIHF1ZXJ5LilcblNlZSB0aGUgdHV0b3JpYWwgZm9yIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYXRcbmh0dHA6Ly93d3cudm9nZWxsYS5jb20vdHV0b3JpYWxzL0phdmFSZWd1bGFyRXhwcmVzc2lvbnMvYXJ0aWNsZS5odG1sXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlX2lkXG5leHBvY29kZVxuZmFjaWxpdHlcbklEXG5JTU9cbnBsYXRmb3JtXG5wbGF0Zm9ybV92ZXJzaW9uXG5zaXRlXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbi4uLiAoMTQgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZnN1Tm9hYVNoaXBXVEVQbnJ0X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9mc3VOb2FhU2hpcFdURVBucnRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZnN1Tm9hYVNoaXBXVEVQbnJ0L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9zYW1vcy5jb2Fwcy5mc3UuZWR1L2h0bWwvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2ZzdU5vYWFTaGlwV1RFUG5ydC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZnN1Tm9hYVNoaXBXVEVQbnJ0JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkZTVSIsICJmc3VOb2FhU2hpcFdURVBucnQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVEVQLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdURVAiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVEVQLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5PQUEgU2hpcCBPc2NhciBEeXNvbiBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhLCBRdWFsaXR5IENvbnRyb2xsZWQiLCAiTk9BQSBTaGlwIE9zY2FyIER5c29uIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEgKGRlbGF5ZWQgfjEwIGRheXMgZm9yIHF1YWxpdHkgY29udHJvbCkgYXJlIGZyb20gdGhlIFNoaXBib2FyZCBBdXRvbWF0ZWQgTWV0ZW9yb2xvZ2ljYWwgYW5kIE9jZWFub2dyYXBoaWMgU3lzdGVtIChTQU1PUykgcHJvZ3JhbS5cblxuSU1QT1JUQU5UOiBBTFdBWVMgVVNFIFRIRSBRVUFMSVRZIEZMQUcgREFUQSEgRWFjaCBkYXRhIHZhcmlhYmxlJ3MgbWV0YWRhdGEgaW5jbHVkZXMgYSBxY2luZGV4IGF0dHJpYnV0ZSB3aGljaCBpbmRpY2F0ZXMgYSBjaGFyYWN0ZXIgbnVtYmVyIGluIHRoZSBmbGFnIGRhdGEuICBBTFdBWVMgY2hlY2sgdGhlIGZsYWcgZGF0YSBmb3IgZWFjaCByb3cgb2YgZGF0YSB0byBzZWUgd2hpY2ggZGF0YSBpcyBnb29kIChmbGFnPSdaJykgYW5kIHdoaWNoIGRhdGEgaXNuJ3QuICBGb3IgZXhhbXBsZSwgdG8gZXh0cmFjdCBqdXN0IGRhdGEgd2hlcmUgdGltZSAocWNpbmRleD0xKSwgbGF0aXR1ZGUgKHFjaW5kZXg9MiksIGxvbmdpdHVkZSAocWNpbmRleD0zKSwgYW5kIGFpclRlbXBlcmF0dXJlIChxY2luZGV4PTEyKSBhcmUgJ2dvb2QnIGRhdGEsIGluY2x1ZGUgdGhpcyBjb25zdHJhaW50IGluIHlvdXIgRVJEREFQIHF1ZXJ5OlxuICBmbGFnPX5cIlpaWi4uLi4uLi4uWi4qXCJcbmluIHlvdXIgcXVlcnkuXG4nPX4nIGluZGljYXRlcyB0aGlzIGlzIGEgcmVndWxhciBleHByZXNzaW9uIGNvbnN0cmFpbnQuXG5UaGUgJ1oncyBhcmUgbGl0ZXJhbCBjaGFyYWN0ZXJzLiAgSW4gdGhpcyBkYXRhc2V0LCAnWicgaW5kaWNhdGVzICdnb29kJyBkYXRhLlxuVGhlICcuJ3Mgc2F5IHRvIG1hdGNoIGFueSBjaGFyYWN0ZXIuXG5UaGUgJyonIHNheXMgdG8gbWF0Y2ggdGhlIHByZXZpb3VzIGNoYXJhY3RlciAwIG9yIG1vcmUgdGltZXMuXG4oRG9uJ3QgaW5jbHVkZSBiYWNrc2xhc2hlcyBpbiB5b3VyIHF1ZXJ5LilcblNlZSB0aGUgdHV0b3JpYWwgZm9yIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYXRcbmh0dHA6Ly93d3cudm9nZWxsYS5jb20vdHV0b3JpYWxzL0phdmFSZWd1bGFyRXhwcmVzc2lvbnMvYXJ0aWNsZS5odG1sXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlX2lkXG5leHBvY29kZVxuZmFjaWxpdHlcbklEXG5JTU9cbnBsYXRmb3JtXG5wbGF0Zm9ybV92ZXJzaW9uXG5zaXRlXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbi4uLiAoMTQgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZnN1Tm9hYVNoaXBXVEVQX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9mc3VOb2FhU2hpcFdURVBfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZnN1Tm9hYVNoaXBXVEVQL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9zYW1vcy5jb2Fwcy5mc3UuZWR1L2h0bWwvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2ZzdU5vYWFTaGlwV1RFUC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZnN1Tm9hYVNoaXBXVEVQJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkZTVSIsICJmc3VOb2FhU2hpcFdURVAiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVEVFbnJ0LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdURUVucnQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVEVFbnJ0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5PQUEgU2hpcCBPc2NhciBFbHRvbiBTZXR0ZSBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhLCBOZWFyIFJlYWwgVGltZSIsICJOT0FBIFNoaXAgT3NjYXIgRWx0b24gU2V0dGUgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSAoTmVhciBSZWFsIFRpbWUsIHVwZGF0ZWQgZGFpbHkpIGFyZSBmcm9tIHRoZSBTaGlwYm9hcmQgQXV0b21hdGVkIE1ldGVvcm9sb2dpY2FsIGFuZCBPY2Vhbm9ncmFwaGljIFN5c3RlbSAoU0FNT1MpIHByb2dyYW0uXG5cbklNUE9SVEFOVDogQUxXQVlTIFVTRSBUSEUgUVVBTElUWSBGTEFHIERBVEEhIEVhY2ggZGF0YSB2YXJpYWJsZSdzIG1ldGFkYXRhIGluY2x1ZGVzIGEgcWNpbmRleCBhdHRyaWJ1dGUgd2hpY2ggaW5kaWNhdGVzIGEgY2hhcmFjdGVyIG51bWJlciBpbiB0aGUgZmxhZyBkYXRhLiAgQUxXQVlTIGNoZWNrIHRoZSBmbGFnIGRhdGEgZm9yIGVhY2ggcm93IG9mIGRhdGEgdG8gc2VlIHdoaWNoIGRhdGEgaXMgZ29vZCAoZmxhZz0nWicpIGFuZCB3aGljaCBkYXRhIGlzbid0LiAgRm9yIGV4YW1wbGUsIHRvIGV4dHJhY3QganVzdCBkYXRhIHdoZXJlIHRpbWUgKHFjaW5kZXg9MSksIGxhdGl0dWRlIChxY2luZGV4PTIpLCBsb25naXR1ZGUgKHFjaW5kZXg9MyksIGFuZCBhaXJUZW1wZXJhdHVyZSAocWNpbmRleD0xMikgYXJlICdnb29kJyBkYXRhLCBpbmNsdWRlIHRoaXMgY29uc3RyYWludCBpbiB5b3VyIEVSRERBUCBxdWVyeTpcbiAgZmxhZz1+XCJaWlouLi4uLi4uLlouKlwiXG5pbiB5b3VyIHF1ZXJ5LiAgXG5cIj1+XCIgaW5kaWNhdGVzIHRoaXMgaXMgYSByZWd1bGFyIGV4cHJlc3Npb24gY29uc3RyYWludC5cblRoZSAnWidzIGFyZSBsaXRlcmFsIGNoYXJhY3RlcnMuICBJbiB0aGlzIGRhdGFzZXQsICdaJyBpbmRpY2F0ZXMgJ2dvb2QnIGRhdGEuIFxuVGhlICcuJ3Mgc2F5IHRvIG1hdGNoIGFueSBjaGFyYWN0ZXIuICBcblRoZSAnKicgc2F5cyB0byBtYXRjaCB0aGUgcHJldmlvdXMgY2hhcmFjdGVyIDAgb3IgbW9yZSB0aW1lcy4gIFxuU2VlIHRoZSB0dXRvcmlhbCBmb3IgcmVndWxhciBleHByZXNzaW9ucyBhdFxuaHR0cDovL3d3dy52b2dlbGxhLmNvbS90dXRvcmlhbHMvSmF2YVJlZ3VsYXJFeHByZXNzaW9ucy9hcnRpY2xlLmh0bWxcblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2VfaWRcbmV4cG9jb2RlXG5mYWNpbGl0eVxuSURcbklNT1xucGxhdGZvcm1cbnBsYXRmb3JtX3ZlcnNpb25cbnNpdGVcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuYWlyUHJlc3N1cmUgKEF0bW9zcGhlcmljIFByZXNzdXJlLCBtaWxsaWJhcilcbi4uLiAoMTMgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZnN1Tm9hYVNoaXBXVEVFbnJ0X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9mc3VOb2FhU2hpcFdURUVucnRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZnN1Tm9hYVNoaXBXVEVFbnJ0L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9zYW1vcy5jb2Fwcy5mc3UuZWR1L2h0bWwvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2ZzdU5vYWFTaGlwV1RFRW5ydC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZnN1Tm9hYVNoaXBXVEVFbnJ0JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkZTVSIsICJmc3VOb2FhU2hpcFdURUVucnQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVEVFLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdURUUiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVEVFLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5PQUEgU2hpcCBPc2NhciBFbHRvbiBTZXR0ZSBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhLCBRdWFsaXR5IENvbnRyb2xsZWQiLCAiTk9BQSBTaGlwIE9zY2FyIEVsdG9uIFNldHRlIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEgKGRlbGF5ZWQgfjEwIGRheXMgZm9yIHF1YWxpdHkgY29udHJvbCkgYXJlIGZyb20gdGhlIFNoaXBib2FyZCBBdXRvbWF0ZWQgTWV0ZW9yb2xvZ2ljYWwgYW5kIE9jZWFub2dyYXBoaWMgU3lzdGVtIChTQU1PUykgcHJvZ3JhbS5cblxuSU1QT1JUQU5UOiBBTFdBWVMgVVNFIFRIRSBRVUFMSVRZIEZMQUcgREFUQSEgRWFjaCBkYXRhIHZhcmlhYmxlJ3MgbWV0YWRhdGEgaW5jbHVkZXMgYSBxY2luZGV4IGF0dHJpYnV0ZSB3aGljaCBpbmRpY2F0ZXMgYSBjaGFyYWN0ZXIgbnVtYmVyIGluIHRoZSBmbGFnIGRhdGEuICBBTFdBWVMgY2hlY2sgdGhlIGZsYWcgZGF0YSBmb3IgZWFjaCByb3cgb2YgZGF0YSB0byBzZWUgd2hpY2ggZGF0YSBpcyBnb29kIChmbGFnPSdaJykgYW5kIHdoaWNoIGRhdGEgaXNuJ3QuICBGb3IgZXhhbXBsZSwgdG8gZXh0cmFjdCBqdXN0IGRhdGEgd2hlcmUgdGltZSAocWNpbmRleD0xKSwgbGF0aXR1ZGUgKHFjaW5kZXg9MiksIGxvbmdpdHVkZSAocWNpbmRleD0zKSwgYW5kIGFpclRlbXBlcmF0dXJlIChxY2luZGV4PTEyKSBhcmUgJ2dvb2QnIGRhdGEsIGluY2x1ZGUgdGhpcyBjb25zdHJhaW50IGluIHlvdXIgRVJEREFQIHF1ZXJ5OlxuICBmbGFnPX5cIlpaWi4uLi4uLi4uWi4qXCJcbmluIHlvdXIgcXVlcnkuICBcblwiPX5cIiBpbmRpY2F0ZXMgdGhpcyBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBjb25zdHJhaW50LlxuVGhlICdaJ3MgYXJlIGxpdGVyYWwgY2hhcmFjdGVycy4gIEluIHRoaXMgZGF0YXNldCwgJ1onIGluZGljYXRlcyAnZ29vZCcgZGF0YS4gXG5UaGUgJy4ncyBzYXkgdG8gbWF0Y2ggYW55IGNoYXJhY3Rlci4gIFxuVGhlICcqJyBzYXlzIHRvIG1hdGNoIHRoZSBwcmV2aW91cyBjaGFyYWN0ZXIgMCBvciBtb3JlIHRpbWVzLiAgXG5TZWUgdGhlIHR1dG9yaWFsIGZvciByZWd1bGFyIGV4cHJlc3Npb25zIGF0XG5odHRwOi8vd3d3LnZvZ2VsbGEuY29tL3R1dG9yaWFscy9KYXZhUmVndWxhckV4cHJlc3Npb25zL2FydGljbGUuaHRtbFxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZV9pZFxuZXhwb2NvZGVcbmZhY2lsaXR5XG5JRFxuSU1PXG5wbGF0Zm9ybVxucGxhdGZvcm1fdmVyc2lvblxuc2l0ZVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5haXJQcmVzc3VyZSAoQXRtb3NwaGVyaWMgUHJlc3N1cmUsIG1pbGxpYmFyKVxuLi4uICgxMyBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9mc3VOb2FhU2hpcFdURUVfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2ZzdU5vYWFTaGlwV1RFRV9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9mc3VOb2FhU2hpcFdURUUvaW5kZXguanNvbiIsICJodHRwczovL3NhbW9zLmNvYXBzLmZzdS5lZHUvaHRtbC8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZnN1Tm9hYVNoaXBXVEVFLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1mc3VOb2FhU2hpcFdURUUmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiRlNVIiwgImZzdU5vYWFTaGlwV1RFRSJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdURExucnQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RETG5ydCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdURExucnQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiTk9BQSBTaGlwIFBpc2NlcyBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhLCBOZWFyIFJlYWwgVGltZSIsICJOT0FBIFNoaXAgUGlzY2VzIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEgKE5lYXIgUmVhbCBUaW1lLCB1cGRhdGVkIGRhaWx5KSBhcmUgZnJvbSB0aGUgU2hpcGJvYXJkIEF1dG9tYXRlZCBNZXRlb3JvbG9naWNhbCBhbmQgT2NlYW5vZ3JhcGhpYyBTeXN0ZW0gKFNBTU9TKSBwcm9ncmFtLlxuXG5JTVBPUlRBTlQ6IEFMV0FZUyBVU0UgVEhFIFFVQUxJVFkgRkxBRyBEQVRBISBFYWNoIGRhdGEgdmFyaWFibGUncyBtZXRhZGF0YSBpbmNsdWRlcyBhIHFjaW5kZXggYXR0cmlidXRlIHdoaWNoIGluZGljYXRlcyBhIGNoYXJhY3RlciBudW1iZXIgaW4gdGhlIGZsYWcgZGF0YS4gIEFMV0FZUyBjaGVjayB0aGUgZmxhZyBkYXRhIGZvciBlYWNoIHJvdyBvZiBkYXRhIHRvIHNlZSB3aGljaCBkYXRhIGlzIGdvb2QgKGZsYWc9J1onKSBhbmQgd2hpY2ggZGF0YSBpc24ndC4gIEZvciBleGFtcGxlLCB0byBleHRyYWN0IGp1c3QgZGF0YSB3aGVyZSB0aW1lIChxY2luZGV4PTEpLCBsYXRpdHVkZSAocWNpbmRleD0yKSwgbG9uZ2l0dWRlIChxY2luZGV4PTMpLCBhbmQgYWlyVGVtcGVyYXR1cmUgKHFjaW5kZXg9MTIpIGFyZSAnZ29vZCcgZGF0YSwgaW5jbHVkZSB0aGlzIGNvbnN0cmFpbnQgaW4geW91ciBFUkREQVAgcXVlcnk6XG4gIGZsYWc9flwiWlpaLi4uLi4uLi5aLipcIlxuaW4geW91ciBxdWVyeS4gIFxuXCI9flwiIGluZGljYXRlcyB0aGlzIGlzIGEgcmVndWxhciBleHByZXNzaW9uIGNvbnN0cmFpbnQuXG5UaGUgJ1oncyBhcmUgbGl0ZXJhbCBjaGFyYWN0ZXJzLiAgSW4gdGhpcyBkYXRhc2V0LCAnWicgaW5kaWNhdGVzICdnb29kJyBkYXRhLiBcblRoZSAnLidzIHNheSB0byBtYXRjaCBhbnkgY2hhcmFjdGVyLiAgXG5UaGUgJyonIHNheXMgdG8gbWF0Y2ggdGhlIHByZXZpb3VzIGNoYXJhY3RlciAwIG9yIG1vcmUgdGltZXMuICBcblNlZSB0aGUgdHV0b3JpYWwgZm9yIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYXRcbmh0dHA6Ly93d3cudm9nZWxsYS5jb20vdHV0b3JpYWxzL0phdmFSZWd1bGFyRXhwcmVzc2lvbnMvYXJ0aWNsZS5odG1sXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlX2lkXG5leHBvY29kZVxuZmFjaWxpdHlcbklEXG5JTU9cbnBsYXRmb3JtXG5wbGF0Zm9ybV92ZXJzaW9uXG5zaXRlXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmFpclByZXNzdXJlIChBdG1vc3BoZXJpYyBQcmVzc3VyZSwgbWlsbGliYXIpXG4uLi4gKDEzIG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2ZzdU5vYWFTaGlwV1RETG5ydF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZnN1Tm9hYVNoaXBXVERMbnJ0X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2ZzdU5vYWFTaGlwV1RETG5ydC9pbmRleC5qc29uIiwgImh0dHBzOi8vc2Ftb3MuY29hcHMuZnN1LmVkdS9odG1sLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9mc3VOb2FhU2hpcFdURExucnQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWZzdU5vYWFTaGlwV1RETG5ydCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJGU1UiLCAiZnN1Tm9hYVNoaXBXVERMbnJ0Il0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RETC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVERMIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RETC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOT0FBIFNoaXAgUGlzY2VzIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEsIFF1YWxpdHkgQ29udHJvbGxlZCIsICJOT0FBIFNoaXAgUGlzY2VzIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEgKGRlbGF5ZWQgfjEwIGRheXMgZm9yIHF1YWxpdHkgY29udHJvbCkgYXJlIGZyb20gdGhlIFNoaXBib2FyZCBBdXRvbWF0ZWQgTWV0ZW9yb2xvZ2ljYWwgYW5kIE9jZWFub2dyYXBoaWMgU3lzdGVtIChTQU1PUykgcHJvZ3JhbS5cblxuSU1QT1JUQU5UOiBBTFdBWVMgVVNFIFRIRSBRVUFMSVRZIEZMQUcgREFUQSEgRWFjaCBkYXRhIHZhcmlhYmxlJ3MgbWV0YWRhdGEgaW5jbHVkZXMgYSBxY2luZGV4IGF0dHJpYnV0ZSB3aGljaCBpbmRpY2F0ZXMgYSBjaGFyYWN0ZXIgbnVtYmVyIGluIHRoZSBmbGFnIGRhdGEuICBBTFdBWVMgY2hlY2sgdGhlIGZsYWcgZGF0YSBmb3IgZWFjaCByb3cgb2YgZGF0YSB0byBzZWUgd2hpY2ggZGF0YSBpcyBnb29kIChmbGFnPSdaJykgYW5kIHdoaWNoIGRhdGEgaXNuJ3QuICBGb3IgZXhhbXBsZSwgdG8gZXh0cmFjdCBqdXN0IGRhdGEgd2hlcmUgdGltZSAocWNpbmRleD0xKSwgbGF0aXR1ZGUgKHFjaW5kZXg9MiksIGxvbmdpdHVkZSAocWNpbmRleD0zKSwgYW5kIGFpclRlbXBlcmF0dXJlIChxY2luZGV4PTEyKSBhcmUgJ2dvb2QnIGRhdGEsIGluY2x1ZGUgdGhpcyBjb25zdHJhaW50IGluIHlvdXIgRVJEREFQIHF1ZXJ5OlxuICBmbGFnPX5cIlpaWi4uLi4uLi4uWi4qXCJcbmluIHlvdXIgcXVlcnkuICBcblwiPX5cIiBpbmRpY2F0ZXMgdGhpcyBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBjb25zdHJhaW50LlxuVGhlICdaJ3MgYXJlIGxpdGVyYWwgY2hhcmFjdGVycy4gIEluIHRoaXMgZGF0YXNldCwgJ1onIGluZGljYXRlcyAnZ29vZCcgZGF0YS4gXG5UaGUgJy4ncyBzYXkgdG8gbWF0Y2ggYW55IGNoYXJhY3Rlci4gIFxuVGhlICcqJyBzYXlzIHRvIG1hdGNoIHRoZSBwcmV2aW91cyBjaGFyYWN0ZXIgMCBvciBtb3JlIHRpbWVzLiAgXG5TZWUgdGhlIHR1dG9yaWFsIGZvciByZWd1bGFyIGV4cHJlc3Npb25zIGF0XG5odHRwOi8vd3d3LnZvZ2VsbGEuY29tL3R1dG9yaWFscy9KYXZhUmVndWxhckV4cHJlc3Npb25zL2FydGljbGUuaHRtbFxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZV9pZFxuZXhwb2NvZGVcbmZhY2lsaXR5XG5JRFxuSU1PXG5wbGF0Zm9ybVxucGxhdGZvcm1fdmVyc2lvblxuc2l0ZVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5haXJQcmVzc3VyZSAoQXRtb3NwaGVyaWMgUHJlc3N1cmUsIG1pbGxpYmFyKVxuLi4uICgxMyBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9mc3VOb2FhU2hpcFdURExfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2ZzdU5vYWFTaGlwV1RETF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9mc3VOb2FhU2hpcFdUREwvaW5kZXguanNvbiIsICJodHRwczovL3NhbW9zLmNvYXBzLmZzdS5lZHUvaHRtbC8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZnN1Tm9hYVNoaXBXVERMLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1mc3VOb2FhU2hpcFdUREwmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiRlNVIiwgImZzdU5vYWFTaGlwV1RETCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdURUZucnQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RFRm5ydCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdURUZucnQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiTk9BQSBTaGlwIFJhaW5pZXIgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSwgTmVhciBSZWFsIFRpbWUiLCAiTk9BQSBTaGlwIFJhaW5pZXIgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSAoTmVhciBSZWFsIFRpbWUsIHVwZGF0ZWQgZGFpbHkpIGFyZSBmcm9tIHRoZSBTaGlwYm9hcmQgQXV0b21hdGVkIE1ldGVvcm9sb2dpY2FsIGFuZCBPY2Vhbm9ncmFwaGljIFN5c3RlbSAoU0FNT1MpIHByb2dyYW0uXG5cbklNUE9SVEFOVDogQUxXQVlTIFVTRSBUSEUgUVVBTElUWSBGTEFHIERBVEEhIEVhY2ggZGF0YSB2YXJpYWJsZSdzIG1ldGFkYXRhIGluY2x1ZGVzIGEgcWNpbmRleCBhdHRyaWJ1dGUgd2hpY2ggaW5kaWNhdGVzIGEgY2hhcmFjdGVyIG51bWJlciBpbiB0aGUgZmxhZyBkYXRhLiAgQUxXQVlTIGNoZWNrIHRoZSBmbGFnIGRhdGEgZm9yIGVhY2ggcm93IG9mIGRhdGEgdG8gc2VlIHdoaWNoIGRhdGEgaXMgZ29vZCAoZmxhZz0nWicpIGFuZCB3aGljaCBkYXRhIGlzbid0LiAgRm9yIGV4YW1wbGUsIHRvIGV4dHJhY3QganVzdCBkYXRhIHdoZXJlIHRpbWUgKHFjaW5kZXg9MSksIGxhdGl0dWRlIChxY2luZGV4PTIpLCBsb25naXR1ZGUgKHFjaW5kZXg9MyksIGFuZCBhaXJUZW1wZXJhdHVyZSAocWNpbmRleD0xMikgYXJlICdnb29kJyBkYXRhLCBpbmNsdWRlIHRoaXMgY29uc3RyYWludCBpbiB5b3VyIEVSRERBUCBxdWVyeTpcbiAgZmxhZz1+XCJaWlouLi4uLi4uLlouKlwiXG5pbiB5b3VyIHF1ZXJ5LiAgXG5cIj1+XCIgaW5kaWNhdGVzIHRoaXMgaXMgYSByZWd1bGFyIGV4cHJlc3Npb24gY29uc3RyYWludC5cblRoZSAnWidzIGFyZSBsaXRlcmFsIGNoYXJhY3RlcnMuICBJbiB0aGlzIGRhdGFzZXQsICdaJyBpbmRpY2F0ZXMgJ2dvb2QnIGRhdGEuIFxuVGhlICcuJ3Mgc2F5IHRvIG1hdGNoIGFueSBjaGFyYWN0ZXIuICBcblRoZSAnKicgc2F5cyB0byBtYXRjaCB0aGUgcHJldmlvdXMgY2hhcmFjdGVyIDAgb3IgbW9yZSB0aW1lcy4gIFxuU2VlIHRoZSB0dXRvcmlhbCBmb3IgcmVndWxhciBleHByZXNzaW9ucyBhdFxuaHR0cDovL3d3dy52b2dlbGxhLmNvbS90dXRvcmlhbHMvSmF2YVJlZ3VsYXJFeHByZXNzaW9ucy9hcnRpY2xlLmh0bWxcblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2VfaWRcbmV4cG9jb2RlXG5mYWNpbGl0eVxuSURcbklNT1xucGxhdGZvcm1cbnBsYXRmb3JtX3ZlcnNpb25cbnNpdGVcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuYWlyUHJlc3N1cmUgKEF0bW9zcGhlcmljIFByZXNzdXJlLCBtaWxsaWJhcilcbi4uLiAoMTMgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZnN1Tm9hYVNoaXBXVEVGbnJ0X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9mc3VOb2FhU2hpcFdURUZucnRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZnN1Tm9hYVNoaXBXVEVGbnJ0L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9zYW1vcy5jb2Fwcy5mc3UuZWR1L2h0bWwvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2ZzdU5vYWFTaGlwV1RFRm5ydC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZnN1Tm9hYVNoaXBXVEVGbnJ0JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkZTVSIsICJmc3VOb2FhU2hpcFdURUZucnQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVEVGLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdURUYiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVEVGLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5PQUEgU2hpcCBSYWluaWVyIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEsIFF1YWxpdHkgQ29udHJvbGxlZCIsICJOT0FBIFNoaXAgUmFpbmllciBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhIChkZWxheWVkIH4xMCBkYXlzIGZvciBxdWFsaXR5IGNvbnRyb2wpIGFyZSBmcm9tIHRoZSBTaGlwYm9hcmQgQXV0b21hdGVkIE1ldGVvcm9sb2dpY2FsIGFuZCBPY2Vhbm9ncmFwaGljIFN5c3RlbSAoU0FNT1MpIHByb2dyYW0uXG5cbklNUE9SVEFOVDogQUxXQVlTIFVTRSBUSEUgUVVBTElUWSBGTEFHIERBVEEhIEVhY2ggZGF0YSB2YXJpYWJsZSdzIG1ldGFkYXRhIGluY2x1ZGVzIGEgcWNpbmRleCBhdHRyaWJ1dGUgd2hpY2ggaW5kaWNhdGVzIGEgY2hhcmFjdGVyIG51bWJlciBpbiB0aGUgZmxhZyBkYXRhLiAgQUxXQVlTIGNoZWNrIHRoZSBmbGFnIGRhdGEgZm9yIGVhY2ggcm93IG9mIGRhdGEgdG8gc2VlIHdoaWNoIGRhdGEgaXMgZ29vZCAoZmxhZz0nWicpIGFuZCB3aGljaCBkYXRhIGlzbid0LiAgRm9yIGV4YW1wbGUsIHRvIGV4dHJhY3QganVzdCBkYXRhIHdoZXJlIHRpbWUgKHFjaW5kZXg9MSksIGxhdGl0dWRlIChxY2luZGV4PTIpLCBsb25naXR1ZGUgKHFjaW5kZXg9MyksIGFuZCBhaXJUZW1wZXJhdHVyZSAocWNpbmRleD0xMikgYXJlICdnb29kJyBkYXRhLCBpbmNsdWRlIHRoaXMgY29uc3RyYWludCBpbiB5b3VyIEVSRERBUCBxdWVyeTpcbiAgZmxhZz1+XCJaWlouLi4uLi4uLlouKlwiXG5pbiB5b3VyIHF1ZXJ5LiAgXG5cIj1+XCIgaW5kaWNhdGVzIHRoaXMgaXMgYSByZWd1bGFyIGV4cHJlc3Npb24gY29uc3RyYWludC5cblRoZSAnWidzIGFyZSBsaXRlcmFsIGNoYXJhY3RlcnMuICBJbiB0aGlzIGRhdGFzZXQsICdaJyBpbmRpY2F0ZXMgJ2dvb2QnIGRhdGEuIFxuVGhlICcuJ3Mgc2F5IHRvIG1hdGNoIGFueSBjaGFyYWN0ZXIuICBcblRoZSAnKicgc2F5cyB0byBtYXRjaCB0aGUgcHJldmlvdXMgY2hhcmFjdGVyIDAgb3IgbW9yZSB0aW1lcy4gIFxuU2VlIHRoZSB0dXRvcmlhbCBmb3IgcmVndWxhciBleHByZXNzaW9ucyBhdFxuaHR0cDovL3d3dy52b2dlbGxhLmNvbS90dXRvcmlhbHMvSmF2YVJlZ3VsYXJFeHByZXNzaW9ucy9hcnRpY2xlLmh0bWxcblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2VfaWRcbmV4cG9jb2RlXG5mYWNpbGl0eVxuSURcbklNT1xucGxhdGZvcm1cbnBsYXRmb3JtX3ZlcnNpb25cbnNpdGVcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuYWlyUHJlc3N1cmUgKEF0bW9zcGhlcmljIFByZXNzdXJlLCBtaWxsaWJhcilcbi4uLiAoMTMgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZnN1Tm9hYVNoaXBXVEVGX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9mc3VOb2FhU2hpcFdURUZfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZnN1Tm9hYVNoaXBXVEVGL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9zYW1vcy5jb2Fwcy5mc3UuZWR1L2h0bWwvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2ZzdU5vYWFTaGlwV1RFRi5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZnN1Tm9hYVNoaXBXVEVGJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkZTVSIsICJmc3VOb2FhU2hpcFdURUYiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVEVDbnJ0LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdURUNucnQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1Tm9hYVNoaXBXVEVDbnJ0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5PQUEgU2hpcCBSb25hbGQgQnJvd24gVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSwgTmVhciBSZWFsIFRpbWUiLCAiTk9BQSBTaGlwIFJvbmFsZCBCcm93biBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhIChOZWFyIFJlYWwgVGltZSwgdXBkYXRlZCBkYWlseSkgYXJlIGZyb20gdGhlIFNoaXBib2FyZCBBdXRvbWF0ZWQgTWV0ZW9yb2xvZ2ljYWwgYW5kIE9jZWFub2dyYXBoaWMgU3lzdGVtIChTQU1PUykgcHJvZ3JhbS5cblxuSU1QT1JUQU5UOiBBTFdBWVMgVVNFIFRIRSBRVUFMSVRZIEZMQUcgREFUQSEgRWFjaCBkYXRhIHZhcmlhYmxlJ3MgbWV0YWRhdGEgaW5jbHVkZXMgYSBxY2luZGV4IGF0dHJpYnV0ZSB3aGljaCBpbmRpY2F0ZXMgYSBjaGFyYWN0ZXIgbnVtYmVyIGluIHRoZSBmbGFnIGRhdGEuICBBTFdBWVMgY2hlY2sgdGhlIGZsYWcgZGF0YSBmb3IgZWFjaCByb3cgb2YgZGF0YSB0byBzZWUgd2hpY2ggZGF0YSBpcyBnb29kIChmbGFnPSdaJykgYW5kIHdoaWNoIGRhdGEgaXNuJ3QuICBGb3IgZXhhbXBsZSwgdG8gZXh0cmFjdCBqdXN0IGRhdGEgd2hlcmUgdGltZSAocWNpbmRleD0xKSwgbGF0aXR1ZGUgKHFjaW5kZXg9MiksIGxvbmdpdHVkZSAocWNpbmRleD0zKSwgYW5kIGFpclRlbXBlcmF0dXJlIChxY2luZGV4PTEyKSBhcmUgJ2dvb2QnIGRhdGEsIGluY2x1ZGUgdGhpcyBjb25zdHJhaW50IGluIHlvdXIgRVJEREFQIHF1ZXJ5OlxuICBmbGFnPX5cIlpaWi4uLi4uLi4uWi4qXCJcbmluIHlvdXIgcXVlcnkuICBcblwiPX5cIiBpbmRpY2F0ZXMgdGhpcyBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBjb25zdHJhaW50LlxuVGhlICdaJ3MgYXJlIGxpdGVyYWwgY2hhcmFjdGVycy4gIEluIHRoaXMgZGF0YXNldCwgJ1onIGluZGljYXRlcyAnZ29vZCcgZGF0YS4gXG5UaGUgJy4ncyBzYXkgdG8gbWF0Y2ggYW55IGNoYXJhY3Rlci4gIFxuVGhlICcqJyBzYXlzIHRvIG1hdGNoIHRoZSBwcmV2aW91cyBjaGFyYWN0ZXIgMCBvciBtb3JlIHRpbWVzLiAgXG5TZWUgdGhlIHR1dG9yaWFsIGZvciByZWd1bGFyIGV4cHJlc3Npb25zIGF0XG5odHRwOi8vd3d3LnZvZ2VsbGEuY29tL3R1dG9yaWFscy9KYXZhUmVndWxhckV4cHJlc3Npb25zL2FydGljbGUuaHRtbFxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZV9pZFxuZXhwb2NvZGVcbmZhY2lsaXR5XG5JRFxuSU1PXG5wbGF0Zm9ybVxucGxhdGZvcm1fdmVyc2lvblxuc2l0ZVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5haXJQcmVzc3VyZSAoQXRtb3NwaGVyaWMgUHJlc3N1cmUsIG1pbGxpYmFyKVxuLi4uICgxNCBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9mc3VOb2FhU2hpcFdURUNucnRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2ZzdU5vYWFTaGlwV1RFQ25ydF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9mc3VOb2FhU2hpcFdURUNucnQvaW5kZXguanNvbiIsICJodHRwczovL3NhbW9zLmNvYXBzLmZzdS5lZHUvaHRtbC8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZnN1Tm9hYVNoaXBXVEVDbnJ0LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1mc3VOb2FhU2hpcFdURUNucnQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiRlNVIiwgImZzdU5vYWFTaGlwV1RFQ25ydCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdURUMuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdU5vYWFTaGlwV1RFQyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VOb2FhU2hpcFdURUMuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiTk9BQSBTaGlwIFJvbmFsZCBCcm93biBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhLCBRdWFsaXR5IENvbnRyb2xsZWQiLCAiTk9BQSBTaGlwIFJvbmFsZCBCcm93biBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhIChkZWxheWVkIH4xMCBkYXlzIGZvciBxdWFsaXR5IGNvbnRyb2wpIGFyZSBmcm9tIHRoZSBTaGlwYm9hcmQgQXV0b21hdGVkIE1ldGVvcm9sb2dpY2FsIGFuZCBPY2Vhbm9ncmFwaGljIFN5c3RlbSAoU0FNT1MpIHByb2dyYW0uXG5cbklNUE9SVEFOVDogQUxXQVlTIFVTRSBUSEUgUVVBTElUWSBGTEFHIERBVEEhIEVhY2ggZGF0YSB2YXJpYWJsZSdzIG1ldGFkYXRhIGluY2x1ZGVzIGEgcWNpbmRleCBhdHRyaWJ1dGUgd2hpY2ggaW5kaWNhdGVzIGEgY2hhcmFjdGVyIG51bWJlciBpbiB0aGUgZmxhZyBkYXRhLiAgQUxXQVlTIGNoZWNrIHRoZSBmbGFnIGRhdGEgZm9yIGVhY2ggcm93IG9mIGRhdGEgdG8gc2VlIHdoaWNoIGRhdGEgaXMgZ29vZCAoZmxhZz0nWicpIGFuZCB3aGljaCBkYXRhIGlzbid0LiAgRm9yIGV4YW1wbGUsIHRvIGV4dHJhY3QganVzdCBkYXRhIHdoZXJlIHRpbWUgKHFjaW5kZXg9MSksIGxhdGl0dWRlIChxY2luZGV4PTIpLCBsb25naXR1ZGUgKHFjaW5kZXg9MyksIGFuZCBhaXJUZW1wZXJhdHVyZSAocWNpbmRleD0xMikgYXJlICdnb29kJyBkYXRhLCBpbmNsdWRlIHRoaXMgY29uc3RyYWludCBpbiB5b3VyIEVSRERBUCBxdWVyeTpcbiAgZmxhZz1+XCJaWlouLi4uLi4uLlouKlwiXG5pbiB5b3VyIHF1ZXJ5LiAgXG5cIj1+XCIgaW5kaWNhdGVzIHRoaXMgaXMgYSByZWd1bGFyIGV4cHJlc3Npb24gY29uc3RyYWludC5cblRoZSAnWidzIGFyZSBsaXRlcmFsIGNoYXJhY3RlcnMuICBJbiB0aGlzIGRhdGFzZXQsICdaJyBpbmRpY2F0ZXMgJ2dvb2QnIGRhdGEuIFxuVGhlICcuJ3Mgc2F5IHRvIG1hdGNoIGFueSBjaGFyYWN0ZXIuICBcblRoZSAnKicgc2F5cyB0byBtYXRjaCB0aGUgcHJldmlvdXMgY2hhcmFjdGVyIDAgb3IgbW9yZSB0aW1lcy4gIFxuU2VlIHRoZSB0dXRvcmlhbCBmb3IgcmVndWxhciBleHByZXNzaW9ucyBhdFxuaHR0cDovL3d3dy52b2dlbGxhLmNvbS90dXRvcmlhbHMvSmF2YVJlZ3VsYXJFeHByZXNzaW9ucy9hcnRpY2xlLmh0bWxcblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2VfaWRcbmV4cG9jb2RlXG5mYWNpbGl0eVxuSURcbklNT1xucGxhdGZvcm1cbnBsYXRmb3JtX3ZlcnNpb25cbnNpdGVcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuYWlyUHJlc3N1cmUgKEF0bW9zcGhlcmljIFByZXNzdXJlLCBtaWxsaWJhcilcbi4uLiAoMTQgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZnN1Tm9hYVNoaXBXVEVDX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9mc3VOb2FhU2hpcFdURUNfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZnN1Tm9hYVNoaXBXVEVDL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9zYW1vcy5jb2Fwcy5mc3UuZWR1L2h0bWwvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2ZzdU5vYWFTaGlwV1RFQy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZnN1Tm9hYVNoaXBXVEVDJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkZTVSIsICJmc3VOb2FhU2hpcFdURUMiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkTnBoLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmROcGgiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkTnBoLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5vcnRoIFBhY2lmaWMgSGlnaCwgMTk2NyAtIHByZXNlbnQiLCAiVmFyaWF0aW9ucyBpbiBsYXJnZS1zY2FsZSBhdG1vc3BoZXJpYyBmb3JjaW5nIGluZmx1ZW5jZSB1cHdlbGxpbmcgZHluYW1pY3MgYW5kIGVjb3N5c3RlbSBwcm9kdWN0aXZpdHkgaW4gdGhlIENhbGlmb3JuaWEgQ3VycmVudCBTeXN0ZW0gKENDUykuIEluIHRoaXMgcGFwZXIsIHdlIGNoYXJhY3Rlcml6ZSBpbnRlcmFubnVhbCB2YXJpYWJpbGl0eSBvZiB0aGUgTm9ydGggUGFjaWZpYyBIaWdoIG92ZXIgNDAgeWVhcnMgYW5kIGludmVzdGlnYXRlIGhvdyB2YXJpYXRpb24gaW4gaXRzIGFtcGxpdHVkZSBhbmQgcG9zaXRpb24gYWZmZWN0IHVwd2VsbGluZyBhbmQgYmlvbG9neS4gV2UgZGV2ZWxvcCBhIHdpbnRlciB1cHdlbGxpbmcgXCJwcmUtY29uZGl0aW9uaW5nXCIgaW5kZXggYW5kIGRlbW9uc3RyYXRlIGl0cyB1dGlsaXR5IHRvIHVuZGVyc3RhbmRpbmcgYmlvbG9naWNhbCBwcm9jZXNzZXMuIFZhcmlhdGlvbiBpbiB0aGUgd2ludGVyIE5QSCBjYW4gYmUgd2VsbCBkZXNjcmliZWQgYnkgaXRzIGFyZWFsIGV4dGVudCBhbmQgbWF4aW11bSBwcmVzc3VyZSwgd2hpY2ggaW4gdHVybiBpcyBwcmVkaWN0aXZlIG9mIHdpbnRlciB1cHdlbGxpbmcuIE91ciB3aW50ZXIgcHJlLWNvbmRpdGlvbmluZyBpbmRleCBleHBsYWluZWQgNjQlIG9mIHRoZSB2YXJpYXRpb24gaW4gYmlvbG9naWNhbCByZXNwb25zZXMgKGZpc2ggYW5kIHNlYWJpcmRzKS4gVW5kZXJzdGFuZGluZyBjaGFyYWN0ZXJpc3RpY3Mgb2YgdGhlIE5QSCBpbiB3aW50ZXIgaXMgdGhlcmVmb3JlIGNyaXRpY2FsIHRvIHByZWRpY3RpbmcgYmlvbG9naWNhbCByZXNwb25zZXMgaW4gdGhlIENDUy5cblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxueWVhclxubW9udGggKE1vbnRoICgxIC0gMTIpKVxubG9uZ2l0dWRlIChMb25naXR1ZGUgb2YgdGhlIENlbnRlciBvZiB0aGUgTlBILCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTGF0aXR1ZGUgb2YgdGhlIENlbnRlciBvZiB0aGUgTlBILCBkZWdyZWVzX25vcnRoKVxuYXJlYSAoQXJlYWwgRXh0ZW50IG9mIHRoZSAxMDIwIGhQYSBDb250b3VyLCBrbTIpXG5tYXhTTFAgKE1heGltdW0gU2VhIExldmVsIFByZXNzdXJlLCBoUGEpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkTnBoX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmROcGhfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkTnBoL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vbmxpbmVsaWJyYXJ5LndpbGV5LmNvbS9kb2kvMTAuMTAwMi9ncmwuNTAxMDAvYWJzdHJhY3QiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkTnBoLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1lcmROcGgmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBFUkQiLCAiZXJkTnBoIl0sCiAgICAgIFsiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRQY3VpIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZFBjdWkuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiTm9ydGggUGFjaWZpYyBIaWdoLCBQcmUtY29uZGl0aW9uaW5nIEN1bXVsYXRpdmUgVXB3ZWxsaW5nIEluZGV4LCAxOTY3IC0gcHJlc2VudCIsICJWYXJpYXRpb25zIGluIGxhcmdlLXNjYWxlIGF0bW9zcGhlcmljIGZvcmNpbmcgaW5mbHVlbmNlIHVwd2VsbGluZyBkeW5hbWljcyBhbmQgZWNvc3lzdGVtIHByb2R1Y3Rpdml0eSBpbiB0aGUgQ2FsaWZvcm5pYSBDdXJyZW50IFN5c3RlbSAoQ0NTKS4gSW4gdGhpcyBwYXBlciwgd2UgY2hhcmFjdGVyaXplIGludGVyYW5udWFsIHZhcmlhYmlsaXR5IG9mIHRoZSBOb3J0aCBQYWNpZmljIEhpZ2ggb3ZlciA0MCB5ZWFycyBhbmQgaW52ZXN0aWdhdGUgaG93IHZhcmlhdGlvbiBpbiBpdHMgYW1wbGl0dWRlIGFuZCBwb3NpdGlvbiBhZmZlY3QgdXB3ZWxsaW5nIGFuZCBiaW9sb2d5LiBXZSBkZXZlbG9wIGEgd2ludGVyIHVwd2VsbGluZyBcInByZS1jb25kaXRpb25pbmdcIiBpbmRleCBhbmQgZGVtb25zdHJhdGUgaXRzIHV0aWxpdHkgdG8gdW5kZXJzdGFuZGluZyBiaW9sb2dpY2FsIHByb2Nlc3Nlcy4gVmFyaWF0aW9uIGluIHRoZSB3aW50ZXIgTlBIIGNhbiBiZSB3ZWxsIGRlc2NyaWJlZCBieSBpdHMgYXJlYWwgZXh0ZW50IGFuZCBtYXhpbXVtIHByZXNzdXJlLCB3aGljaCBpbiB0dXJuIGlzIHByZWRpY3RpdmUgb2Ygd2ludGVyIHVwd2VsbGluZy4gT3VyIHdpbnRlciBwcmUtY29uZGl0aW9uaW5nIGluZGV4IGV4cGxhaW5lZCA2NCUgb2YgdGhlIHZhcmlhdGlvbiBpbiBiaW9sb2dpY2FsIHJlc3BvbnNlcyAoZmlzaCBhbmQgc2VhYmlyZHMpLiBVbmRlcnN0YW5kaW5nIGNoYXJhY3RlcmlzdGljcyBvZiB0aGUgTlBIIGluIHdpbnRlciBpcyB0aGVyZWZvcmUgY3JpdGljYWwgdG8gcHJlZGljdGluZyBiaW9sb2dpY2FsIHJlc3BvbnNlcyBpbiB0aGUgQ0NTLlxuXG5jZG1fZGF0YV90eXBlID0gT3RoZXJcblZBUklBQkxFUzpcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5wY3VpMzNOIChQQ1VJIGF0IDMzTiwgbV4zIHNeLTEgMTAwbV4tMSlcbnBjdWkzNk4gKFBDVUkgYXQgMzZOLCBtXjMgc14tMSAxMDBtXi0xKVxucGN1aTM5TiAoUENVSSBhdCAzOU4sIG1eMyBzXi0xIDEwMG1eLTEpXG5wY3VpNDJOIChQQ1VJIGF0IDQyTiwgbV4zIHNeLTEgMTAwbV4tMSlcbnBjdWk0NU4gKFBDVUkgYXQgNDVOLCBtXjMgc14tMSAxMDBtXi0xKVxucGN1aTQ4TiAoUENVSSBhdCA0OE4sIG1eMyBzXi0xIDEwMG1eLTEpXG4iLCAiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZFBjdWkvaW5kZXguanNvbiIsICJodHRwczovL29ubGluZWxpYnJhcnkud2lsZXkuY29tL2RvaS8xMC4xMDAyL2dybC41MDEwMC9hYnN0cmFjdCIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9lcmRQY3VpLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1lcmRQY3VpJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgRVJEIiwgImVyZFBjdWkiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0XzQzYThfNmQ2ZF85MDUyLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfNDNhOF82ZDZkXzkwNTIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0XzQzYThfNmQ2ZF85MDUyLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5vcnRod2VzdGVybiBIYXdhaWlhbiBJc2xhbmRzLCBDb3JhbCBSZWVmIE1vbml0b3JpbmcsIEZpc2ggU3VydmV5cywgQmVsdCBUcmFuc2VjdHMgKEJMVCkiLCAiUGFwYWhhbmF1bW9rdWFrZWEgTWFyaW5lIE5hdGlvbmFsIE1vbnVtZW50IChQTU5NKSBGaXNoIFN0b2NrIERhdGEgZnJvbSBSYXBpZCBFY29sb2dpY2FsIEFzc2Vzc21lbnRzIChSRUFzKVxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubWluaW11bURlcHRoSW5NZXRlcnNcbm1heGltdW1EZXB0aEluTWV0ZXJzXG5pc2xhbmRHcm91cFxudmVybmFjdWxhck5hbWVcbnNjaWVudGlmaWNOYW1lXG5vaWRcbm1vZGlmaWVkXG5kYXRhc2V0SURcbmRhdGFzZXROYW1lXG5pbnN0aXR1dGlvbkNvZGVcbmNvbGxlY3Rpb25Db2RlXG5pbnN0aXR1dGlvbklEXG5jb2xsZWN0aW9uSURcbm93bmVySW5zdGl0dXRpb25Db2RlXG5iYXNpc09mUmVjb3JkXG5jYXRhbG9nTnVtYmVyXG50YXhvblJhbmtcbnZlcmJhdGltQ29vcmRpbmF0ZXNcbnZlcmJhdGltU1JTXG5nZW9kZXRpY0RhdHVtXG5jb29yZGluYXRlVW5jZXJ0YWludHlJbk1ldGVyc1xuZ2VvcmVmZXJlbmNlZEJ5XG5nZW9yZWZlcmVuY2VQcm90b2NvbFxuLi4uICg1MCBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9oYXdhaWlfc29lc3RfNDNhOF82ZDZkXzkwNTJfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2hhd2FpaV9zb2VzdF80M2E4XzZkNmRfOTA1Ml9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9oYXdhaWlfc29lc3RfNDNhOF82ZDZkXzkwNTIvaW5kZXguanNvbiIsICJodHRwOi8vd3d3LnBhcGFoYW5hdW1va3Vha2VhLmdvdi9yZXNlYXJjaC93ZWxjb21lLmh0bWwiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvaGF3YWlpX3NvZXN0XzQzYThfNmQ2ZF85MDUyLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1oYXdhaWlfc29lc3RfNDNhOF82ZDZkXzkwNTImc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiVVNET0MvTk9BQS9OT1MvUE1OTSIsICJoYXdhaWlfc29lc3RfNDNhOF82ZDZkXzkwNTIiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0XzY4ZjJfZDE3ZF9kNDEzLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfNjhmMl9kMTdkX2Q0MTMiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0XzY4ZjJfZDE3ZF9kNDEzLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5vcnRod2VzdGVybiBIYXdhaWlhbiBJc2xhbmRzLCBDb3JhbCBSZWVmIE1vbml0b3JpbmcsIEZpc2ggU3VydmV5cywgQmVsdCBUcmFuc2VjdHMgKHZCTFQpIiwgIlBhcGFoYW5hdW1va3Vha2VhIE1hcmluZSBOYXRpb25hbCBNb251bWVudCAoUE1OTSkgRmlzaCBTdG9jayBEYXRhIGZyb20gUmFwaWQgRWNvbG9naWNhbCBBc3Nlc3NtZW50cyAoUkVBcylcblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbm1pbmltdW1EZXB0aEluTWV0ZXJzXG5tYXhpbXVtRGVwdGhJbk1ldGVyc1xuaXNsYW5kR3JvdXBcbnZlcm5hY3VsYXJOYW1lXG5zY2llbnRpZmljTmFtZVxub2lkXG5tb2RpZmllZFxuZGF0YXNldElEXG5kYXRhc2V0TmFtZVxuaW5zdGl0dXRpb25Db2RlXG5jb2xsZWN0aW9uQ29kZVxuaW5zdGl0dXRpb25JRFxuY29sbGVjdGlvbklEXG5vd25lckluc3RpdHV0aW9uQ29kZVxuYmFzaXNPZlJlY29yZFxuY2F0YWxvZ051bWJlclxudGF4b25SYW5rXG52ZXJiYXRpbUNvb3JkaW5hdGVzXG52ZXJiYXRpbVNSU1xuZ2VvZGV0aWNEYXR1bVxuY29vcmRpbmF0ZVVuY2VydGFpbnR5SW5NZXRlcnNcbmdlb3JlZmVyZW5jZWRCeVxuZ2VvcmVmZXJlbmNlUHJvdG9jb2xcbi4uLiAoNTAgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvaGF3YWlpX3NvZXN0XzY4ZjJfZDE3ZF9kNDEzX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9oYXdhaWlfc29lc3RfNjhmMl9kMTdkX2Q0MTNfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vaGF3YWlpX3NvZXN0XzY4ZjJfZDE3ZF9kNDEzL2luZGV4Lmpzb24iLCAiaHR0cDovL3d3dy5wYXBhaGFuYXVtb2t1YWtlYS5nb3YvcmVzZWFyY2gvd2VsY29tZS5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2hhd2FpaV9zb2VzdF82OGYyX2QxN2RfZDQxMy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9aGF3YWlpX3NvZXN0XzY4ZjJfZDE3ZF9kNDEzJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIlVTRE9DL05PQUEvTk9TL1BNTk0iLCAiaGF3YWlpX3NvZXN0XzY4ZjJfZDE3ZF9kNDEzIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF9lYzFjXzFhYTRfZGRhZi5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0X2VjMWNfMWFhNF9kZGFmIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF9lYzFjXzFhYTRfZGRhZi5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOb3J0aHdlc3Rlcm4gSGF3YWlpYW4gSXNsYW5kcywgQ29yYWwgUmVlZiBNb25pdG9yaW5nLCBGaXNoIFN1cnZleXMsIFN0YXRpb25hcnkgUG9pbnQgQ291bnRzIChuU1BDKSIsICJQYXBhaGFuYXVtb2t1YWtlYSBNYXJpbmUgTmF0aW9uYWwgTW9udW1lbnQgKFBNTk0pIEZpc2ggU3RvY2sgRGF0YSBmcm9tIFJhcGlkIEVjb2xvZ2ljYWwgQXNzZXNzbWVudHMgKFJFQXMpXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5taW5pbXVtRGVwdGhJbk1ldGVyc1xubWF4aW11bURlcHRoSW5NZXRlcnNcbmlzbGFuZEdyb3VwXG52ZXJuYWN1bGFyTmFtZVxuc2NpZW50aWZpY05hbWVcbm9pZFxubW9kaWZpZWRcbmRhdGFzZXRJRFxuZGF0YXNldE5hbWVcbmluc3RpdHV0aW9uQ29kZVxuY29sbGVjdGlvbkNvZGVcbmluc3RpdHV0aW9uSURcbmNvbGxlY3Rpb25JRFxub3duZXJJbnN0aXR1dGlvbkNvZGVcbmJhc2lzT2ZSZWNvcmRcbmNhdGFsb2dOdW1iZXJcbnRheG9uUmFua1xudmVyYmF0aW1Db29yZGluYXRlc1xudmVyYmF0aW1TUlNcbmdlb2RldGljRGF0dW1cbmNvb3JkaW5hdGVVbmNlcnRhaW50eUluTWV0ZXJzXG5nZW9yZWZlcmVuY2VkQnlcbmdlb3JlZmVyZW5jZVByb3RvY29sXG4uLi4gKDUwIG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2hhd2FpaV9zb2VzdF9lYzFjXzFhYTRfZGRhZl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvaGF3YWlpX3NvZXN0X2VjMWNfMWFhNF9kZGFmX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2hhd2FpaV9zb2VzdF9lYzFjXzFhYTRfZGRhZi9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cucGFwYWhhbmF1bW9rdWFrZWEuZ292L3Jlc2VhcmNoL3dlbGNvbWUuaHRtbCIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9oYXdhaWlfc29lc3RfZWMxY18xYWE0X2RkYWYucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWhhd2FpaV9zb2VzdF9lYzFjXzFhYTRfZGRhZiZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJVU0RPQy9OT0FBL05PUy9QTU5NIiwgImhhd2FpaV9zb2VzdF9lYzFjXzFhYTRfZGRhZiJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ub3NDb29wc0NBLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ub3NDb29wc0NBIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25vc0Nvb3BzQ0EuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiTk9TIENPLU9QUyBBY3RpdmUgQ3VycmVudHMgRGF0YSwgNi1NaW51dGUiLCAiVGhpcyBkYXRhc2V0IGhhcyBzdXJmYWNlIEFjdGl2ZSBDdXJyZW50cyBkYXRhIGZyb20gTk9BQSBOT1MgQ2VudGVyIGZvclxuT3BlcmF0aW9uYWwgT2NlYW5vZ3JhcGhpYyBQcm9kdWN0cyBhbmQgU2VydmljZXMgKENPLU9QUykuXG5cbldBUk5JTkc6IFRoZXNlIHJhdyBkYXRhIGhhdmUgbm90IGJlZW4gc3ViamVjdGVkIHRvIHRoZSBOYXRpb25hbCBPY2VhbiBTZXJ2aWNlc1xuKE5PUykgUXVhbGl0eSBDb250cm9sIHByb2NlZHVyZXMsIGFuZCBkbyBub3QgbmVjZXNzYXJpbHkgbWVldCB0aGUgY3JpdGVyaWEgYW5kXG5zdGFuZGFyZHMgb2Ygb2ZmaWNpYWwgTk9TIGRhdGEuIFRoZXkgYXJlIHJlbGVhc2VkIGZvciBsaW1pdGVkIHB1YmxpYyB1c2Ugd2l0aFxuYXBwcm9wcmlhdGUgY2F1dGlvbi5cblxuV0FSTklORzpcbiogUXVlcmllcyBmb3IgZGF0YSBNVVNUIGluY2x1ZGUgc3RhdGlvbklEPSBhbmQgdGltZT49LlxuKiBRdWVyaWVzIFVTVUFMTFkgaW5jbHVkZSB0aW1lPD0gKHRoZSBkZWZhdWx0IGVuZCB0aW1lIGNvcnJlc3BvbmRzIHRvICdub3cnKS5cbiogUXVlcmllcyBNVVNUIGJlIGZvciBsZXNzIHRoYW4gMzAgZGF5cyB3b3J0aCBvZiBkYXRhLlxuKiBUaGUgZGF0YSBzb3VyY2UgaXNuJ3QgY29tcGxldGVseSByZWxpYWJsZS4gSWYgeW91ciByZXF1ZXN0IHJldHVybnMgbm8gZGF0YVxuICB3aGVuIHlvdSB0aGluayBpdCBzaG91bGQ6XG4gICogVHJ5IHJldmlzaW5nIHRoZSByZXF1ZXN0IChlLmcuLCBhIGRpZmZlcmVudCB0aW1lIHJhbmdlKS5cbiAgKiBUaGUgbGlzdCBvZiBzdGF0aW9ucyBvZmZlcmluZyB0aGlzIGRhdGEgbWF5IGJlIGluY29ycmVjdC5cbiAgKiBTb21ldGltZXMgYSBzdGF0aW9uIG9yIHRoZSBlbnRpcmUgZGF0YSBzZXJ2aWNlIGlzIHVuYXZhaWxhYmxlLlxuICAgIFdhaXQgYSB3aGlsZSBhbmQgdHJ5IGFnYWluLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuc3RhdGlvbklEIChTdGF0aW9uIElEKVxuc3RhdGlvbk5hbWUgKFN0YXRpb24gTmFtZSlcbmRhdGVFc3RhYmxpc2hlZCAoRGF0ZSBFc3RhYmxpc2hlZCwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuQ1MgKEN1cnJlbnQgU3BlZWQsIGtub3RzKVxuQ0QgKEN1cnJlbnQgRGlyZWN0aW9uLCBkZWdyZWVzX3RydWUpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvbm9zQ29vcHNDQV9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvbm9zQ29vcHNDQV9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9ub3NDb29wc0NBL2luZGV4Lmpzb24iLCAiaHR0cDovL3RpZGVzYW5kY3VycmVudHMubm9hYS5nb3YvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL25vc0Nvb3BzQ0EucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPW5vc0Nvb3BzQ0Emc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBOT1MgQ08tT1BTIiwgIm5vc0Nvb3BzQ0EiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm9zQ29vcHNNQVQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25vc0Nvb3BzTUFUIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25vc0Nvb3BzTUFULmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5PUyBDTy1PUFMgTWV0ZW9yb2xvZ2ljYWwgRGF0YSwgQWlyIFRlbXBlcmF0dXJlLCA2LU1pbnV0ZSIsICJUaGlzIGRhdGFzZXQgaGFzIEFpciBUZW1wZXJhdHVyZSBkYXRhIGZyb20gTk9BQSBOT1MgQ2VudGVyIGZvciBPcGVyYXRpb25hbFxuT2NlYW5vZ3JhcGhpYyBQcm9kdWN0cyBhbmQgU2VydmljZXMgKENPLU9QUykuXG5cbldBUk5JTkc6IFRoZXNlIHByZWxpbWluYXJ5IGRhdGEgaGF2ZSBub3QgYmVlbiBzdWJqZWN0ZWQgdG8gdGhlIE5hdGlvbmFsIE9jZWFuXG5TZXJ2aWNlcyAoTk9TKSBRdWFsaXR5IENvbnRyb2wgcHJvY2VkdXJlcywgYW5kIGRvIG5vdCBuZWNlc3NhcmlseSBtZWV0IHRoZVxuY3JpdGVyaWEgYW5kIHN0YW5kYXJkcyBvZiBvZmZpY2lhbCBOT1MgZGF0YS4gVGhleSBhcmUgcmVsZWFzZWQgZm9yIGxpbWl0ZWRcbnB1YmxpYyB1c2Ugd2l0aCBhcHByb3ByaWF0ZSBjYXV0aW9uLlxuXG5XQVJOSU5HOlxuKiBRdWVyaWVzIGZvciBkYXRhIE1VU1QgaW5jbHVkZSBzdGF0aW9uSUQ9IGFuZCB0aW1lPj0uXG4qIFF1ZXJpZXMgVVNVQUxMWSBpbmNsdWRlIHRpbWU8PSAodGhlIGRlZmF1bHQgZW5kIHRpbWUgY29ycmVzcG9uZHMgdG8gJ25vdycpLlxuKiBRdWVyaWVzIE1VU1QgYmUgZm9yIGxlc3MgdGhhbiAzMCBkYXlzIHdvcnRoIG9mIGRhdGEuXG4qIFRoZSBkYXRhIHNvdXJjZSBpc24ndCBjb21wbGV0ZWx5IHJlbGlhYmxlLiBJZiB5b3VyIHJlcXVlc3QgcmV0dXJucyBubyBkYXRhXG4gIHdoZW4geW91IHRoaW5rIGl0IHNob3VsZDpcbiAgKiBUcnkgcmV2aXNpbmcgdGhlIHJlcXVlc3QgKGUuZy4sIGEgZGlmZmVyZW50IHRpbWUgcmFuZ2UpLlxuICAqIFRoZSBsaXN0IG9mIHN0YXRpb25zIG9mZmVyaW5nIHRoaXMgZGF0YSBtYXkgYmUgaW5jb3JyZWN0LlxuICAqIFNvbWV0aW1lcyBhIHN0YXRpb24gb3IgdGhlIGVudGlyZSBkYXRhIHNlcnZpY2UgaXMgdW5hdmFpbGFibGUuXG4gICAgV2FpdCBhIHdoaWxlIGFuZCB0cnkgYWdhaW4uXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5zdGF0aW9uSUQgKFN0YXRpb24gSUQpXG5zdGF0aW9uTmFtZSAoU3RhdGlvbiBOYW1lKVxuc3RhdGVcbmRhdGVFc3RhYmxpc2hlZCAoRGF0ZSBFc3RhYmxpc2hlZCwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnNoZWZJRCAoU0hFRiBJRClcbmRlcGxveW1lbnQgKERlcGxveW1lbnQgRGVzaWduYXRpb24pXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRjcCAoRGF0YSBDb2xsZWN0aW9uIFBsYXRmb3JtKVxuLi4uICg1IG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL25vc0Nvb3BzTUFUX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9ub3NDb29wc01BVF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9ub3NDb29wc01BVC9pbmRleC5qc29uIiwgImh0dHA6Ly90aWRlc2FuZGN1cnJlbnRzLm5vYWEuZ292LyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9ub3NDb29wc01BVC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9bm9zQ29vcHNNQVQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBOT1MgQ08tT1BTIiwgIm5vc0Nvb3BzTUFUIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25vc0Nvb3BzTUJQLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ub3NDb29wc01CUCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ub3NDb29wc01CUC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOT1MgQ08tT1BTIE1ldGVvcm9sb2dpY2FsIERhdGEsIEJhcm9tZXRyaWMgUHJlc3N1cmUsIDYtTWludXRlIiwgIlRoaXMgZGF0YXNldCBoYXMgQmFyb21ldHJpYyBQcmVzc3VyZSBkYXRhIGZyb20gTk9BQSBOT1MgQ2VudGVyIGZvciBPcGVyYXRpb25hbFxuT2NlYW5vZ3JhcGhpYyBQcm9kdWN0cyBhbmQgU2VydmljZXMgKENPLU9QUykuXG5cbldBUk5JTkc6IFRoZXNlIHByZWxpbWluYXJ5IGRhdGEgaGF2ZSBub3QgYmVlbiBzdWJqZWN0ZWQgdG8gdGhlIE5hdGlvbmFsIE9jZWFuXG5TZXJ2aWNlcyAoTk9TKSBRdWFsaXR5IENvbnRyb2wgcHJvY2VkdXJlcywgYW5kIGRvIG5vdCBuZWNlc3NhcmlseSBtZWV0IHRoZVxuY3JpdGVyaWEgYW5kIHN0YW5kYXJkcyBvZiBvZmZpY2lhbCBOT1MgZGF0YS4gVGhleSBhcmUgcmVsZWFzZWQgZm9yIGxpbWl0ZWRcbnB1YmxpYyB1c2Ugd2l0aCBhcHByb3ByaWF0ZSBjYXV0aW9uLlxuXG5XQVJOSU5HOlxuKiBRdWVyaWVzIGZvciBkYXRhIE1VU1QgaW5jbHVkZSBzdGF0aW9uSUQ9IGFuZCB0aW1lPj0uXG4qIFF1ZXJpZXMgVVNVQUxMWSBpbmNsdWRlIHRpbWU8PSAodGhlIGRlZmF1bHQgZW5kIHRpbWUgY29ycmVzcG9uZHMgdG8gJ25vdycpLlxuKiBRdWVyaWVzIE1VU1QgYmUgZm9yIGxlc3MgdGhhbiAzMCBkYXlzIHdvcnRoIG9mIGRhdGEuXG4qIFRoZSBkYXRhIHNvdXJjZSBpc24ndCBjb21wbGV0ZWx5IHJlbGlhYmxlLiBJZiB5b3VyIHJlcXVlc3QgcmV0dXJucyBubyBkYXRhXG4gIHdoZW4geW91IHRoaW5rIGl0IHNob3VsZDpcbiAgKiBUcnkgcmV2aXNpbmcgdGhlIHJlcXVlc3QgKGUuZy4sIGEgZGlmZmVyZW50IHRpbWUgcmFuZ2UpLlxuICAqIFRoZSBsaXN0IG9mIHN0YXRpb25zIG9mZmVyaW5nIHRoaXMgZGF0YSBtYXkgYmUgaW5jb3JyZWN0LlxuICAqIFNvbWV0aW1lcyBhIHN0YXRpb24gb3IgdGhlIGVudGlyZSBkYXRhIHNlcnZpY2UgaXMgdW5hdmFpbGFibGUuXG4gICAgV2FpdCBhIHdoaWxlIGFuZCB0cnkgYWdhaW4uXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5zdGF0aW9uSUQgKFN0YXRpb24gSUQpXG5zdGF0aW9uTmFtZSAoU3RhdGlvbiBOYW1lKVxuc3RhdGVcbmRhdGVFc3RhYmxpc2hlZCAoRGF0ZSBFc3RhYmxpc2hlZCwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnNoZWZJRCAoU0hFRiBJRClcbmRlcGxveW1lbnQgKERlcGxveW1lbnQgRGVzaWduYXRpb24pXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRjcCAoRGF0YSBDb2xsZWN0aW9uIFBsYXRmb3JtKVxuLi4uICg1IG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL25vc0Nvb3BzTUJQX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9ub3NDb29wc01CUF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9ub3NDb29wc01CUC9pbmRleC5qc29uIiwgImh0dHA6Ly90aWRlc2FuZGN1cnJlbnRzLm5vYWEuZ292LyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9ub3NDb29wc01CUC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9bm9zQ29vcHNNQlAmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBOT1MgQ08tT1BTIiwgIm5vc0Nvb3BzTUJQIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25vc0Nvb3BzTUMuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25vc0Nvb3BzTUMiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm9zQ29vcHNNQy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOT1MgQ08tT1BTIE1ldGVvcm9sb2dpY2FsIERhdGEsIENvbmR1Y3Rpdml0eSwgNi1NaW51dGUiLCAiVGhpcyBkYXRhc2V0IGhhcyBDb25kdWN0aXZpdHkgZGF0YSBmcm9tIE5PQUEgTk9TIENlbnRlciBmb3IgT3BlcmF0aW9uYWxcbk9jZWFub2dyYXBoaWMgUHJvZHVjdHMgYW5kIFNlcnZpY2VzIChDTy1PUFMpLlxuXG5XQVJOSU5HOiBUaGVzZSBwcmVsaW1pbmFyeSBkYXRhIGhhdmUgbm90IGJlZW4gc3ViamVjdGVkIHRvIHRoZSBOYXRpb25hbCBPY2VhblxuU2VydmljZXMgKE5PUykgUXVhbGl0eSBDb250cm9sIHByb2NlZHVyZXMsIGFuZCBkbyBub3QgbmVjZXNzYXJpbHkgbWVldCB0aGVcbmNyaXRlcmlhIGFuZCBzdGFuZGFyZHMgb2Ygb2ZmaWNpYWwgTk9TIGRhdGEuIFRoZXkgYXJlIHJlbGVhc2VkIGZvciBsaW1pdGVkXG5wdWJsaWMgdXNlIHdpdGggYXBwcm9wcmlhdGUgY2F1dGlvbi5cblxuV0FSTklORzpcbiogUXVlcmllcyBmb3IgZGF0YSBNVVNUIGluY2x1ZGUgc3RhdGlvbklEPSBhbmQgdGltZT49LlxuKiBRdWVyaWVzIFVTVUFMTFkgaW5jbHVkZSB0aW1lPD0gKHRoZSBkZWZhdWx0IGVuZCB0aW1lIGNvcnJlc3BvbmRzIHRvICdub3cnKS5cbiogUXVlcmllcyBNVVNUIGJlIGZvciBsZXNzIHRoYW4gMzAgZGF5cyB3b3J0aCBvZiBkYXRhLlxuKiBUaGUgZGF0YSBzb3VyY2UgaXNuJ3QgY29tcGxldGVseSByZWxpYWJsZS4gSWYgeW91ciByZXF1ZXN0IHJldHVybnMgbm8gZGF0YVxuICB3aGVuIHlvdSB0aGluayBpdCBzaG91bGQ6XG4gICogVHJ5IHJldmlzaW5nIHRoZSByZXF1ZXN0IChlLmcuLCBhIGRpZmZlcmVudCB0aW1lIHJhbmdlKS5cbiAgKiBUaGUgbGlzdCBvZiBzdGF0aW9ucyBvZmZlcmluZyB0aGlzIGRhdGEgbWF5IGJlIGluY29ycmVjdC5cbiAgKiBTb21ldGltZXMgYSBzdGF0aW9uIG9yIHRoZSBlbnRpcmUgZGF0YSBzZXJ2aWNlIGlzIHVuYXZhaWxhYmxlLlxuICAgIFdhaXQgYSB3aGlsZSBhbmQgdHJ5IGFnYWluLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuc3RhdGlvbklEIChTdGF0aW9uIElEKVxuc3RhdGlvbk5hbWUgKFN0YXRpb24gTmFtZSlcbnN0YXRlXG5kYXRlRXN0YWJsaXNoZWQgKERhdGUgRXN0YWJsaXNoZWQsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zaGVmSUQgKFNIRUYgSUQpXG5kZXBsb3ltZW50IChEZXBsb3ltZW50IERlc2lnbmF0aW9uKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kY3AgKERhdGEgQ29sbGVjdGlvbiBQbGF0Zm9ybSlcbi4uLiAoNSBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9ub3NDb29wc01DX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9ub3NDb29wc01DX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL25vc0Nvb3BzTUMvaW5kZXguanNvbiIsICJodHRwOi8vdGlkZXNhbmRjdXJyZW50cy5ub2FhLmdvdi8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3Mvbm9zQ29vcHNNQy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9bm9zQ29vcHNNQyZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIE5PUyBDTy1PUFMiLCAibm9zQ29vcHNNQyJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ub3NDb29wc01SRi5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm9zQ29vcHNNUkYiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm9zQ29vcHNNUkYuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiTk9TIENPLU9QUyBNZXRlb3JvbG9naWNhbCBEYXRhLCBSYWluIEZhbGwsIDYtTWludXRlIiwgIlRoaXMgZGF0YXNldCBoYXMgUmFpbiBGYWxsIGRhdGEgZnJvbSBOT0FBIE5PUyBDZW50ZXIgZm9yIE9wZXJhdGlvbmFsXG5PY2Vhbm9ncmFwaGljIFByb2R1Y3RzIGFuZCBTZXJ2aWNlcyAoQ08tT1BTKS5cblxuV0FSTklORzogVGhlc2UgcHJlbGltaW5hcnkgZGF0YSBoYXZlIG5vdCBiZWVuIHN1YmplY3RlZCB0byB0aGUgTmF0aW9uYWwgT2NlYW5cblNlcnZpY2VzIChOT1MpIFF1YWxpdHkgQ29udHJvbCBwcm9jZWR1cmVzLCBhbmQgZG8gbm90IG5lY2Vzc2FyaWx5IG1lZXQgdGhlXG5jcml0ZXJpYSBhbmQgc3RhbmRhcmRzIG9mIG9mZmljaWFsIE5PUyBkYXRhLiBUaGV5IGFyZSByZWxlYXNlZCBmb3IgbGltaXRlZFxucHVibGljIHVzZSB3aXRoIGFwcHJvcHJpYXRlIGNhdXRpb24uXG5cbldBUk5JTkc6XG4qIFF1ZXJpZXMgZm9yIGRhdGEgTVVTVCBpbmNsdWRlIHN0YXRpb25JRD0gYW5kIHRpbWU+PS5cbiogUXVlcmllcyBVU1VBTExZIGluY2x1ZGUgdGltZTw9ICh0aGUgZGVmYXVsdCBlbmQgdGltZSBjb3JyZXNwb25kcyB0byAnbm93JykuXG4qIFF1ZXJpZXMgTVVTVCBiZSBmb3IgbGVzcyB0aGFuIDMwIGRheXMgd29ydGggb2YgZGF0YS5cbiogVGhlIGRhdGEgc291cmNlIGlzbid0IGNvbXBsZXRlbHkgcmVsaWFibGUuIElmIHlvdXIgcmVxdWVzdCByZXR1cm5zIG5vIGRhdGFcbiAgd2hlbiB5b3UgdGhpbmsgaXQgc2hvdWxkOlxuICAqIFRyeSByZXZpc2luZyB0aGUgcmVxdWVzdCAoZS5nLiwgYSBkaWZmZXJlbnQgdGltZSByYW5nZSkuXG4gICogVGhlIGxpc3Qgb2Ygc3RhdGlvbnMgb2ZmZXJpbmcgdGhpcyBkYXRhIG1heSBiZSBpbmNvcnJlY3QuXG4gICogU29tZXRpbWVzIGEgc3RhdGlvbiBvciB0aGUgZW50aXJlIGRhdGEgc2VydmljZSBpcyB1bmF2YWlsYWJsZS5cbiAgICBXYWl0IGEgd2hpbGUgYW5kIHRyeSBhZ2Fpbi5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbnN0YXRpb25JRCAoU3RhdGlvbiBJRClcbnN0YXRpb25OYW1lIChTdGF0aW9uIE5hbWUpXG5zdGF0ZVxuZGF0ZUVzdGFibGlzaGVkIChEYXRlIEVzdGFibGlzaGVkLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuc2hlZklEIChTSEVGIElEKVxuZGVwbG95bWVudCAoRGVwbG95bWVudCBEZXNpZ25hdGlvbilcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGNwIChEYXRhIENvbGxlY3Rpb24gUGxhdGZvcm0pXG4uLi4gKDQgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvbm9zQ29vcHNNUkZfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL25vc0Nvb3BzTVJGX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL25vc0Nvb3BzTVJGL2luZGV4Lmpzb24iLCAiaHR0cDovL3RpZGVzYW5kY3VycmVudHMubm9hYS5nb3YvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL25vc0Nvb3BzTVJGLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1ub3NDb29wc01SRiZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIE5PUyBDTy1PUFMiLCAibm9zQ29vcHNNUkYiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm9zQ29vcHNNUkguc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25vc0Nvb3BzTVJIIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25vc0Nvb3BzTVJILmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5PUyBDTy1PUFMgTWV0ZW9yb2xvZ2ljYWwgRGF0YSwgUmVsYXRpdmUgSHVtaWRpdHksIDYtTWludXRlIiwgIlRoaXMgZGF0YXNldCBoYXMgUmVsYXRpdmUgSHVtaWRpdHkgZGF0YSBmcm9tIE5PQUEgTk9TIENlbnRlciBmb3IgT3BlcmF0aW9uYWxcbk9jZWFub2dyYXBoaWMgUHJvZHVjdHMgYW5kIFNlcnZpY2VzIChDTy1PUFMpLlxuXG5XQVJOSU5HOiBUaGVzZSBwcmVsaW1pbmFyeSBkYXRhIGhhdmUgbm90IGJlZW4gc3ViamVjdGVkIHRvIHRoZSBOYXRpb25hbCBPY2VhblxuU2VydmljZXMgKE5PUykgUXVhbGl0eSBDb250cm9sIHByb2NlZHVyZXMsIGFuZCBkbyBub3QgbmVjZXNzYXJpbHkgbWVldCB0aGVcbmNyaXRlcmlhIGFuZCBzdGFuZGFyZHMgb2Ygb2ZmaWNpYWwgTk9TIGRhdGEuIFRoZXkgYXJlIHJlbGVhc2VkIGZvciBsaW1pdGVkXG5wdWJsaWMgdXNlIHdpdGggYXBwcm9wcmlhdGUgY2F1dGlvbi5cblxuV0FSTklORzpcbiogUXVlcmllcyBmb3IgZGF0YSBNVVNUIGluY2x1ZGUgc3RhdGlvbklEPSBhbmQgdGltZT49LlxuKiBRdWVyaWVzIFVTVUFMTFkgaW5jbHVkZSB0aW1lPD0gKHRoZSBkZWZhdWx0IGVuZCB0aW1lIGNvcnJlc3BvbmRzIHRvICdub3cnKS5cbiogUXVlcmllcyBNVVNUIGJlIGZvciBsZXNzIHRoYW4gMzAgZGF5cyB3b3J0aCBvZiBkYXRhLlxuKiBUaGUgZGF0YSBzb3VyY2UgaXNuJ3QgY29tcGxldGVseSByZWxpYWJsZS4gSWYgeW91ciByZXF1ZXN0IHJldHVybnMgbm8gZGF0YVxuICB3aGVuIHlvdSB0aGluayBpdCBzaG91bGQ6XG4gICogVHJ5IHJldmlzaW5nIHRoZSByZXF1ZXN0IChlLmcuLCBhIGRpZmZlcmVudCB0aW1lIHJhbmdlKS5cbiAgKiBUaGUgbGlzdCBvZiBzdGF0aW9ucyBvZmZlcmluZyB0aGlzIGRhdGEgbWF5IGJlIGluY29ycmVjdC5cbiAgKiBTb21ldGltZXMgYSBzdGF0aW9uIG9yIHRoZSBlbnRpcmUgZGF0YSBzZXJ2aWNlIGlzIHVuYXZhaWxhYmxlLlxuICAgIFdhaXQgYSB3aGlsZSBhbmQgdHJ5IGFnYWluLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuc3RhdGlvbklEIChTdGF0aW9uIElEKVxuc3RhdGlvbk5hbWUgKFN0YXRpb24gTmFtZSlcbnN0YXRlXG5kYXRlRXN0YWJsaXNoZWQgKERhdGUgRXN0YWJsaXNoZWQsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zaGVmSUQgKFNIRUYgSUQpXG5kZXBsb3ltZW50IChEZXBsb3ltZW50IERlc2lnbmF0aW9uKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kY3AgKERhdGEgQ29sbGVjdGlvbiBQbGF0Zm9ybSlcbi4uLiAoNSBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9ub3NDb29wc01SSF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvbm9zQ29vcHNNUkhfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vbm9zQ29vcHNNUkgvaW5kZXguanNvbiIsICJodHRwOi8vdGlkZXNhbmRjdXJyZW50cy5ub2FhLmdvdi8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3Mvbm9zQ29vcHNNUkgucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPW5vc0Nvb3BzTVJIJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgTk9TIENPLU9QUyIsICJub3NDb29wc01SSCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ub3NDb29wc01WLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ub3NDb29wc01WIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25vc0Nvb3BzTVYuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiTk9TIENPLU9QUyBNZXRlb3JvbG9naWNhbCBEYXRhLCBWaXNpYmlsaXR5LCA2LU1pbnV0ZSIsICJUaGlzIGRhdGFzZXQgaGFzIFZpc2liaWxpdHkgZGF0YSBmcm9tIE5PQUEgTk9TIENlbnRlciBmb3IgT3BlcmF0aW9uYWxcbk9jZWFub2dyYXBoaWMgUHJvZHVjdHMgYW5kIFNlcnZpY2VzIChDTy1PUFMpLlxuXG5XQVJOSU5HOiBUaGVzZSBwcmVsaW1pbmFyeSBkYXRhIGhhdmUgbm90IGJlZW4gc3ViamVjdGVkIHRvIHRoZSBOYXRpb25hbCBPY2VhblxuU2VydmljZXMgKE5PUykgUXVhbGl0eSBDb250cm9sIHByb2NlZHVyZXMsIGFuZCBkbyBub3QgbmVjZXNzYXJpbHkgbWVldCB0aGVcbmNyaXRlcmlhIGFuZCBzdGFuZGFyZHMgb2Ygb2ZmaWNpYWwgTk9TIGRhdGEuIFRoZXkgYXJlIHJlbGVhc2VkIGZvciBsaW1pdGVkXG5wdWJsaWMgdXNlIHdpdGggYXBwcm9wcmlhdGUgY2F1dGlvbi5cblxuV0FSTklORzpcbiogUXVlcmllcyBmb3IgZGF0YSBNVVNUIGluY2x1ZGUgc3RhdGlvbklEPSBhbmQgdGltZT49LlxuKiBRdWVyaWVzIFVTVUFMTFkgaW5jbHVkZSB0aW1lPD0gKHRoZSBkZWZhdWx0IGVuZCB0aW1lIGNvcnJlc3BvbmRzIHRvICdub3cnKS5cbiogUXVlcmllcyBNVVNUIGJlIGZvciBsZXNzIHRoYW4gMzAgZGF5cyB3b3J0aCBvZiBkYXRhLlxuKiBUaGUgZGF0YSBzb3VyY2UgaXNuJ3QgY29tcGxldGVseSByZWxpYWJsZS4gSWYgeW91ciByZXF1ZXN0IHJldHVybnMgbm8gZGF0YVxuICB3aGVuIHlvdSB0aGluayBpdCBzaG91bGQ6XG4gICogVHJ5IHJldmlzaW5nIHRoZSByZXF1ZXN0IChlLmcuLCBhIGRpZmZlcmVudCB0aW1lIHJhbmdlKS5cbiAgKiBUaGUgbGlzdCBvZiBzdGF0aW9ucyBvZmZlcmluZyB0aGlzIGRhdGEgbWF5IGJlIGluY29ycmVjdC5cbiAgKiBTb21ldGltZXMgYSBzdGF0aW9uIG9yIHRoZSBlbnRpcmUgZGF0YSBzZXJ2aWNlIGlzIHVuYXZhaWxhYmxlLlxuICAgIFdhaXQgYSB3aGlsZSBhbmQgdHJ5IGFnYWluLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuc3RhdGlvbklEIChTdGF0aW9uIElEKVxuc3RhdGlvbk5hbWUgKFN0YXRpb24gTmFtZSlcbnN0YXRlXG5kYXRlRXN0YWJsaXNoZWQgKERhdGUgRXN0YWJsaXNoZWQsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zaGVmSUQgKFNIRUYgSUQpXG5kZXBsb3ltZW50IChEZXBsb3ltZW50IERlc2lnbmF0aW9uKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5WaXMgKFZpc2liaWxpdHkgaW4gQWlyLCBuYXV0aWNhbF9taWxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9ub3NDb29wc01WX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9ub3NDb29wc01WX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL25vc0Nvb3BzTVYvaW5kZXguanNvbiIsICJodHRwOi8vdGlkZXNhbmRjdXJyZW50cy5ub2FhLmdvdi8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3Mvbm9zQ29vcHNNVi5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9bm9zQ29vcHNNViZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIE5PUyBDTy1PUFMiLCAibm9zQ29vcHNNViJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ub3NDb29wc01XVC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm9zQ29vcHNNV1QiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm9zQ29vcHNNV1QuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiTk9TIENPLU9QUyBNZXRlb3JvbG9naWNhbCBEYXRhLCBXYXRlciBUZW1wZXJhdHVyZSwgNi1NaW51dGUiLCAiVGhpcyBkYXRhc2V0IGhhcyBXYXRlciBUZW1wZXJhdHVyZSBkYXRhIGZyb20gTk9BQSBOT1MgQ2VudGVyIGZvciBPcGVyYXRpb25hbFxuT2NlYW5vZ3JhcGhpYyBQcm9kdWN0cyBhbmQgU2VydmljZXMgKENPLU9QUykuXG5cbldBUk5JTkc6IFRoZXNlIHByZWxpbWluYXJ5IGRhdGEgaGF2ZSBub3QgYmVlbiBzdWJqZWN0ZWQgdG8gdGhlIE5hdGlvbmFsIE9jZWFuXG5TZXJ2aWNlcyAoTk9TKSBRdWFsaXR5IENvbnRyb2wgcHJvY2VkdXJlcywgYW5kIGRvIG5vdCBuZWNlc3NhcmlseSBtZWV0IHRoZVxuY3JpdGVyaWEgYW5kIHN0YW5kYXJkcyBvZiBvZmZpY2lhbCBOT1MgZGF0YS4gVGhleSBhcmUgcmVsZWFzZWQgZm9yIGxpbWl0ZWRcbnB1YmxpYyB1c2Ugd2l0aCBhcHByb3ByaWF0ZSBjYXV0aW9uLlxuXG5XQVJOSU5HOlxuKiBRdWVyaWVzIGZvciBkYXRhIE1VU1QgaW5jbHVkZSBzdGF0aW9uSUQ9IGFuZCB0aW1lPj0uXG4qIFF1ZXJpZXMgVVNVQUxMWSBpbmNsdWRlIHRpbWU8PSAodGhlIGRlZmF1bHQgZW5kIHRpbWUgY29ycmVzcG9uZHMgdG8gJ25vdycpLlxuKiBRdWVyaWVzIE1VU1QgYmUgZm9yIGxlc3MgdGhhbiAzMCBkYXlzIHdvcnRoIG9mIGRhdGEuXG4qIFRoZSBkYXRhIHNvdXJjZSBpc24ndCBjb21wbGV0ZWx5IHJlbGlhYmxlLiBJZiB5b3VyIHJlcXVlc3QgcmV0dXJucyBubyBkYXRhXG4gIHdoZW4geW91IHRoaW5rIGl0IHNob3VsZDpcbiAgKiBUcnkgcmV2aXNpbmcgdGhlIHJlcXVlc3QgKGUuZy4sIGEgZGlmZmVyZW50IHRpbWUgcmFuZ2UpLlxuICAqIFRoZSBsaXN0IG9mIHN0YXRpb25zIG9mZmVyaW5nIHRoaXMgZGF0YSBtYXkgYmUgaW5jb3JyZWN0LlxuICAqIFNvbWV0aW1lcyBhIHN0YXRpb24gb3IgdGhlIGVudGlyZSBkYXRhIHNlcnZpY2UgaXMgdW5hdmFpbGFibGUuXG4gICAgV2FpdCBhIHdoaWxlIGFuZCB0cnkgYWdhaW4uXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5zdGF0aW9uSUQgKFN0YXRpb24gSUQpXG5zdGF0aW9uTmFtZSAoU3RhdGlvbiBOYW1lKVxuc3RhdGVcbmRhdGVFc3RhYmxpc2hlZCAoRGF0ZSBFc3RhYmxpc2hlZCwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnNoZWZJRCAoU0hFRiBJRClcbmRlcGxveW1lbnQgKERlcGxveW1lbnQgRGVzaWduYXRpb24pXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRjcCAoRGF0YSBDb2xsZWN0aW9uIFBsYXRmb3JtKVxuLi4uICg1IG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL25vc0Nvb3BzTVdUX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9ub3NDb29wc01XVF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9ub3NDb29wc01XVC9pbmRleC5qc29uIiwgImh0dHA6Ly90aWRlc2FuZGN1cnJlbnRzLm5vYWEuZ292LyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9ub3NDb29wc01XVC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9bm9zQ29vcHNNV1Qmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBOT1MgQ08tT1BTIiwgIm5vc0Nvb3BzTVdUIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25vc0Nvb3BzTVcuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25vc0Nvb3BzTVciLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm9zQ29vcHNNVy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOT1MgQ08tT1BTIE1ldGVvcm9sb2dpY2FsIERhdGEsIFdpbmQsIDYtTWludXRlIiwgIlRoaXMgZGF0YXNldCBoYXMgV2luZCBkYXRhIGZyb20gTk9BQSBOT1MgQ2VudGVyIGZvciBPcGVyYXRpb25hbCBPY2Vhbm9ncmFwaGljXG5Qcm9kdWN0cyBhbmQgU2VydmljZXMgKENPLU9QUykuXG5cbldBUk5JTkc6IFRoZXNlIHByZWxpbWluYXJ5IGRhdGEgaGF2ZSBub3QgYmVlbiBzdWJqZWN0ZWQgdG8gdGhlIE5hdGlvbmFsIE9jZWFuXG5TZXJ2aWNlcyAoTk9TKSBRdWFsaXR5IENvbnRyb2wgcHJvY2VkdXJlcywgYW5kIGRvIG5vdCBuZWNlc3NhcmlseSBtZWV0IHRoZVxuY3JpdGVyaWEgYW5kIHN0YW5kYXJkcyBvZiBvZmZpY2lhbCBOT1MgZGF0YS4gVGhleSBhcmUgcmVsZWFzZWQgZm9yIGxpbWl0ZWRcbnB1YmxpYyB1c2Ugd2l0aCBhcHByb3ByaWF0ZSBjYXV0aW9uLlxuXG5XQVJOSU5HOlxuKiBRdWVyaWVzIGZvciBkYXRhIE1VU1QgaW5jbHVkZSBzdGF0aW9uSUQ9IGFuZCB0aW1lPj0uXG4qIFF1ZXJpZXMgVVNVQUxMWSBpbmNsdWRlIHRpbWU8PSAodGhlIGRlZmF1bHQgZW5kIHRpbWUgY29ycmVzcG9uZHMgdG8gJ25vdycpLlxuKiBRdWVyaWVzIE1VU1QgYmUgZm9yIGxlc3MgdGhhbiAzMCBkYXlzIHdvcnRoIG9mIGRhdGEuXG4qIFRoZSBkYXRhIHNvdXJjZSBpc24ndCBjb21wbGV0ZWx5IHJlbGlhYmxlLiBJZiB5b3VyIHJlcXVlc3QgcmV0dXJucyBubyBkYXRhXG4gIHdoZW4geW91IHRoaW5rIGl0IHNob3VsZDpcbiAgKiBUcnkgcmV2aXNpbmcgdGhlIHJlcXVlc3QgKGUuZy4sIGEgZGlmZmVyZW50IHRpbWUgcmFuZ2UpLlxuICAqIFRoZSBsaXN0IG9mIHN0YXRpb25zIG9mZmVyaW5nIHRoaXMgZGF0YSBtYXkgYmUgaW5jb3JyZWN0LlxuICAqIFNvbWV0aW1lcyBhIHN0YXRpb24gb3IgdGhlIGVudGlyZSBkYXRhIHNlcnZpY2UgaXMgdW5hdmFpbGFibGUuXG4gICAgV2FpdCBhIHdoaWxlIGFuZCB0cnkgYWdhaW4uXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5zdGF0aW9uSUQgKFN0YXRpb24gSUQpXG5zdGF0aW9uTmFtZSAoU3RhdGlvbiBOYW1lKVxuc3RhdGVcbmRhdGVFc3RhYmxpc2hlZCAoRGF0ZSBFc3RhYmxpc2hlZCwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnNoZWZJRCAoU0hFRiBJRClcbmRlcGxveW1lbnQgKERlcGxveW1lbnQgRGVzaWduYXRpb24pXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRjcCAoRGF0YSBDb2xsZWN0aW9uIFBsYXRmb3JtKVxuLi4uICg2IG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL25vc0Nvb3BzTVdfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL25vc0Nvb3BzTVdfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vbm9zQ29vcHNNVy9pbmRleC5qc29uIiwgImh0dHA6Ly90aWRlc2FuZGN1cnJlbnRzLm5vYWEuZ292LyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9ub3NDb29wc01XLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1ub3NDb29wc01XJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgTk9TIENPLU9QUyIsICJub3NDb29wc01XIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25vc0Nvb3BzV0xUUEhMLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ub3NDb29wc1dMVFBITCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ub3NDb29wc1dMVFBITC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOT1MgQ08tT1BTIFdhdGVyIExldmVsIERhdGEsIEhpZ2ggTG93IFRpZGUgUHJlZGljdGlvbiIsICJUaGlzIGRhdGFzZXQgaGFzIEhpZ2ggTG93IFRpZGUgUHJlZGljdGlvbnMgZnJvbSBOT0FBIE5PUyBDZW50ZXIgZm9yIE9wZXJhdGlvbmFsXG5PY2Vhbm9ncmFwaGljIFByb2R1Y3RzIGFuZCBTZXJ2aWNlcyAoQ08tT1BTKS5cblxuVGhlIG9mZmljaWFsIFRpZGUgYW5kIFRpZGFsIEN1cnJlbnQgcHJlZGljdGlvbiB0YWJsZXMgYXJlIHB1Ymxpc2hlZCBhbm51YWxseSBvblxuT2N0b2JlciAxLCBmb3IgdGhlIGZvbGxvd2luZyBjYWxlbmRhciB5ZWFyLiBUaWRlIGFuZCBUaWRhbCBDdXJyZW50IHByZWRpY3Rpb25zXG5nZW5lcmF0ZWQgcHJpb3IgdG8gdGhlIHB1Ymxpc2hpbmcgZGF0ZSBvZiB0aGUgb2ZmaWNpYWwgdGFibGVzIGFyZSBzdWJqZWN0IHRvXG5jaGFuZ2UuIFRoZSBlbmNsb3NlZCBkYXRhIGFyZSBiYXNlZCB1cG9uIHRoZSBsYXRlc3QgaW5mb3JtYXRpb24gYXZhaWxhYmxlIGFzIG9mXG50aGUgZGF0ZSBvZiB5b3VyIHJlcXVlc3QuIFRpZGUgYW5kIFRpZGFsIEN1cnJlbnQgcHJlZGljdGlvbnMgZ2VuZXJhdGVkIG1heVxuZGlmZmVyIGZyb20gdGhlIG9mZmljaWFsIHByZWRpY3Rpb25zIGlmIGluZm9ybWF0aW9uIGZvciB0aGUgc3RhdGlvbiByZXF1ZXN0ZWRcbmhhcyBiZWVuIHVwZGF0ZWQgc2luY2UgdGhlIHB1Ymxpc2hpbmcgZGF0ZSBvZiB0aGUgb2ZmaWNpYWwgdGFibGVzLlxuXG5XQVJOSU5HOlxuKiBRdWVyaWVzIGZvciBkYXRhIE1VU1QgaW5jbHVkZSBzdGF0aW9uSUQ9LCB0aW1lPj0gYW5kIHRpbWU8PS5cbiAgUXVlcmllcyBNVVNUIGJlIGZvciBsZXNzIHRoYW4gMzAgZGF5cyB3b3J0aCBvZiBkYXRhLlxuKiBUaGlzIGRhdGFzZXQgb25seSByZXR1cm5zIGRhdGEgZm9yIHRoZSBNTExXIChNZWFuIExvd2VyLUxvdyBXYXRlcikgZGF0dW0uXG4qIFRoZSBkYXRhIHNvdXJjZSBpc24ndCBjb21wbGV0ZWx5IHJlbGlhYmxlLiBJZiB5b3VyIHJlcXVlc3QgcmV0dXJucyBubyBkYXRhXG4gIHdoZW4geW91IHRoaW5rIGl0IHNob3VsZDpcbiAgKiBUcnkgcmV2aXNpbmcgdGhlIHJlcXVlc3QgKGUuZy4sIGEgZGlmZmVyZW50IHRpbWUgcmFuZ2UpLlxuICAqIFRoZSBsaXN0IG9mIHN0YXRpb25zIG9mZmVyaW5nIHRoaXMgZGF0YSBtYXkgYmUgaW5jb3JyZWN0LlxuICAqIFNvbWV0aW1lcyBhIHN0YXRpb24gb3IgdGhlIGVudGlyZSBkYXRhIHNlcnZpY2UgaXMgdW5hdmFpbGFibGUuXG4gICAgV2FpdCBhIHdoaWxlIGFuZCB0cnkgYWdhaW4uXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5zdGF0aW9uSUQgKFN0YXRpb24gSUQpXG5zdGF0aW9uTmFtZSAoU3RhdGlvbiBOYW1lKVxuc3RhdGVcbmRhdGVFc3RhYmxpc2hlZCAoRGF0ZSBFc3RhYmxpc2hlZCwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnNoZWZJRCAoU0hFRiBJRClcbmRlcGxveW1lbnQgKERlcGxveW1lbnQgRGVzaWduYXRpb24pXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbi4uLiAoNSBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9ub3NDb29wc1dMVFBITF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvbm9zQ29vcHNXTFRQSExfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vbm9zQ29vcHNXTFRQSEwvaW5kZXguanNvbiIsICJodHRwOi8vdGlkZXNhbmRjdXJyZW50cy5ub2FhLmdvdi8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3Mvbm9zQ29vcHNXTFRQSEwucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPW5vc0Nvb3BzV0xUUEhMJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgTk9TIENPLU9QUyIsICJub3NDb29wc1dMVFBITCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ub3NDb29wc1dMUjEuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25vc0Nvb3BzV0xSMSIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ub3NDb29wc1dMUjEuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiTk9TIENPLU9QUyBXYXRlciBMZXZlbCBEYXRhLCBQcmVsaW1pbmFyeSwgMS1NaW51dGUiLCAiVGhpcyBkYXRhc2V0IGhhcyByZWNlbnQsIHByZWxpbWluYXJ5IChub3QgcXVhbGl0eS1jb250cm9sbGVkKSwgMS1taW51dGUsIHdhdGVyIGxldmVsXG4odGlkZSkgZGF0YSBmcm9tIE5PQUEgTk9TIENlbnRlciBmb3IgT3BlcmF0aW9uYWwgT2NlYW5vZ3JhcGhpYyBQcm9kdWN0cyBhbmQgU2VydmljZXNcbihDTy1PUFMpLlxuXG5XQVJOSU5HOiBUaGVzZSByYXcgZGF0YSBoYXZlIG5vdCBiZWVuIHN1YmplY3RlZCB0byB0aGUgTmF0aW9uYWwgT2NlYW4gU2VydmljZSdzXG5xdWFsaXR5IGNvbnRyb2wgb3IgcXVhbGl0eSBhc3N1cmFuY2UgcHJvY2VkdXJlcyBhbmQgZG8gbm90IG1lZXQgdGhlIGNyaXRlcmlhIGFuZFxuc3RhbmRhcmRzIG9mIG9mZmljaWFsIE5hdGlvbmFsIE9jZWFuIFNlcnZpY2UgZGF0YS4gVGhleSBhcmUgcmVsZWFzZWQgZm9yIGxpbWl0ZWRcbnB1YmxpYyB1c2UgYXMgcHJlbGltaW5hcnkgZGF0YSB0byBiZSB1c2VkIG9ubHkgd2l0aCBhcHByb3ByaWF0ZSBjYXV0aW9uLlxuXG5XQVJOSU5HOlxuKiBRdWVyaWVzIGZvciBkYXRhIE1VU1QgaW5jbHVkZSBzdGF0aW9uSUQ9LCBkYXR1bT0sIGFuZCB0aW1lPj0uXG4qIFF1ZXJpZXMgZm9yIGRhdGEgVVNVQUxMWSBpbmNsdWRlIHRpbWU8PS5cbiogUXVlcmllcyBNVVNUIGJlIGZvciBsZXNzIHRoYW4gMzAgZGF5cyB3b3J0aCBvZiBkYXRhLlxuICBUaGUgZGVmYXVsdCB0aW1lPD0gdmFsdWUgY29ycmVzcG9uZHMgdG8gJ25vdycuXG4qIERpZmZlcmVudCBzdGF0aW9ucyBzdXBwb3J0IGRpZmZlcmVudCBkYXR1bXMuXG4gIFVzZSBFUkREQVAncyBTdWJzZXQgd2ViIHBhZ2UgdG8gZmluZCBvdXQgd2hpY2ggZGF0dW1zIGEgZ2l2ZW4gc3RhdGlvbiBzdXBwb3J0cy5cbiogVGhlIGRhdGEgc291cmNlIGlzbid0IGNvbXBsZXRlbHkgcmVsaWFibGUuIElmIHlvdXIgcmVxdWVzdCByZXR1cm5zIG5vIGRhdGFcbiAgd2hlbiB5b3UgdGhpbmsgaXQgc2hvdWxkOlxuICAqIE1ha2Ugc3VyZSB0aGUgc3RhdGlvbiB5b3Ugc3BlY2lmaWVkIHN1cHBvcnRzIHRoZSBkYXR1bSB5b3Ugc3BlY2lmaWVkLlxuICAqIFRyeSByZXZpc2luZyB0aGUgcmVxdWVzdCAoZS5nLiwgYSBkaWZmZXJlbnQgZGF0dW0gb3IgYSBkaWZmZXJlbnQgdGltZSByYW5nZSkuXG4gICogVGhlIGxpc3Qgb2Ygc3RhdGlvbnMgb2ZmZXJpbmcgdGhpcyBkYXRhIChvciB0aGUgbGlzdCBvZiBkYXR1bXMpIG1heSBiZSBpbmNvcnJlY3QuXG4gICogU29tZXRpbWVzIGEgc3RhdGlvbiBvciB0aGUgZW50aXJlIGRhdGEgc2VydmljZSBpcyB1bmF2YWlsYWJsZS5cbiAgICBXYWl0IGEgd2hpbGUgYW5kIHRyeSBhZ2Fpbi5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbnN0YXRpb25JRCAoU3RhdGlvbiBJRClcbnN0YXRpb25OYW1lIChTdGF0aW9uIE5hbWUpXG5zdGF0ZVxuZGF0ZUVzdGFibGlzaGVkIChEYXRlIEVzdGFibGlzaGVkLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuc2hlZklEIChTSEVGIElEKVxuLi4uICg4IG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL25vc0Nvb3BzV0xSMV9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvbm9zQ29vcHNXTFIxX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL25vc0Nvb3BzV0xSMS9pbmRleC5qc29uIiwgImh0dHA6Ly90aWRlc2FuZGN1cnJlbnRzLm5vYWEuZ292LyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9ub3NDb29wc1dMUjEucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPW5vc0Nvb3BzV0xSMSZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIE5PUyBDTy1PUFMiLCAibm9zQ29vcHNXTFIxIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25vc0Nvb3BzV0xSNi5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm9zQ29vcHNXTFI2IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25vc0Nvb3BzV0xSNi5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOT1MgQ08tT1BTIFdhdGVyIExldmVsIERhdGEsIFByZWxpbWluYXJ5LCA2LU1pbnV0ZSIsICJUaGlzIGRhdGFzZXQgaGFzIHJlY2VudCwgcHJlbGltaW5hcnkgKG5vdCBxdWFsaXR5LWNvbnRyb2xsZWQpLCA2LW1pbnV0ZSwgd2F0ZXIgbGV2ZWxcbih0aWRlKSBkYXRhIGZyb20gTk9BQSBOT1MgQ2VudGVyIGZvciBPcGVyYXRpb25hbCBPY2Vhbm9ncmFwaGljIFByb2R1Y3RzIGFuZCBTZXJ2aWNlc1xuKENPLU9QUykuXG5cbldBUk5JTkc6IFRoZXNlIHJhdyBkYXRhIGhhdmUgbm90IGJlZW4gc3ViamVjdGVkIHRvIHRoZSBOYXRpb25hbCBPY2VhbiBTZXJ2aWNlJ3NcbnF1YWxpdHkgY29udHJvbCBvciBxdWFsaXR5IGFzc3VyYW5jZSBwcm9jZWR1cmVzIGFuZCBkbyBub3QgbWVldCB0aGUgY3JpdGVyaWEgYW5kXG5zdGFuZGFyZHMgb2Ygb2ZmaWNpYWwgTmF0aW9uYWwgT2NlYW4gU2VydmljZSBkYXRhLiBUaGV5IGFyZSByZWxlYXNlZCBmb3IgbGltaXRlZFxucHVibGljIHVzZSBhcyBwcmVsaW1pbmFyeSBkYXRhIHRvIGJlIHVzZWQgb25seSB3aXRoIGFwcHJvcHJpYXRlIGNhdXRpb24uXG5cbldBUk5JTkc6XG4qIFF1ZXJpZXMgZm9yIGRhdGEgTVVTVCBpbmNsdWRlIHN0YXRpb25JRD0sIGRhdHVtPSwgdGltZT49LlxuKiBRdWVyaWVzIGZvciBkYXRhIFVTVUFMTFkgaW5jbHVkZSB0aW1lPD0uXG4qIFF1ZXJpZXMgTVVTVCBiZSBmb3IgbGVzcyB0aGFuIDMwIGRheXMgd29ydGggb2YgZGF0YS5cbiAgVGhlIGRlZmF1bHQgdGltZTw9IHZhbHVlIGNvcnJlc3BvbmRzIHRvICdub3cnLlxuKiBEaWZmZXJlbnQgc3RhdGlvbnMgc3VwcG9ydCBkaWZmZXJlbnQgZGF0dW1zLlxuICBVc2UgRVJEREFQJ3MgU3Vic2V0IHdlYiBwYWdlIHRvIGZpbmQgb3V0IHdoaWNoIGRhdHVtcyBhIGdpdmVuIHN0YXRpb24gc3VwcG9ydHMuXG4qIFRoZSBkYXRhIHNvdXJjZSBpc24ndCBjb21wbGV0ZWx5IHJlbGlhYmxlLiBJZiB5b3VyIHJlcXVlc3QgcmV0dXJucyBubyBkYXRhXG4gIHdoZW4geW91IHRoaW5rIGl0IHNob3VsZDpcbiAgKiBNYWtlIHN1cmUgdGhlIHN0YXRpb24geW91IHNwZWNpZmllZCBzdXBwb3J0cyB0aGUgZGF0dW0geW91IHNwZWNpZmllZC5cbiAgKiBUcnkgcmV2aXNpbmcgdGhlIHJlcXVlc3QgKGUuZy4sIGEgZGlmZmVyZW50IGRhdHVtIG9yIGEgZGlmZmVyZW50IHRpbWUgcmFuZ2UpLlxuICAqIFRoZSBsaXN0IG9mIHN0YXRpb25zIG9mZmVyaW5nIHRoaXMgZGF0YSAob3IgdGhlIGxpc3Qgb2YgZGF0dW1zKSBtYXkgYmUgaW5jb3JyZWN0LlxuICAqIFNvbWV0aW1lcyBhIHN0YXRpb24gb3IgdGhlIGVudGlyZSBkYXRhIHNlcnZpY2UgaXMgdW5hdmFpbGFibGUuXG4gICAgV2FpdCBhIHdoaWxlIGFuZCB0cnkgYWdhaW4uXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5zdGF0aW9uSUQgKFN0YXRpb24gSUQpXG5zdGF0aW9uTmFtZSAoU3RhdGlvbiBOYW1lKVxuc3RhdGVcbmRhdGVFc3RhYmxpc2hlZCAoRGF0ZSBFc3RhYmxpc2hlZCwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnNoZWZJRCAoU0hFRiBJRClcbi4uLiAoMTMgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvbm9zQ29vcHNXTFI2X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9ub3NDb29wc1dMUjZfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vbm9zQ29vcHNXTFI2L2luZGV4Lmpzb24iLCAiaHR0cDovL3RpZGVzYW5kY3VycmVudHMubm9hYS5nb3YvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL25vc0Nvb3BzV0xSNi5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9bm9zQ29vcHNXTFI2JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgTk9TIENPLU9QUyIsICJub3NDb29wc1dMUjYiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm9zQ29vcHNXTFRQNi5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm9zQ29vcHNXTFRQNiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ub3NDb29wc1dMVFA2LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5PUyBDTy1PUFMgV2F0ZXIgTGV2ZWwgRGF0YSwgVGlkZSBQcmVkaWN0aW9uLCA2LU1pbnV0ZSIsICJUaGlzIGRhdGFzZXQgaGFzIEhpZ2ggTG93IFRpZGUgUHJlZGljdGlvbnMgZnJvbSBOT0FBIE5PUyBDZW50ZXIgZm9yIE9wZXJhdGlvbmFsXG5PY2Vhbm9ncmFwaGljIFByb2R1Y3RzIGFuZCBTZXJ2aWNlcyAoQ08tT1BTKS5cblxuVGhlIG9mZmljaWFsIFRpZGUgYW5kIFRpZGFsIEN1cnJlbnQgcHJlZGljdGlvbiB0YWJsZXMgYXJlIHB1Ymxpc2hlZCBhbm51YWxseSBvblxuT2N0b2JlciAxLCBmb3IgdGhlIGZvbGxvd2luZyBjYWxlbmRhciB5ZWFyLiBUaWRlIGFuZCBUaWRhbCBDdXJyZW50IHByZWRpY3Rpb25zXG5nZW5lcmF0ZWQgcHJpb3IgdG8gdGhlIHB1Ymxpc2hpbmcgZGF0ZSBvZiB0aGUgb2ZmaWNpYWwgdGFibGVzIGFyZSBzdWJqZWN0IHRvXG5jaGFuZ2UuIFRoZSBlbmNsb3NlZCBkYXRhIGFyZSBiYXNlZCB1cG9uIHRoZSBsYXRlc3QgaW5mb3JtYXRpb24gYXZhaWxhYmxlIGFzIG9mXG50aGUgZGF0ZSBvZiB5b3VyIHJlcXVlc3QuIFRpZGUgYW5kIFRpZGFsIEN1cnJlbnQgcHJlZGljdGlvbnMgZ2VuZXJhdGVkIG1heVxuZGlmZmVyIGZyb20gdGhlIG9mZmljaWFsIHByZWRpY3Rpb25zIGlmIGluZm9ybWF0aW9uIGZvciB0aGUgc3RhdGlvbiByZXF1ZXN0ZWRcbmhhcyBiZWVuIHVwZGF0ZWQgc2luY2UgdGhlIHB1Ymxpc2hpbmcgZGF0ZSBvZiB0aGUgb2ZmaWNpYWwgdGFibGVzLlxuXG5XQVJOSU5HOlxuKiBRdWVyaWVzIGZvciBkYXRhIE1VU1QgaW5jbHVkZSBzdGF0aW9uSUQ9LCB0aW1lPj0gYW5kIHRpbWU8PS5cbiAgUXVlcmllcyBNVVNUIGJlIGZvciBsZXNzIHRoYW4gMzAgZGF5cyB3b3J0aCBvZiBkYXRhLlxuKiBUaGlzIGRhdGFzZXQgb25seSByZXR1cm5zIGRhdGEgZm9yIHRoZSBNTExXIChNZWFuIExvd2VyLUxvdyBXYXRlcikgZGF0dW0uXG4qIFRoZSBkYXRhIHNvdXJjZSBpc24ndCBjb21wbGV0ZWx5IHJlbGlhYmxlLiBJZiB5b3VyIHJlcXVlc3QgcmV0dXJucyBubyBkYXRhXG4gIHdoZW4geW91IHRoaW5rIGl0IHNob3VsZDpcbiAgKiBUcnkgcmV2aXNpbmcgdGhlIHJlcXVlc3QgKGUuZy4sIGEgZGlmZmVyZW50IHRpbWUgcmFuZ2UpLlxuICAqIFRoZSBsaXN0IG9mIHN0YXRpb25zIG9mZmVyaW5nIHRoaXMgZGF0YSBtYXkgYmUgaW5jb3JyZWN0LlxuICAqIFNvbWV0aW1lcyBhIHN0YXRpb24gb3IgdGhlIGVudGlyZSBkYXRhIHNlcnZpY2UgaXMgdW5hdmFpbGFibGUuXG4gICAgV2FpdCBhIHdoaWxlIGFuZCB0cnkgYWdhaW4uXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5zdGF0aW9uSUQgKFN0YXRpb24gSUQpXG5zdGF0aW9uTmFtZSAoU3RhdGlvbiBOYW1lKVxuc3RhdGVcbmRhdGVFc3RhYmxpc2hlZCAoRGF0ZSBFc3RhYmxpc2hlZCwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnNoZWZJRCAoU0hFRiBJRClcbmRlcGxveW1lbnQgKERlcGxveW1lbnQgRGVzaWduYXRpb24pXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbi4uLiAoNCBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9ub3NDb29wc1dMVFA2X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9ub3NDb29wc1dMVFA2X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL25vc0Nvb3BzV0xUUDYvaW5kZXguanNvbiIsICJodHRwOi8vdGlkZXNhbmRjdXJyZW50cy5ub2FhLmdvdi8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3Mvbm9zQ29vcHNXTFRQNi5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9bm9zQ29vcHNXTFRQNiZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIE5PUyBDTy1PUFMiLCAibm9zQ29vcHNXTFRQNiJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ub3NDb29wc1dMVFA2MC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm9zQ29vcHNXTFRQNjAiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm9zQ29vcHNXTFRQNjAuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiTk9TIENPLU9QUyBXYXRlciBMZXZlbCBEYXRhLCBUaWRlIFByZWRpY3Rpb24sIDYwLU1pbnV0ZSIsICJUaGlzIGRhdGFzZXQgaGFzIEhpZ2ggTG93IFRpZGUgUHJlZGljdGlvbnMgZnJvbSBOT0FBIE5PUyBDZW50ZXIgZm9yIE9wZXJhdGlvbmFsXG5PY2Vhbm9ncmFwaGljIFByb2R1Y3RzIGFuZCBTZXJ2aWNlcyAoQ08tT1BTKS5cblxuVGhlIG9mZmljaWFsIFRpZGUgYW5kIFRpZGFsIEN1cnJlbnQgcHJlZGljdGlvbiB0YWJsZXMgYXJlIHB1Ymxpc2hlZCBhbm51YWxseSBvblxuT2N0b2JlciAxLCBmb3IgdGhlIGZvbGxvd2luZyBjYWxlbmRhciB5ZWFyLiBUaWRlIGFuZCBUaWRhbCBDdXJyZW50IHByZWRpY3Rpb25zXG5nZW5lcmF0ZWQgcHJpb3IgdG8gdGhlIHB1Ymxpc2hpbmcgZGF0ZSBvZiB0aGUgb2ZmaWNpYWwgdGFibGVzIGFyZSBzdWJqZWN0IHRvXG5jaGFuZ2UuIFRoZSBlbmNsb3NlZCBkYXRhIGFyZSBiYXNlZCB1cG9uIHRoZSBsYXRlc3QgaW5mb3JtYXRpb24gYXZhaWxhYmxlIGFzIG9mXG50aGUgZGF0ZSBvZiB5b3VyIHJlcXVlc3QuIFRpZGUgYW5kIFRpZGFsIEN1cnJlbnQgcHJlZGljdGlvbnMgZ2VuZXJhdGVkIG1heVxuZGlmZmVyIGZyb20gdGhlIG9mZmljaWFsIHByZWRpY3Rpb25zIGlmIGluZm9ybWF0aW9uIGZvciB0aGUgc3RhdGlvbiByZXF1ZXN0ZWRcbmhhcyBiZWVuIHVwZGF0ZWQgc2luY2UgdGhlIHB1Ymxpc2hpbmcgZGF0ZSBvZiB0aGUgb2ZmaWNpYWwgdGFibGVzLlxuXG5XQVJOSU5HOlxuKiBRdWVyaWVzIGZvciBkYXRhIE1VU1QgaW5jbHVkZSBzdGF0aW9uSUQ9LCB0aW1lPj0gYW5kIHRpbWU8PS5cbiAgUXVlcmllcyBNVVNUIGJlIGZvciBsZXNzIHRoYW4gMzAgZGF5cyB3b3J0aCBvZiBkYXRhLlxuKiBUaGlzIGRhdGFzZXQgb25seSByZXR1cm5zIGRhdGEgZm9yIHRoZSBNTExXIChNZWFuIExvd2VyLUxvdyBXYXRlcikgZGF0dW0uXG4qIFRoZSBkYXRhIHNvdXJjZSBpc24ndCBjb21wbGV0ZWx5IHJlbGlhYmxlLiBJZiB5b3VyIHJlcXVlc3QgcmV0dXJucyBubyBkYXRhXG4gIHdoZW4geW91IHRoaW5rIGl0IHNob3VsZDpcbiAgKiBUcnkgcmV2aXNpbmcgdGhlIHJlcXVlc3QgKGUuZy4sIGEgZGlmZmVyZW50IHRpbWUgcmFuZ2UpLlxuICAqIFRoZSBsaXN0IG9mIHN0YXRpb25zIG9mZmVyaW5nIHRoaXMgZGF0YSBtYXkgYmUgaW5jb3JyZWN0LlxuICAqIFNvbWV0aW1lcyBhIHN0YXRpb24gb3IgdGhlIGVudGlyZSBkYXRhIHNlcnZpY2UgaXMgdW5hdmFpbGFibGUuXG4gICAgV2FpdCBhIHdoaWxlIGFuZCB0cnkgYWdhaW4uXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5zdGF0aW9uSUQgKFN0YXRpb24gSUQpXG5zdGF0aW9uTmFtZSAoU3RhdGlvbiBOYW1lKVxuc3RhdGVcbmRhdGVFc3RhYmxpc2hlZCAoRGF0ZSBFc3RhYmxpc2hlZCwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnNoZWZJRCAoU0hFRiBJRClcbmRlcGxveW1lbnQgKERlcGxveW1lbnQgRGVzaWduYXRpb24pXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbi4uLiAoNCBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9ub3NDb29wc1dMVFA2MF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvbm9zQ29vcHNXTFRQNjBfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vbm9zQ29vcHNXTFRQNjAvaW5kZXguanNvbiIsICJodHRwOi8vdGlkZXNhbmRjdXJyZW50cy5ub2FhLmdvdi8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3Mvbm9zQ29vcHNXTFRQNjAucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPW5vc0Nvb3BzV0xUUDYwJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgTk9TIENPLU9QUyIsICJub3NDb29wc1dMVFA2MCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ub3NDb29wc1dMVjYuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25vc0Nvb3BzV0xWNiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ub3NDb29wc1dMVjYuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiTk9TIENPLU9QUyBXYXRlciBMZXZlbCBEYXRhLCBWZXJpZmllZCwgNi1NaW51dGUiLCAiVGhpcyBkYXRhc2V0IGhhcyB2ZXJpZmllZCAocXVhbGl0eS1jb250cm9sbGVkKSwgNi1taW51dGUsIHdhdGVyIGxldmVsICh0aWRlKVxuZGF0YSBmcm9tIE5PQUEgTk9TIENlbnRlciBmb3IgT3BlcmF0aW9uYWwgT2NlYW5vZ3JhcGhpYyBQcm9kdWN0cyBhbmQgU2VydmljZXNcbihDTy1PUFMpLiAgVGhpcyBpcyBhIGRlbGF5ZWQgZGF0YXNldCwgbm90IGEgbmVhci1yZWFsLXRpbWUgZGF0YXNldC5cblxuV0FSTklORzpcbiogUXVlcmllcyBmb3IgZGF0YSBNVVNUIGluY2x1ZGUgc3RhdGlvbklEPSwgZGF0dW09LCB0aW1lPj0sIGFuZCB0aW1lPD0uXG4qIFF1ZXJpZXMgTVVTVCBiZSBmb3IgbGVzcyB0aGFuIDMwIGRheXMgd29ydGggb2YgZGF0YS5cbiogRGlmZmVyZW50IHN0YXRpb25zIHN1cHBvcnQgZGlmZmVyZW50IGRhdHVtcy5cbiAgVXNlIEVSRERBUCdzIFN1YnNldCB3ZWIgcGFnZSB0byBmaW5kIG91dCB3aGljaCBkYXR1bXMgYSBnaXZlbiBzdGF0aW9uIHN1cHBvcnRzLlxuKiBUaGUgZGF0YSBzb3VyY2UgaXNuJ3QgY29tcGxldGVseSByZWxpYWJsZS4gSWYgeW91ciByZXF1ZXN0IHJldHVybnMgbm8gZGF0YVxuICB3aGVuIHlvdSB0aGluayBpdCBzaG91bGQ6XG4gICogTWFrZSBzdXJlIHRoZSBzdGF0aW9uIHlvdSBzcGVjaWZpZWQgc3VwcG9ydHMgdGhlIGRhdHVtIHlvdSBzcGVjaWZpZWQuXG4gICogVHJ5IHJldmlzaW5nIHRoZSByZXF1ZXN0IChlLmcuLCBhIGRpZmZlcmVudCBkYXR1bSBvciBhIGRpZmZlcmVudCB0aW1lIHJhbmdlKS5cbiAgKiBUaGUgbGlzdCBvZiBzdGF0aW9ucyBvZmZlcmluZyB0aGlzIGRhdGEgKG9yIHRoZSBsaXN0IG9mIGRhdHVtcykgbWF5IGJlIGluY29ycmVjdC5cbiAgKiBTb21ldGltZXMgYSBzdGF0aW9uIG9yIHRoZSBlbnRpcmUgZGF0YSBzZXJ2aWNlIGlzIHVuYXZhaWxhYmxlLlxuICAgIFdhaXQgYSB3aGlsZSBhbmQgdHJ5IGFnYWluLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuc3RhdGlvbklEIChTdGF0aW9uIElEKVxuc3RhdGlvbk5hbWUgKFN0YXRpb24gTmFtZSlcbnN0YXRlXG5kYXRlRXN0YWJsaXNoZWQgKERhdGUgRXN0YWJsaXNoZWQsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5zaGVmSUQgKFNIRUYgSUQpXG5kZXBsb3ltZW50IChEZXBsb3ltZW50IERlc2lnbmF0aW9uKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kYXR1bVxud2F0ZXJMZXZlbCAoV2F0ZXIgTGV2ZWwsIG0pXG5zaWdtYSAoU3RhbmRhcmQgRGV2aWF0aW9uIG9mIFdhdGVyIExldmVsLCBtKVxuLi4uICg0IG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL25vc0Nvb3BzV0xWNl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvbm9zQ29vcHNXTFY2X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL25vc0Nvb3BzV0xWNi9pbmRleC5qc29uIiwgImh0dHA6Ly90aWRlc2FuZGN1cnJlbnRzLm5vYWEuZ292LyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9ub3NDb29wc1dMVjYucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPW5vc0Nvb3BzV0xWNiZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIE5PUyBDTy1PUFMiLCAibm9zQ29vcHNXTFY2Il0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25vc0Nvb3BzV0xWSEwuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25vc0Nvb3BzV0xWSEwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm9zQ29vcHNXTFZITC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOT1MgQ08tT1BTIFdhdGVyIExldmVsIERhdGEsIFZlcmlmaWVkLCBIaWdoIExvdyIsICJUaGlzIGRhdGFzZXQgaGFzIHZlcmlmaWVkIChxdWFsaXR5LWNvbnRyb2xsZWQpLCBkYWlseSwgaGlnaCBsb3cgd2F0ZXIgbGV2ZWxcbih0aWRlKSBkYXRhIGZyb20gTk9BQSBOT1MgQ2VudGVyIGZvciBPcGVyYXRpb25hbCBPY2Vhbm9ncmFwaGljIFByb2R1Y3RzIGFuZFxuU2VydmljZXMgKENPLU9QUykuIFRoaXMgaXMgYSBkZWxheWVkIGRhdGFzZXQsIG5vdCBhIG5lYXItcmVhbC10aW1lIGRhdGFzZXQuXG5cbldBUk5JTkc6XG4qIFF1ZXJpZXMgZm9yIGRhdGEgTVVTVCBpbmNsdWRlIHN0YXRpb25JRD0sIGRhdHVtPSwgdGltZT49LCBhbmQgdGltZTw9LlxuKiBRdWVyaWVzIE1VU1QgYmUgZm9yIGxlc3MgdGhhbiAzMCBkYXlzIHdvcnRoIG9mIGRhdGEuXG4qIERpZmZlcmVudCBzdGF0aW9ucyBzdXBwb3J0IGRpZmZlcmVudCBkYXR1bXMuXG4gIFVzZSBFUkREQVAncyBTdWJzZXQgd2ViIHBhZ2UgdG8gZmluZCBvdXQgd2hpY2ggZGF0dW1zIGEgZ2l2ZW4gc3RhdGlvbiBzdXBwb3J0cy5cbiogVGhlIGRhdGEgc291cmNlIGlzbid0IGNvbXBsZXRlbHkgcmVsaWFibGUuIElmIHlvdXIgcmVxdWVzdCByZXR1cm5zIG5vIGRhdGFcbiAgd2hlbiB5b3UgdGhpbmsgaXQgc2hvdWxkOlxuICAqIE1ha2Ugc3VyZSB0aGUgc3RhdGlvbiB5b3Ugc3BlY2lmaWVkIHN1cHBvcnRzIHRoZSBkYXR1bSB5b3Ugc3BlY2lmaWVkLlxuICAqIFRyeSByZXZpc2luZyB0aGUgcmVxdWVzdCAoZS5nLiwgYSBkaWZmZXJlbnQgZGF0dW0gb3IgYSBkaWZmZXJlbnQgdGltZSByYW5nZSkuXG4gICogVGhlIGxpc3Qgb2Ygc3RhdGlvbnMgb2ZmZXJpbmcgdGhpcyBkYXRhIChvciB0aGUgbGlzdCBvZiBkYXR1bXMpIG1heSBiZSBpbmNvcnJlY3QuXG4gICogU29tZXRpbWVzIGEgc3RhdGlvbiBvciB0aGUgZW50aXJlIGRhdGEgc2VydmljZSBpcyB1bmF2YWlsYWJsZS5cbiAgICBXYWl0IGEgd2hpbGUgYW5kIHRyeSBhZ2Fpbi5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbnN0YXRpb25JRCAoU3RhdGlvbiBJRClcbnN0YXRpb25OYW1lIChTdGF0aW9uIE5hbWUpXG5zdGF0ZVxuZGF0ZUVzdGFibGlzaGVkIChEYXRlIEVzdGFibGlzaGVkLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuc2hlZklEIChTSEVGIElEKVxuZGVwbG95bWVudCAoRGVwbG95bWVudCBEZXNpZ25hdGlvbilcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGF0dW1cbndhdGVyTGV2ZWwgKFdhdGVyIExldmVsLCBtKVxudHlwZSAoRGVzaWduYXRpb24gb2YgV2F0ZXIgbGV2ZWwgSGVpZ2h0KVxuSSAoSW5mZXJyZWQgRmxhZylcbkwgKExpbWl0IEZsYWcpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvbm9zQ29vcHNXTFZITF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvbm9zQ29vcHNXTFZITF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9ub3NDb29wc1dMVkhML2luZGV4Lmpzb24iLCAiaHR0cDovL3RpZGVzYW5kY3VycmVudHMubm9hYS5nb3YvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL25vc0Nvb3BzV0xWSEwucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPW5vc0Nvb3BzV0xWSEwmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBOT1MgQ08tT1BTIiwgIm5vc0Nvb3BzV0xWSEwiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm9zQ29vcHNXTFY2MC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm9zQ29vcHNXTFY2MCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ub3NDb29wc1dMVjYwLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5PUyBDTy1PUFMgV2F0ZXIgTGV2ZWwgRGF0YSwgVmVyaWZpZWQsIEhvdXJseSIsICJUaGlzIGRhdGFzZXQgaGFzIHZlcmlmaWVkIChxdWFsaXR5LWNvbnRyb2xsZWQpLCBob3VybHksIHdhdGVyIGxldmVsICh0aWRlKSBkYXRhXG5mcm9tIE5PQUEgTk9TIENlbnRlciBmb3IgT3BlcmF0aW9uYWwgT2NlYW5vZ3JhcGhpYyBQcm9kdWN0cyBhbmQgU2VydmljZXNcbihDTy1PUFMpLiAgIFRoaXMgaXMgYSBkZWxheWVkIGRhdGFzZXQsIG5vdCBhIG5lYXItcmVhbC10aW1lIGRhdGFzZXQuXG5cbldBUk5JTkc6XG4qIFF1ZXJpZXMgZm9yIGRhdGEgTVVTVCBpbmNsdWRlIHN0YXRpb25JRD0sIGRhdHVtPSwgdGltZT49LCBhbmQgdGltZTw9LlxuKiBRdWVyaWVzIE1VU1QgYmUgZm9yIGxlc3MgdGhhbiAzMCBkYXlzIHdvcnRoIG9mIGRhdGEuXG4qIERpZmZlcmVudCBzdGF0aW9ucyBzdXBwb3J0IGRpZmZlcmVudCBkYXR1bXMuXG4gIFVzZSBFUkREQVAncyBTdWJzZXQgd2ViIHBhZ2UgdG8gZmluZCBvdXQgd2hpY2ggZGF0dW1zIGEgZ2l2ZW4gc3RhdGlvbiBzdXBwb3J0cy5cbiogVGhlIGRhdGEgc291cmNlIGlzbid0IGNvbXBsZXRlbHkgcmVsaWFibGUuIElmIHlvdXIgcmVxdWVzdCByZXR1cm5zIG5vIGRhdGFcbiAgd2hlbiB5b3UgdGhpbmsgaXQgc2hvdWxkOlxuICAqIE1ha2Ugc3VyZSB0aGUgc3RhdGlvbiB5b3Ugc3BlY2lmaWVkIHN1cHBvcnRzIHRoZSBkYXR1bSB5b3Ugc3BlY2lmaWVkLlxuICAqIFRyeSByZXZpc2luZyB0aGUgcmVxdWVzdCAoZS5nLiwgYSBkaWZmZXJlbnQgZGF0dW0gb3IgYSBkaWZmZXJlbnQgdGltZSByYW5nZSkuXG4gICogVGhlIGxpc3Qgb2Ygc3RhdGlvbnMgb2ZmZXJpbmcgdGhpcyBkYXRhIChvciB0aGUgbGlzdCBvZiBkYXR1bXMpIG1heSBiZSBpbmNvcnJlY3QuXG4gICogU29tZXRpbWVzIGEgc3RhdGlvbiBvciB0aGUgZW50aXJlIGRhdGEgc2VydmljZSBpcyB1bmF2YWlsYWJsZS5cbiAgICBXYWl0IGEgd2hpbGUgYW5kIHRyeSBhZ2Fpbi5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbnN0YXRpb25JRCAoU3RhdGlvbiBJRClcbnN0YXRpb25OYW1lIChTdGF0aW9uIE5hbWUpXG5zdGF0ZVxuZGF0ZUVzdGFibGlzaGVkIChEYXRlIEVzdGFibGlzaGVkLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuc2hlZklEIChTSEVGIElEKVxuZGVwbG95bWVudCAoRGVwbG95bWVudCBEZXNpZ25hdGlvbilcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGF0dW1cbndhdGVyTGV2ZWwgKFdhdGVyIExldmVsLCBtKVxuc2lnbWEgKFN0YW5kYXJkIERldmlhdGlvbiBvZiBXYXRlciBMZXZlbCwgbSlcbkkgKEluZmVycmVkIEZsYWcpXG5MIChMaW1pdCBGbGFnKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL25vc0Nvb3BzV0xWNjBfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL25vc0Nvb3BzV0xWNjBfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vbm9zQ29vcHNXTFY2MC9pbmRleC5qc29uIiwgImh0dHA6Ly90aWRlc2FuZGN1cnJlbnRzLm5vYWEuZ292LyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9ub3NDb29wc1dMVjYwLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1ub3NDb29wc1dMVjYwJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgTk9TIENPLU9QUyIsICJub3NDb29wc1dMVjYwIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL253aW9vc0NvcmFsLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ud2lvb3NDb3JhbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ud2lvb3NDb3JhbC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOV0ZTQyBDb3JhbCBEYXRhIENvbGxlY3RlZCBvZmYgV2VzdCBDb2FzdCBvZiBVUyAoMTk4MC0yMDA1KSIsICJUaGlzIGRhdGEgY29udGFpbnMgdGhlIGxvY2F0aW9ucyBvZiBzb21lIG9ic2VydmF0aW9ucyBvZlxuY29sZC13YXRlci9kZWVwLXNlYSBjb3JhbHMgb2ZmIHRoZSB3ZXN0IGNvYXN0IG9mIHRoZSBVbml0ZWQgU3RhdGVzLlxuUmVjb3JkcyBvZiBjb3JhbCBjYXRjaCBvcmlnaW5hdGUgZnJvbSBib3R0b20gdHJhd2wgc3VydmV5cyBjb25kdWN0ZWRcbmZyb20gMTk4MCB0byAyMDAxIGJ5IHRoZSBBbGFza2EgRmlzaGVyaWVzIFNjaWVuY2UgQ2VudGVyIChBRlNDKSBhbmRcbjIwMDEgdG8gMjAwNSBieSB0aGUgTm9ydGh3ZXN0IEZpc2hlcmllcyBTY2llbmNlIENlbnRlciAoTldGU0MpLlxuTG9jYXRpb25hbCBpbmZvcm1hdGlvbiByZXByZXNlbnQgdGhlIHZlc3NlbCBtaWQgcG9zaXRpb25zIChmb3IgQUZTQ1xuc3VydmV5IHRyYXdscykgb3IgXCJiZXN0IHBvc2l0aW9uXCIgKGkuZS4sIHByaW9yaXR5IG9yZGVyOiAxKSBnZWFyXG5taWRwb2ludCAyKSB2ZXNzZWwgbWlkcG9pbnQsIDMpIHZlc3NlbCBzdGFydCBwb2ludCwgNCkgdmVzc2VsIGVuZFxucG9pbnQsIDUpIHN0YXRpb24gY29vcmRpbmF0ZXMgZm9yIE5XRlNDIHN1cnZleSB0cmF3bHMpIGNvbmR1Y3RlZCBhc1xucGFydCBvZiByZWd1bGFyIHN1cnZleXMgb2YgZ3JvdW5kZmlzaCBvZmYgdGhlIGNvYXN0cyBvZiBXYXNoaW5ndG9uLFxuT3JlZ29uIGFuZCBDYWxpZm9ybmlhIGJ5IE5PQUEgRmlzaGVyaWVzLiBPbmx5IHJlY29yZHMgd2hlcmUgY29yYWxzXG53ZXJlIGlkZW50aWZpZWQgaW4gdGhlIHRvdGFsIGNhdGNoIGFyZSBpbmNsdWRlZC4gRWFjaCBjYXRjaCBzYW1wbGVcbm9mIGNvcmFsIHdhcyBpZGVudGlmaWVkIGRvd24gdG8gdGhlIG1vc3Qgc3BlY2lmaWMgdGF4b25vbWljIGxldmVsXG5wb3NzaWJsZSBieSB0aGUgYmlvbG9naXN0cyBvbmJvYXJkLCB0aGVyZWZvcmUgaWRlbnRpZmljYXRpb24gd2FzXG5kZXBlbmRlbnQgb24gdGhlaXIgZXhwZXJ0aXNlLiBXaGVuIHBvc2l0aXZlIGlkZW50aWZpY2F0aW9uIHdhcyBub3RcbnBvc3NpYmxlLCBzYW1wbGVzIHdlcmUgc29tZXRpbWVzIGFyY2hpdmVkIGZvciBmdXR1cmUgaWRlbnRpZmljYXRpb25cbmJ5IHN5c3RlbWF0aXN0IGV4cGVydHMuIERhdGEgd2VyZSBjb21waWxlZCBieSB0aGUgTldGU0MsIEZpc2hlcnlcblJlc291cmNlIEFuYWx5c2lzICYgTW9uaXRvcmluZyBEaXZpc2lvblxuXG5QdXJwb3NlIC0gRXhhbWluYXRpb24gb2YgdGhlIHNwYXRpYWwgYW5kIHRlbXBvcmFsIGRpc3RyaWJ1dGlvbnMgb2Zcbm9ic2VydmF0aW9ucyBvZiBjb2xkLXdhdGVyL2RlZXAtc2VhIGNvcmFscyBvZmYgdGhlIHdlc3QgY29hc3Qgb2YgdGhlXG5Vbml0ZWQgU3RhdGVzLCBpbmNsdWRpbmcgd2F0ZXJzIG9mZiB0aGUgc3RhdGVzIG9mIFdhc2hpbmd0b24sIE9yZWdvbixcbmFuZCBDYWxpZm9ybmlhLiBJdCBpcyBpbXBvcnRhbnQgdG8gbm90ZSB0aGF0IHRoZXNlIHJlY29yZHMgcmVwcmVzZW50XG5vbmx5IHByZXNlbmNlIG9mIGNvcmFscyBpbiB0aGUgYXJlYSBzd2VwdCBieSB0aGUgdHJhd2wgZ2Vhci4gU2luY2VcbmJvdHRvbSB0cmF3bHMgdXNlZCBkdXJpbmcgdGhlc2Ugc3VydmV5cyBhcmUgbm90IGRlc2lnbmVkIHRvIHNhbXBsZVxuZXBpYmVudGhpYyBpbnZlcnRlYnJhdGVzLCBhYnNlbmNlIG9mIGNvcmFscyBpbiB0aGUgY2F0Y2ggZG9lcyBub3Rcbm5lY2Vzc2FyeSBtZWFuIHRoZXkgZG8gbm90IG9jY3VweSB0aGUgYXJlYSBzd2VwdCBieSB0aGUgdHJhd2wgZ2Vhci5cblxuRGF0YSBDcmVkaXRzIC0gTk9BQSBGaXNoZXJpZXMsIEFsYXNrYSBGaXNoZXJpZXMgU2NpZW5jZSBDZW50ZXIsXG5SZXNvdXJjZSBBc3Nlc3NtZW50ICYgQ29uc2VydmF0aW9uIEVuZ2luZWVyaW5nIERpdmlzaW9uIChSQUNFKSBOT0FBXG5GaXNoZXJpZXMsIE5vcnRod2VzdCBGaXNoZXJpZXMgU2NpZW5jZSBDZW50ZXIsIEZpc2hlcnkgUmVzb3VyY2VcbkFuYWx5c2lzICYgTW9uaXRvcmluZyBEaXZpc2lvbiAoRlJBTSlcblxuQ29udGFjdDogQ3VydCBXaGl0bWlyZSwgTk9BQSBOV0ZTQywgQ3VydC5XaGl0bWlyZUBub2FhLmdvdlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuLi4uICgxMiBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9ud2lvb3NDb3JhbF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvbndpb29zQ29yYWxfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vbndpb29zQ29yYWwvaW5kZXguanNvbiIsICJodHRwOi8vbndpb29zLmNvYXMub3JlZ29uc3RhdGUuZWR1OjgwODAvZG9kcy9kcmRzL0NvcmFsJTIwMTk4MC0yMDA1LmluZm8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3Mvbndpb29zQ29yYWwucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPW53aW9vc0NvcmFsJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgTldGU0MiLCAibndpb29zQ29yYWwiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbndpb29zR3JvdW5kZmlzaC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbndpb29zR3JvdW5kZmlzaCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ud2lvb3NHcm91bmRmaXNoLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5XRlNDIEdyb3VuZGZpc2ggRGF0YSBmb3IgVS5TLiBXZXN0IENvYXN0ICgyMDAzLTIwMDUpIiwgIlRoZSBkYXRhIGF2YWlsYWJsZSBmb3IgZG93bmxvYWRpbmcgaXMgc3VtbWFyaXplZCBkYXRhIGZyb20gdGhlIDIwMDMtMjAwNVxuVS5TLiBXZXN0IENvYXN0IEJvdHRvbSBUcmF3bCBTdXJ2ZXkgKFdDR1RTKSBvZiBHcm91bmRmaXNoIFJlc291cmNlcyBvZmZcbldhc2hpbmd0b24sIE9yZWdvbiBhbmQgQ2FsaWZvcm5pYS5cblxuVGhlIE5vcnRod2VzdCBGaXNoZXJpZXMgU2NpZW5jZSBDZW50ZXIncyBGaXNoZXJ5IFJlc291cmNlIEFuYWx5c2lzIGFuZFxuTW9uaXRvcmluZyBEaXZpc2lvbiAoRlJBTSkgY29tcGxldGVkIHRoZSBzaXh0aCBpbiBhbiBhbm51YWwgc2VyaWVzIG9mXG5ncm91bmRmaXNoIGJvdHRvbSB0cmF3bCBzdXJ2ZXlzIGluIDIwMDMuIFRoZSBzdXJ2ZXkgd2FzIGNvbmR1Y3RlZCBKdW5lXG4yNCB0byBPY3RvYmVyIDIzLCAyMDAzIGFuZCB0YXJnZXRlZCB0aGUgY29tbWVyY2lhbCBncm91bmRmaXNoIHJlc291cmNlc1xuaW5oYWJpdGluZyBkZXB0aHMgb2YgNTUgdG8gMSwyODAgbWV0ZXJzIFttXSwgKDMwIC0gNzAwIGZhdGhvbXMgW2ZtXSlcbmZyb20gdGhlIGFyZWEgb2ZmIENhcGUgRmxhdHRlcnksIFdhc2hpbmd0b24gKGxhdGl0dWRlIFtsYXQuXSA0OFx1MDBiMDEwJ04pXG50byB0aGUgVS5TLi1NZXhpY2FuIGJvcmRlciAobGF0LiAzMlx1MDBiMDMwJ04pIHVzaW5nIGNoYXJ0ZXJlZCBXZXN0IENvYXN0XG5jb21tZXJjaWFsIHRyYXdsZXJzLiBUaGVzZSBvbmdvaW5nIHNlcmllcyBvZiBhbm51YWwgc3VydmV5cywgY29uZHVjdGVkXG5ieSBGUkFNIHNpbmNlIDE5OTgsIGFyZSBkZXNpZ25lZCB0byBtb25pdG9yIGxvbmctdGVybSB0cmVuZHMgaW5cbmRpc3RyaWJ1dGlvbiBhbmQgYWJ1bmRhbmNlIG9mIHdlc3QgY29hc3QgZ3JvdW5kZmlzaCwgZXNwZWNpYWxseSB0aG9zZVxuc3BlY2llcyBvZiBtYW5hZ2VtZW50IGNvbmNlcm4uIFRoZSAyMDAzIHN1cnZleSByZXByZXNlbnRzIHRoZSBmaXJzdFxueWVhciBpbiB3aGljaCB0aGUgZGVwdGggcmFuZ2Ugd2FzIGV4cGFuZGVkIHRvIGluY2x1ZGUgYm90aCB0aGVcbmNvbnRpbmVudGFsIHNoZWxmICg1NSAtIDE4MyBtKSBhbmQgY29udGluZW50YWwgc2xvcGUgKDE4MyAtIDEsMjgwIG0pXG5hcmVhIGFuZCB0aGUgZmlyc3QgeWVhciBpbiB3aGljaCBhIHN0cmF0aWZpZWQtcmFuZG9tIHNhbXBsaW5nIGRlc2lnblxud2FzIGFkb3B0ZWQuXG5cbkluIDIwMDMsIGEgdG90YWwgb2YgNTc0IHN1Y2Nlc3NmdWwgdG93cyB3ZXJlIGNvbXBsZXRlZCBvdXQgb2YgNjQzXG5hdHRlbXB0cy4gU2ltcmFkIElUSSBuZXQgbWVuc3VyYXRpb24gZGF0YSwgYXMgd2VsbCBhcyBnbG9iYWxcbnBvc2l0aW9uaW5nIHN5c3RlbSAoR1BTKSBuYXZpZ2F0aW9uIGRhdGEgYW5kIGJvdHRvbSBjb250YWN0IHNlbnNvclxuZGF0YSwgdXNlZCB0byBkb2N1bWVudCBwZXJmb3JtYW5jZSAoZS5nLiBib3R0b20gdGVuZGluZyksIHdlcmVcbm9idGFpbmVkIGZvciBtb3N0IHRvd3MuXG5cbkFuIEFiZXJkZWVuLXN0eWxlIG5ldCB3aXRoIGEgc21hbGwgbWVzaCAoMlwiIHN0cmV0Y2hlZCBtZWFzdXJlIG9yIGxlc3MpXG5saW5lciBpbiB0aGUgY29kZW5kICh0byByZXRhaW4gc21hbGxlciBzcGVjaW1lbnMpIHdhcyB1c2VkIHRvIHNhbXBsZVxuZmlzaCBiaW9tYXNzLiAgVGFyZ2V0IGR1cmF0aW9uIG9mIGVhY2ggdG93IHdhcyAxNSBtaW51dGVzLiBUb3dcbmR1cmF0aW9uIHdhcyB0aGUgdGltZSBiZXR3ZWVuIHRvdWNoZG93biBhbmQgbGlmdC1vZmYgb2YgdGhlIHRyYXdsIG5ldFxuZnJvbSB0aGUgc2VhZmxvb3IgYmFzZWQgb24gcmVhZGluZ3MgZnJvbSBib3R0b20gY29udGFjdCBzZW5zb3JzLlxuXG5DYXRjaGVzIHdlcmUgc29ydGVkIHRvIHNwZWNpZXMsIGFnZ3JlZ2F0ZSBvciBvdGhlciBhcHByb3ByaWF0ZVxudGF4b25vbWljIGxldmVsIGFuZCB0aGVuIHdlaWdoZWQgdXNpbmcgYW4gZWxlY3Ryb25pYyxcbm1vdGlvbi1jb21wZW5zYXRlZCBzY2FsZS4gIEEgdG90YWwgb2YgNTE3IHNwZWNpZXMgb3IgZmFtaWxpZXMgKGZpc2hcbmFuZCBpbnZlcnRlYnJhdGVzKSB3ZXJlIGlkZW50aWZpZWQgd2l0aGluIHRoZSBzdXJ2ZXkgYXJlYS4gQWx0aG91Z2hcbmJpb2xvZ2ljYWwgc2FtcGxpbmcgZWZmb3J0IGNvbnRpbnVlcyB0byBpbmNsdWRlIERvdmVyIHNvbGVcbihNaWNyb3N0b211cyBwYWNpZmljdXMpLCBzaG9ydHNwaW5lIHRob3JueWhlYWQgKFNlYmFzdG9sb2J1c1xuYWxhc2NhbnVzKSwgbG9uZ3NwaW5lIHRob3JueWhlYWQgKFNlYmFzdG9sb2J1cyBhbHRpdmVsaXMpLCBhbmRcbnNhYmxlZmlzaCAoQW5vcGxvcG9tYSBmaW1icmlhKSwgZm9jdXMgaGFzIGluY3JlYXNpbmdseSBzaGlmdGVkIHRvXG5lbmNvbXBhc3MgYWxsIGdyb3VuZGZpc2ggc3BlY2llcyBvZiBtYW5hZ2VtZW50IGNvbmNlcm4uIFVwIHRvIDEwMFxubGVuZ3RoIG1lYXN1cmVtZW50cywgc2V4IGRldGVybWluYXRpb25zLCBhbmQgaW5kaXZpZHVhbCB3ZWlnaHRzXG5hbmQgdXAgdG8gMjUgYWdlIHN0cnVjdHVyZXMgd2VyZSBjb2xsZWN0ZWQgcGVyIGhhdWwgZm9yIHRoZXNlIHNwZWNpZXMuXG5cbmNkbV9kYXRhX3R5cGUgPSBUcmFqZWN0b3J5XG5WQVJJQUJMRVM6XG5oYXVsX2lkIChIYXVsIElkZW50aWZpZXIpXG4uLi4gKDkgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvbndpb29zR3JvdW5kZmlzaF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvbndpb29zR3JvdW5kZmlzaF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9ud2lvb3NHcm91bmRmaXNoL2luZGV4Lmpzb24iLCAiaHR0cDovL253aW9vcy5jb2FzLm9yZWdvbnN0YXRlLmVkdTo4MDgwL2RvZHMvZHJkcy9Hcm91bmRmaXNoJTIwU3VydmV5JTIwMjAwMy0yMDA1LmluZm8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3Mvbndpb29zR3JvdW5kZmlzaC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9bndpb29zR3JvdW5kZmlzaCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIE5XRlNDIiwgIm53aW9vc0dyb3VuZGZpc2giXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbndpb29zSHVkRmlzaERldGFpbHMuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL253aW9vc0h1ZEZpc2hEZXRhaWxzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL253aW9vc0h1ZEZpc2hEZXRhaWxzLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5XRlNDIEhVRCBGaXNoIFNwZWNpZXMgRGV0YWlscyIsICJIYWJpdGF0IFVzZSBEYXRhYmFzZSAoSFVEKSBGaXNoIFNwZWNpZXMgRGV0YWlscyBjb21waWxlZCBieSB0aGUgTm9ydGh3ZXN0IEZpc2hlcmllcyBTY2llbmNlIENlbnRlciAoTldGU0MpLCBGaXNoZXJ5IFJlc291cmNlIEFuYWx5c2lzICYgTW9uaXRvcmluZyBEaXZpc2lvbi4gVGhpcyBkYXRhYmFzZSBkZXRhaWxzIG1hcmluZSBoYWJpdGF0IHByZWZlcmVuY2VzIGZvciBmaXNoIHNwZWNpZXMgY292ZXJlZCB1bmRlciBGaXNoZXJpZXMgTWFuYWdlbWVudCBQbGFucyAoRk1QcykuXG5cbmNkbV9kYXRhX3R5cGUgPSBPdGhlclxuVkFSSUFCTEVTOlxuc3BlY2llc19pZFxuY29tbW9uX25hbWVcbnNjaWVudGlmaWNfbmFtZVxubGlmZV9zdGFnZVxuYWJzb2x1dGVfbWluX2RlcHRoIChtKVxucHJlZmVycmVkX21pbl9kZXB0aCAobSlcbmFic29sdXRlX21heF9kZXB0aCAobSlcbnByZWZlcnJlZF9tYXhfZGVwdGggKG0pXG5hYnNvbHV0ZV9taW5fdGVtcCAoQWJzb2x1dGUgTWluIFRlbXBlcmF0dXJlLCBkZWdyZWVfQylcbnByZWZlcnJlZF9taW5fdGVtcCAoUHJlZmVycmVkIE1pbiBUZW1wZXJhdHVyZSwgZGVncmVlX0MpXG5hYnNvbHV0ZV9tYXhfdGVtcCAoQWJzb2x1dGUgTWF4IFRlbXBlcmF0dXJlLCBkZWdyZWVfQylcbnByZWZlcnJlZF9tYXhfdGVtcCAoUHJlZmVycmVkIE1heCBUZW1wZXJhdHVyZSwgZGVncmVlX0MpXG5hYnNvbHV0ZV9taW5fbGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5wcmVmZXJyZWRfbWluX2xhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxuYWJzb2x1dGVfbWF4X2xhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxucHJlZmVycmVkX21heF9sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbiIsICIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vbndpb29zSHVkRmlzaERldGFpbHMvaW5kZXguanNvbiIsICJodHRwOi8vbndpb29zLmNvYXMub3JlZ29uc3RhdGUuZWR1OjgwODAvZG9kcy9kcmRzL0hVRCUyMEZpc2glMjBTcGVjaWVzJTIwRGV0YWlscy5pbmZvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL253aW9vc0h1ZEZpc2hEZXRhaWxzLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1ud2lvb3NIdWRGaXNoRGV0YWlscyZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIE5XRlNDIiwgIm53aW9vc0h1ZEZpc2hEZXRhaWxzIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL253aW9vc0h1ZEZpc2hPY2N1ci5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbndpb29zSHVkRmlzaE9jY3VyIiwgIiIsICIiLCAiIiwgInB1YmxpYyIsICJOV0ZTQyBIVUQgRmlzaCBTcGVjaWVzIE9jY3VycmVuY2UiLCAiSGFiaXRhdCBVc2UgRGF0YWJhc2UgKEhVRCkgRmlzaCBTcGVjaWVzIE9jY3VycmVuY2UgZGF0YSBjb21waWxlZCBieSB0aGUgTm9ydGh3ZXN0IEZpc2hlcmllcyBTY2llbmNlIENlbnRlciAoTldGU0MpLCBGaXNoZXJ5IFJlc291cmNlIEFuYWx5c2lzICYgTW9uaXRvcmluZyBEaXZpc2lvbi4gVGhpcyBkYXRhYmFzZSBkZXRhaWxzIG1hcmluZSBoYWJpdGF0IHByZWZlcmVuY2VzIGZvciBmaXNoIHNwZWNpZXMgY292ZXJlZCB1bmRlciBGaXNoZXJpZXMgTWFuYWdlbWVudCBQbGFucyAoRk1QcykuXG5cbmNkbV9kYXRhX3R5cGUgPSBPdGhlclxuVkFSSUFCTEVTOlxuY29tbW9uX25hbWVcbnNjaWVudGlmaWNfbmFtZVxubGlmZV9zdGFnZVxuZ2VuZGVyXG5oYWJpdGF0X2Fzc29jaWF0aW9uXG5zZWFzb25cbmxldmVsXzFfaGFiaXRhdFxubGV2ZWxfMl9oYWJpdGF0XG5sZXZlbF8zX2hhYml0YXRcbmxldmVsXzRfaGFiaXRhdFxuYWN0aXZpdHlcbmFjdGl2aXR5X2Fzc29jaWF0aW9uXG4iLCAiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL253aW9vc0h1ZEZpc2hPY2N1ci9pbmRleC5qc29uIiwgImh0dHA6Ly9ud2lvb3MuY29hcy5vcmVnb25zdGF0ZS5lZHU6ODA4MC9kb2RzL2RyZHMvSFVEJTIwRmlzaCUyMFNwZWNpZXMlMjBPY2N1cnJlbmNlLmluZm8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3Mvbndpb29zSHVkRmlzaE9jY3VyLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1ud2lvb3NIdWRGaXNoT2NjdXImc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBOV0ZTQyIsICJud2lvb3NIdWRGaXNoT2NjdXIiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbndpb29zSHVkUHJlZFByZXkuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL253aW9vc0h1ZFByZWRQcmV5IiwgIiIsICIiLCAiIiwgInB1YmxpYyIsICJOV0ZTQyBIVUQgUHJlZGF0b3JzIGFuZCBQcmV5IiwgIkhhYml0YXQgVXNlIERhdGFiYXNlIChIVUQpIFByZWRhdG9ycyBhbmQgUHJleSBkYXRhIGNvbXBpbGVkIGJ5IHRoZSBOb3J0aHdlc3QgRmlzaGVyaWVzIFNjaWVuY2UgQ2VudGVyIChOV0ZTQyksIEZpc2hlcnkgUmVzb3VyY2UgQW5hbHlzaXMgJiBNb25pdG9yaW5nIERpdmlzaW9uLiBUaGlzIGRhdGFiYXNlIGRldGFpbHMgbWFyaW5lIGhhYml0YXQgcHJlZmVyZW5jZXMgZm9yIGZpc2ggc3BlY2llcyBjb3ZlcmVkIHVuZGVyIEZpc2hlcmllcyBNYW5hZ2VtZW50IFBsYW5zIChGTVBzKS5cblxuY2RtX2RhdGFfdHlwZSA9IE90aGVyXG5WQVJJQUJMRVM6XG5lY29yZWdpb25cbnNlYXNvblxubGV2ZWxfMV9oYWJpdGF0XG5sZXZlbF8yX2hhYml0YXRcbmxldmVsXzNfaGFiaXRhdFxubGV2ZWxfNF9oYWJpdGF0XG5zY2llbnRpZmljX25hbWVcbmdlbmRlclxubGlmZV9zdGFnZVxucHJleV9uYW1lXG5wcmV5X2dlbmRlclxucHJleV9saWZlX3N0YWdlXG5wcmVkYXRvcl9uYW1lXG5wcmVkYXRvcl9nZW5kZXJcbnByZWRhdG9yX2xpZmVfc3RhZ2VcbiIsICIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vbndpb29zSHVkUHJlZFByZXkvaW5kZXguanNvbiIsICJodHRwOi8vbndpb29zLmNvYXMub3JlZ29uc3RhdGUuZWR1OjgwODAvZG9kcy9kcmRzL0hVRCUyMFByZWRhdG9ycyUyMGFuZCUyMFByZXkuaW5mbyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9ud2lvb3NIdWRQcmVkUHJleS5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9bndpb29zSHVkUHJlZFByZXkmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBOV0ZTQyIsICJud2lvb3NIdWRQcmVkUHJleSJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ud2lvb3NIdWRSZWYuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL253aW9vc0h1ZFJlZiIsICIiLCAiIiwgIiIsICJwdWJsaWMiLCAiTldGU0MgSFVEIFJlZmVyZW5jZXMiLCAiSGFiaXRhdCBVc2UgRGF0YWJhc2UgKEhVRCkgUmVmZXJlbmNlcyBjb21waWxlZCBieSB0aGUgTm9ydGh3ZXN0IEZpc2hlcmllcyBTY2llbmNlIENlbnRlciAoTldGU0MpLCBGaXNoZXJ5IFJlc291cmNlIEFuYWx5c2lzICYgTW9uaXRvcmluZyBEaXZpc2lvbi4gVGhpcyBkYXRhYmFzZSBkZXRhaWxzIG1hcmluZSBoYWJpdGF0IHByZWZlcmVuY2VzIGZvciBmaXNoIHNwZWNpZXMgY292ZXJlZCB1bmRlciBGaXNoZXJpZXMgTWFuYWdlbWVudCBQbGFucyAoRk1QcykuXG5cbmNkbV9kYXRhX3R5cGUgPSBPdGhlclxuVkFSSUFCTEVTOlxuc2Vhc29uXG5sZXZlbF8xX2hhYml0YXRcbmxldmVsXzJfaGFiaXRhdFxubGV2ZWxfM19oYWJpdGF0XG5sZXZlbF80X2hhYml0YXRcbnNjaWVudGlmaWNfbmFtZVxuZ2VuZGVyXG5saWZlX3N0YWdlXG5yZWZlcmVuY2VfdG9cbnJlZmVyZW5jZV90eXBlXG5hdXRob3JzXG5wdWJsaWNhdGlvbl95ZWFyXG5yZWZlcmVuY2VfbmFtZVxuZWRpdG9yXG5wdWJsaWNhdGlvbl9uYW1lXG5wdWJsaXNoZXJfY2l0eVxucHVibGlzaGVyXG52b2x1bWVcbm51bWJlclxucmVmZXJlbmNlZF9wYWdlc1xudGhlc2lzX3R5cGVcbiIsICIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vbndpb29zSHVkUmVmL2luZGV4Lmpzb24iLCAiaHR0cDovL253aW9vcy5jb2FzLm9yZWdvbnN0YXRlLmVkdTo4MDgwL2RvZHMvZHJkcy9IVUQlMjBSZWZlcmVuY2VzLmluZm8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3Mvbndpb29zSHVkUmVmLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1ud2lvb3NIdWRSZWYmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBOV0ZTQyIsICJud2lvb3NIdWRSZWYiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbndpb29zT2JzRml4ZWQyMDAyLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ud2lvb3NPYnNGaXhlZDIwMDIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbndpb29zT2JzRml4ZWQyMDAyLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk5XRlNDIE9ic2VydmVyIEZpeGVkIEdlYXIgRGF0YSwgb2ZmIFdlc3QgQ29hc3Qgb2YgVVMsIDIwMDItMjAwNiIsICJPYnNlcnZlciBGaXhlZCBHZWFyIERhdGEgY29sbGVjdGVkIGR1cmluZyAyMDAyLTIwMDYgb2ZmIFdlc3QgQ29hc3Qgb2YgVVMuXG5cblRoaXMgZGF0YSBwcm9kdWN0IG9yaWdpbmF0ZXMgZnJvbSBkYXRhIGNvbGxlY3RlZCBieSBmaXNoZXJ5IG9ic2VydmVycyBpbiB0aGUgV2VzdCBDb2FzdCBHcm91bmRmaXNoIE9ic2VydmVyIFByb2dyYW0gKFdDR09QKSwgRmlzaGVyeSBSZXNvdXJjZSBBbmFseXNpcyBhbmQgTW9uaXRvcmluZyBEaXZpc2lvbiAoRlJBTSkgYXQgdGhlIE5vcnRod2VzdCBGaXNoZXJpZXMgU2NpZW5jZSBDZW50ZXIsIE5PQUEgRmlzaGVyaWVzLiBUaGUgV0NHT1AncyBnb2FsIGlzIHRvIGltcHJvdmUgdG90YWwgY2F0Y2ggZXN0aW1hdGVzIGJ5IGNvbGxlY3RpbmcgaW5mb3JtYXRpb24gb24gdGhlIGRpc2NhcmRlZCBjYXRjaCAoZmlzaCByZXR1cm5lZCBvdmVyYm9hcmQgYXQtc2VhKSBvZiB3ZXN0IGNvYXN0IGdyb3VuZGZpc2ggc3BlY2llcy4gQWxsIGRhdGEgd2VyZSBjb2xsZWN0ZWQgYWNjb3JkaW5nIHRvIHN0YW5kYXJkIHByb3RvY29scyBhbmQgZGF0YSBxdWFsaXR5IGNvbnRyb2wgZXN0YWJsaXNoZWQgYnkgdGhlIFdDR09QLiBUaGUgb2JzZXJ2ZWQgcG9ydGlvbiBvZiBvdmVyYWxsIGNhdGNoIG9yIGxhbmRpbmdzIGluIGEgZmlzaGVyeSB2YXJpZXMgYnkgY292ZXJhZ2UgbGV2ZWwuIFNpbmNlIGFsbCBmaXNoaW5nIG9wZXJhdGlvbnMgYXJlIG5vdCBvYnNlcnZlZCwgbmVpdGhlciB0aGUgbWFwcyBub3IgdGhlIGRhdGEgY2FuIGJlIHVzZWQgdG8gY2hhcmFjdGVyaXplIHRoZSBmaXNoZXJ5IGNvbXBsZXRlbHkuIFRoaXMgaXMgZXNwZWNpYWxseSB0cnVlIGZvciByYXJlbHktb2NjdXJyaW5nIHNwZWNpZXMgYW5kIHdoZW4gb2JzZXJ2ZWQgc2FtcGxlIHNpemVzIGFyZSBzbWFsbC4gV2UgdXJnZSBjYXV0aW9uIHdoZW4gdXRpbGl6aW5nIHRoZXNlIGRhdGEgZHVlIHRvIHRoZSBjb21wbGV4aXR5IG9mIGdyb3VuZGZpc2ggbWFuYWdlbWVudCBhbmQgZmxlZXQgaGFydmVzdCBkeW5hbWljcy4gR3JpZCBjZWxscyByZXByZXNlbnRpbmcgbGVzcyB0aGFuIDMgdmVzc2VscyBhbmQgbGVzcyB0aGFuIDEwIGhhdWxzIG9yIHNldHMgYXJlIG5vdCBzaG93biBkdWUgdG8gY29uZmlkZW50aWFsaXR5IGFuZCB0byBlbnN1cmUgYWRlcXVhdGUgc2FtcGxlIHNpemUuIEluIHRoZSBsaW1pdGVkLWVudHJ5IGZpeGVkIGdlYXIgZmlzaGVyeSwgc3BlY2llcyBkaXNjYXJkIHJhdGVzIChzcGVjaWVzIGRpc2NhcmQgd2VpZ2h0IC8gZ3JvdW5kZmlzaCB0b3RhbCBjYXRjaCAoZGlzY2FyZCArIHJldGFpbmVkIHdlaWdodCkpIGFyZSBjYXRlZ29yaXplZCBieSBhcHByb3hpbWF0ZSBxdWFydGlsZSByYW5nZXMgYW5kIGdlby1yZWZlcmVuY2VkIHRvIDIwIHggMjAga2lsb21ldGVyIGdyaWQgY2VsbHMuIFRoZSBvYnNlcnZlZCBmaXhlZCBnZWFyIHNldCBsb2NhdGlvbiAoc3RhcnQgbG9jYXRpb24gb2YgZmlzaGluZykgd2FzIHVzZWQgdG8gYWxsb2NhdGUgZGF0YSB0byAyMCB4IDIwIGtpbG9tZXRlciBncmlkIGNlbGxzIGZvciBjYWxjdWxhdGlvbi4gU2l4dGVlbiBzcGVjaWVzIHdlcmUgcmVwcmVzZW50ZWQgYmFzZWQgb24gY29tYmluZWQgb2JzZXJ2ZXIgZGF0YSBmcm9tIDIwMDItMjAwNi4gVGhlIHNwZWNpZXMgaW5jbHVkZWQgaW4gdGhpcyBkYXRhIHByb2R1Y3QgYXJlIGRvdmVyIHNvbGUgKE1pY3Jvc3RvbXVzIHBhY2lmaWN1cyksIHNhYmxlZmlzaCAoQW5vcGxvcG9tYSBmaW1icmlhKSwgbG9uZ3NwaW5lIHRob3JueWhlYWQgKFNlYmFzdG9sb2J1cyBhbHRpdmVsaXMpLCBzaG9ydHNwaW5lIHRob3JueWhlYWQgKFNlYmFzdG9sb2J1cyBhbGFzY2FudXMpLCBsaW5nY29kIChPcGhpb2RvbiBlbG9uZ2F0dXMpLCBhcnJvd3Rvb3RoIGZsb3VuZGVyIChBdGhlcmVzdGhlcyBzdG9taWFzKSwgcGV0cmFsZSBzb2xlIChFb3BzZXR0YSBqb3JkYW5pKSwgYW5kIHRoZSByb2NrZmlzaGVzIChnZW51cyBTZWJhc3RlcyksIGRhcmtibG90Y2hlZCByb2NrZmlzaCAoUy4gY3JhbWVyaSksIFBhY2lmaWMgb2NlYW4gcGVyY2ggKFMuIGFsdXR1cyksIGNoaWxpcGVwcGVyIChTLiBnb29kZWkpLCBjb3djb2QgKFMuIGxldmlzKSwgYm9jYWNjaW8gKFMuIHBhdWNpc3BpbmlzKSwgY2FuYXJ5IHJvY2tmaXNoIChTLiBwaW5uaWdlciksIHdpZG93IHJvY2tmaXNoIChTLiBlbnRvbWVsYXMpLCB5ZWxsb3dleWUgcm9ja2Zpc2ggKFMuIHJ1YmVycmltdXMpLCBhbmQgeWVsbG93dGFpbCByb2NrZmlzaCAoUy4gZmxhdmlkdXMpLlxuXG5QdXJwb3NlOiBUaGlzIGRhdGEgcHJvZHVjdCB3YXMgZGV2ZWxvcGVkIHRvIHByb3ZpZGUgYmFzaWMgZ3JvdW5kZmlzaCBkaXNjYXJkIGRpc3RyaWJ1dGlvbiBpbmZvcm1hdGlvbiBmb3IgYSB3aWRlIHZhcmlldHkgb2YgYXVkaWVuY2VzLiAgVGhlIFdlc3QgQ29hc3QgR3JvdW5kZmlzaCBPYnNlcnZlciBQcm9ncmFtIGNvbmR1Y3RzIHNhbXBsaW5nIG9mIGdyb3VuZGZpc2ggZGlzY2FyZGVkIGJ5IGNvbW1lcmNpYWwgZmlzaGVyaWVzIGFsb25nIHRoZSBlbnRpcmUgY29udGluZW50YWwgVS5TLiBXZXN0IENvYXN0LiAgVGhlIHNldmVudGVlbiBzcGVjaWVzIGluY2x1ZGVkIGluIHRoaXMgZGF0YSBwcm9kdWN0IGFyZSBhbW9uZyB0aG9zZSBvZiBtb3N0IGludGVyZXN0IHRvIHRoZSBmaXNoZXJpZXMgbWFuYWdlbWVudCBhbmQgY29tbWVyY2lhbCBmaXNoaW5nIGNvbW11bml0aWVzLlxuXG5EYXRhIENyZWRpdHM6IE5PQUEgRmlzaGVyaWVzLCBOb3J0aHdlc3QgRmlzaGVyaWVzIFNjaWVuY2UgQ2VudGVyLCBGaXNoZXJ5IFJlc291cmNlIEFuYWx5c2lzICYgTW9uaXRvcmluZyBEaXZpc2lvbiwgV2VzdCBDb2FzdCBHcm91bmRmaXNoIE9ic2VydmVyIFByb2dyYW0sIFNlYXR0bGUsIFdBLlxuXG5jZG1fZGF0YV90eXBlID0gT3RoZXJcblZBUklBQkxFUzpcbmxvbmdpdHVkZSAoTG9uZ2l0dWRlIChDZW50ZXIgb2YgMjB4MjAga20gR3JpZCBDZWxsKSwgZGVncmVlc19lYXN0KVxuLi4uICg4IG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL253aW9vc09ic0ZpeGVkMjAwMl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvbndpb29zT2JzRml4ZWQyMDAyX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL253aW9vc09ic0ZpeGVkMjAwMi9pbmRleC5qc29uIiwgImh0dHA6Ly9ud2lvb3MuY29hcy5vcmVnb25zdGF0ZS5lZHU6ODA4MC9kb2RzL2RyZHMvT2JzZXJ2ZXIlMjBGaXhlZCUyMEdlYXIlMjAyMDAyJTIwMjAwNi5pbmZvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL253aW9vc09ic0ZpeGVkMjAwMi5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9bndpb29zT2JzRml4ZWQyMDAyJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgTldGU0MiLCAibndpb29zT2JzRml4ZWQyMDAyIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL253aW9vc09ic1RyYXdsMjAwMi5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbndpb29zT2JzVHJhd2wyMDAyIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL253aW9vc09ic1RyYXdsMjAwMi5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJOV0ZTQyBPYnNlcnZlciBUcmF3bCBEYXRhLCBvZmYgV2VzdCBDb2FzdCBvZiBVUywgMjAwMi0yMDA2IiwgIk9ic2VydmVyIFRyYXdsIERhdGEgY29sbGVjdGVkIGR1cmluZyAyMDAyLTIwMDYgb2ZmIFdlc3QgQ29hc3Qgb2YgVVMuXG5cblRoaXMgZGF0YSBwcm9kdWN0IG9yaWdpbmF0ZXMgZnJvbSBkYXRhIGNvbGxlY3RlZCBieSBmaXNoZXJ5IG9ic2VydmVycyBpbiB0aGUgV2VzdCBDb2FzdCBHcm91bmRmaXNoIE9ic2VydmVyIFByb2dyYW0gKFdDR09QKSwgRmlzaGVyeSBSZXNvdXJjZSBBbmFseXNpcyBhbmQgTW9uaXRvcmluZyBEaXZpc2lvbiAoRlJBTSkgYXQgdGhlIE5vcnRod2VzdCBGaXNoZXJpZXMgU2NpZW5jZSBDZW50ZXIsIE5PQUEgRmlzaGVyaWVzLiAgVGhlIFdDR09QJ3MgZ29hbCBpcyB0byBpbXByb3ZlIHRvdGFsIGNhdGNoIGVzdGltYXRlcyBieSBjb2xsZWN0aW5nIGluZm9ybWF0aW9uIG9uIHRoZSBkaXNjYXJkZWQgY2F0Y2ggKGZpc2ggcmV0dXJuZWQgb3ZlcmJvYXJkIGF0LXNlYSkgb2Ygd2VzdCBjb2FzdCBncm91bmRmaXNoIHNwZWNpZXMuICBBbGwgZGF0YSB3ZXJlIGNvbGxlY3RlZCBhY2NvcmRpbmcgdG8gc3RhbmRhcmQgcHJvdG9jb2xzIGFuZCBkYXRhIHF1YWxpdHkgY29udHJvbCBlc3RhYmxpc2hlZCBieSB0aGUgV0NHT1AuICBUaGUgb2JzZXJ2ZWQgcG9ydGlvbiBvZiBvdmVyYWxsIGNhdGNoIG9yIGxhbmRpbmdzIGluIGEgZmlzaGVyeSB2YXJpZXMgYnkgY292ZXJhZ2UgbGV2ZWwuICBTaW5jZSBhbGwgZmlzaGluZyBvcGVyYXRpb25zIGFyZSBub3Qgb2JzZXJ2ZWQsIG5laXRoZXIgdGhlIG1hcHMgbm9yIHRoZSBkYXRhIGNhbiBiZSB1c2VkIHRvIGNoYXJhY3Rlcml6ZSB0aGUgZmlzaGVyeSBjb21wbGV0ZWx5LiAgVGhpcyBpcyBlc3BlY2lhbGx5IHRydWUgZm9yIHJhcmVseS1vY2N1cnJpbmcgc3BlY2llcyBhbmQgd2hlbiBvYnNlcnZlZCBzYW1wbGUgc2l6ZXMgYXJlIHNtYWxsLiAgV2UgdXJnZSBjYXV0aW9uIHdoZW4gdXRpbGl6aW5nIHRoZXNlIGRhdGEgZHVlIHRvIHRoZSBjb21wbGV4aXR5IG9mIGdyb3VuZGZpc2ggbWFuYWdlbWVudCBhbmQgZmxlZXQgaGFydmVzdCBkeW5hbWljcy4gIEdyaWQgY2VsbHMgcmVwcmVzZW50aW5nIGxlc3MgdGhhbiAzIHZlc3NlbHMgYW5kIGxlc3MgdGhhbiAxMCBoYXVscyBvciBzZXRzIGFyZSBub3Qgc2hvd24gZHVlIHRvIGNvbmZpZGVudGlhbGl0eSBhbmQgdG8gZW5zdXJlIGFkZXF1YXRlIHNhbXBsZSBzaXplLiAgSW4gdGhlIGxpbWl0ZWQtZW50cnkgZ3JvdW5kZmlzaCBib3R0b20gdHJhd2wgZmlzaGVyeSwgc3BlY2llcyBkaXNjYXJkIHJhdGVzIChzcGVjaWVzIGRpc2NhcmQgd2VpZ2h0IC8gZ3JvdW5kZmlzaCB0b3RhbCBjYXRjaCAoZGlzY2FyZCArIHJldGFpbmVkIHdlaWdodCkpIGFyZSBjYXRlZ29yaXplZCBieSBhcHByb3hpbWF0ZSBxdWFydGlsZSByYW5nZXMgYW5kIGdlby1yZWZlcmVuY2VkIHRvIDEwIHggMTAga2lsb21ldGVyIGdyaWQgY2VsbHMuICBUaGUgb2JzZXJ2ZWQgdHJhd2wgdG93bGluZSAobGluZSBkcmF3biBmcm9tIHRoZSBzdGFydCB0byBlbmQgbG9jYXRpb24gb2YgYSB0cmF3bCB0b3cpIHdhcyB1c2VkIHRvIGFsbG9jYXRlIGRhdGEgdG8gMTAgeCAxMCBraWxvbWV0ZXIgZ3JpZCBjZWxscyBmb3IgY2FsY3VsYXRpb24uICBTZXZlbnRlZW4gc3BlY2llcyB3ZXJlIHJlcHJlc2VudGVkIGJhc2VkIG9uIGNvbWJpbmVkIG9ic2VydmVyIGRhdGEgZnJvbSAyMDAyLTIwMDYuICBUaGUgc3BlY2llcyBpbmNsdWRlZCBpbiB0aGlzIGRhdGEgcHJvZHVjdCBhcmUgZG92ZXIgc29sZSAoTWljcm9zdG9tdXMgcGFjaWZpY3VzKSwgc2FibGVmaXNoIChBbm9wbG9wb21hIGZpbWJyaWEpLCBsb25nc3BpbmUgdGhvcm55aGVhZCAoU2ViYXN0b2xvYnVzIGFsdGl2ZWxpcyksIHNob3J0c3BpbmUgdGhvcm55aGVhZCAoU2ViYXN0b2xvYnVzIGFsYXNjYW51cyksIGxpbmdjb2QgKE9waGlvZG9uIGVsb25nYXR1cyksIGFycm93dG9vdGggZmxvdW5kZXIgKEF0aGVyZXN0aGVzIHN0b21pYXMpLCBFbmdsaXNoIHNvbGUgKFBhcm9waHJ5cyB2ZXR1bHVzKSwgcGV0cmFsZSBzb2xlIChFb3BzZXR0YSBqb3JkYW5pKSwgYW5kIHRoZSByb2NrZmlzaGVzIChnZW51cyBTZWJhc3RlcyksIGRhcmtibG90Y2hlZCByb2NrZmlzaCAoUy4gY3JhbWVyaSksIFBhY2lmaWMgb2NlYW4gcGVyY2ggKFMuIGFsdXR1cyksIGNoaWxpcGVwcGVyIChTLiBnb29kZWkpLCBjb3djb2QgKFMuIGxldmlzKSwgYm9jYWNjaW8gKFMuIHBhdWNpc3BpbmlzKSwgY2FuYXJ5IHJvY2tmaXNoIChTLiBwaW5uaWdlciksIHdpZG93IHJvY2tmaXNoIChTLiBlbnRvbWVsYXMpLCB5ZWxsb3dleWUgcm9ja2Zpc2ggKFMuIHJ1YmVycmltdXMpLCBhbmQgeWVsbG93dGFpbCByb2NrZmlzaCAoUy4gZmxhdmlkdXMpLlxuXG5QdXJwb3NlOiBUaGlzIGRhdGEgcHJvZHVjdCB3YXMgZGV2ZWxvcGVkIHRvIHByb3ZpZGUgYmFzaWMgZ3JvdW5kZmlzaCBkaXNjYXJkIGRpc3RyaWJ1dGlvbiBpbmZvcm1hdGlvbiBmb3IgYSB3aWRlIHZhcmlldHkgb2YgYXVkaWVuY2VzLiAgVGhlIFdlc3QgQ29hc3QgR3JvdW5kZmlzaCBPYnNlcnZlciBQcm9ncmFtIGNvbmR1Y3RzIHNhbXBsaW5nIG9mIGdyb3VuZGZpc2ggZGlzY2FyZGVkIGJ5IGNvbW1lcmNpYWwgZmlzaGVyaWVzIGFsb25nIHRoZSBlbnRpcmUgY29udGluZW50YWwgVS5TLiBXZXN0IENvYXN0LiAgVGhlIHNldmVudGVlbiBzcGVjaWVzIGluY2x1ZGVkIGluIHRoaXMgZGF0YSBwcm9kdWN0IGFyZSBhbW9uZyB0aG9zZSBvZiBtb3N0IGludGVyZXN0IHRvIHRoZSBmaXNoZXJpZXMgbWFuYWdlbWVudCBhbmQgY29tbWVyY2lhbCBmaXNoaW5nIGNvbW11bml0aWVzLlxuXG5EYXRhIENyZWRpdHM6IE5PQUEgRmlzaGVyaWVzLCBOb3J0aHdlc3QgRmlzaGVyaWVzIFNjaWVuY2UgQ2VudGVyLCBGaXNoZXJ5IFJlc291cmNlIEFuYWx5c2lzICYgTW9uaXRvcmluZyBEaXZpc2lvbiwgV2VzdCBDb2FzdCBHcm91bmRmaXNoIE9ic2VydmVyIFByb2dyYW0sIFNlYXR0bGUsIFdBLlxuXG5jZG1fZGF0YV90eXBlID0gT3RoZXJcblZBUklBQkxFUzpcbmxvbmdpdHVkZSAoTG9uZ2l0dWRlIChDZW50ZXIgb2YgMTB4MTAga20gR3JpZCBDZWxsKSwgZGVncmVlc19lYXN0KVxuLi4uICg4IG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL253aW9vc09ic1RyYXdsMjAwMl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvbndpb29zT2JzVHJhd2wyMDAyX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL253aW9vc09ic1RyYXdsMjAwMi9pbmRleC5qc29uIiwgImh0dHA6Ly9ud2lvb3MuY29hcy5vcmVnb25zdGF0ZS5lZHU6ODA4MC9kb2RzL2RyZHMvT2JzZXJ2ZXIlMjBUcmF3bCUyMDIwMDIlMjAyMDA2LmluZm8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3Mvbndpb29zT2JzVHJhd2wyMDAyLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1ud2lvb3NPYnNUcmF3bDIwMDImc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBOV0ZTQyIsICJud2lvb3NPYnNUcmF3bDIwMDIiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAva2VvXzEyMWZfYTNkMF8zYzBhLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9rZW9fMTIxZl9hM2QwXzNjMGEiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAva2VvXzEyMWZfYTNkMF8zYzBhLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk9jZWFuU0lURVMgS0VPIGRhaWx5IGluLXNpdHUgZGF0YSIsICJUaGlzIGZpbGUgY29udGFpbnMgZGFpbHkgcmVhbC10aW1lIGFuZCBkZWxheWVkLW1vZGUgaW4tc2l0dSBkYXRhIGZyb20gdGhlIEt1cm9zaGlvIEV4dGVuc2lvbiBPYnNlcnZhdG9yeSAoS0VPKSBzaXRlIG5vbWluYWxseSBhdCAzMi4zTiwxNDQuNkUsIGluIHRoZSBLdXJvc2hpbyBFeHRlbnNpb24gcmVjaXJjdWxhdGlvbiBneXJlLiBUaGUgYWN0dWFsIGFuY2hvciBwb3NpdGlvbiBpcyBkaWZmZXJlbnQgZm9yIGVhY2ggZGVwbG95bWVudCwgYW5kIHRoaXMgaXMgYSBzbGFjayBsaW5lIG1vb3Jpbmcgd2l0aCBhIHdhdGNoIGNpcmNsZSByYWRpdXMgZ3JlYXRlciB0aGFuIDVrbS4gRm9yIHVzZXJzIHBlcmZvcm1pbmcgaW50ZXIgY29tcGFyaXNvbnMsIGl0IG1heSBiZSBpbXBvcnRhbnQgdG8gdXNlIHRoZSBhY3R1YWwgcG9zaXRpb24gb2YgdGhlIGJ1b3kgZnJvbSB0aGUgR2xvYmFsIFBvc2l0aW9uaW5nIFN5c3RlbSAoR1BTKSBkYXRhLiBUaGlzIG1vb3JpbmcgaGFzIGJlZW4gaW5zdHJ1bWVudGVkIHdpdGggdXBwZXIgb2NlYW4gYW5kIHN1cmZhY2Ugc2Vuc29ycyBzaW5jZSBKdW5lIDIwMDQuIEluY2x1ZGVkIGluIHRoaXMgZmlsZSBhcmUgc2VhIHRlbXBlcmF0dXJlcyBhbmQgcHJlc3N1cmVzIGZyb20gdGhlIHN1cmZhY2UgdG8gNTI1bSBkZXB0aCwgc2FsaW5pdHkgYW5kIGRlbnNpdHkgKHNpZ21hLXRoZXRhKSBmcm9tIHRoZSBzdXJmYWNlIHRvIDQwMG0gZGVwdGgsIHNlYSBjdXJyZW50cyB0byAzNW0gZGVwdGgsIGEgdmFyaWV0eSBvZiBzdXJmYWNlIG9ic2VydmF0aW9ucyBmb3IgbmV0IGFpci1zZWEgZmx1eGVzIG9mIGhlYXQsIG1vaXN0dXJlLCBhbmQgbW9tZW50dW0gaW5jbHVkaW5nIHdpbmRzLCBzb2xhciBhbmQgbG9uZ3dhdmUgcmFkaWF0aW9uLCByYWluLCBhaXIgdGVtcGVyYXR1cmUsIHJlbGF0aXZlIGh1bWlkaXR5LCBhbmQgYmFyb21ldHJpYyBwcmVzc3VyZS4gTm90ZSB0aGF0IGJlY2F1c2UgdGhpcyBpcyBhIHNsYWNrLWxpbmUgbW9vcmluZywgc3Vic3VyZmFjZSBzZW5zb3IgZGVwdGhzIHZhcnkgd2l0aCB0aW1lLCBhbmQgaGVuY2Ugb25lIG11c3QgdXNlIHRoZSBvYnNlcnZlZCBhbmQgY2FsY3VsYXRlZCB3YXRlciBwcmVzc3VyZXMgdG8gY29tcHV0ZSBzZW5zb3IgZGVwdGhzLiBBbHNvLCBkdWUgdG8gdGhlIHJlbGF0aXZlbHkgbGFyZ2Ugc2NvcGUgYW5kIGRpZmZlcmVudCBhbmNob3IgcG9zaXRpb25zLCB0aGUgcG9zaXRpb25zIG9mIHRoZSBidW95IGF0IHRoZSBzdXJmYWNlIGFyZSBpbmNsdWRlZCBhcyB0aW1lIHNlcmllcyBvZiBsYXRpdHVkZSBhbmQgbG9uZ2l0dWRlLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxud21vX3BsYXRmb3JtX2NvZGVcbnNpdGVfY29kZVxuc2l0ZV9pZCAoT2NlYW5TSVRFUyBzdGF0aW9uIElEKVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRlbXAgKERlcHRoIG9mIGVhY2ggbWVhc3VyZW1lbnQsIG1ldGVycylcbmxhdGl0dWRlIChMYXRpdHVkZSBvZiBlYWNoIGxvY2F0aW9uLCBkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChMb25naXR1ZGUgb2YgZWFjaCBsb2NhdGlvbiwgZGVncmVlc19lYXN0KVxuVEVNUCAodGVtcGVyYXR1cmUsIGRlZ3JlZV9DZWxzaXVzKVxuVEVNUF9RQyAocXVhbGl0eSBmbGFnKVxuVEVNUF9ETSAobWV0aG9kIG9mIGRhdGEgcHJvY2Vzc2luZylcbmRlcHRoIChtKVxuUFJFUyAod2F0ZXIgcHJlc3N1cmUsIG9ic2VydmVkIGFuZCBjYWxjdWxhdGVkLCBkZWNpYmFyKVxuUFJFU19RQyAocXVhbGl0eSBmbGFnKVxuUFJFU19ETSAobWV0aG9kIG9mIGRhdGEgcHJvY2Vzc2luZylcbi4uLiAoNTMgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwva2VvXzEyMWZfYTNkMF8zYzBhX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9rZW9fMTIxZl9hM2QwXzNjMGFfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8va2VvXzEyMWZfYTNkMF8zYzBhL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9vY3MvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2tlb18xMjFmX2EzZDBfM2MwYS5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9a2VvXzEyMWZfYTNkMF8zYzBhJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEvUE1FTCIsICJrZW9fMTIxZl9hM2QwXzNjMGEiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbnRhc19mbHV4XzYyZmNfOWEyMF8xNDMyLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9udGFzX2ZsdXhfNjJmY185YTIwXzE0MzIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbnRhc19mbHV4XzYyZmNfOWEyMF8xNDMyLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk9jZWFuU0lURVMgTlRBUyBzdXJmYWNlIG1vb3JpbmcgZmx1eGVzIGNhbGN1bGF0ZWQgd2l0aCBDb2FyZSAzLjAgYWxnb3JpdGhtIiwgIk9jZWFuU2l0ZXMgdGltZS1zZXJpZXMgRkxVWCAgZGF0YSBmcm9tIE5UQVMgc3RhdGlvblxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcblFCIChzZW5zaWJsZSBoZWF0IGZsdXgsIFcvbTIpXG5RSCAobGF0ZW50IGhlYXQgZmx1eCwgVy9tMilcblFOIChuZXQgaGVhdCBmbHV4LCBXL20yKVxuUUwgKG5ldCBsb25nd2F2ZSwgVy9tMilcblFTIChuZXQgc2hvcnR3YXZlLCBXL20yKVxuVEFVRElSICh3aW5kIHN0cmVzcyBkaXJlY3Rpb24sIGRlZ3JlZSBOKVxuVEFVTUFHICh3aW5kIHN0cmVzcyBtYWduaXR1ZGUsIE4vbV4yKVxuVFNLSU4gKFNTVCBhZGp1c3RlZCB0byBza2luLCBkZWdyZWUpXG5XU19IICh3aW5kIHNwZWVkIGFkanVzdGVkIHRvIDEwbSwgbS9zKVxuUVFfSCAoc3BlY2lmaWMgaHVtaWRpdHkgYWRqdXN0ZWQgdG8gMm0sIGcva2cpXG5UQV9IIChhaXIgdGVtcGVyYXR1cmUgYWRqdXN0ZWQgdG8gMm0sIGRlZ3JlZV9DKVxuVEFVRSAoZWFzdCB3aW5kIHN0cmVzcywgTi9tXjIpXG5UQVVOIChub3J0aCB3aW5kIHN0cmVzcywgTi9tXjIpXG5TVEFCSUxJVFkgKHN0YWJpbGl0eSBwYXJhbWV0ZXIsIDEpXG5kZXB0aCAoZGVwdGggY29vcmRpbmF0ZSBvZiB0c2tpbiwgbSlcbndtb19wbGF0Zm9ybV9jb2RlXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL250YXNfZmx1eF82MmZjXzlhMjBfMTQzMl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvbnRhc19mbHV4XzYyZmNfOWEyMF8xNDMyX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL250YXNfZmx1eF82MmZjXzlhMjBfMTQzMi9pbmRleC5qc29uIiwgImh0dHA6Ly91b3Aud2hvaS5lZHUvcHJvamVjdHMvc3RyYXR1cyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9udGFzX2ZsdXhfNjJmY185YTIwXzE0MzIucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPW50YXNfZmx1eF82MmZjXzlhMjBfMTQzMiZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJXSE9JIiwgIm50YXNfZmx1eF82MmZjXzlhMjBfMTQzMiJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9udGFzX21ldF84ZDczXzFiYzFfZWM4YS5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbnRhc19tZXRfOGQ3M18xYmMxX2VjOGEiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbnRhc19tZXRfOGQ3M18xYmMxX2VjOGEuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiT2NlYW5TSVRFUyBOVEFTIHN1cmZhY2UgbW9vcmluZyBNRVQgZGF0YSIsICJPY2VhblNpdGVzIHRpbWUtc2VyaWVzIE1FVCBkYXRhIGZyb20gTlRBUyBzdGF0aW9uXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuQUlSVCAoYWlyIHRlbXBlcmF0dXJlLCBkZWdyZWVfQylcblJFTEggKHJlbGF0aXZlIGh1bWlkaXR5LCBwZXJjZW50KVxuQVRNUyAoYmFyb21ldHJpYyBwcmVzc3VyZSwgbWlsbGliYXJzKVxuTFcgKHN1cmZhY2UgZG93bndlbGxpbmcgbG9uZ3dhdmUgcmFkaWF0aW9uLCBXIG0tMilcblNXIChzaG9ydHdhdmUgcmFkaWF0aW9uLCBXIG0tMilcblJBSU4gKHByZWNpcGl0YXRpb24gcmF0ZSwgbW0vaG91cilcblVXTkQgKFdpbmQgVmVsb2NpdHkgRWFzdCwgbWV0ZXJzL3NlY29uZClcblZXTkQgKHdpbmQgdmVsb2NpdHkgbm9ydGgsIG1ldGVycy9zZWNvbmQpXG5URU1QIChzZWEgdGVtcGVyYXR1cmUsIGRlZ3JlZV9DKVxuUFNBTCAoc2VhIHdhdGVyIHByYWN0aWNhbCBzYWxpbml0eSwgMSlcbkNOREMgKGNvbmR1Y3Rpdml0eSwgUyBtLTEpXG5VQ1VSIChFYXN0d2FyZCBTZWEgV2F0ZXIgVmVsb2NpdHksIFMgbS0xKVxuVkNVUiAoTm9ydGh3YXJkIFNlYSBXYXRlciBWZWxvY2l0eSwgUyBtLTEpXG5sYXRpdHVkZSAoYXBwcm94aW1hdGUgbGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGFwcHJveGltYXRlIGxvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxud21vX3BsYXRmb3JtX2NvZGVcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9udGFzX21ldF84ZDczXzFiYzFfZWM4YV9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvbnRhc19tZXRfOGQ3M18xYmMxX2VjOGFfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vbnRhc19tZXRfOGQ3M18xYmMxX2VjOGEvaW5kZXguanNvbiIsICJodHRwOi8vdW9wLndob2kuZWR1L3Byb2plY3RzL3N0cmF0dXMiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvbnRhc19tZXRfOGQ3M18xYmMxX2VjOGEucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPW50YXNfbWV0XzhkNzNfMWJjMV9lYzhhJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIldIT0kiLCAibnRhc19tZXRfOGQ3M18xYmMxX2VjOGEiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcGFwYV84YmI1X2RjZDVfOTgxZi5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcGFwYV84YmI1X2RjZDVfOTgxZiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wYXBhXzhiYjVfZGNkNV85ODFmLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk9jZWFuU0lURVMgUEFQQSBkYWlseSBpbi1zaXR1IGRhdGEiLCAiVGhpcyBmaWxlIGNvbnRhaW5zIGRhaWx5IHJlYWwtdGltZSBhbmQgZGVsYXllZC1tb2RlIGluLXNpdHUgZGF0YSBmcm9tIHN0YXRpb24gUGFwYSBhdCA1ME4sMTQ1VyBpbiB0aGUgTm9ydGggUGFjaWZpYy4gVGhpcyB0YXV0LWxpbmUgbW9vcmluZyBoYXMgYmVlbiBpbnN0cnVtZW50ZWQgd2l0aCB1cHBlciBvY2VhbiBhbmQgc3VyZmFjZSBzZW5zb3JzIHNpbmNlIEp1bmUgMjAwNy4gSW5jbHVkZWQgaW4gdGhpcyBmaWxlIGFyZSBzZWEgdGVtcGVyYXR1cmVzIGZyb20gdGhlIHN1cmZhY2UgdG8gMzAwIG1ldGVycyBkZXB0aCwgc2FsaW5pdHkgYW5kIGRlbnNpdHkgKHNpZ21hLXRoZXRhKSBmcm9tIHRoZSBzdXJmYWNlIHRvIDIwMG0gZGVwdGgsIHNlYSBjdXJyZW50cyBhdCA1bSBhbmQgMzVtIGRlcHRoLCBhY291c3RpYyBkb3BwbGVyIHByb2ZpbGVzIG9mIHpvbmFsIGFuZCBtZXJpZGlvbmFsIG9jZWFuIGN1cnJlbnQgdG8gZnJvbSAzMCB0byAxNTggbWV0ZXJzIGRlcHRoLCBhbmQgYSB2YXJpZXR5IG9mIHN1cmZhY2Ugb2JzZXJ2YXRpb25zIGZvciBuZXQgYWlyLXNlYSBmbHV4ZXMgb2YgaGVhdCwgbW9pc3R1cmUsIGFuZCBtb21lbnR1bSBpbmNsdWRpbmcgd2luZHMsIHNvbGFyIGFuZCBsb25nd2F2ZSByYWRpYXRpb24sIHJhaW4sIGFpciB0ZW1wZXJhdHVyZSwgcmVsYXRpdmUgaHVtaWRpdHksIGFuZCBiYXJvbWV0cmljIHByZXNzdXJlLiBUaW1lIHNlcmllcyBvZiBidW95IGxhdGl0dWRlIGFuZCBsb25naXR1ZGUgYXJlIGluY2x1ZGVkIGFzIHdlbGwuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG53bW9fcGxhdGZvcm1fY29kZVxuc2l0ZV9jb2RlXG5zaXRlX2lkIChPY2VhblNJVEVTIHN0YXRpb24gSUQpXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKERlcHRoIG9mIGVhY2ggbWVhc3VyZW1lbnQsIG0pXG5sYXRpdHVkZSAoTGF0aXR1ZGUgb2YgZWFjaCBsb2NhdGlvbiwgZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoTG9uZ2l0dWRlIG9mIGVhY2ggbG9jYXRpb24sIGRlZ3JlZXNfZWFzdClcblRFTVAgKHRlbXBlcmF0dXJlLCBkZWdyZWVfQ2Vsc2l1cylcblRFTVBfUUMgKHF1YWxpdHkgZmxhZylcblRFTVBfRE0gKG1ldGhvZCBvZiBkYXRhIHByb2Nlc3NpbmcpXG5kZXBjdXIgKERlcHRoIG9mIGVhY2ggbWVhc3VyZW1lbnQsIG0pXG5VQ1VSXG5WQ1VSIChtZXJpZGlvbmFsIGN1cnJlbnQsIGNtL3MpXG5DU1BEIChjdXJyZW50IHNwZWVkLCBjbS9zKVxuQ1NQRF9RQyAocXVhbGl0eSBmbGFnKVxuQ1NQRF9ETSAobWV0aG9kIG9mIGRhdGEgcHJvY2Vzc2luZylcbkNESVIgKGN1cnJlbnQgZGlyZWN0aW9uIChvY2Vhbm9ncmFwaGljIGNvbnZlbnRpb24sIGZsb3dpbmcgdG8pLCBkZWdyZWUpXG5DRElSX1FDIChxdWFsaXR5IGZsYWcpXG5DRElSX0RNIChtZXRob2Qgb2YgZGF0YSBwcm9jZXNzaW5nKVxuZGVwcHNhbCAoRGVwdGggb2YgZWFjaCBtZWFzdXJlbWVudCwgbSlcbi4uLiAoNDMgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcGFwYV84YmI1X2RjZDVfOTgxZl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcGFwYV84YmI1X2RjZDVfOTgxZl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wYXBhXzhiYjVfZGNkNV85ODFmL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9vY3MvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BhcGFfOGJiNV9kY2Q1Xzk4MWYucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBhcGFfOGJiNV9kY2Q1Xzk4MWYmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQS9QTUVMIiwgInBhcGFfOGJiNV9kY2Q1Xzk4MWYiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcGlyYXRhXzU5MjJfN2RjZF83MjE5LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9waXJhdGFfNTkyMl83ZGNkXzcyMTkiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcGlyYXRhXzU5MjJfN2RjZF83MjE5LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk9jZWFuU0lURVMgUElSQVRBIGRhaWx5IGluLXNpdHUgZGF0YSIsICJUaGlzIGZpbGUgY29udGFpbnMgZGFpbHkgcmVhbC10aW1lIGFuZCBkZWxheWVkLW1vZGUgaW4tc2l0dSBkYXRhIGZyb20gb25lIG9mIHRoZSBUcm9waWNhbCBBdG1vc3BoZXJlL09jZWFuIChUQU8pL1RSSVRPTiwgUGlsb3QgUmVzZWFyY2ggTW9vcmVkIEFycmF5IGluIHRoZSBUcm9waWNhbCBBdGxhbnRpYyAoUElSQVRBKSwgb3IgUmVzZWFyY2ggTW9vcmVkIEFycmF5IGZvciBBZnJpY2FuLUFzaWFuLUF1c3RyYWxpYW4gTW9uc29vbiBBbmFseXNpcyBhbmQgUHJlZGljdGlvbiAoUkFNQSkgbW9vcmluZyBzaXRlcyBpbiB0aGUgdHJvcGljYWwgb2NlYW5zLiBJbmNsdWRlZCBpbiB0aGlzIGZpbGUgYXJlIHNlYSB0ZW1wZXJhdHVyZXMgZnJvbSB0aGUgc3VyZmFjZSB0byA1MDAgbWV0ZXJzIGF0IG1vc3Qgc2l0ZXMgYW5kIGRlZXBlciBhdCBvdGhlcnMsIHNhbGluaXR5IGFuZCBwb3RlbnRpYWwgZGVuc2l0eSAoc2lnbWEtdGhldGEpIGF0IHRoZSBzZWEgc3VyZmFjZSBhbmQgZGVlcGVyIGF0IHNvbWUgc2l0ZXMsIHNlYSBjdXJyZW50cyBhdCAxMG0gZGVwdGggYW5kIGRlZXBlciBhdCBzb21lIHNpdGVzLCBhIHZhcmlldHkgb2Ygc3VyZmFjZSBvYnNlcnZhdGlvbnMgaW5jbHVkaW5nIHdpbmRzLCBhaXIgdGVtcGVyYXR1cmUsIHJlbGF0aXZlIGh1bWlkaXR5LCBzaG9ydHdhdmUgc29sYXIgcmFkaWF0aW9uLCBsb25nd2F2ZSByYWRpYXRpb24sIHJhaW4gcmF0ZSwgYmFyb21ldHJpYyBwcmVzc3VyZS4gQnVveSBwb3NpdGlvbnMgYXJlIGFsc28gaW5jbHVkZWQgYXMgdGltZSBzZXJpZXMgb2YgbGF0aXR1ZGUgYW5kIGxvbmdpdHVkZS5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbndtb19wbGF0Zm9ybV9jb2RlXG5zaXRlX2NvZGVcbnNpdGVfaWQgKE9jZWFuU0lURVMgc3RhdGlvbiBJRClcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAoRGVwdGggb2YgZWFjaCBURU1QIG1lYXN1cmVtZW50LCBtKVxuZGVwY3VyIChEZXB0aCBvZiBlYWNoIGN1cnJlbnQgbWVhc3VyZW1lbnQpXG5sYXRpdHVkZSAoTGF0aXR1ZGUgb2YgZWFjaCBsb2NhdGlvbiwgZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoTG9uZ2l0dWRlIG9mIGVhY2ggbG9jYXRpb24sIGRlZ3JlZXNfZWFzdClcbmRlcHBzYWwgKERlcHRoIG9mIGVhY2ggU2FsaW5pdHkgbWVhc3VyZW1lbnQpXG5URU1QICh0ZW1wZXJhdHVyZSwgZGVncmVlX0NlbHNpdXMpXG5URU1QX1FDIChxdWFsaXR5IGZsYWcpXG5URU1QX0RNIChtZXRob2Qgb2YgZGF0YSBwcm9jZXNzaW5nKVxuUFNBTCAoc2VhX3dhdGVyX3ByYWN0aWNhbF9zYWxpbml0eSlcblBTQUxfUUNcblBTQUxfRE0gKG1ldGhvZCBvZiBkYXRhIHByb2Nlc3NpbmcpXG5kZXBkZW4gKERlcHRoIG9mIGVhY2ggZGVuc2l0eSBtZWFzdXJlbWVudClcbmhlaWdodHdpbmQgKGFsdGl0dWRlLCBtZXRlcnMpXG5VV05EICh6b25hbCB3aW5kKVxuVldORCAobWVyaWRpb25hbCB3aW5kLCBtL3MpXG4uLi4gKDQ0IG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BpcmF0YV81OTIyXzdkY2RfNzIxOV9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcGlyYXRhXzU5MjJfN2RjZF83MjE5X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BpcmF0YV81OTIyXzdkY2RfNzIxOS9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BpcmF0YV81OTIyXzdkY2RfNzIxOS5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cGlyYXRhXzU5MjJfN2RjZF83MjE5JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEvUE1FTCIsICJwaXJhdGFfNTkyMl83ZGNkXzcyMTkiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcmFtYV8zYzE1XzM0MTBfNzgwYS5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcmFtYV8zYzE1XzM0MTBfNzgwYSIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9yYW1hXzNjMTVfMzQxMF83ODBhLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk9jZWFuU0lURVMgUkFNQSBkYWlseSBpbi1zaXR1IGRhdGEiLCAiT2NlYW5TSVRFUyBkYWlseSBpbi1zaXR1IGRhdGEuIE9jZWFuU0lURVMgR2xvYmFsIFRyb3BpY2FsIE1vb3JlZCBCdW95IEFycmF5IFJlc2VhcmNoIE1vb3JlZCBBcnJheSBmb3IgQWZyaWNhbi1Bc2lhbi1BdXN0cmFsaWFuIE1vbnNvb24gQW5hbHlzaXMgYW5kIFByZWRpY3Rpb24gKFJBTUEpIGRhdGEgZnJvbSBQYWNpZmljIE1hcmluZSBFbnZpcm9ubWVudGFsIExhYm9yYXRvcnkgKFBNRUwpXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG53bW9fcGxhdGZvcm1fY29kZVxuc2l0ZV9jb2RlXG5zaXRlX2lkIChPY2VhblNJVEVTIHN0YXRpb24gSUQpXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKExhdGl0dWRlIG9mIGVhY2ggbG9jYXRpb24sIGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKExvbmdpdHVkZSBvZiBlYWNoIGxvY2F0aW9uLCBkZWdyZWVzX2Vhc3QpXG5kZXBjdXIgKERlcHRoIG9mIGVhY2ggbWVhc3VyZW1lbnQsIG1ldGVycylcblVDVVIgKHpvbmFsIGN1cnJlbnQsIGNtL3MpXG5WQ1VSIChtZXJpZGlvbmFsIGN1cnJlbnQsIGNtL3MpXG5DU1BEIChjdXJyZW50IHNwZWVkLCBjbS9zKVxuQ1NQRF9RQyAocXVhbGl0eSBmbGFnKVxuQ1NQRF9ETSAobWV0aG9kIG9mIGRhdGEgcHJvY2Vzc2luZylcbkNESVIgKGN1cnJlbnQgZGlyZWN0aW9uIChvY2Vhbm9ncmFwaGljIGNvbnZlbnRpb24sIGZsb3dpbmcgdG8pLCBkZWdyZWUpXG5DRElSX1FDIChxdWFsaXR5IGZsYWcpXG5DRElSX0RNIChtZXRob2Qgb2YgZGF0YSBwcm9jZXNzaW5nKVxuVEVNUCAodGVtcGVyYXR1cmUsIGRlZ3JlZV9DZWxzaXVzKVxuVEVNUF9RQyAocXVhbGl0eSBmbGFnKVxuZGVwdGggKERlcHRoIG9mIGVhY2ggbWVhc3VyZW1lbnQsIG0pXG5kZXBwc2FsIChEZXB0aCBvZiBlYWNoIG1lYXN1cmVtZW50LCBtZXRlcnMpXG5QU0FMIChzYWxpbml0eSwgUFNVKVxuUFNBTF9RQyAocXVhbGl0eSBmbGFnKVxuUFNBTF9ETSAobWV0aG9kIG9mIGRhdGEgcHJvY2Vzc2luZylcbmRlcGRlbiAoRGVwdGggb2YgZWFjaCBtZWFzdXJlbWVudCwgbWV0ZXJzKVxuREVOIChzaWdtYS10aGV0YSAocG90ZW50aWFsIGRlbnNpdHkpLCBrZy9tKiozKVxuREVOX1FDIChxdWFsaXR5IGZsYWcpXG4uLi4gKDM3IG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3JhbWFfM2MxNV8zNDEwXzc4MGFfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3JhbWFfM2MxNV8zNDEwXzc4MGFfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcmFtYV8zYzE1XzM0MTBfNzgwYS9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3JhbWFfM2MxNV8zNDEwXzc4MGEucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXJhbWFfM2MxNV8zNDEwXzc4MGEmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiUE1FTCBHbG9iYWwgVHJvcGljYWwgTW9vcmVkIEJ1b3kgQXJyYXkiLCAicmFtYV8zYzE1XzM0MTBfNzgwYSJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9zdHJhdHVzX2ZsdXhfOTc3MF83ZjE4X2IzMTQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3N0cmF0dXNfZmx1eF85NzcwXzdmMThfYjMxNCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9zdHJhdHVzX2ZsdXhfOTc3MF83ZjE4X2IzMTQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiT2NlYW5TSVRFUyBTdHJhdHVzIHN1cmZhY2UgbW9vcmluZyBmbHV4ZXMgY2FsY3VsYXRlZCB3aXRoIENvYXJlIDMuMCBhbGdvcml0aG0iLCAiT2NlYW5TaXRlcyB0aW1lLXNlcmllcyBmbHV4IGRhdGEgZnJvbSBTdHJhdHVzIHN0YXRpb25cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5RQiAoc2Vuc2libGUgaGVhdCBmbHV4LCBXL20yKVxuUUggKGxhdGVudCBoZWF0IGZsdXgsIFcvbTIpXG5RTiAobmV0IGhlYXQgZmx1eCwgVy9tMilcblFMIChuZXQgbG9uZ3dhdmUsIFcvbTIpXG5RUyAobmV0IHNob3J0d2F2ZSwgVy9tMilcblRBVURJUiAod2luZCBzdHJlc3MgZGlyZWN0aW9uLCBkZWdyZWUgTilcblRBVU1BRyAod2luZCBzdHJlc3MgbWFnbml0dWRlLCBOL21eMilcblRTS0lOIChTU1QgYWRqdXN0ZWQgdG8gc2tpbiwgZGVncmVlKVxuV1NfSCAod2luZCBzcGVlZCBhZGp1c3RlZCB0byAxMG0sIG0vcylcblFRX0ggKHNwZWNpZmljIGh1bWlkaXR5IGFkanVzdGVkIHRvIDJtLCBnL2tnKVxuVEFfSCAoYWlyIHRlbXBlcmF0dXJlIGFkanVzdGVkIHRvIDJtLCBkZWdyZWVfQylcblRBVUUgKGVhc3Qgd2luZCBzdHJlc3MsIE4vbV4yKVxuVEFVTiAobm9ydGggd2luZCBzdHJlc3MsIE4vbV4yKVxuU1RBQklMSVRZIChzdGFiaWxpdHkgcGFyYW1ldGVyLCAxKVxuZGVwdGggKGRlcHRoIGNvb3JkaW5hdGUgb2YgdHNraW4sIG0pXG53bW9fcGxhdGZvcm1fY29kZVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9zdHJhdHVzX2ZsdXhfOTc3MF83ZjE4X2IzMTRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3N0cmF0dXNfZmx1eF85NzcwXzdmMThfYjMxNF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9zdHJhdHVzX2ZsdXhfOTc3MF83ZjE4X2IzMTQvaW5kZXguanNvbiIsICJodHRwOi8vdW9wLndob2kuZWR1L3Byb2plY3RzL3N0cmF0dXMiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3Mvc3RyYXR1c19mbHV4Xzk3NzBfN2YxOF9iMzE0LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1zdHJhdHVzX2ZsdXhfOTc3MF83ZjE4X2IzMTQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiV0hPSSIsICJzdHJhdHVzX2ZsdXhfOTc3MF83ZjE4X2IzMTQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvc3RyYXR1c19tZXRfYWI0M19lNjJhXzU0OTQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3N0cmF0dXNfbWV0X2FiNDNfZTYyYV81NDk0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3N0cmF0dXNfbWV0X2FiNDNfZTYyYV81NDk0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk9jZWFuU0lURVMgU3RyYXR1cyBzdXJmYWNlIG1vb3JpbmcgTUVUIGRhdGEiLCAiT2NlYW5TaXRlcyB0aW1lLXNlcmllcyBkYXRhIGZyb20gU3RyYXR1cyBzdGF0aW9uXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuQUlSVCAoYWlyIHRlbXBlcmF0dXJlLCBkZWdyZWVfQylcblJFTEggKHJlbGF0aXZlIGh1bWlkaXR5LCBwZXJjZW50KVxuQVRNUyAoYmFyb21ldHJpYyBwcmVzc3VyZSwgbWlsbGliYXJzKVxuTFcgKHN1cmZhY2UgZG93bndlbGxpbmcgbG9uZ3dhdmUgcmFkaWF0aW9uLCBXIG0tMilcblNXIChzaG9ydHdhdmUgcmFkaWF0aW9uLCBXIG0tMilcblJBSU4gKHByZWNpcGl0YXRpb24gcmF0ZSwgbW0vaG91cilcblVXTkQgKFdpbmQgVmVsb2NpdHkgRWFzdCwgbWV0ZXJzL3NlY29uZClcblZXTkQgKHdpbmQgdmVsb2NpdHkgbm9ydGgsIG1ldGVycy9zZWNvbmQpXG5URU1QIChzZWEgdGVtcGVyYXR1cmUsIGRlZ3JlZV9DKVxuUFNBTCAoc2VhIHdhdGVyIHByYWN0aWNhbCBzYWxpbml0eSwgLjAwMSlcbkNOREMgKGNvbmR1Y3Rpdml0eSwgUyBtLTEpXG5VQ1VSIChFYXN0d2FyZCBTZWEgV2F0ZXIgVmVsb2NpdHksIFMgbS0xKVxuVkNVUiAoTm9ydGh3YXJkIFNlYSBXYXRlciBWZWxvY2l0eSwgUyBtLTEpXG5sYXRpdHVkZSAoYXBwcm94aW1hdGUgbGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGFwcHJveGltYXRlIGxvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxud21vX3BsYXRmb3JtX2NvZGVcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9zdHJhdHVzX21ldF9hYjQzX2U2MmFfNTQ5NF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvc3RyYXR1c19tZXRfYWI0M19lNjJhXzU0OTRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vc3RyYXR1c19tZXRfYWI0M19lNjJhXzU0OTQvaW5kZXguanNvbiIsICJodHRwOi8vdW9wLndob2kuZWR1L3Byb2plY3RzL3N0cmF0dXMiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3Mvc3RyYXR1c19tZXRfYWI0M19lNjJhXzU0OTQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXN0cmF0dXNfbWV0X2FiNDNfZTYyYV81NDk0JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIldIT0kiLCAic3RyYXR1c19tZXRfYWI0M19lNjJhXzU0OTQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvdGFvXzZlYjRfZTc3M18yZmJjLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC90YW9fNmViNF9lNzczXzJmYmMiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvdGFvXzZlYjRfZTc3M18yZmJjLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk9jZWFuU0lURVMgVEFPIGRhaWx5IGluLXNpdHUgZGF0YSIsICJUaGlzIGZpbGUgY29udGFpbnMgZGFpbHkgcmVhbC10aW1lIGFuZCBkZWxheWVkLW1vZGUgaW4tc2l0dSBkYXRhIGZyb20gb25lIG9mIHRoZSBmbHV4IHJlZmVyZW5jZSBtb29yaW5nIHNpdGVzIGluIHRoZSB0cm9waWNhbCBvY2VhbnMuIEluY2x1ZGVkIGluIHRoaXMgZmlsZSBhcmUgc2VhIHRlbXBlcmF0dXJlcyBmcm9tIHRoZSBzdXJmYWNlIHRvIDUwMG0gZGVwdGgsIHNhbGluaXR5IGFuZCBkZW5zaXR5IChzaWdtYS10aGV0YSkgZnJvbSB0aGUgc3VyZmFjZSB0byB0eXBpY2FsbHkgMTIwbSBkZXB0aCwgc2VhIGN1cnJlbnRzIHR5cGljYWxseSBhdCAxMG0gZGVwdGggYW5kIGF0IHNvbWUgc2l0ZXMgZGVlcGVyLCBhIHZhcmlldHkgb2Ygc3VyZmFjZSBvYnNlcnZhdGlvbnMgZm9yIG5ldCBhaXItc2VhIGZsdXhlcyBvZiBoZWF0LCBtb2lzdHVyZSwgYW5kIG1vbWVudHVtIGluY2x1ZGluZyB3aW5kcywgc29sYXIgYW5kIGxvbmd3YXZlIHJhZGlhdGlvbiwgcmFpbiwgYWlyIHRlbXBlcmF0dXJlLCByZWxhdGl2ZSBodW1pZGl0eSwgYW5kIHNlYSBsZXZlbCBhaXJwcmVzc3VyZS4gQnVveSBwb3NpdGlvbnMgYXJlIGFsc28gaW5jbHVkZWQgYXMgdGltZSBzZXJpZXMgb2YgbGF0aXR1ZGUgYW5kIGxvbmdpdHVkZS5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbndtb19wbGF0Zm9ybV9jb2RlXG5zaXRlX2NvZGVcbnNpdGVfaWQgKE9jZWFuU0lURVMgc3RhdGlvbiBJRClcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAoRGVwdGggb2YgZWFjaCBtZWFzdXJlbWVudCwgbSlcbmxhdGl0dWRlIChMYXRpdHVkZSBvZiBlYWNoIGxvY2F0aW9uLCBkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChMb25naXR1ZGUgb2YgZWFjaCBsb2NhdGlvbiwgZGVncmVlc19lYXN0KVxuVEVNUCAodGVtcGVyYXR1cmUsIGRlZ3JlZV9DZWxzaXVzKVxuVEVNUF9RQyAocXVhbGl0eSBmbGFnKVxuVEVNUF9ETSAobWV0aG9kIG9mIGRhdGEgcHJvY2Vzc2luZylcbmRlcGN1ciAoRGVwdGggb2YgZWFjaCBtZWFzdXJlbWVudCwgbWV0ZXJzKVxuVUNVUiAoem9uYWwgY3VycmVudCwgY20vcylcblZDVVIgKG1lcmlkaW9uYWwgY3VycmVudCwgY20vcylcbkNTUEQgKGN1cnJlbnQgc3BlZWQsIGNtL3MpXG5DU1BEX1FDIChxdWFsaXR5IGZsYWcpXG5DU1BEX0RNIChtZXRob2Qgb2YgZGF0YSBwcm9jZXNzaW5nKVxuQ0RJUiAoY3VycmVudCBkaXJlY3Rpb24gKG9jZWFub2dyYXBoaWMgY29udmVudGlvbiwgZmxvd2luZyB0byksIGRlZ3JlZSlcbkNESVJfUUMgKHF1YWxpdHkgZmxhZylcbkNESVJfRE0gKG1ldGhvZCBvZiBkYXRhIHByb2Nlc3NpbmcpXG5kZXBwc2FsIChEZXB0aCBvZiBlYWNoIG1lYXN1cmVtZW50LCBtZXRlcnMpXG5QU0FMIChzYWxpbml0eSwgUFNVKVxuLi4uICg0MiBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC90YW9fNmViNF9lNzczXzJmYmNfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3Rhb182ZWI0X2U3NzNfMmZiY19pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby90YW9fNmViNF9lNzczXzJmYmMvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy90YW9fNmViNF9lNzczXzJmYmMucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXRhb182ZWI0X2U3NzNfMmZiYyZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBL1BNRUwiLCAidGFvXzZlYjRfZTc3M18yZmJjIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3dob3RzX2ZsdXhfZjgyZl80Njg0X2E3NGYuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3dob3RzX2ZsdXhfZjgyZl80Njg0X2E3NGYiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvd2hvdHNfZmx1eF9mODJmXzQ2ODRfYTc0Zi5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJPY2VhblNJVEVTIFdIT1RTIHN1cmZhY2UgbW9vcmluZyBmbHV4ZXMgY2FsY3VsYXRlZCB3aXRoIENvYXJlIDMuMCBhbGdvcml0aG0iLCAiT2NlYW5TaXRlcyB0aW1lLXNlcmllcyBGTFVYICBkYXRhIGZyb20gV0hPVFMgc3RhdGlvblxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcblFCIChzZW5zaWJsZSBoZWF0IGZsdXgsIFcvbTIpXG5RSCAobGF0ZW50IGhlYXQgZmx1eCwgVy9tMilcblFOIChuZXQgaGVhdCBmbHV4LCBXL20yKVxuUUwgKG5ldCBsb25nd2F2ZSwgVy9tMilcblFTIChuZXQgc2hvcnR3YXZlLCBXL20yKVxuVEFVRElSICh3aW5kIHN0cmVzcyBkaXJlY3Rpb24sIGRlZ3JlZSBOKVxuVEFVTUFHICh3aW5kIHN0cmVzcyBtYWduaXR1ZGUsIE4vbV4yKVxuVFNLSU4gKFNTVCBhZGp1c3RlZCB0byBza2luLCBkZWdyZWUpXG5XU19IICh3aW5kIHNwZWVkIGFkanVzdGVkIHRvIDEwbSwgbS9zKVxuUVFfSCAoc3BlY2lmaWMgaHVtaWRpdHkgYWRqdXN0ZWQgdG8gMm0sIGcva2cpXG5UQV9IIChhaXIgdGVtcGVyYXR1cmUgYWRqdXN0ZWQgdG8gMm0sIGRlZ3JlZV9DKVxuVEFVRSAoZWFzdCB3aW5kIHN0cmVzcywgTi9tXjIpXG5UQVVOIChub3J0aCB3aW5kIHN0cmVzcywgTi9tXjIpXG5TVEFCSUxJVFkgKHN0YWJpbGl0eSBwYXJhbWV0ZXIsIDEpXG5kZXB0aCAoZGVwdGggY29vcmRpbmF0ZSBvZiB0c2tpbiwgbSlcbndtb19wbGF0Zm9ybV9jb2RlXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3dob3RzX2ZsdXhfZjgyZl80Njg0X2E3NGZfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3dob3RzX2ZsdXhfZjgyZl80Njg0X2E3NGZfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vd2hvdHNfZmx1eF9mODJmXzQ2ODRfYTc0Zi9pbmRleC5qc29uIiwgImh0dHA6Ly91b3Aud2hvaS5lZHUvcHJvamVjdHMvc3RyYXR1cyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy93aG90c19mbHV4X2Y4MmZfNDY4NF9hNzRmLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD13aG90c19mbHV4X2Y4MmZfNDY4NF9hNzRmJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIldIT0kiLCAid2hvdHNfZmx1eF9mODJmXzQ2ODRfYTc0ZiJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC93aG90c19tZXRfZjE4M19lZTA2XzhiNjMuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3dob3RzX21ldF9mMTgzX2VlMDZfOGI2MyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC93aG90c19tZXRfZjE4M19lZTA2XzhiNjMuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiT2NlYW5TSVRFUyBXSE9UUyBzdXJmYWNlIG1vb3JpbmcgTUVUIGRhdGEiLCAiT2NlYW5TaXRlcyB0aW1lLXNlcmllcyBNRVQgIGRhdGEgZnJvbSBXSE9UUyBzdGF0aW9uXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuQUlSVCAoYWlyIHRlbXBlcmF0dXJlLCBkZWdyZWVfQylcblJFTEggKHJlbGF0aXZlIGh1bWlkaXR5LCBwZXJjZW50KVxuQVRNUyAoYmFyb21ldHJpYyBwcmVzc3VyZSwgbWlsbGliYXJzKVxuTFcgKHN1cmZhY2UgZG93bndlbGxpbmcgbG9uZ3dhdmUgcmFkaWF0aW9uLCBXIG0tMilcblNXIChzaG9ydHdhdmUgcmFkaWF0aW9uLCBXIG0tMilcblJBSU4gKHByZWNpcGl0YXRpb24gcmF0ZSwgbW0vaG91cilcblVXTkQgKFdpbmQgVmVsb2NpdHkgRWFzdCwgbWV0ZXJzL3NlY29uZClcblZXTkQgKHdpbmQgdmVsb2NpdHkgbm9ydGgsIG1ldGVycy9zZWNvbmQpXG5URU1QIChzZWEgdGVtcGVyYXR1cmUsIGRlZ3JlZV9DKVxuUFNBTCAoc2VhIHdhdGVyIHByYWN0aWNhbCBzYWxpbml0eSwgLjAwMSlcbkNOREMgKGNvbmR1Y3Rpdml0eSwgUyBtLTEpXG5VQ1VSIChFYXN0d2FyZCBTZWEgV2F0ZXIgVmVsb2NpdHksIFMgbS0xKVxuVkNVUiAoTm9ydGh3YXJkIFNlYSBXYXRlciBWZWxvY2l0eSwgUyBtLTEpXG5sYXRpdHVkZSAoYXBwcm94aW1hdGUgbGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGFwcHJveGltYXRlIGxvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxud21vX3BsYXRmb3JtX2NvZGVcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC93aG90c19tZXRfZjE4M19lZTA2XzhiNjNfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3dob3RzX21ldF9mMTgzX2VlMDZfOGI2M19pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby93aG90c19tZXRfZjE4M19lZTA2XzhiNjMvaW5kZXguanNvbiIsICJodHRwOi8vdW9wLndob2kuZWR1L3Byb2plY3RzL3N0cmF0dXMiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3Mvd2hvdHNfbWV0X2YxODNfZWUwNl84YjYzLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD13aG90c19tZXRfZjE4M19lZTA2XzhiNjMmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiV0hPSSIsICJ3aG90c19tZXRfZjE4M19lZTA2XzhiNjMiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvT1NNQ19QUk9GSUxFUlMuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL09TTUNfUFJPRklMRVJTIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL09TTUNfUFJPRklMRVJTLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk9TTUMgQXJnbyBQcm9maWxlIGRhdGEiLCAiT1NNQyBBcmdvIFByb2ZpbGUgZGF0YVxuXG5jZG1fZGF0YV90eXBlID0gUHJvZmlsZVxuVkFSSUFCTEVTOlxucGxhdGZvcm1fY29kZVxub3JnYW5pemF0aW9uX25hbWVcbmNvdW50cnlfbmFtZVxucGxhdGZvcm1fdHlwZV9uYW1lXG50aW1lIChPQlNFUlZBVElPTiBEQVRFLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxucGFyYW1ldGVyX25hbWVcbmRhaWx5X29ic19jb3VudFxub2JzZXJ2YXRpb25fZGVwdGhcbm9ic2VydmF0aW9uX3ZhbHVlXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL09TTUNfUFJPRklMRVJTX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9PU01DX1BST0ZJTEVSU19pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9PU01DX1BST0ZJTEVSUy9pbmRleC5qc29uIiwgInd3dy5vc21jLm5vYWEuZ292IiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL09TTUNfUFJPRklMRVJTLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1PU01DX1BST0ZJTEVSUyZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJPU01DIiwgIk9TTUNfUFJPRklMRVJTIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL09TTUNfZmxhdHRlbmVkLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9PU01DX2ZsYXR0ZW5lZCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9PU01DX2ZsYXR0ZW5lZC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJPU01DIGZsYXR0ZW5lZCBvYnNlcnZhdGlvbnMgZnJvbSBHVFMiLCAiT1NNQyBmbGF0dGVuZWQgb2JzZXJ2YXRpb25zIGZyb20gR1RTLCBwcm92aWRpbmcgdHVwbGVkIGRhdGEgYXZhaWxhYmlsaXR5XG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxucGxhdGZvcm1faWRcbnBsYXRmb3JtX2NvZGVcbnBsYXRmb3JtX3R5cGVcbmNvdW50cnlcbnRpbWUgKG9ic2VydmF0aW9uIGRhdGUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxub2JzZXJ2YXRpb25fZGVwdGhcbnNzdCAoc2VhIHN1cmZhY2UgdGVtcGVyYXR1cmUsIERlZyBDKVxuYXRtcCAoYWlyIHRlbXBlcmF0dXJlLCBEZWcgQylcbnByZWNpcCAocHJlY2lwaXRhdGlvbiwgbW0pXG56dG1wIChwcm9maWxlIHdhdGVyIHRlbXBlcmF0dXJlLCBEZWcgQylcbnpzYWwgKHByb2ZpbGUgc2FsaW5pdHkpXG5zbHAgKHNlYSBsZXZlbCBwcmVzc3VyZSwgaFBhKVxud2luZHNwZCAod2luZCBzcGVlZCwgbS9zKVxud2luZGRpciAod2luZCBmcm9tIGRpcmVjdGlvbiwgRGVnIHRydWUpXG53dmh0IChzZWEgc3VyZmFjZSB3YXZlIHNpZ25pZmljYW50IGhlaWdodCwgbSlcbndhdGVybGV2ZWwgKG0pXG5jbG91ZHMgKGNsb3VkIGNvdmVyLCBva3RhcylcbmRld3BvaW50IChkZXcgcG9pbnQgdGVtcGVyYXR1cmUsIERlZyBDKVxudW8gKGVhc3R3YXJkIHNlYSB3YXRlciB2ZWxvY2l0eSwgbSBzLTEpXG52byAobm9ydGh3YXJkIHNlYSB3YXRlciB2ZWxvY2l0eSwgbSBzLTEpXG53byAodXB3YXJkIHNlYSB3YXRlciB2ZWxvY2l0eSwgbSBzLTEpXG5yYWluZmFsbF9yYXRlIChtIHMtMSlcbmh1ciAocmVsYXRpdmUgaHVtaWRpdHkpXG5zZWFfd2F0ZXJfZWxlY19jb25kdWN0aXZpdHkgKHNlYSB3YXRlciBlbGVjdHJpY2FsIGNvbmR1Y3Rpdml0eSwgUyBtLTEpXG5zZWFfd2F0ZXJfcHJlc3N1cmUgKGRiYXIpXG4uLi4gKDcgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvT1NNQ19mbGF0dGVuZWRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL09TTUNfZmxhdHRlbmVkX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL09TTUNfZmxhdHRlbmVkL2luZGV4Lmpzb24iLCAid3d3Lm9zbWMubm9hYS5nb3YiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvT1NNQ19mbGF0dGVuZWQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPU9TTUNfZmxhdHRlbmVkJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk9TTUMiLCAiT1NNQ19mbGF0dGVuZWQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvT1NNQ19Qb2ludHMuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL09TTUNfUG9pbnRzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL09TTUNfUG9pbnRzLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk9TTUMgbm9ybWFsaXplZCBvYnNlcnZhdGlvbnMgZnJvbSBHVFMiLCAiT1NNQyBub3JtYWxpemVkIEluLXNpdHUgUmVhbCB0aW1lIEdUUyBkYXRhXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuUExBVEZPUk1fQ09ERSAoU3RhdGlvbiBJRClcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxucGxhdGZvcm1cbnBhcmFtZXRlclxuT0JTRVJWQVRJT05fVkFMVUVcbk9CU0VSVkFUSU9OX0RFUFRIXG5DT1VOVFJZX05BTUVcbm9yZ2FuaXphdGlvbl9uYW1lXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvT1NNQ19Qb2ludHNfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL09TTUNfUG9pbnRzX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL09TTUNfUG9pbnRzL2luZGV4Lmpzb24iLCAiaHR0cDovL3d3dy5vc21jLm5vYWEuZ292IiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL09TTUNfUG9pbnRzLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1PU01DX1BvaW50cyZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJPU01DIiwgIk9TTUNfUG9pbnRzIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL09TTUNWNF9EVU9fUFJPRklMRVMuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL09TTUNWNF9EVU9fUFJPRklMRVMiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvT1NNQ1Y0X0RVT19QUk9GSUxFUy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJPU01DIFByb2ZpbGVzIiwgIk9TTUMgcHJvZmlsZXMgZnJvbSBHVFNcblxuY2RtX2RhdGFfdHlwZSA9IFByb2ZpbGVcblZBUklBQkxFUzpcbnBsYXRmb3JtX2NvZGVcbnBsYXRmb3JtX3R5cGVcbmNvdW50cnlcbnRpbWUgKE9CU0VSVkFUSU9OIERBVEUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxuZGVwdGggKE9CU0VSVkFUSU9OIERFUFRILCBtKVxuenRtcCAocHJvZmlsZSB3YXRlciB0ZW1wZXJhdHVyZSwgRGVnIEMpXG56c2FsIChTZWEgV2F0ZXIgU2FsaW5pdHkpXG5zZWFfd2F0ZXJfZWxlY19jb25kdWN0aXZpdHkgKFNlYSBXYXRlciBFbGVjdHJpY2FsIENvbmR1Y3Rpdml0eSwgUyBtLTEpXG5zZWFfd2F0ZXJfcHJlc3N1cmUgKGRiYXIpXG5ub3J0aHdhcmRfc2VhX3dhdGVyX3ZlbG9jaXR5IChtIHMtMSlcbmVhc3R3YXJkX3NlYV93YXRlcl92ZWxvY2l0eSAobSBzLTEpXG51cHdhcmRfc2VhX3dhdGVyX3ZlbG9jaXR5IChtIHMtMSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9PU01DVjRfRFVPX1BST0ZJTEVTX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9PU01DVjRfRFVPX1BST0ZJTEVTX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL09TTUNWNF9EVU9fUFJPRklMRVMvaW5kZXguanNvbiIsICJ3d3cub3NtYy5ub2FhLmdvdiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9PU01DVjRfRFVPX1BST0ZJTEVTLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1PU01DVjRfRFVPX1BST0ZJTEVTJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk9TTUMiLCAiT1NNQ1Y0X0RVT19QUk9GSUxFUyJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9PU01DVjRfRFVPX1NVUkZBQ0VfVFJBSkVDVE9SWS5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvT1NNQ1Y0X0RVT19TVVJGQUNFX1RSQUpFQ1RPUlkiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvT1NNQ1Y0X0RVT19TVVJGQUNFX1RSQUpFQ1RPUlkuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiT1NNQyBzdXJmYWNlIHRyYWplY3RvcnkgZGF0YSIsICJTdXJmYWNlIHRyYWplY3RvcnkgZGF0YSBmcm9tIEdUU1xuXG5jZG1fZGF0YV90eXBlID0gVHJhamVjdG9yeVxuVkFSSUFCTEVTOlxucGxhdGZvcm1faWRcbnBsYXRmb3JtX2NvZGVcbnBsYXRmb3JtX3R5cGVcbmNvdW50cnlcbnRpbWUgKE9CU0VSVkFUSU9OIERBVEUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxub2JzZXJ2YXRpb25fZGVwdGhcbnNzdCAoc2VhIHN1cmZhY2UgdGVtcGVyYXR1cmUsIERlZyBDKVxuYXRtcCAoYWlyIHRlbXBlcmF0dXJlLCBEZWcgQylcbnByZWNpcCAocHJlY2lwaXRhdGlvbiwgbW0pXG56dG1wIChwcm9maWxlIHdhdGVyIHRlbXBlcmF0dXJlLCBEZWcgQylcbnpzYWwgKHByb2ZpbGUgc2FsaW5pdHkpXG5zc3NcbnNscCAoc2VhIGxldmVsIHByZXNzdXJlLCBoUGEpXG53aW5kc3BkICh3aW5kIHNwZWVkLCBtL3MpXG53aW5kZGlyIChXaW5kIEZyb20gRGlyZWN0aW9uLCBEZWcgdHJ1ZSlcbnd2aHQgKFNlYSBTdXJmYWNlIFdhdmUgU2lnbmlmaWNhbnQgSGVpZ2h0LCBtKVxud2F0ZXJsZXZlbCAobSlcbmNsb3VkcyAoY2xvdWQgY292ZXIsIG9rdGFzKVxuZGV3cG9pbnQgKGRldyBwb2ludCB0ZW1wZXJhdHVyZSwgRGVnIEMpXG5lYXN0d2FyZF9zZWFfd2F0ZXJfdmVsb2NpdHkgKG0gcy0xKVxubm9ydGh3YXJkX3NlYV93YXRlcl92ZWxvY2l0eSAobSBzLTEpXG51cHdhcmRfc2VhX3dhdGVyX3ZlbG9jaXR5IChtIHMtMSlcbnJhaW5mYWxsX3JhdGUgKG0gcy0xKVxucmVsYXRpdmVfaHVtaWRpdHlcbnNlYV93YXRlcl9lbGVjdHJpY2FsX2NvbmQgKHNlYSB3YXRlciBlbGVjdHJpY2FsIGNvbmR1Y3Rpdml0eSwgUyBtLTEpXG4uLi4gKDggbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvT1NNQ1Y0X0RVT19TVVJGQUNFX1RSQUpFQ1RPUllfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL09TTUNWNF9EVU9fU1VSRkFDRV9UUkFKRUNUT1JZX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL09TTUNWNF9EVU9fU1VSRkFDRV9UUkFKRUNUT1JZL2luZGV4Lmpzb24iLCAid3d3Lm9zbWMubm9hYS5nb3YiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvT1NNQ1Y0X0RVT19TVVJGQUNFX1RSQUpFQ1RPUlkucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPU9TTUNWNF9EVU9fU1VSRkFDRV9UUkFKRUNUT1JZJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk9TTUMiLCAiT1NNQ1Y0X0RVT19TVVJGQUNFX1RSQUpFQ1RPUlkiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvT1NNQ1Y0X0RVT19USU1FX1NFUklFUy5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvT1NNQ1Y0X0RVT19USU1FX1NFUklFUyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9PU01DVjRfRFVPX1RJTUVfU0VSSUVTLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIk9TTUMgVGltZVNlcmllcyBkYXRhIiwgIk9TTUMgVGltZVNlcmllcyBkYXRhXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5wbGF0Zm9ybV9pZFxucGxhdGZvcm1fY29kZVxucGxhdGZvcm1fdHlwZSAoUExBVEZPUiBUWVBFKVxuY291bnRyeVxudGltZSAoT0JTRVJWQVRJT04gREFURSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbm9ic2VydmF0aW9uX2RlcHRoXG5zc3RcbmF0bXBcbnByZWNpcFxuenRtcFxuenNhbCAoU2VhIFdhdGVyIFNhbGluaXR5KVxuc3NzIChTZWEgV2F0ZXIgU2FsaW5pdHkpXG5zbHAgKFN1cmZhY2UgQWlyIFByZXNzdXJlKVxud2luZHNwZFxud2luZGRpciAoV2luZCBGcm9tIERpcmVjdGlvbilcbnd2aHQgKFNlYSBTdXJmYWNlIFdhdmUgU2lnbmlmaWNhbnQgSGVpZ2h0KVxud2F0ZXJsZXZlbFxuY2xvdWRzXG5kZXdwb2ludFxuZWFzdHdhcmRfc2VhX3dhdGVyX3ZlbFxubm9ydGh3YXJkX3NlYV93YXRlcl92ZWxcbnVwd2FyZF9zZWFfd2F0ZXJfdmVsXG5yYWluZmFsbF9yYXRlXG5yZWxhdGl2ZV9odW1pZGl0eVxuc2VhX3dhdGVyX2VsZWN0cmljYWxfY29uZFxuc2VhX3dhdGVyX3ByZXNzdXJlXG5zdXJmYWNlX2R3bndlbGxpbmdfbG5nd2F2ZVxuLi4uICg3IG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL09TTUNWNF9EVU9fVElNRV9TRVJJRVNfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL09TTUNWNF9EVU9fVElNRV9TRVJJRVNfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vT1NNQ1Y0X0RVT19USU1FX1NFUklFUy9pbmRleC5qc29uIiwgInd3dy5vc21jLm5vYWEuZ292IiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL09TTUNWNF9EVU9fVElNRV9TRVJJRVMucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPU9TTUNWNF9EVU9fVElNRV9TRVJJRVMmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiT1NNQyIsICJPU01DVjRfRFVPX1RJTUVfU0VSSUVTIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF80MTdkXzMzYWRfZGVhZC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0XzQxN2RfMzNhZF9kZWFkIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF80MTdkXzMzYWRfZGVhZC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJQYWNpZmljIElzbGFuZCBOZXR3b3JrIE1hcmluZSBGaXNoIE1vbml0b3JpbmcgRGF0YXNldCAtIFN1cnZleXMiLCAiTmF0aW9uYWwgUGFyayBTZXJ2aWNlIEZpc2ggU3RvY2sgRGF0YVxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubWluaW11bURlcHRoSW5NZXRlcnNcbm1heGltdW1EZXB0aEluTWV0ZXJzXG5pc2xhbmRHcm91cFxudmVybmFjdWxhck5hbWVcbnNjaWVudGlmaWNOYW1lXG5vaWRcbm1vZGlmaWVkXG5kYXRhc2V0SURcbmRhdGFzZXROYW1lXG5pbnN0aXR1dGlvbkNvZGVcbmNvbGxlY3Rpb25Db2RlXG5oaWdoZXJJbnN0aXR1dGlvbkNvZGVcbm93bmVySW5zdGl0dXRpb25Db2RlXG5iYXNpc09mUmVjb3JkXG5jYXRhbG9nTnVtYmVyXG50YXhvblJhbmtcbnZlcmJhdGltQ29vcmRpbmF0ZXNcbnZlcmJhdGltU1JTXG5nZW9kZXRpY0RhdHVtXG5jb29yZGluYXRlVW5jZXJ0YWludHlJbk1ldGVyc1xuZ2VvcmVmZXJlbmNlZEJ5XG5nZW9yZWZlcmVuY2VQcm90b2NvbFxud2F0ZXJCb2R5XG5pc2xhbmRcbi4uLiAoNjcgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvaGF3YWlpX3NvZXN0XzQxN2RfMzNhZF9kZWFkX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9oYXdhaWlfc29lc3RfNDE3ZF8zM2FkX2RlYWRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vaGF3YWlpX3NvZXN0XzQxN2RfMzNhZF9kZWFkL2luZGV4Lmpzb24iLCAiaHR0cDovL3NjaWVuY2UubmF0dXJlLm5wcy5nb3YvaW0vdW5pdHMvcGFjbi9tb25pdG9yaW5nL3ZzX2Zpc2hfbWFyaW5lLmNmbSIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9oYXdhaWlfc29lc3RfNDE3ZF8zM2FkX2RlYWQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWhhd2FpaV9zb2VzdF80MTdkXzMzYWRfZGVhZCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJVU0RPSS9OUFMvTlJTUy9JTUQvUEFDTiIsICJoYXdhaWlfc29lc3RfNDE3ZF8zM2FkX2RlYWQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0XzMxYmJfZWVlOV9lZjBhLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfMzFiYl9lZWU5X2VmMGEiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0XzMxYmJfZWVlOV9lZjBhLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlBhY2lmaWMgSXNsYW5kIE5ldHdvcmsgTWFyaW5lIEZpc2ggTW9uaXRvcmluZyBEYXRhc2V0IC0gVHJhbnNlY3RzIiwgIlRoZSBiZW50aGljIG1hcmluZSBjb21tdW5pdHkgaW4gdGhlIFBhY2lmaWMgSXNsYW5kIE5ldHdvcmsgKFBBQ04pIGlzIGEgY29tcGxleCBlY29sb2dpYyBzeXN0ZW0gYW5kIGEgZGl2ZXJzZSB0YXhvbm9taWMgZW52aXJvbm1lbnQsIGluY2x1ZGluZyBhbGdhZSBhbmQgY29yYWxzIGFuZCBvdGhlciBpbnZlcnRlYnJhdGVzLiBSZWVmLWJ1aWxkaW5nIGNvcmFscyBhcmUgdGhlIHByaW1hcnkgYXJjaGl0ZWN0dXJhbCBvcmdhbmlzbSBhbmQgYXJlIHNlbnNpdGl2ZSB0byBlbnZpcm9ubWVudGFsIGRlZ3JhZGF0aW9uOyB0aGVyZWZvcmUsIHRoZXkgYXJlIGEgZ29vZCBpbmRpY2F0b3Igb2Ygb3ZlcmFsbCBoZWFsdGggZm9yIG5lYXJzaG9yZSBtYXJpbmUgZWNvc3lzdGVtcy4gUHJpbWFyeSBzdHJlc3NvcnMgdG8gY29yYWwgcmVlZnMgaW5jbHVkZSBkaXNlYXNlLCBibGVhY2hpbmcsIHNlZGltZW50YXRpb24sIGV1dHJvcGhpY2F0aW9uLCBzdG9ybXMsIGFuZCBnbG9iYWwgY2xpbWF0ZSBjaGFuZ2UuIFRoZSBVbml0ZWQgTmF0aW9ucyBFbnZpcm9ubWVudCBQcm9ncmFtbWUgKFVORVApIGhhcyBwcm9wb3NlZCB1c2luZyBjb3JhbCByZWVmcyBhcyBhIHdvcmxkd2lkZSBpbmRpY2F0b3IgZWNvc3lzdGVtIGZvciBnbG9iYWwgY2xpbWF0ZSBjaGFuZ2UgKFNwYWxkaW5nIGV0IGFsLiAyMDA0KS4gRm9yIHRoZXNlIHJlYXNvbnMsIHRoZSBQQUNOIGhhcyBjaG9zZW4gdG8gaW1wbGVtZW50IGxvbmcgdGVybSBtb25pdG9yaW5nIG9mIGJlbnRoaWMgbWFyaW5lIGNvbW11bml0aWVzLiBCZW50aGljIG1hcmluZSBjb21tdW5pdGllcyBpcyBtb3N0IGNsb3NlbHkgbGlua2VkIHdpdGggbWFyaW5lIGZpc2gsIGFuZCBtb25pdG9yaW5nIGVmZm9ydHMgd2lsbCBiZSBjb25kdWN0ZWQgYXQgdGhlIHNhbWUgdGltZSBhbmQgbG9jYXRpb24gdG8gbWF4aW1pemUgZGF0YSB2YWx1ZVxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubWluaW11bURlcHRoSW5NZXRlcnNcbm1heGltdW1EZXB0aEluTWV0ZXJzXG5pc2xhbmRHcm91cFxudmVybmFjdWxhck5hbWVcbnNjaWVudGlmaWNOYW1lXG5vaWRcbm1vZGlmaWVkXG5kYXRhc2V0SURcbmRhdGFzZXROYW1lXG5pbnN0aXR1dGlvbkNvZGVcbmNvbGxlY3Rpb25Db2RlXG5pbnN0aXR1dGlvbklEXG5jb2xsZWN0aW9uSURcbm93bmVySW5zdGl0dXRpb25Db2RlXG5iYXNpc09mUmVjb3JkXG4uLi4gKDU4IG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2hhd2FpaV9zb2VzdF8zMWJiX2VlZTlfZWYwYV9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvaGF3YWlpX3NvZXN0XzMxYmJfZWVlOV9lZjBhX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2hhd2FpaV9zb2VzdF8zMWJiX2VlZTlfZWYwYS9pbmRleC5qc29uIiwgImh0dHA6Ly9zY2llbmNlLm5hdHVyZS5ucHMuZ292L2ltL3VuaXRzL3BhY24vbW9uaXRvcmluZy92c19maXNoX21hcmluZS5jZm0iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvaGF3YWlpX3NvZXN0XzMxYmJfZWVlOV9lZjBhLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1oYXdhaWlfc29lc3RfMzFiYl9lZWU5X2VmMGEmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiVVNET0kvTlBTL05SU1MvSU1EL1BBQ04iLCAiaGF3YWlpX3NvZXN0XzMxYmJfZWVlOV9lZjBhIl0sCiAgICAgIFsiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfNTY3M181MTdkXzNiOGMiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0XzU2NzNfNTE3ZF8zYjhjLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlBhY0lPT1MgTmVhcnNob3JlIFNlbnNvciAwMSAoTlMwMSk6IFdhaWtpa2kgWWFjaHQgQ2x1YiwgT2FodSwgSGF3YWlpIiwgIlRoZSBuZWFyc2hvcmUgc2Vuc29ycyBhcmUgcGFydCBvZiB0aGUgUGFjaWZpYyBJc2xhbmRzIE9jZWFuIE9ic2VydmluZyBTeXN0ZW0gKFBhY0lPT1MpIGFuZCBhcmUgZGVzaWduZWQgdG8gbWVhc3VyZSBhIHZhcmlldHkgb2Ygb2NlYW4gcGFyYW1ldGVycyBhdCBmaXhlZCBwb2ludCBsb2NhdGlvbnMgYWxvbmcgdGhlIHNvdXRoIHNob3JlIG9mIE9haHUuIE5TMDEgaXMgbG9jYXRlZCBhdCB0aGUgV2Fpa2lraSBZYWNodCBDbHViIGFuZCBpcyBmaXhlZCB0byB0aGUgYnJpZGdlIHBpZXIuIFRoZSBpbnN0cnVtZW50IGlzIGEgU2VhLUJpcmQgRWxlY3Ryb25pY3MgbW9kZWwgMTYrIFYyIGNvdXBsZWQgd2l0aCBhIFdFVCBMYWJzIEVDTy1GTE5UVVMgY29tYmluYXRpb24gc2Vuc29yLiBUaGUgcGFja2FnZSBpcyBmaXhlZCB0byBhIHBpbGluZyB+MC41bSBiZWxvdyBtZWFuIHNlYSBsZXZlbC5cblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKGRlcHRoIGJlbG93IG1lYW4gc2VhIGxldmVsLCBtKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbnRlbXBlcmF0dXJlIChDZWxzaXVzKVxuY29uZHVjdGl2aXR5IChTIG0tMSlcbnR1cmJpZGl0eSAoTlRVKVxuY2hsb3JvcGh5bGwgKGtnIG0tMylcbnNhbGluaXR5ICgxZS0zKVxucHJlc3N1cmUgKGRiYXIpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvaGF3YWlpX3NvZXN0XzU2NzNfNTE3ZF8zYjhjX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9oYXdhaWlfc29lc3RfNTY3M181MTdkXzNiOGNfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vaGF3YWlpX3NvZXN0XzU2NzNfNTE3ZF8zYjhjL2luZGV4Lmpzb24iLCAiaHR0cDovL3d3dy5wYWNpb29zLmhhd2FpaS5lZHUvd2F0ZXIvc2Vuc29yLXdhaWtpa2kvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2hhd2FpaV9zb2VzdF81NjczXzUxN2RfM2I4Yy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9aGF3YWlpX3NvZXN0XzU2NzNfNTE3ZF8zYjhjJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIlVuaXZlcnNpdHkgb2YgSGF3YWlpIiwgImhhd2FpaV9zb2VzdF81NjczXzUxN2RfM2I4YyJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0XzEyNzNfZmFkMV8wNDA0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF8xMjczX2ZhZDFfMDQwNC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJQYWNJT09TIE5lYXJzaG9yZSBTZW5zb3IgMDIgKE5TMDIpOiBIYXdhaWkgWWFjaHQgQ2x1YiwgT2FodSwgSGF3YWlpIiwgIlRoZSBuZWFyc2hvcmUgc2Vuc29ycyBhcmUgcGFydCBvZiB0aGUgUGFjaWZpYyBJc2xhbmRzIE9jZWFuIE9ic2VydmluZyBTeXN0ZW0gKFBhY0lPT1MpIGFuZCBhcmUgZGVzaWduZWQgdG8gbWVhc3VyZSBhIHZhcmlldHkgb2Ygb2NlYW4gcGFyYW1ldGVycyBhdCBmaXhlZCBwb2ludCBsb2NhdGlvbnMgYWxvbmcgdGhlIHNvdXRoIHNob3JlIG9mIE9haHUuIE5TMDIgaXMgbG9jYXRlZCBhdCBhIGZsb2F0aW5nIGRvY2sgb2ZmIHRoZSBIYXdhaWkgWWFjaHQgQ2x1Yi4gVGhlIGluc3RydW1lbnQgaXMgYSBTZWEtQmlyZCBFbGVjdHJvbmljcyBtb2RlbCAxNisgVjIgY291cGxlZCB3aXRoIGEgV0VUIExhYnMgRUNPLUZMTlRVUyBjb21iaW5hdGlvbiBzZW5zb3IuIFRoZSBwYWNrYWdlIGlzIGZpeGVkIHRvIGEgZmxvYXRpbmcgZG9jayBqdXN0IGJlbG93IHRoZSBvY2VhbiBzdXJmYWNlLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAoZGVwdGggYmVsb3cgbWVhbiBzZWEgbGV2ZWwsIG0pXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxudGVtcGVyYXR1cmUgKFRlbXBlcmF0dXJlIChwcm9jZXNzZWQpLCBDZWxzaXVzKVxudGVtcGVyYXR1cmVfcmF3IChUZW1wZXJhdHVyZSAocmF3KSwgQ2Vsc2l1cylcbnRlbXBlcmF0dXJlX2RtX3FkIChUZW1wZXJhdHVyZSBxdWFsaXR5IGRlc2NyaXB0b3IpXG5jb25kdWN0aXZpdHkgKENvbmR1Y3Rpdml0eSAocHJvY2Vzc2VkKSwgUyBtLTEpXG5jb25kdWN0aXZpdHlfcmF3IChDb25kdWN0aXZpdHkgKHJhdyksIFMgbS0xKVxuY29uZHVjdGl2aXR5X2RtX3FkIChDb25kdWN0aXZpdHkgcXVhbGl0eSBkZXNjcmlwdG9yKVxudHVyYmlkaXR5IChUdXJiaWRpdHkgKHByb2Nlc3NlZCksIE5UVSlcbnR1cmJpZGl0eV9yYXcgKFR1cmJpZGl0eSAocmF3KSwgTlRVKVxudHVyYmlkaXR5X2RtX3FkIChUdXJiaWRpdHkgcXVhbGl0eSBkZXNjcmlwdG9yKVxuY2hsb3JvcGh5bGwgKENobG9yb3BoeWxsIChwcm9jZXNzZWQpLCBrZyBtLTMpXG5jaGxvcm9waHlsbF9yYXcgKENobG9yb3BoeWxsIChyYXcpLCBrZyBtLTMpXG5jaGxvcm9waHlsbF9kbV9xZCAoQ2hsb3JvcGh5bGwgcXVhbGl0eSBkZXNjcmlwdG9yKVxuc2FsaW5pdHkgKFNhbGluaXR5IChwcm9jZXNzZWQpLCAxZS0zKVxuc2FsaW5pdHlfcmF3IChTYWxpbml0eSAocmF3KSwgMWUtMylcbnNhbGluaXR5X2RtX3FkIChTYWxpbml0eSBxdWFsaXR5IGRlc2NyaXB0b3IpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvaGF3YWlpX3NvZXN0XzEyNzNfZmFkMV8wNDA0X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9oYXdhaWlfc29lc3RfMTI3M19mYWQxXzA0MDRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vaGF3YWlpX3NvZXN0XzEyNzNfZmFkMV8wNDA0L2luZGV4Lmpzb24iLCAiaHR0cDovL3d3dy5wYWNpb29zLmhhd2FpaS5lZHUvd2F0ZXIvc2Vuc29yLWhhd2FpaXlhY2h0Y2x1Yi8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvaGF3YWlpX3NvZXN0XzEyNzNfZmFkMV8wNDA0LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1oYXdhaWlfc29lc3RfMTI3M19mYWQxXzA0MDQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiVW5pdmVyc2l0eSBvZiBIYXdhaWkiLCAiaGF3YWlpX3NvZXN0XzEyNzNfZmFkMV8wNDA0Il0sCiAgICAgIFsiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfZDc4N18xYzM1XzIwOGQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0X2Q3ODdfMWMzNV8yMDhkLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlBhY0lPT1MgTmVhcnNob3JlIFNlbnNvciAwMyAoTlMwMyk6IEhpbHRvbiBIYXdhaWlhbiBQaWVyLCBPYWh1LCBIYXdhaWkiLCAiVGhlIG5lYXJzaG9yZSBzZW5zb3JzIGFyZSBwYXJ0IG9mIHRoZSBQYWNpZmljIElzbGFuZHMgT2NlYW4gT2JzZXJ2aW5nIFN5c3RlbSAoUGFjSU9PUykgYW5kIGFyZSBkZXNpZ25lZCB0byBtZWFzdXJlIGEgdmFyaWV0eSBvZiBvY2VhbiBwYXJhbWV0ZXJzIGF0IGZpeGVkIHBvaW50IGxvY2F0aW9ucyBhbG9uZyB0aGUgc291dGggc2hvcmUgb2YgT2FodS4gTlMwMyBpcyBsb2NhdGVkIGF0IHRoZSBBdGxhbnRpcyBQaWVyIG9mZiB0aGUgSGlsdG9uIEhhd2FpaWFuIFZpbGxhZ2UuIFRoZSBpbnN0cnVtZW50IGlzIGEgU2VhLUJpcmQgRWxlY3Ryb25pY3MgbW9kZWwgMzdTTVAuIFRoZSBwYWNrYWdlIGlzIGxvY2F0ZWQgYXQgYXBwcm94aW1hdGVseSAyLjAgbWV0ZXJzIGJlbG93IG1lYW4gc2VhIGxldmVsLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAoZGVwdGggYmVsb3cgbWVhbiBzZWEgbGV2ZWwsIG0pXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxudGVtcGVyYXR1cmUgKFRlbXBlcmF0dXJlIChwcm9jZXNzZWQpLCBDZWxzaXVzKVxudGVtcGVyYXR1cmVfcmF3IChUZW1wZXJhdHVyZSAocmF3KSwgQ2Vsc2l1cylcbnRlbXBlcmF0dXJlX2RtX3FkIChUZW1wZXJhdHVyZSBxdWFsaXR5IGRlc2NyaXB0b3IpXG5jb25kdWN0aXZpdHkgKENvbmR1Y3Rpdml0eSAocHJvY2Vzc2VkKSwgUyBtLTEpXG5jb25kdWN0aXZpdHlfcmF3IChDb25kdWN0aXZpdHkgKHJhdyksIFMgbS0xKVxuY29uZHVjdGl2aXR5X2RtX3FkIChDb25kdWN0aXZpdHkgcXVhbGl0eSBkZXNjcmlwdG9yKVxuc2FsaW5pdHkgKFNhbGluaXR5IChwcm9jZXNzZWQpLCAxZS0zKVxuc2FsaW5pdHlfcmF3IChTYWxpbml0eSAocmF3KSwgMWUtMylcbnNhbGluaXR5X2RtX3FkIChTYWxpbml0eSBxdWFsaXR5IGRlc2NyaXB0b3IpXG5wcmVzc3VyZSAoUHJlc3N1cmUgKHByb2Nlc3NlZCksIGRiYXIpXG5wcmVzc3VyZV9yYXcgKFByZXNzdXJlIChyYXcpLCBkYmFyKVxucHJlc3N1cmVfZG1fcWQgKFByZXNzdXJlIHF1YWxpdHkgZGVzY3JpcHRvcilcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9oYXdhaWlfc29lc3RfZDc4N18xYzM1XzIwOGRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2hhd2FpaV9zb2VzdF9kNzg3XzFjMzVfMjA4ZF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9oYXdhaWlfc29lc3RfZDc4N18xYzM1XzIwOGQvaW5kZXguanNvbiIsICJodHRwOi8vd3d3LnBhY2lvb3MuaGF3YWlpLmVkdS93YXRlci9zZW5zb3ItYXRsYW50aXMvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2hhd2FpaV9zb2VzdF9kNzg3XzFjMzVfMjA4ZC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9aGF3YWlpX3NvZXN0X2Q3ODdfMWMzNV8yMDhkJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIlVuaXZlcnNpdHkgb2YgSGF3YWlpIiwgImhhd2FpaV9zb2VzdF9kNzg3XzFjMzVfMjA4ZCJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0X2M5ZjlfYzIzMl8xZmU5IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF9jOWY5X2MyMzJfMWZlOS5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJQYWNJT09TIE5lYXJzaG9yZSBTZW5zb3IgMDQgKE5TMDQpOiBXYWlraWtpIEFxdWFyaXVtLCBPYWh1LCBIYXdhaWkiLCAiVGhlIG5lYXJzaG9yZSBzZW5zb3JzIGFyZSBwYXJ0IG9mIHRoZSBQYWNpZmljIElzbGFuZHMgT2NlYW4gT2JzZXJ2aW5nIFN5c3RlbSAoUGFjSU9PUykgYW5kIGFyZSBkZXNpZ25lZCB0byBtZWFzdXJlIGEgdmFyaWV0eSBvZiBvY2VhbiBwYXJhbWV0ZXJzIGF0IGZpeGVkIHBvaW50IGxvY2F0aW9ucyBhbG9uZyB0aGUgc291dGggc2hvcmUgb2YgT2FodS4gTlMwNCBpcyBsb2NhdGVkIGp1c3Qgb2ZmIHRoZSBXYWlraWtpIEFxdWFyaXVtIGFuZCBpcyBmaXhlZCB0byB0aGUgcGllci4gVGhlIGluc3RydW1lbnQgaXMgYSBTZWEtQmlyZCBFbGVjdHJvbmljcyBtb2RlbCAzN1NNUC4gVGhlIHBhY2thZ2UgaXMgbW91bnRlZCBvbiB0aGUgYm90dG9tIGluIGFwcHJveGltYXRlbHkgMi4wIHRvIDIuNSBtZXRlcnMgb2NlYW4gZGVwdGguXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChkZXB0aCBiZWxvdyBtZWFuIHNlYSBsZXZlbCwgbSlcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG50ZW1wZXJhdHVyZSAoVGVtcGVyYXR1cmUgKHByb2Nlc3NlZCksIENlbHNpdXMpXG50ZW1wZXJhdHVyZV9yYXcgKFRlbXBlcmF0dXJlIChyYXcpLCBDZWxzaXVzKVxudGVtcGVyYXR1cmVfZG1fcWQgKFRlbXBlcmF0dXJlIHF1YWxpdHkgZGVzY3JpcHRvcilcbmNvbmR1Y3Rpdml0eSAoQ29uZHVjdGl2aXR5IChwcm9jZXNzZWQpLCBTIG0tMSlcbmNvbmR1Y3Rpdml0eV9yYXcgKENvbmR1Y3Rpdml0eSAocmF3KSwgUyBtLTEpXG5jb25kdWN0aXZpdHlfZG1fcWQgKENvbmR1Y3Rpdml0eSBxdWFsaXR5IGRlc2NyaXB0b3IpXG5zYWxpbml0eSAoU2FsaW5pdHkgKHByb2Nlc3NlZCksIDFlLTMpXG5zYWxpbml0eV9yYXcgKFNhbGluaXR5IChyYXcpLCAxZS0zKVxuc2FsaW5pdHlfZG1fcWQgKFNhbGluaXR5IHF1YWxpdHkgZGVzY3JpcHRvcilcbnByZXNzdXJlIChQcmVzc3VyZSAocHJvY2Vzc2VkKSwgZGJhcilcbnByZXNzdXJlX3JhdyAoUHJlc3N1cmUgKHJhdyksIGRiYXIpXG5wcmVzc3VyZV9kbV9xZCAoUHJlc3N1cmUgcXVhbGl0eSBkZXNjcmlwdG9yKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2hhd2FpaV9zb2VzdF9jOWY5X2MyMzJfMWZlOV9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvaGF3YWlpX3NvZXN0X2M5ZjlfYzIzMl8xZmU5X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2hhd2FpaV9zb2VzdF9jOWY5X2MyMzJfMWZlOS9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cucGFjaW9vcy5oYXdhaWkuZWR1L3dhdGVyL3NlbnNvci13YWlraWtpYXF1YXJpdW0vIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2hhd2FpaV9zb2VzdF9jOWY5X2MyMzJfMWZlOS5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9aGF3YWlpX3NvZXN0X2M5ZjlfYzIzMl8xZmU5JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIlVuaXZlcnNpdHkgb2YgSGF3YWlpIiwgImhhd2FpaV9zb2VzdF9jOWY5X2MyMzJfMWZlOSJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0X2I1NWZfYThmMl9hZDcwIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF9iNTVmX2E4ZjJfYWQ3MC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJQYWNJT09TIE5lYXJzaG9yZSBTZW5zb3IgMDUgKE5TMDUpOiBQYWdvIFBhZ28sIEFtZXJpY2FuIFNhbW9hIiwgIlRoZSBuZWFyc2hvcmUgc2Vuc29ycyBhcmUgcGFydCBvZiB0aGUgUGFjaWZpYyBJc2xhbmRzIE9jZWFuIE9ic2VydmluZyBTeXN0ZW0gKFBhY0lPT1MpIGFuZCBhcmUgZGVzaWduZWQgdG8gbWVhc3VyZSBhIHZhcmlldHkgb2Ygb2NlYW4gcGFyYW1ldGVycyBhdCBmaXhlZCBwb2ludCBsb2NhdGlvbnMuIE5TMDUgaXMgbG9jYXRlZCBhdCB0aGUgRGVwYXJ0bWVudCBvZiBNYXJpbmUgYW5kIFdpbGRsaWZlIFJlc291cmNlcyAoRE1XUikgZG9jayBpbiBQYWdvIFBhZ28gSGFyYm9yLCBBbWVyaWNhbiBTYW1vYSBhbmQgaXMgbW91bnRlZCB0byB0aGUgYm90dG9tIGluIGFib3V0IDIgbWV0ZXJzIG9mIHdhdGVyLiBUaGUgaW5zdHJ1bWVudCBpcyBhIFNlYS1CaXJkIEVsZWN0cm9uaWNzIG1vZGVsIDE2KyBWMiBjb3VwbGVkIHdpdGggYSBXRVQgTGFicyBFQ08tRkxOVFVTIGNvbWJpbmF0aW9uIHNlbnNvci5cblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKGRlcHRoIGJlbG93IG1lYW4gc2VhIGxldmVsLCBtKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbnRlbXBlcmF0dXJlIChDZWxzaXVzKVxuY29uZHVjdGl2aXR5IChTIG0tMSlcbnR1cmJpZGl0eSAoTlRVKVxuY2hsb3JvcGh5bGwgKGtnIG0tMylcbnNhbGluaXR5ICgxZS0zKVxucHJlc3N1cmUgKGRiYXIpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvaGF3YWlpX3NvZXN0X2I1NWZfYThmMl9hZDcwX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9oYXdhaWlfc29lc3RfYjU1Zl9hOGYyX2FkNzBfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vaGF3YWlpX3NvZXN0X2I1NWZfYThmMl9hZDcwL2luZGV4Lmpzb24iLCAiaHR0cDovL3d3dy5wYWNpb29zLmhhd2FpaS5lZHUvd2F0ZXIvc2Vuc29yLXBhZ29wYWdvLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9oYXdhaWlfc29lc3RfYjU1Zl9hOGYyX2FkNzAucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWhhd2FpaV9zb2VzdF9iNTVmX2E4ZjJfYWQ3MCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJVbml2ZXJzaXR5IG9mIEhhd2FpaSIsICJoYXdhaWlfc29lc3RfYjU1Zl9hOGYyX2FkNzAiXSwKICAgICAgWyIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF84ZjU5X2MyOWNfZDgyMCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfOGY1OV9jMjljX2Q4MjAuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiUGFjSU9PUyBOZWFyc2hvcmUgU2Vuc29yIDA2IChOUzA2KTogUG9obnBlaSwgTWljcm9uZXNpYSIsICJUaGUgbmVhcnNob3JlIHNlbnNvcnMgYXJlIHBhcnQgb2YgdGhlIFBhY2lmaWMgSXNsYW5kcyBPY2VhbiBPYnNlcnZpbmcgU3lzdGVtIChQYWNJT09TKSBhbmQgYXJlIGRlc2lnbmVkIHRvIG1lYXN1cmUgYSB2YXJpZXR5IG9mIG9jZWFuIHBhcmFtZXRlcnMgYXQgZml4ZWQgcG9pbnQgbG9jYXRpb25zLiBOUzA2IGlzIGxvY2F0ZWQgYXQgdGhlIGRvY2sgaW4gUG9obnBlaSBsYWdvb24gYW5kIGlzIG1vdW50ZWQgdG8gdGhlIGJvdHRvbSBpbiBhYm91dCAxIG1ldGVyIG9mIHdhdGVyLiBUaGUgaW5zdHJ1bWVudCBpcyBhIFNlYS1CaXJkIEVsZWN0cm9uaWNzIG1vZGVsIDE2KyBWMiBjb3VwbGVkIHdpdGggYSBXRVQgTGFicyBFQ08tRkxOVFVTIGNvbWJpbmF0aW9uIHNlbnNvci5cblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKGRlcHRoIGJlbG93IG1lYW4gc2VhIGxldmVsLCBtKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbnRlbXBlcmF0dXJlIChDZWxzaXVzKVxuY29uZHVjdGl2aXR5IChTIG0tMSlcbnR1cmJpZGl0eSAoTlRVKVxuY2hsb3JvcGh5bGwgKGtnIG0tMylcbnNhbGluaXR5ICgxZS0zKVxucHJlc3N1cmUgKGRiYXIpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvaGF3YWlpX3NvZXN0XzhmNTlfYzI5Y19kODIwX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9oYXdhaWlfc29lc3RfOGY1OV9jMjljX2Q4MjBfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vaGF3YWlpX3NvZXN0XzhmNTlfYzI5Y19kODIwL2luZGV4Lmpzb24iLCAiaHR0cDovL3d3dy5wYWNpb29zLmhhd2FpaS5lZHUvd2F0ZXIvc2Vuc29yLXBvaG5wZWkvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2hhd2FpaV9zb2VzdF84ZjU5X2MyOWNfZDgyMC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9aGF3YWlpX3NvZXN0XzhmNTlfYzI5Y19kODIwJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIlVuaXZlcnNpdHkgb2YgSGF3YWlpIiwgImhhd2FpaV9zb2VzdF84ZjU5X2MyOWNfZDgyMCJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0Xzc3YjdfZjVkZF9jZGEzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF83N2I3X2Y1ZGRfY2RhMy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJQYWNJT09TIE5lYXJzaG9yZSBTZW5zb3IgMDcgKE5TMDcpOiBNYWp1cm8sIE1hcnNoYWxsIElzbGFuZHMiLCAiVGhlIG5lYXJzaG9yZSBzZW5zb3JzIGFyZSBwYXJ0IG9mIHRoZSBQYWNpZmljIElzbGFuZHMgT2NlYW4gT2JzZXJ2aW5nIFN5c3RlbSAoUGFjSU9PUykgYW5kIGFyZSBkZXNpZ25lZCB0byBtZWFzdXJlIGEgdmFyaWV0eSBvZiBvY2VhbiBwYXJhbWV0ZXJzIGF0IGZpeGVkIHBvaW50IGxvY2F0aW9ucy4gTlMwNyBpcyBsb2NhdGVkIGF0IHRoZSBVbGlnYSBkb2NrIGluIE1hanVybywgUmVwdWJsaWMgb2YgdGhlIE1hcnNoYWxsIElzbGFuZHMgYW5kIGlzIG1vdW50ZWQgdG8gdGhlIGJvdHRvbSBpbiBhYm91dCAyIG1ldGVycyBvZiB3YXRlci4gVGhlIGluc3RydW1lbnQgaXMgYSBTZWEtQmlyZCBFbGVjdHJvbmljcyBtb2RlbCAxNisgVjIgY291cGxlZCB3aXRoIGEgV0VUIExhYnMgRUNPLUZMTlRVUyBjb21iaW5hdGlvbiBzZW5zb3IuXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChkZXB0aCBiZWxvdyBtZWFuIHNlYSBsZXZlbCwgbSlcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG50ZW1wZXJhdHVyZSAoQ2Vsc2l1cylcbmNvbmR1Y3Rpdml0eSAoUyBtLTEpXG50dXJiaWRpdHkgKE5UVSlcbmNobG9yb3BoeWxsIChrZyBtLTMpXG5zYWxpbml0eSAoMWUtMylcbnByZXNzdXJlIChkYmFyKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2hhd2FpaV9zb2VzdF83N2I3X2Y1ZGRfY2RhM19mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvaGF3YWlpX3NvZXN0Xzc3YjdfZjVkZF9jZGEzX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2hhd2FpaV9zb2VzdF83N2I3X2Y1ZGRfY2RhMy9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cucGFjaW9vcy5oYXdhaWkuZWR1L3dhdGVyL3NlbnNvci1tYWp1cm8vIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2hhd2FpaV9zb2VzdF83N2I3X2Y1ZGRfY2RhMy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9aGF3YWlpX3NvZXN0Xzc3YjdfZjVkZF9jZGEzJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIlVuaXZlcnNpdHkgb2YgSGF3YWlpIiwgImhhd2FpaV9zb2VzdF83N2I3X2Y1ZGRfY2RhMyJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0X2UzYzBfYTk1Nl9kZTAxIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF9lM2MwX2E5NTZfZGUwMS5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJQYWNJT09TIE5lYXJzaG9yZSBTZW5zb3IgMDggKE5TMDgpOiBLb3JvciwgUGFsYXUiLCAiVGhlIG5lYXJzaG9yZSBzZW5zb3JzIGFyZSBwYXJ0IG9mIHRoZSBQYWNpZmljIElzbGFuZHMgT2NlYW4gT2JzZXJ2aW5nIFN5c3RlbSAoUGFjSU9PUykgYW5kIGFyZSBkZXNpZ25lZCB0byBtZWFzdXJlIGEgdmFyaWV0eSBvZiBvY2VhbiBwYXJhbWV0ZXJzIGF0IGZpeGVkIHBvaW50IGxvY2F0aW9ucy4gTlMwOCBpcyBsb2NhdGVkIGF0IHRoZSBQYWxhdSBJbnRlcm5hdGlvbmFsIENvcmFsIFJlZWYgQ2VudGVyIChQSUNSQykgZG9jayBpbiBLb3JvciwgUGFsYXUgYW5kIGlzIG1vdW50ZWQgdG8gdGhlIGJvdHRvbSBpbiBhYm91dCAzLjUgbWV0ZXJzIG9mIHdhdGVyLiBUaGUgaW5zdHJ1bWVudCBpcyBhIFNlYS1CaXJkIEVsZWN0cm9uaWNzIG1vZGVsIDE2KyBWMiBjb3VwbGVkIHdpdGggYSBXRVQgTGFicyBFQ08tRkxOVFVTIGNvbWJpbmF0aW9uIHNlbnNvci5cblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKGRlcHRoIGJlbG93IG1lYW4gc2VhIGxldmVsLCBtKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbnRlbXBlcmF0dXJlIChDZWxzaXVzKVxuY29uZHVjdGl2aXR5IChTIG0tMSlcbnR1cmJpZGl0eSAoTlRVKVxuY2hsb3JvcGh5bGwgKGtnIG0tMylcbnNhbGluaXR5ICgxZS0zKVxucHJlc3N1cmUgKGRiYXIpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvaGF3YWlpX3NvZXN0X2UzYzBfYTk1Nl9kZTAxX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9oYXdhaWlfc29lc3RfZTNjMF9hOTU2X2RlMDFfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vaGF3YWlpX3NvZXN0X2UzYzBfYTk1Nl9kZTAxL2luZGV4Lmpzb24iLCAiaHR0cDovL3d3dy5wYWNpb29zLmhhd2FpaS5lZHUvd2F0ZXIvc2Vuc29yLWtvcm9yLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9oYXdhaWlfc29lc3RfZTNjMF9hOTU2X2RlMDEucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWhhd2FpaV9zb2VzdF9lM2MwX2E5NTZfZGUwMSZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJVbml2ZXJzaXR5IG9mIEhhd2FpaSIsICJoYXdhaWlfc29lc3RfZTNjMF9hOTU2X2RlMDEiXSwKICAgICAgWyIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF8wMTEzX2I0M2RfZTAyNCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfMDExM19iNDNkX2UwMjQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiUGFjSU9PUyBOZWFyc2hvcmUgU2Vuc29yIDA5IChOUzA5KTogQ2V0dGkgQmF5LCBHdWFtIiwgIlRoZSBuZWFyc2hvcmUgc2Vuc29ycyBhcmUgcGFydCBvZiB0aGUgUGFjaWZpYyBJc2xhbmRzIE9jZWFuIE9ic2VydmluZyBTeXN0ZW0gKFBhY0lPT1MpIGFuZCBhcmUgZGVzaWduZWQgdG8gbWVhc3VyZSBhIHZhcmlldHkgb2Ygb2NlYW4gcGFyYW1ldGVycyBhdCBmaXhlZCBwb2ludCBsb2NhdGlvbnMuIE5TMDkgaXMgYXBwcm94aW1hdGVseSA3MCBtZXRlcnMgb2Zmc2hvcmUgaW4gQ2V0dGkgQmF5LCBHdWFtIGFuZCBpcyBtb3VudGVkIHRvIHRoZSBib3R0b20gaW4gYWJvdXQgMyBtZXRlcnMgb2Ygd2F0ZXIuIFRoZSBpbnN0cnVtZW50IGlzIGEgU2VhLUJpcmQgRWxlY3Ryb25pY3MgbW9kZWwgMTYrIFYyIGNvdXBsZWQgd2l0aCBhIFdFVCBMYWJzIEVDTy1GTE5UVVMgY29tYmluYXRpb24gc2Vuc29yLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAoZGVwdGggYmVsb3cgbWVhbiBzZWEgbGV2ZWwsIG0pXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxudGVtcGVyYXR1cmUgKENlbHNpdXMpXG5jb25kdWN0aXZpdHkgKFMgbS0xKVxudHVyYmlkaXR5IChOVFUpXG5jaGxvcm9waHlsbCAoa2cgbS0zKVxuc2FsaW5pdHkgKDFlLTMpXG5wcmVzc3VyZSAoZGJhcilcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9oYXdhaWlfc29lc3RfMDExM19iNDNkX2UwMjRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2hhd2FpaV9zb2VzdF8wMTEzX2I0M2RfZTAyNF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9oYXdhaWlfc29lc3RfMDExM19iNDNkX2UwMjQvaW5kZXguanNvbiIsICJodHRwOi8vd3d3LnBhY2lvb3MuaGF3YWlpLmVkdS93YXRlci9zZW5zb3ItY2V0dGkvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2hhd2FpaV9zb2VzdF8wMTEzX2I0M2RfZTAyNC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9aGF3YWlpX3NvZXN0XzAxMTNfYjQzZF9lMDI0JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIlVuaXZlcnNpdHkgb2YgSGF3YWlpIiwgImhhd2FpaV9zb2VzdF8wMTEzX2I0M2RfZTAyNCJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0X2YyNWVfMzFhMV8xNmYxIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF9mMjVlXzMxYTFfMTZmMS5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJQYWNJT09TIE5lYXJzaG9yZSBTZW5zb3IgMTAgKE5TMTApOiBNYXVuYWx1YSBCYXksIE9haHUsIEhhd2FpaSIsICJUaGUgbmVhcnNob3JlIHNlbnNvcnMgYXJlIHBhcnQgb2YgdGhlIFBhY2lmaWMgSXNsYW5kcyBPY2VhbiBPYnNlcnZpbmcgU3lzdGVtIChQYWNJT09TKSBhbmQgYXJlIGRlc2lnbmVkIHRvIG1lYXN1cmUgYSB2YXJpZXR5IG9mIG9jZWFuIHBhcmFtZXRlcnMgYXQgZml4ZWQgcG9pbnQgbG9jYXRpb25zIGFsb25nIHRoZSBzb3V0aCBzaG9yZSBvZiBPYWh1LiBOUzEwIGlzIGxvY2F0ZWQgb2ZmIHRoZSBvbGQgcGllciBpbiBNYXVuYWx1YSBCYXkgaW4gSGF3YWlpIEthaS4gVGhlIGluc3RydW1lbnQgaXMgYSBTZWEtQmlyZCBFbGVjdHJvbmljcyBtb2RlbCAxNisgVjIgY291cGxlZCB3aXRoIGEgV0VUIExhYnMgRUNPLUZMTlRVUyBjb21iaW5hdGlvbiBzZW5zb3IuIFRoZSBwYWNrYWdlIGlzIGZpeGVkIHRvIHRoZSBwaWVyIGF0IGFib3V0IDJtIGRlcHRoLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAoZGVwdGggYmVsb3cgbWVhbiBzZWEgbGV2ZWwsIG0pXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxudGVtcGVyYXR1cmUgKFRlbXBlcmF0dXJlIChwcm9jZXNzZWQpLCBDZWxzaXVzKVxudGVtcGVyYXR1cmVfcmF3IChUZW1wZXJhdHVyZSAocmF3KSwgQ2Vsc2l1cylcbnRlbXBlcmF0dXJlX2RtX3FkIChUZW1wZXJhdHVyZSBxdWFsaXR5IGRlc2NyaXB0b3IpXG5jb25kdWN0aXZpdHkgKENvbmR1Y3Rpdml0eSAocHJvY2Vzc2VkKSwgUyBtLTEpXG5jb25kdWN0aXZpdHlfcmF3IChDb25kdWN0aXZpdHkgKHJhdyksIFMgbS0xKVxuY29uZHVjdGl2aXR5X2RtX3FkIChDb25kdWN0aXZpdHkgcXVhbGl0eSBkZXNjcmlwdG9yKVxudHVyYmlkaXR5IChUdXJiaWRpdHkgKHByb2Nlc3NlZCksIE5UVSlcbnR1cmJpZGl0eV9yYXcgKFR1cmJpZGl0eSAocmF3KSwgTlRVKVxudHVyYmlkaXR5X2RtX3FkIChUdXJiaWRpdHkgcXVhbGl0eSBkZXNjcmlwdG9yKVxuY2hsb3JvcGh5bGwgKENobG9yb3BoeWxsIChwcm9jZXNzZWQpLCBrZyBtLTMpXG5jaGxvcm9waHlsbF9yYXcgKENobG9yb3BoeWxsIChyYXcpLCBrZyBtLTMpXG5jaGxvcm9waHlsbF9kbV9xZCAoQ2hsb3JvcGh5bGwgcXVhbGl0eSBkZXNjcmlwdG9yKVxuc2FsaW5pdHkgKFNhbGluaXR5IChwcm9jZXNzZWQpLCAxZS0zKVxuc2FsaW5pdHlfcmF3IChTYWxpbml0eSAocmF3KSwgMWUtMylcbnNhbGluaXR5X2RtX3FkIChTYWxpbml0eSBxdWFsaXR5IGRlc2NyaXB0b3IpXG5wcmVzc3VyZSAoUHJlc3N1cmUgKHByb2Nlc3NlZCksIGRiYXIpXG5wcmVzc3VyZV9yYXcgKFByZXNzdXJlIChyYXcpLCBkYmFyKVxucHJlc3N1cmVfZG1fcWQgKFByZXNzdXJlIHF1YWxpdHkgZGVzY3JpcHRvcilcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9oYXdhaWlfc29lc3RfZjI1ZV8zMWExXzE2ZjFfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2hhd2FpaV9zb2VzdF9mMjVlXzMxYTFfMTZmMV9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9oYXdhaWlfc29lc3RfZjI1ZV8zMWExXzE2ZjEvaW5kZXguanNvbiIsICJodHRwOi8vd3d3LnBhY2lvb3MuaGF3YWlpLmVkdS93YXRlci9zZW5zb3ItbWF1bmFsdWEvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2hhd2FpaV9zb2VzdF9mMjVlXzMxYTFfMTZmMS5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9aGF3YWlpX3NvZXN0X2YyNWVfMzFhMV8xNmYxJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIlVuaXZlcnNpdHkgb2YgSGF3YWlpIiwgImhhd2FpaV9zb2VzdF9mMjVlXzMxYTFfMTZmMSJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0Xzg2NjhfYjIwMl84MjMzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF84NjY4X2IyMDJfODIzMy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJQYWNJT09TIE5lYXJzaG9yZSBTZW5zb3IgMTEgKE5TMTEpOiBTYWlwYW4sIENOTUkiLCAiVGhlIG5lYXJzaG9yZSBzZW5zb3JzIGFyZSBwYXJ0IG9mIHRoZSBQYWNpZmljIElzbGFuZHMgT2NlYW4gT2JzZXJ2aW5nIFN5c3RlbSAoUGFjSU9PUykgYW5kIGFyZSBkZXNpZ25lZCB0byBtZWFzdXJlIGEgdmFyaWV0eSBvZiBvY2VhbiBwYXJhbWV0ZXJzIGF0IGZpeGVkIHBvaW50IGxvY2F0aW9ucy4gTlMxMSBpcyBhcHByb3hpbWF0ZWx5IDIwIG1ldGVycyBvZmZzaG9yZSBvZiBQdW50YW4gQmFicG90IG5lYXIgdGhlIGdvbGYgY291cnNlIGF0IExhb2xhbyBCYXkgb24gdGhlIGVhc3Qgc2hvcmUgb2YgU2FpcGFuIGluIHRoZSBDb21tb253ZWFsdGggb2YgdGhlIE5vcnRoZXJuIE1hcmlhbmEgSXNsYW5kcyAoQ05NSSkgYW5kIGlzIG1vdW50ZWQgdG8gdGhlIGJvdHRvbSBpbiBhYm91dCAzIG1ldGVycyBvZiB3YXRlci4gVGhlIGluc3RydW1lbnQgaXMgYSBTZWEtQmlyZCBFbGVjdHJvbmljcyBtb2RlbCAxNisgVjIgY291cGxlZCB3aXRoIGEgV0VUIExhYnMgRUNPLUZMTlRVUyBjb21iaW5hdGlvbiBzZW5zb3IuXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChkZXB0aCBiZWxvdyBtZWFuIHNlYSBsZXZlbCwgbSlcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG50ZW1wZXJhdHVyZSAoQ2Vsc2l1cylcbmNvbmR1Y3Rpdml0eSAoUyBtLTEpXG50dXJiaWRpdHkgKE5UVSlcbmNobG9yb3BoeWxsIChrZyBtLTMpXG5zYWxpbml0eSAoMWUtMylcbnByZXNzdXJlIChkYmFyKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2hhd2FpaV9zb2VzdF84NjY4X2IyMDJfODIzM19mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvaGF3YWlpX3NvZXN0Xzg2NjhfYjIwMl84MjMzX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2hhd2FpaV9zb2VzdF84NjY4X2IyMDJfODIzMy9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cucGFjaW9vcy5oYXdhaWkuZWR1L3dhdGVyL3NlbnNvci1zYWlwYW4vIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2hhd2FpaV9zb2VzdF84NjY4X2IyMDJfODIzMy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9aGF3YWlpX3NvZXN0Xzg2NjhfYjIwMl84MjMzJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIlVuaXZlcnNpdHkgb2YgSGF3YWlpIiwgImhhd2FpaV9zb2VzdF84NjY4X2IyMDJfODIzMyJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0X2IxMGNfYWYyZF8zZmU4IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF9iMTBjX2FmMmRfM2ZlOC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJQYWNJT09TIE5lYXJzaG9yZSBTZW5zb3IgMTIgKE5TMTIpOiBLYWxhbWEgQmVhY2ggUGFyaywgTWF1aSwgSGF3YWlpIiwgIlRoZSBuZWFyc2hvcmUgc2Vuc29ycyBhcmUgcGFydCBvZiB0aGUgUGFjaWZpYyBJc2xhbmRzIE9jZWFuIE9ic2VydmluZyBTeXN0ZW0gKFBhY0lPT1MpIGFuZCBhcmUgZGVzaWduZWQgdG8gbWVhc3VyZSBhIHZhcmlldHkgb2Ygb2NlYW4gcGFyYW1ldGVycyBhdCBmaXhlZCBwb2ludCBsb2NhdGlvbnMuIE5TMTIgaXMgbG9jYXRlZCBhdCBLYWxhbWEgQmVhY2ggUGFyayBpbiBLaWhlaSwgTWF1aS4gVGhlIGluc3RydW1lbnQgaXMgYSA2NjAwVjItNCBNdWx0aS1wYXJhbWV0ZXIgd2F0ZXIgcXVhbGl0eSBsb2dnZXIuIFRoZSBwYWNrYWdlIGlzIGZpeGVkIHRvIGEgbW9vcmluZyBhdCBhYm91dCAxLjVtIGRlcHRoLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAoZGVwdGggYmVsb3cgbWVhbiBzZWEgbGV2ZWwsIG0pXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxudGVtcGVyYXR1cmUgKENlbHNpdXMpXG5jb25kdWN0aXZpdHkgKFMgbS0xKVxudHVyYmlkaXR5IChOVFUpXG5jaGxvcm9waHlsbCAoa2cgbS0zKVxuc2FsaW5pdHkgKDFlLTMpXG53YXRlcl9kZXB0aCAoU2Vuc29yIGRlcHRoLCBtKVxucGggKDEpXG5veHlnZW4gKERpc3NvbHZlZCBveHlnZW4gY29uY2VudHJhdGlvbiwga2cgbS0zKVxub3h5Z2VuX3NhdHVyYXRpb24gKERpc3NvbHZlZCBveHlnZW4gc2F0dXJhdGlvbiwgMSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9oYXdhaWlfc29lc3RfYjEwY19hZjJkXzNmZThfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2hhd2FpaV9zb2VzdF9iMTBjX2FmMmRfM2ZlOF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9oYXdhaWlfc29lc3RfYjEwY19hZjJkXzNmZTgvaW5kZXguanNvbiIsICJodHRwOi8vd3d3LnBhY2lvb3MuaGF3YWlpLmVkdS93YXRlci9zZW5zb3Ita2FsYW1hLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9oYXdhaWlfc29lc3RfYjEwY19hZjJkXzNmZTgucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWhhd2FpaV9zb2VzdF9iMTBjX2FmMmRfM2ZlOCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJVbml2ZXJzaXR5IG9mIEhhd2FpaSIsICJoYXdhaWlfc29lc3RfYjEwY19hZjJkXzNmZTgiXSwKICAgICAgWyIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF8wMjZmXzRjMWRfNTVlNSIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfMDI2Zl80YzFkXzU1ZTUuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiUGFjSU9PUyBOZWFyc2hvcmUgU2Vuc29yIDEzIChOUzEzKTogS2FodWx1aSwgTWF1aSwgSGF3YWlpIiwgIlRoZSBuZWFyc2hvcmUgc2Vuc29ycyBhcmUgcGFydCBvZiB0aGUgUGFjaWZpYyBJc2xhbmRzIE9jZWFuIE9ic2VydmluZyBTeXN0ZW0gKFBhY0lPT1MpIGFuZCBhcmUgZGVzaWduZWQgdG8gbWVhc3VyZSBhIHZhcmlldHkgb2Ygb2NlYW4gcGFyYW1ldGVycyBhdCBmaXhlZCBwb2ludCBsb2NhdGlvbnMuIE5TMTMgaXMgbG9jYXRlZCBpbiBLYWh1bHVpIEhhcmJvciBpbiBNYXVpLiBUaGUgaW5zdHJ1bWVudCBpcyBhIDY2MDBWMi00IE11bHRpLXBhcmFtZXRlciB3YXRlciBxdWFsaXR5IGxvZ2dlci4gVGhlIHBhY2thZ2UgaXMgZml4ZWQgdG8gYSBwaWxpbmcgYXQgYWJvdXQgMS41bSBkZXB0aC5cblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKGRlcHRoIGJlbG93IG1lYW4gc2VhIGxldmVsLCBtKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbnRlbXBlcmF0dXJlIChUZW1wZXJhdHVyZSAocHJvY2Vzc2VkKSwgQ2Vsc2l1cylcbnRlbXBlcmF0dXJlX3JhdyAoVGVtcGVyYXR1cmUgKHJhdyksIENlbHNpdXMpXG50ZW1wZXJhdHVyZV9kbV9xZCAoVGVtcGVyYXR1cmUgcXVhbGl0eSBkZXNjcmlwdG9yKVxuY29uZHVjdGl2aXR5IChDb25kdWN0aXZpdHkgKHByb2Nlc3NlZCksIFMgbS0xKVxuY29uZHVjdGl2aXR5X3JhdyAoQ29uZHVjdGl2aXR5IChyYXcpLCBTIG0tMSlcbmNvbmR1Y3Rpdml0eV9kbV9xZCAoQ29uZHVjdGl2aXR5IHF1YWxpdHkgZGVzY3JpcHRvcilcbnR1cmJpZGl0eSAoVHVyYmlkaXR5IChwcm9jZXNzZWQpLCBOVFUpXG50dXJiaWRpdHlfcmF3IChUdXJiaWRpdHkgKHJhdyksIE5UVSlcbnR1cmJpZGl0eV9kbV9xZCAoVHVyYmlkaXR5IHF1YWxpdHkgZGVzY3JpcHRvcilcbmNobG9yb3BoeWxsIChDaGxvcm9waHlsbCAocHJvY2Vzc2VkKSwga2cgbS0zKVxuY2hsb3JvcGh5bGxfcmF3IChDaGxvcm9waHlsbCAocmF3KSwga2cgbS0zKVxuY2hsb3JvcGh5bGxfZG1fcWQgKENobG9yb3BoeWxsIHF1YWxpdHkgZGVzY3JpcHRvcilcbnNhbGluaXR5IChTYWxpbml0eSAocHJvY2Vzc2VkKSwgMWUtMylcbnNhbGluaXR5X3JhdyAoU2FsaW5pdHkgKHJhdyksIDFlLTMpXG5zYWxpbml0eV9kbV9xZCAoU2FsaW5pdHkgcXVhbGl0eSBkZXNjcmlwdG9yKVxud2F0ZXJfZGVwdGggKFNlbnNvciBkZXB0aCAocHJvY2Vzc2VkKSwgbSlcbndhdGVyX2RlcHRoX3JhdyAoU2Vuc29yIGRlcHRoIChyYXcpLCBtKVxud2F0ZXJfZGVwdGhfZG1fcWQgKFNlbnNvciBkZXB0aCBxdWFsaXR5IGRlc2NyaXB0b3IpXG5waCAocEggKHByb2Nlc3NlZCksIDEpXG5waF9yYXcgKHBIIChyYXcpLCAxKVxuLi4uICg3IG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2hhd2FpaV9zb2VzdF8wMjZmXzRjMWRfNTVlNV9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvaGF3YWlpX3NvZXN0XzAyNmZfNGMxZF81NWU1X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2hhd2FpaV9zb2VzdF8wMjZmXzRjMWRfNTVlNS9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cucGFjaW9vcy5oYXdhaWkuZWR1L3dhdGVyL3NlbnNvci1rYWh1bHVpLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9oYXdhaWlfc29lc3RfMDI2Zl80YzFkXzU1ZTUucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWhhd2FpaV9zb2VzdF8wMjZmXzRjMWRfNTVlNSZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJVbml2ZXJzaXR5IG9mIEhhd2FpaSIsICJoYXdhaWlfc29lc3RfMDI2Zl80YzFkXzU1ZTUiXSwKICAgICAgWyIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF8xOTFlX2ZlMzdfZjlhMCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfMTkxZV9mZTM3X2Y5YTAuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiUGFjSU9PUyBOZWFyc2hvcmUgU2Vuc29yIDE1IChOUzE1KTogUGFnbyBCYXksIEd1YW0iLCAiVGhlIG5lYXJzaG9yZSBzZW5zb3JzIGFyZSBwYXJ0IG9mIHRoZSBQYWNpZmljIElzbGFuZHMgT2NlYW4gT2JzZXJ2aW5nIFN5c3RlbSAoUGFjSU9PUykgYW5kIGFyZSBkZXNpZ25lZCB0byBtZWFzdXJlIGEgdmFyaWV0eSBvZiBvY2VhbiBwYXJhbWV0ZXJzIGF0IGZpeGVkIHBvaW50IGxvY2F0aW9ucy4gTlMxNSBpcyBpbiBQYWdvIEJheSwgR3VhbSBhbmQgaXMgbW91bnRlZCB0byB0aGUgYm90dG9tIGluIGFib3V0IDEuNSBtZXRlcnMgb2Ygd2F0ZXIuIFRoZSBpbnN0cnVtZW50IGlzIGEgU2VhLUJpcmQgRWxlY3Ryb25pY3MgbW9kZWwgMTYrIFYyIGNvdXBsZWQgd2l0aCBhIFdFVCBMYWJzIEVDTy1GTE5UVVMgY29tYmluYXRpb24gc2Vuc29yLlxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAoZGVwdGggYmVsb3cgbWVhbiBzZWEgbGV2ZWwsIG0pXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxudGVtcGVyYXR1cmUgKENlbHNpdXMpXG5jb25kdWN0aXZpdHkgKFMgbS0xKVxudHVyYmlkaXR5IChOVFUpXG5jaGxvcm9waHlsbCAoa2cgbS0zKVxuc2FsaW5pdHkgKDFlLTMpXG5wcmVzc3VyZSAoZGJhcilcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9oYXdhaWlfc29lc3RfMTkxZV9mZTM3X2Y5YTBfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2hhd2FpaV9zb2VzdF8xOTFlX2ZlMzdfZjlhMF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9oYXdhaWlfc29lc3RfMTkxZV9mZTM3X2Y5YTAvaW5kZXguanNvbiIsICJodHRwOi8vd3d3LnBhY2lvb3MuaGF3YWlpLmVkdS93YXRlci9zZW5zb3ItcGFnby8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvaGF3YWlpX3NvZXN0XzE5MWVfZmUzN19mOWEwLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1oYXdhaWlfc29lc3RfMTkxZV9mZTM3X2Y5YTAmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiVW5pdmVyc2l0eSBvZiBIYXdhaWkiLCAiaGF3YWlpX3NvZXN0XzE5MWVfZmUzN19mOWEwIl0sCiAgICAgIFsiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfZDViYV84MzFjXzQ0M2EiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0X2Q1YmFfODMxY180NDNhLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlBhY0lPT1MgTmVhcnNob3JlIFNlbnNvciAxNiAoTlMxNik6IFdhaWx1cGUsIE9haHUsIEhhd2FpaSIsICJUaGUgbmVhcnNob3JlIHNlbnNvcnMgYXJlIHBhcnQgb2YgdGhlIFBhY2lmaWMgSXNsYW5kcyBPY2VhbiBPYnNlcnZpbmcgU3lzdGVtIChQYWNJT09TKSBhbmQgYXJlIGRlc2lnbmVkIHRvIG1lYXN1cmUgYSB2YXJpZXR5IG9mIG9jZWFuIHBhcmFtZXRlcnMgYXQgZml4ZWQgcG9pbnQgbG9jYXRpb25zIGFsb25nIHRoZSBzb3V0aCBzaG9yZSBvZiBPYWh1LiBOUzE2IGlzIGxvY2F0ZWQgb2ZmIFdhaWx1cGUgaW4gTWF1bmFsdWEgQmF5IGluIEFpbmEgSGFpbmEuIFRoZSBpbnN0cnVtZW50IGlzIGEgU2VhLUJpcmQgRWxlY3Ryb25pY3MgbW9kZWwgMTYrIFYyIGNvdXBsZWQgd2l0aCBhIFdFVCBMYWJzIEVDTy1GTE5UVVMgY29tYmluYXRpb24gc2Vuc29yLiBUaGUgcGFja2FnZSBpcyBmaXhlZCB0byB0aGUgcGllciBhdCBhYm91dCAxbSBkZXB0aC5cblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKGRlcHRoIGJlbG93IG1lYW4gc2VhIGxldmVsLCBtKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbnRlbXBlcmF0dXJlIChUZW1wZXJhdHVyZSAocHJvY2Vzc2VkKSwgQ2Vsc2l1cylcbnRlbXBlcmF0dXJlX3JhdyAoVGVtcGVyYXR1cmUgKHJhdyksIENlbHNpdXMpXG50ZW1wZXJhdHVyZV9kbV9xZCAoVGVtcGVyYXR1cmUgcXVhbGl0eSBkZXNjcmlwdG9yKVxuY29uZHVjdGl2aXR5IChDb25kdWN0aXZpdHkgKHByb2Nlc3NlZCksIFMgbS0xKVxuY29uZHVjdGl2aXR5X3JhdyAoQ29uZHVjdGl2aXR5IChyYXcpLCBTIG0tMSlcbmNvbmR1Y3Rpdml0eV9kbV9xZCAoQ29uZHVjdGl2aXR5IHF1YWxpdHkgZGVzY3JpcHRvcilcbnR1cmJpZGl0eSAoVHVyYmlkaXR5IChwcm9jZXNzZWQpLCBOVFUpXG50dXJiaWRpdHlfcmF3IChUdXJiaWRpdHkgKHJhdyksIE5UVSlcbnR1cmJpZGl0eV9kbV9xZCAoVHVyYmlkaXR5IHF1YWxpdHkgZGVzY3JpcHRvcilcbmNobG9yb3BoeWxsIChDaGxvcm9waHlsbCAocHJvY2Vzc2VkKSwga2cgbS0zKVxuY2hsb3JvcGh5bGxfcmF3IChDaGxvcm9waHlsbCAocmF3KSwga2cgbS0zKVxuY2hsb3JvcGh5bGxfZG1fcWQgKENobG9yb3BoeWxsIHF1YWxpdHkgZGVzY3JpcHRvcilcbnNhbGluaXR5IChTYWxpbml0eSAocHJvY2Vzc2VkKSwgMWUtMylcbnNhbGluaXR5X3JhdyAoU2FsaW5pdHkgKHJhdyksIDFlLTMpXG5zYWxpbml0eV9kbV9xZCAoU2FsaW5pdHkgcXVhbGl0eSBkZXNjcmlwdG9yKVxucHJlc3N1cmUgKFByZXNzdXJlIChwcm9jZXNzZWQpLCBkYmFyKVxucHJlc3N1cmVfcmF3IChQcmVzc3VyZSAocmF3KSwgZGJhcilcbnByZXNzdXJlX2RtX3FkIChQcmVzc3VyZSBxdWFsaXR5IGRlc2NyaXB0b3IpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvaGF3YWlpX3NvZXN0X2Q1YmFfODMxY180NDNhX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9oYXdhaWlfc29lc3RfZDViYV84MzFjXzQ0M2FfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vaGF3YWlpX3NvZXN0X2Q1YmFfODMxY180NDNhL2luZGV4Lmpzb24iLCAiaHR0cDovL3d3dy5wYWNpb29zLmhhd2FpaS5lZHUvd2F0ZXIvc2Vuc29yLXdhaWx1cGUvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2hhd2FpaV9zb2VzdF9kNWJhXzgzMWNfNDQzYS5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9aGF3YWlpX3NvZXN0X2Q1YmFfODMxY180NDNhJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIlVuaXZlcnNpdHkgb2YgSGF3YWlpIiwgImhhd2FpaV9zb2VzdF9kNWJhXzgzMWNfNDQzYSJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0XzA5M2VfY2Q1NV80M2EzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF8wOTNlX2NkNTVfNDNhMy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJQYWNJT09TIE9jZWFuIEdsaWRlcnM6IFNlYUdsaWRlciAxMTQ6IE1pc3Npb24gMyIsICJBcyBhIHBhcnQgb2YgUGFjSU9PUywgb2NlYW4gZ2xpZGVycyBwcm92aWRlIHZlcnkgZGV0YWlsZWQgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHBoeXNpY2FsIGFuZCBjaGVtaWNhbCBjb25kaXRpb24gb2YgdGhlIHdhdGVycyBhcm91bmQgdGhlIEhhd2FpaWFuIElzbGFuZHMuIEFkZGl0aW9uYWxseSwgdGhlc2UgZGF0YSBnZXQgdXNlZCBpbiBjb21wdXRlciBtb2RlbHMgdG8gbWFrZSBwcmVkaWN0aW9ucyBhYm91dCBjdXJyZW50cy4gT2NlYW4gZ2xpZGVycyBhcmUgc21hbGwsIGZyZWUtc3dpbW1pbmcsIHVubWFubmVkIHZlaGljbGVzIHRoYXQgY2FuIGNydWlzZSB0aGUgb2NlYW4gZm9yIHNldmVyYWwgbW9udGhzIGdhdGhlcmluZyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdGVtcGVyYXR1cmUsIHNhbGluaXR5LCBhbmQgb3RoZXIgd2F0ZXIgcHJvcGVydGllcyBiZXR3ZWVuIHRoZSBzdXJmYWNlIGFuZCAxMDAwIG0gZGVwdGguIEEgcHJlc3N1cmUgc2Vuc29yIG9uIHRoZSBnbGlkZXIgaXMgYWJsZSB0byByZWNvcmQgdGhlIGRlcHRoIHRocm91Z2hvdXQgdGhlIGRpdmUuIEJlY2F1c2UgZ2xpZGVycyBhcmUgdW5tYW5uZWQsIHRoZXkgY29tbXVuaWNhdGUgd2l0aCBzY2llbnRpc3RzIG9uIGxhbmQgd2hlbiB0aGV5IGFyZSBhdCB0aGUgc3VyZmFjZSB1c2luZyBhbiBhbnRlbm5hIG9uIHRoZSBlbmQgb2YgdGhlIGdsaWRlci4gVGhlIFNlYUdsaWRlciBhdXRvbm9tb3VzIHVuZGVyd2F0ZXIgdmVoaWNsZSAoQVVWKSB3YXMgZGVzaWduZWQgYXQgdGhlIFVuaXZlcnNpdHkgb2YgV2FzaGluZ3RvbiAoVVcpIEFwcGxpZWQgUGh5c2ljcyBMYWJvcmF0b3J5IChBUEwpLiBUaGVzZSBkYXRhIGFyZSB0YWtlbiBmcm9tIE1pc3Npb24gMyBvZiBTZWFHbGlkZXIgMTE0LlxuXG5jZG1fZGF0YV90eXBlID0gVHJhamVjdG9yeVxuVkFSSUFCTEVTOlxudHJhamVjdG9yeVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbnRlbXBlcmF0dXJlIChzZWFfd2F0ZXJfdGVtcGVyYXR1cmUsIENlbHNpdXMpXG5jb25kdWN0aXZpdHkgKHNlYV93YXRlcl9lbGVjdHJpY2FsX2NvbmR1Y3Rpdml0eSwgUyBtLTEpXG5zYWxpbml0eSAoc2VhX3dhdGVyX3NhbGluaXR5LCAxZS0zKVxuZGVuc2l0eSAoc2VhX3dhdGVyX2RlbnNpdHksIGtnIG0tMylcbnByZXNzdXJlIChzZWFfd2F0ZXJfcHJlc3N1cmUsIGRiYXIpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvaGF3YWlpX3NvZXN0XzA5M2VfY2Q1NV80M2EzX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9oYXdhaWlfc29lc3RfMDkzZV9jZDU1XzQzYTNfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vaGF3YWlpX3NvZXN0XzA5M2VfY2Q1NV80M2EzL2luZGV4Lmpzb24iLCAiaHR0cDovL3d3dy5wYWNpb29zLmhhd2FpaS5lZHUiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvaGF3YWlpX3NvZXN0XzA5M2VfY2Q1NV80M2EzLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1oYXdhaWlfc29lc3RfMDkzZV9jZDU1XzQzYTMmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiVW5pdmVyc2l0eSBvZiBIYXdhaWkiLCAiaGF3YWlpX3NvZXN0XzA5M2VfY2Q1NV80M2EzIl0sCiAgICAgIFsiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfY2M5Ml83ZDI0XzA2MjciLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0X2NjOTJfN2QyNF8wNjI3LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlBhY0lPT1MgT2NlYW4gR2xpZGVyczogU2VhR2xpZGVyIDExNDogTWlzc2lvbiA0IiwgIkFzIGEgcGFydCBvZiBQYWNJT09TLCBvY2VhbiBnbGlkZXJzIHByb3ZpZGUgdmVyeSBkZXRhaWxlZCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgcGh5c2ljYWwgYW5kIGNoZW1pY2FsIGNvbmRpdGlvbiBvZiB0aGUgd2F0ZXJzIGFyb3VuZCB0aGUgSGF3YWlpYW4gSXNsYW5kcy4gQWRkaXRpb25hbGx5LCB0aGVzZSBkYXRhIGdldCB1c2VkIGluIGNvbXB1dGVyIG1vZGVscyB0byBtYWtlIHByZWRpY3Rpb25zIGFib3V0IGN1cnJlbnRzLiBPY2VhbiBnbGlkZXJzIGFyZSBzbWFsbCwgZnJlZS1zd2ltbWluZywgdW5tYW5uZWQgdmVoaWNsZXMgdGhhdCBjYW4gY3J1aXNlIHRoZSBvY2VhbiBmb3Igc2V2ZXJhbCBtb250aHMgZ2F0aGVyaW5nIGluZm9ybWF0aW9uIGFib3V0IHRoZSB0ZW1wZXJhdHVyZSwgc2FsaW5pdHksIGFuZCBvdGhlciB3YXRlciBwcm9wZXJ0aWVzIGJldHdlZW4gdGhlIHN1cmZhY2UgYW5kIDEwMDAgbSBkZXB0aC4gQSBwcmVzc3VyZSBzZW5zb3Igb24gdGhlIGdsaWRlciBpcyBhYmxlIHRvIHJlY29yZCB0aGUgZGVwdGggdGhyb3VnaG91dCB0aGUgZGl2ZS4gQmVjYXVzZSBnbGlkZXJzIGFyZSB1bm1hbm5lZCwgdGhleSBjb21tdW5pY2F0ZSB3aXRoIHNjaWVudGlzdHMgb24gbGFuZCB3aGVuIHRoZXkgYXJlIGF0IHRoZSBzdXJmYWNlIHVzaW5nIGFuIGFudGVubmEgb24gdGhlIGVuZCBvZiB0aGUgZ2xpZGVyLiBUaGUgU2VhR2xpZGVyIGF1dG9ub21vdXMgdW5kZXJ3YXRlciB2ZWhpY2xlIChBVVYpIHdhcyBkZXNpZ25lZCBhdCB0aGUgVW5pdmVyc2l0eSBvZiBXYXNoaW5ndG9uIChVVykgQXBwbGllZCBQaHlzaWNzIExhYm9yYXRvcnkgKEFQTCkuIFRoZXNlIGRhdGEgYXJlIHRha2VuIGZyb20gTWlzc2lvbiA0IG9mIFNlYUdsaWRlciAxMTQuXG5cbmNkbV9kYXRhX3R5cGUgPSBUcmFqZWN0b3J5XG5WQVJJQUJMRVM6XG50cmFqZWN0b3J5XG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxudGVtcGVyYXR1cmUgKHNlYV93YXRlcl90ZW1wZXJhdHVyZSwgQ2Vsc2l1cylcbmNvbmR1Y3Rpdml0eSAoc2VhX3dhdGVyX2VsZWN0cmljYWxfY29uZHVjdGl2aXR5LCBTIG0tMSlcbnNhbGluaXR5IChzZWFfd2F0ZXJfc2FsaW5pdHksIDFlLTMpXG5kZW5zaXR5IChzZWFfd2F0ZXJfZGVuc2l0eSwga2cgbS0zKVxucHJlc3N1cmUgKHNlYV93YXRlcl9wcmVzc3VyZSwgZGJhcilcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9oYXdhaWlfc29lc3RfY2M5Ml83ZDI0XzA2MjdfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2hhd2FpaV9zb2VzdF9jYzkyXzdkMjRfMDYyN19pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9oYXdhaWlfc29lc3RfY2M5Ml83ZDI0XzA2MjcvaW5kZXguanNvbiIsICJodHRwOi8vd3d3LnBhY2lvb3MuaGF3YWlpLmVkdSIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9oYXdhaWlfc29lc3RfY2M5Ml83ZDI0XzA2MjcucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWhhd2FpaV9zb2VzdF9jYzkyXzdkMjRfMDYyNyZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJVbml2ZXJzaXR5IG9mIEhhd2FpaSIsICJoYXdhaWlfc29lc3RfY2M5Ml83ZDI0XzA2MjciXSwKICAgICAgWyIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF9mMjg5XzgxNzBfZWM0NSIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfZjI4OV84MTcwX2VjNDUuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiUGFjSU9PUyBPY2VhbiBHbGlkZXJzOiBTZWFHbGlkZXIgMTM5OiBNaXNzaW9uIDEiLCAiQXMgYSBwYXJ0IG9mIFBhY0lPT1MsIG9jZWFuIGdsaWRlcnMgcHJvdmlkZSB2ZXJ5IGRldGFpbGVkIGluZm9ybWF0aW9uIGFib3V0IHRoZSBwaHlzaWNhbCBhbmQgY2hlbWljYWwgY29uZGl0aW9uIG9mIHRoZSB3YXRlcnMgYXJvdW5kIHRoZSBIYXdhaWlhbiBJc2xhbmRzLiBBZGRpdGlvbmFsbHksIHRoZXNlIGRhdGEgZ2V0IHVzZWQgaW4gY29tcHV0ZXIgbW9kZWxzIHRvIG1ha2UgcHJlZGljdGlvbnMgYWJvdXQgY3VycmVudHMuIE9jZWFuIGdsaWRlcnMgYXJlIHNtYWxsLCBmcmVlLXN3aW1taW5nLCB1bm1hbm5lZCB2ZWhpY2xlcyB0aGF0IGNhbiBjcnVpc2UgdGhlIG9jZWFuIGZvciBzZXZlcmFsIG1vbnRocyBnYXRoZXJpbmcgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHRlbXBlcmF0dXJlLCBzYWxpbml0eSwgYW5kIG90aGVyIHdhdGVyIHByb3BlcnRpZXMgYmV0d2VlbiB0aGUgc3VyZmFjZSBhbmQgMTAwMCBtIGRlcHRoLiBBIHByZXNzdXJlIHNlbnNvciBvbiB0aGUgZ2xpZGVyIGlzIGFibGUgdG8gcmVjb3JkIHRoZSBkZXB0aCB0aHJvdWdob3V0IHRoZSBkaXZlLiBCZWNhdXNlIGdsaWRlcnMgYXJlIHVubWFubmVkLCB0aGV5IGNvbW11bmljYXRlIHdpdGggc2NpZW50aXN0cyBvbiBsYW5kIHdoZW4gdGhleSBhcmUgYXQgdGhlIHN1cmZhY2UgdXNpbmcgYW4gYW50ZW5uYSBvbiB0aGUgZW5kIG9mIHRoZSBnbGlkZXIuIFRoZSBTZWFHbGlkZXIgYXV0b25vbW91cyB1bmRlcndhdGVyIHZlaGljbGUgKEFVVikgd2FzIGRlc2lnbmVkIGF0IHRoZSBVbml2ZXJzaXR5IG9mIFdhc2hpbmd0b24gKFVXKSBBcHBsaWVkIFBoeXNpY3MgTGFib3JhdG9yeSAoQVBMKS4gVGhlc2UgZGF0YSBhcmUgdGFrZW4gZnJvbSBNaXNzaW9uIDEgb2YgU2VhR2xpZGVyIDEzOS5cblxuY2RtX2RhdGFfdHlwZSA9IFRyYWplY3RvcnlcblZBUklBQkxFUzpcbnRyYWplY3RvcnlcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG50ZW1wZXJhdHVyZSAoc2VhX3dhdGVyX3RlbXBlcmF0dXJlLCBDZWxzaXVzKVxuY29uZHVjdGl2aXR5IChzZWFfd2F0ZXJfZWxlY3RyaWNhbF9jb25kdWN0aXZpdHksIFMgbS0xKVxuc2FsaW5pdHkgKHNlYV93YXRlcl9zYWxpbml0eSwgMWUtMylcbmRlbnNpdHkgKHNlYV93YXRlcl9kZW5zaXR5LCBrZyBtLTMpXG5wcmVzc3VyZSAoc2VhX3dhdGVyX3ByZXNzdXJlLCBkYmFyKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2hhd2FpaV9zb2VzdF9mMjg5XzgxNzBfZWM0NV9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvaGF3YWlpX3NvZXN0X2YyODlfODE3MF9lYzQ1X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2hhd2FpaV9zb2VzdF9mMjg5XzgxNzBfZWM0NS9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cucGFjaW9vcy5oYXdhaWkuZWR1IiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2hhd2FpaV9zb2VzdF9mMjg5XzgxNzBfZWM0NS5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9aGF3YWlpX3NvZXN0X2YyODlfODE3MF9lYzQ1JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIlVuaXZlcnNpdHkgb2YgSGF3YWlpIiwgImhhd2FpaV9zb2VzdF9mMjg5XzgxNzBfZWM0NSJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0XzM2ZGRfY2Y0Y183M2E2IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF8zNmRkX2NmNGNfNzNhNi5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJQYWNJT09TIE9jZWFuIEdsaWRlcnM6IFNlYUdsaWRlciAxMzk6IE1pc3Npb24gMiIsICJBcyBhIHBhcnQgb2YgUGFjSU9PUywgb2NlYW4gZ2xpZGVycyBwcm92aWRlIHZlcnkgZGV0YWlsZWQgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHBoeXNpY2FsIGFuZCBjaGVtaWNhbCBjb25kaXRpb24gb2YgdGhlIHdhdGVycyBhcm91bmQgdGhlIEhhd2FpaWFuIElzbGFuZHMuIEFkZGl0aW9uYWxseSwgdGhlc2UgZGF0YSBnZXQgdXNlZCBpbiBjb21wdXRlciBtb2RlbHMgdG8gbWFrZSBwcmVkaWN0aW9ucyBhYm91dCBjdXJyZW50cy4gT2NlYW4gZ2xpZGVycyBhcmUgc21hbGwsIGZyZWUtc3dpbW1pbmcsIHVubWFubmVkIHZlaGljbGVzIHRoYXQgY2FuIGNydWlzZSB0aGUgb2NlYW4gZm9yIHNldmVyYWwgbW9udGhzIGdhdGhlcmluZyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdGVtcGVyYXR1cmUsIHNhbGluaXR5LCBhbmQgb3RoZXIgd2F0ZXIgcHJvcGVydGllcyBiZXR3ZWVuIHRoZSBzdXJmYWNlIGFuZCAxMDAwIG0gZGVwdGguIEEgcHJlc3N1cmUgc2Vuc29yIG9uIHRoZSBnbGlkZXIgaXMgYWJsZSB0byByZWNvcmQgdGhlIGRlcHRoIHRocm91Z2hvdXQgdGhlIGRpdmUuIEJlY2F1c2UgZ2xpZGVycyBhcmUgdW5tYW5uZWQsIHRoZXkgY29tbXVuaWNhdGUgd2l0aCBzY2llbnRpc3RzIG9uIGxhbmQgd2hlbiB0aGV5IGFyZSBhdCB0aGUgc3VyZmFjZSB1c2luZyBhbiBhbnRlbm5hIG9uIHRoZSBlbmQgb2YgdGhlIGdsaWRlci4gVGhlIFNlYUdsaWRlciBhdXRvbm9tb3VzIHVuZGVyd2F0ZXIgdmVoaWNsZSAoQVVWKSB3YXMgZGVzaWduZWQgYXQgdGhlIFVuaXZlcnNpdHkgb2YgV2FzaGluZ3RvbiAoVVcpIEFwcGxpZWQgUGh5c2ljcyBMYWJvcmF0b3J5IChBUEwpLiBUaGVzZSBkYXRhIGFyZSB0YWtlbiBmcm9tIE1pc3Npb24gMiBvZiBTZWFHbGlkZXIgMTM5LlxuXG5jZG1fZGF0YV90eXBlID0gVHJhamVjdG9yeVxuVkFSSUFCTEVTOlxudHJhamVjdG9yeVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbnRlbXBlcmF0dXJlIChzZWFfd2F0ZXJfdGVtcGVyYXR1cmUsIENlbHNpdXMpXG5jb25kdWN0aXZpdHkgKHNlYV93YXRlcl9lbGVjdHJpY2FsX2NvbmR1Y3Rpdml0eSwgUyBtLTEpXG5zYWxpbml0eSAoc2VhX3dhdGVyX3NhbGluaXR5LCAxZS0zKVxuZGVuc2l0eSAoc2VhX3dhdGVyX2RlbnNpdHksIGtnIG0tMylcbnByZXNzdXJlIChzZWFfd2F0ZXJfcHJlc3N1cmUsIGRiYXIpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvaGF3YWlpX3NvZXN0XzM2ZGRfY2Y0Y183M2E2X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9oYXdhaWlfc29lc3RfMzZkZF9jZjRjXzczYTZfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vaGF3YWlpX3NvZXN0XzM2ZGRfY2Y0Y183M2E2L2luZGV4Lmpzb24iLCAiaHR0cDovL3d3dy5wYWNpb29zLmhhd2FpaS5lZHUiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvaGF3YWlpX3NvZXN0XzM2ZGRfY2Y0Y183M2E2LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1oYXdhaWlfc29lc3RfMzZkZF9jZjRjXzczYTYmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiVW5pdmVyc2l0eSBvZiBIYXdhaWkiLCAiaGF3YWlpX3NvZXN0XzM2ZGRfY2Y0Y183M2E2Il0sCiAgICAgIFsiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfNTM1OV84Njc4XzgyYjEiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0XzUzNTlfODY3OF84MmIxLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlBhY0lPT1MgT2NlYW4gR2xpZGVyczogU2VhR2xpZGVyIDEzOTogTWlzc2lvbiAzIiwgIkFzIGEgcGFydCBvZiBQYWNJT09TLCBvY2VhbiBnbGlkZXJzIHByb3ZpZGUgdmVyeSBkZXRhaWxlZCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgcGh5c2ljYWwgYW5kIGNoZW1pY2FsIGNvbmRpdGlvbiBvZiB0aGUgd2F0ZXJzIGFyb3VuZCB0aGUgSGF3YWlpYW4gSXNsYW5kcy4gQWRkaXRpb25hbGx5LCB0aGVzZSBkYXRhIGdldCB1c2VkIGluIGNvbXB1dGVyIG1vZGVscyB0byBtYWtlIHByZWRpY3Rpb25zIGFib3V0IGN1cnJlbnRzLiBPY2VhbiBnbGlkZXJzIGFyZSBzbWFsbCwgZnJlZS1zd2ltbWluZywgdW5tYW5uZWQgdmVoaWNsZXMgdGhhdCBjYW4gY3J1aXNlIHRoZSBvY2VhbiBmb3Igc2V2ZXJhbCBtb250aHMgZ2F0aGVyaW5nIGluZm9ybWF0aW9uIGFib3V0IHRoZSB0ZW1wZXJhdHVyZSwgc2FsaW5pdHksIGFuZCBvdGhlciB3YXRlciBwcm9wZXJ0aWVzIGJldHdlZW4gdGhlIHN1cmZhY2UgYW5kIDEwMDAgbSBkZXB0aC4gQSBwcmVzc3VyZSBzZW5zb3Igb24gdGhlIGdsaWRlciBpcyBhYmxlIHRvIHJlY29yZCB0aGUgZGVwdGggdGhyb3VnaG91dCB0aGUgZGl2ZS4gQmVjYXVzZSBnbGlkZXJzIGFyZSB1bm1hbm5lZCwgdGhleSBjb21tdW5pY2F0ZSB3aXRoIHNjaWVudGlzdHMgb24gbGFuZCB3aGVuIHRoZXkgYXJlIGF0IHRoZSBzdXJmYWNlIHVzaW5nIGFuIGFudGVubmEgb24gdGhlIGVuZCBvZiB0aGUgZ2xpZGVyLiBUaGUgU2VhR2xpZGVyIGF1dG9ub21vdXMgdW5kZXJ3YXRlciB2ZWhpY2xlIChBVVYpIHdhcyBkZXNpZ25lZCBhdCB0aGUgVW5pdmVyc2l0eSBvZiBXYXNoaW5ndG9uIChVVykgQXBwbGllZCBQaHlzaWNzIExhYm9yYXRvcnkgKEFQTCkuIFRoZXNlIGRhdGEgYXJlIHRha2VuIGZyb20gTWlzc2lvbiAzIG9mIFNlYUdsaWRlciAxMzkuXG5cbmNkbV9kYXRhX3R5cGUgPSBUcmFqZWN0b3J5XG5WQVJJQUJMRVM6XG50cmFqZWN0b3J5XG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxudGVtcGVyYXR1cmUgKHNlYV93YXRlcl90ZW1wZXJhdHVyZSwgQ2Vsc2l1cylcbmNvbmR1Y3Rpdml0eSAoc2VhX3dhdGVyX2VsZWN0cmljYWxfY29uZHVjdGl2aXR5LCBTIG0tMSlcbnNhbGluaXR5IChzZWFfd2F0ZXJfc2FsaW5pdHksIDFlLTMpXG5kZW5zaXR5IChzZWFfd2F0ZXJfZGVuc2l0eSwga2cgbS0zKVxucHJlc3N1cmUgKHNlYV93YXRlcl9wcmVzc3VyZSwgZGJhcilcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9oYXdhaWlfc29lc3RfNTM1OV84Njc4XzgyYjFfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2hhd2FpaV9zb2VzdF81MzU5Xzg2NzhfODJiMV9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9oYXdhaWlfc29lc3RfNTM1OV84Njc4XzgyYjEvaW5kZXguanNvbiIsICJodHRwOi8vd3d3LnBhY2lvb3MuaGF3YWlpLmVkdSIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9oYXdhaWlfc29lc3RfNTM1OV84Njc4XzgyYjEucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWhhd2FpaV9zb2VzdF81MzU5Xzg2NzhfODJiMSZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJVbml2ZXJzaXR5IG9mIEhhd2FpaSIsICJoYXdhaWlfc29lc3RfNTM1OV84Njc4XzgyYjEiXSwKICAgICAgWyIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF85MmMxX2EyYjBfNTVmYiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfOTJjMV9hMmIwXzU1ZmIuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiUGFjSU9PUyBPY2VhbiBHbGlkZXJzOiBTZWFHbGlkZXIgMTM5OiBNaXNzaW9uIDYiLCAiQXMgYSBwYXJ0IG9mIFBhY0lPT1MsIG9jZWFuIGdsaWRlcnMgcHJvdmlkZSB2ZXJ5IGRldGFpbGVkIGluZm9ybWF0aW9uIGFib3V0IHRoZSBwaHlzaWNhbCBhbmQgY2hlbWljYWwgY29uZGl0aW9uIG9mIHRoZSB3YXRlcnMgYXJvdW5kIHRoZSBIYXdhaWlhbiBJc2xhbmRzLiBBZGRpdGlvbmFsbHksIHRoZXNlIGRhdGEgZ2V0IHVzZWQgaW4gY29tcHV0ZXIgbW9kZWxzIHRvIG1ha2UgcHJlZGljdGlvbnMgYWJvdXQgY3VycmVudHMuIE9jZWFuIGdsaWRlcnMgYXJlIHNtYWxsLCBmcmVlLXN3aW1taW5nLCB1bm1hbm5lZCB2ZWhpY2xlcyB0aGF0IGNhbiBjcnVpc2UgdGhlIG9jZWFuIGZvciBzZXZlcmFsIG1vbnRocyBnYXRoZXJpbmcgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHRlbXBlcmF0dXJlLCBzYWxpbml0eSwgYW5kIG90aGVyIHdhdGVyIHByb3BlcnRpZXMgYmV0d2VlbiB0aGUgc3VyZmFjZSBhbmQgMTAwMCBtIGRlcHRoLiBBIHByZXNzdXJlIHNlbnNvciBvbiB0aGUgZ2xpZGVyIGlzIGFibGUgdG8gcmVjb3JkIHRoZSBkZXB0aCB0aHJvdWdob3V0IHRoZSBkaXZlLiBCZWNhdXNlIGdsaWRlcnMgYXJlIHVubWFubmVkLCB0aGV5IGNvbW11bmljYXRlIHdpdGggc2NpZW50aXN0cyBvbiBsYW5kIHdoZW4gdGhleSBhcmUgYXQgdGhlIHN1cmZhY2UgdXNpbmcgYW4gYW50ZW5uYSBvbiB0aGUgZW5kIG9mIHRoZSBnbGlkZXIuIFRoZSBTZWFHbGlkZXIgYXV0b25vbW91cyB1bmRlcndhdGVyIHZlaGljbGUgKEFVVikgd2FzIGRlc2lnbmVkIGF0IHRoZSBVbml2ZXJzaXR5IG9mIFdhc2hpbmd0b24gKFVXKSBBcHBsaWVkIFBoeXNpY3MgTGFib3JhdG9yeSAoQVBMKS4gVGhlc2UgZGF0YSBhcmUgdGFrZW4gZnJvbSBNaXNzaW9uIDYgb2YgU2VhR2xpZGVyIDEzOS5cblxuY2RtX2RhdGFfdHlwZSA9IFRyYWplY3RvcnlcblZBUklBQkxFUzpcbnRyYWplY3RvcnlcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG50ZW1wZXJhdHVyZSAoc2VhX3dhdGVyX3RlbXBlcmF0dXJlLCBDZWxzaXVzKVxuY29uZHVjdGl2aXR5IChzZWFfd2F0ZXJfZWxlY3RyaWNhbF9jb25kdWN0aXZpdHksIFMgbS0xKVxuc2FsaW5pdHkgKHNlYV93YXRlcl9zYWxpbml0eSwgMWUtMylcbmRlbnNpdHkgKHNlYV93YXRlcl9kZW5zaXR5LCBrZyBtLTMpXG5wcmVzc3VyZSAoc2VhX3dhdGVyX3ByZXNzdXJlLCBkYmFyKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2hhd2FpaV9zb2VzdF85MmMxX2EyYjBfNTVmYl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvaGF3YWlpX3NvZXN0XzkyYzFfYTJiMF81NWZiX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2hhd2FpaV9zb2VzdF85MmMxX2EyYjBfNTVmYi9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cucGFjaW9vcy5oYXdhaWkuZWR1IiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2hhd2FpaV9zb2VzdF85MmMxX2EyYjBfNTVmYi5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9aGF3YWlpX3NvZXN0XzkyYzFfYTJiMF81NWZiJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIlVuaXZlcnNpdHkgb2YgSGF3YWlpIiwgImhhd2FpaV9zb2VzdF85MmMxX2EyYjBfNTVmYiJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0Xzc1YjNfZTUyY18yNmEyIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF83NWIzX2U1MmNfMjZhMi5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJQYWNJT09TIE9jZWFuIEdsaWRlcnM6IFNlYUdsaWRlciAxMzk6IE1pc3Npb24gNyIsICJBcyBhIHBhcnQgb2YgUGFjSU9PUywgb2NlYW4gZ2xpZGVycyBwcm92aWRlIHZlcnkgZGV0YWlsZWQgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHBoeXNpY2FsIGFuZCBjaGVtaWNhbCBjb25kaXRpb24gb2YgdGhlIHdhdGVycyBhcm91bmQgdGhlIEhhd2FpaWFuIElzbGFuZHMuIEFkZGl0aW9uYWxseSwgdGhlc2UgZGF0YSBnZXQgdXNlZCBpbiBjb21wdXRlciBtb2RlbHMgdG8gbWFrZSBwcmVkaWN0aW9ucyBhYm91dCBjdXJyZW50cy4gT2NlYW4gZ2xpZGVycyBhcmUgc21hbGwsIGZyZWUtc3dpbW1pbmcsIHVubWFubmVkIHZlaGljbGVzIHRoYXQgY2FuIGNydWlzZSB0aGUgb2NlYW4gZm9yIHNldmVyYWwgbW9udGhzIGdhdGhlcmluZyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdGVtcGVyYXR1cmUsIHNhbGluaXR5LCBhbmQgb3RoZXIgd2F0ZXIgcHJvcGVydGllcyBiZXR3ZWVuIHRoZSBzdXJmYWNlIGFuZCAxMDAwIG0gZGVwdGguIEEgcHJlc3N1cmUgc2Vuc29yIG9uIHRoZSBnbGlkZXIgaXMgYWJsZSB0byByZWNvcmQgdGhlIGRlcHRoIHRocm91Z2hvdXQgdGhlIGRpdmUuIEJlY2F1c2UgZ2xpZGVycyBhcmUgdW5tYW5uZWQsIHRoZXkgY29tbXVuaWNhdGUgd2l0aCBzY2llbnRpc3RzIG9uIGxhbmQgd2hlbiB0aGV5IGFyZSBhdCB0aGUgc3VyZmFjZSB1c2luZyBhbiBhbnRlbm5hIG9uIHRoZSBlbmQgb2YgdGhlIGdsaWRlci4gVGhlIFNlYUdsaWRlciBhdXRvbm9tb3VzIHVuZGVyd2F0ZXIgdmVoaWNsZSAoQVVWKSB3YXMgZGVzaWduZWQgYXQgdGhlIFVuaXZlcnNpdHkgb2YgV2FzaGluZ3RvbiAoVVcpIEFwcGxpZWQgUGh5c2ljcyBMYWJvcmF0b3J5IChBUEwpLiBUaGVzZSBkYXRhIGFyZSB0YWtlbiBmcm9tIE1pc3Npb24gNyBvZiBTZWFHbGlkZXIgMTM5LlxuXG5jZG1fZGF0YV90eXBlID0gVHJhamVjdG9yeVxuVkFSSUFCTEVTOlxudHJhamVjdG9yeVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbnRlbXBlcmF0dXJlIChzZWFfd2F0ZXJfdGVtcGVyYXR1cmUsIENlbHNpdXMpXG5jb25kdWN0aXZpdHkgKHNlYV93YXRlcl9lbGVjdHJpY2FsX2NvbmR1Y3Rpdml0eSwgUyBtLTEpXG5zYWxpbml0eSAoc2VhX3dhdGVyX3NhbGluaXR5LCAxZS0zKVxuZGVuc2l0eSAoc2VhX3dhdGVyX2RlbnNpdHksIGtnIG0tMylcbnByZXNzdXJlIChzZWFfd2F0ZXJfcHJlc3N1cmUsIGRiYXIpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvaGF3YWlpX3NvZXN0Xzc1YjNfZTUyY18yNmEyX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9oYXdhaWlfc29lc3RfNzViM19lNTJjXzI2YTJfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vaGF3YWlpX3NvZXN0Xzc1YjNfZTUyY18yNmEyL2luZGV4Lmpzb24iLCAiaHR0cDovL3d3dy5wYWNpb29zLmhhd2FpaS5lZHUiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvaGF3YWlpX3NvZXN0Xzc1YjNfZTUyY18yNmEyLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1oYXdhaWlfc29lc3RfNzViM19lNTJjXzI2YTImc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiVW5pdmVyc2l0eSBvZiBIYXdhaWkiLCAiaGF3YWlpX3NvZXN0Xzc1YjNfZTUyY18yNmEyIl0sCiAgICAgIFsiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfYTgyNl84NjMzXzAwYmIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0X2E4MjZfODYzM18wMGJiLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlBhY0lPT1MgT2NlYW4gR2xpZGVyczogU2VhR2xpZGVyIDEzOTogTWlzc2lvbiA4IiwgIkFzIGEgcGFydCBvZiBQYWNJT09TLCBvY2VhbiBnbGlkZXJzIHByb3ZpZGUgdmVyeSBkZXRhaWxlZCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgcGh5c2ljYWwgYW5kIGNoZW1pY2FsIGNvbmRpdGlvbiBvZiB0aGUgd2F0ZXJzIGFyb3VuZCB0aGUgSGF3YWlpYW4gSXNsYW5kcy4gQWRkaXRpb25hbGx5LCB0aGVzZSBkYXRhIGdldCB1c2VkIGluIGNvbXB1dGVyIG1vZGVscyB0byBtYWtlIHByZWRpY3Rpb25zIGFib3V0IGN1cnJlbnRzLiBPY2VhbiBnbGlkZXJzIGFyZSBzbWFsbCwgZnJlZS1zd2ltbWluZywgdW5tYW5uZWQgdmVoaWNsZXMgdGhhdCBjYW4gY3J1aXNlIHRoZSBvY2VhbiBmb3Igc2V2ZXJhbCBtb250aHMgZ2F0aGVyaW5nIGluZm9ybWF0aW9uIGFib3V0IHRoZSB0ZW1wZXJhdHVyZSwgc2FsaW5pdHksIGFuZCBvdGhlciB3YXRlciBwcm9wZXJ0aWVzIGJldHdlZW4gdGhlIHN1cmZhY2UgYW5kIDEwMDAgbSBkZXB0aC4gQSBwcmVzc3VyZSBzZW5zb3Igb24gdGhlIGdsaWRlciBpcyBhYmxlIHRvIHJlY29yZCB0aGUgZGVwdGggdGhyb3VnaG91dCB0aGUgZGl2ZS4gQmVjYXVzZSBnbGlkZXJzIGFyZSB1bm1hbm5lZCwgdGhleSBjb21tdW5pY2F0ZSB3aXRoIHNjaWVudGlzdHMgb24gbGFuZCB3aGVuIHRoZXkgYXJlIGF0IHRoZSBzdXJmYWNlIHVzaW5nIGFuIGFudGVubmEgb24gdGhlIGVuZCBvZiB0aGUgZ2xpZGVyLiBUaGUgU2VhR2xpZGVyIGF1dG9ub21vdXMgdW5kZXJ3YXRlciB2ZWhpY2xlIChBVVYpIHdhcyBkZXNpZ25lZCBhdCB0aGUgVW5pdmVyc2l0eSBvZiBXYXNoaW5ndG9uIChVVykgQXBwbGllZCBQaHlzaWNzIExhYm9yYXRvcnkgKEFQTCkuIFRoZXNlIGRhdGEgYXJlIHRha2VuIGZyb20gTWlzc2lvbiA4IG9mIFNlYUdsaWRlciAxMzkuXG5cbmNkbV9kYXRhX3R5cGUgPSBUcmFqZWN0b3J5XG5WQVJJQUJMRVM6XG50cmFqZWN0b3J5XG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxudGVtcGVyYXR1cmUgKHNlYV93YXRlcl90ZW1wZXJhdHVyZSwgQ2Vsc2l1cylcbmNvbmR1Y3Rpdml0eSAoc2VhX3dhdGVyX2VsZWN0cmljYWxfY29uZHVjdGl2aXR5LCBTIG0tMSlcbnNhbGluaXR5IChzZWFfd2F0ZXJfc2FsaW5pdHksIDFlLTMpXG5kZW5zaXR5IChzZWFfd2F0ZXJfZGVuc2l0eSwga2cgbS0zKVxucHJlc3N1cmUgKHNlYV93YXRlcl9wcmVzc3VyZSwgZGJhcilcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9oYXdhaWlfc29lc3RfYTgyNl84NjMzXzAwYmJfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2hhd2FpaV9zb2VzdF9hODI2Xzg2MzNfMDBiYl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9oYXdhaWlfc29lc3RfYTgyNl84NjMzXzAwYmIvaW5kZXguanNvbiIsICJodHRwOi8vd3d3LnBhY2lvb3MuaGF3YWlpLmVkdSIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9oYXdhaWlfc29lc3RfYTgyNl84NjMzXzAwYmIucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWhhd2FpaV9zb2VzdF9hODI2Xzg2MzNfMDBiYiZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJVbml2ZXJzaXR5IG9mIEhhd2FpaSIsICJoYXdhaWlfc29lc3RfYTgyNl84NjMzXzAwYmIiXSwKICAgICAgWyIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF8wNzZhXzg3YjNfNDBhMCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfMDc2YV84N2IzXzQwYTAuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiUGFjSU9PUyBPY2VhbiBHbGlkZXJzOiBTZWFHbGlkZXIgMTM5OiBNaXNzaW9uIDkiLCAiQXMgYSBwYXJ0IG9mIFBhY0lPT1MsIG9jZWFuIGdsaWRlcnMgcHJvdmlkZSB2ZXJ5IGRldGFpbGVkIGluZm9ybWF0aW9uIGFib3V0IHRoZSBwaHlzaWNhbCBhbmQgY2hlbWljYWwgY29uZGl0aW9uIG9mIHRoZSB3YXRlcnMgYXJvdW5kIHRoZSBIYXdhaWlhbiBJc2xhbmRzLiBBZGRpdGlvbmFsbHksIHRoZXNlIGRhdGEgZ2V0IHVzZWQgaW4gY29tcHV0ZXIgbW9kZWxzIHRvIG1ha2UgcHJlZGljdGlvbnMgYWJvdXQgY3VycmVudHMuIE9jZWFuIGdsaWRlcnMgYXJlIHNtYWxsLCBmcmVlLXN3aW1taW5nLCB1bm1hbm5lZCB2ZWhpY2xlcyB0aGF0IGNhbiBjcnVpc2UgdGhlIG9jZWFuIGZvciBzZXZlcmFsIG1vbnRocyBnYXRoZXJpbmcgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHRlbXBlcmF0dXJlLCBzYWxpbml0eSwgYW5kIG90aGVyIHdhdGVyIHByb3BlcnRpZXMgYmV0d2VlbiB0aGUgc3VyZmFjZSBhbmQgMTAwMCBtIGRlcHRoLiBBIHByZXNzdXJlIHNlbnNvciBvbiB0aGUgZ2xpZGVyIGlzIGFibGUgdG8gcmVjb3JkIHRoZSBkZXB0aCB0aHJvdWdob3V0IHRoZSBkaXZlLiBCZWNhdXNlIGdsaWRlcnMgYXJlIHVubWFubmVkLCB0aGV5IGNvbW11bmljYXRlIHdpdGggc2NpZW50aXN0cyBvbiBsYW5kIHdoZW4gdGhleSBhcmUgYXQgdGhlIHN1cmZhY2UgdXNpbmcgYW4gYW50ZW5uYSBvbiB0aGUgZW5kIG9mIHRoZSBnbGlkZXIuIFRoZSBTZWFHbGlkZXIgYXV0b25vbW91cyB1bmRlcndhdGVyIHZlaGljbGUgKEFVVikgd2FzIGRlc2lnbmVkIGF0IHRoZSBVbml2ZXJzaXR5IG9mIFdhc2hpbmd0b24gKFVXKSBBcHBsaWVkIFBoeXNpY3MgTGFib3JhdG9yeSAoQVBMKS4gVGhlc2UgZGF0YSBhcmUgdGFrZW4gZnJvbSBNaXNzaW9uIDkgb2YgU2VhR2xpZGVyIDEzOS5cblxuY2RtX2RhdGFfdHlwZSA9IFRyYWplY3RvcnlcblZBUklBQkxFUzpcbnRyYWplY3RvcnlcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG50ZW1wZXJhdHVyZSAoc2VhX3dhdGVyX3RlbXBlcmF0dXJlLCBDZWxzaXVzKVxuY29uZHVjdGl2aXR5IChzZWFfd2F0ZXJfZWxlY3RyaWNhbF9jb25kdWN0aXZpdHksIFMgbS0xKVxuc2FsaW5pdHkgKHNlYV93YXRlcl9zYWxpbml0eSwgMWUtMylcbmRlbnNpdHkgKHNlYV93YXRlcl9kZW5zaXR5LCBrZyBtLTMpXG5wcmVzc3VyZSAoc2VhX3dhdGVyX3ByZXNzdXJlLCBkYmFyKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2hhd2FpaV9zb2VzdF8wNzZhXzg3YjNfNDBhMF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvaGF3YWlpX3NvZXN0XzA3NmFfODdiM180MGEwX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2hhd2FpaV9zb2VzdF8wNzZhXzg3YjNfNDBhMC9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cucGFjaW9vcy5oYXdhaWkuZWR1IiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2hhd2FpaV9zb2VzdF8wNzZhXzg3YjNfNDBhMC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9aGF3YWlpX3NvZXN0XzA3NmFfODdiM180MGEwJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIlVuaXZlcnNpdHkgb2YgSGF3YWlpIiwgImhhd2FpaV9zb2VzdF8wNzZhXzg3YjNfNDBhMCJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0XzRjODJfNDcyOF8wMTBiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF80YzgyXzQ3MjhfMDEwYi5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJQYWNJT09TIE9jZWFuIEdsaWRlcnM6IFNlYUdsaWRlciA1MjM6IE1pc3Npb24gMSIsICJBcyBhIHBhcnQgb2YgUGFjSU9PUywgb2NlYW4gZ2xpZGVycyBwcm92aWRlIHZlcnkgZGV0YWlsZWQgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHBoeXNpY2FsIGFuZCBjaGVtaWNhbCBjb25kaXRpb24gb2YgdGhlIHdhdGVycyBhcm91bmQgdGhlIEhhd2FpaWFuIElzbGFuZHMuIEFkZGl0aW9uYWxseSwgdGhlc2UgZGF0YSBnZXQgdXNlZCBpbiBjb21wdXRlciBtb2RlbHMgdG8gbWFrZSBwcmVkaWN0aW9ucyBhYm91dCBjdXJyZW50cy4gT2NlYW4gZ2xpZGVycyBhcmUgc21hbGwsIGZyZWUtc3dpbW1pbmcsIHVubWFubmVkIHZlaGljbGVzIHRoYXQgY2FuIGNydWlzZSB0aGUgb2NlYW4gZm9yIHNldmVyYWwgbW9udGhzIGdhdGhlcmluZyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdGVtcGVyYXR1cmUsIHNhbGluaXR5LCBhbmQgb3RoZXIgd2F0ZXIgcHJvcGVydGllcyBiZXR3ZWVuIHRoZSBzdXJmYWNlIGFuZCAxMDAwIG0gZGVwdGguIEEgcHJlc3N1cmUgc2Vuc29yIG9uIHRoZSBnbGlkZXIgaXMgYWJsZSB0byByZWNvcmQgdGhlIGRlcHRoIHRocm91Z2hvdXQgdGhlIGRpdmUuIEJlY2F1c2UgZ2xpZGVycyBhcmUgdW5tYW5uZWQsIHRoZXkgY29tbXVuaWNhdGUgd2l0aCBzY2llbnRpc3RzIG9uIGxhbmQgd2hlbiB0aGV5IGFyZSBhdCB0aGUgc3VyZmFjZSB1c2luZyBhbiBhbnRlbm5hIG9uIHRoZSBlbmQgb2YgdGhlIGdsaWRlci4gVGhlIFNlYUdsaWRlciBhdXRvbm9tb3VzIHVuZGVyd2F0ZXIgdmVoaWNsZSAoQVVWKSB3YXMgZGVzaWduZWQgYXQgdGhlIFVuaXZlcnNpdHkgb2YgV2FzaGluZ3RvbiAoVVcpIEFwcGxpZWQgUGh5c2ljcyBMYWJvcmF0b3J5IChBUEwpLiBUaGVzZSBkYXRhIGFyZSB0YWtlbiBmcm9tIE1pc3Npb24gMSBvZiBTZWFHbGlkZXIgNTIzLlxuXG5jZG1fZGF0YV90eXBlID0gVHJhamVjdG9yeVxuVkFSSUFCTEVTOlxudHJhamVjdG9yeVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbnRlbXBlcmF0dXJlIChzZWFfd2F0ZXJfdGVtcGVyYXR1cmUsIENlbHNpdXMpXG5jb25kdWN0aXZpdHkgKHNlYV93YXRlcl9lbGVjdHJpY2FsX2NvbmR1Y3Rpdml0eSwgUyBtLTEpXG5zYWxpbml0eSAoc2VhX3dhdGVyX3NhbGluaXR5LCAxZS0zKVxuZGVuc2l0eSAoc2VhX3dhdGVyX2RlbnNpdHksIGtnIG0tMylcbnByZXNzdXJlIChzZWFfd2F0ZXJfcHJlc3N1cmUsIGRiYXIpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvaGF3YWlpX3NvZXN0XzRjODJfNDcyOF8wMTBiX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9oYXdhaWlfc29lc3RfNGM4Ml80NzI4XzAxMGJfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vaGF3YWlpX3NvZXN0XzRjODJfNDcyOF8wMTBiL2luZGV4Lmpzb24iLCAiaHR0cDovL3d3dy5wYWNpb29zLmhhd2FpaS5lZHUiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvaGF3YWlpX3NvZXN0XzRjODJfNDcyOF8wMTBiLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1oYXdhaWlfc29lc3RfNGM4Ml80NzI4XzAxMGImc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiVW5pdmVyc2l0eSBvZiBIYXdhaWkiLCAiaGF3YWlpX3NvZXN0XzRjODJfNDcyOF8wMTBiIl0sCiAgICAgIFsiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfODU2Yl83ZTY2XzhjM2YiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0Xzg1NmJfN2U2Nl84YzNmLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlBhY0lPT1MgT2NlYW4gR2xpZGVyczogU2VhR2xpZGVyIDUyMzogTWlzc2lvbiAzIiwgIkFzIGEgcGFydCBvZiBQYWNJT09TLCBvY2VhbiBnbGlkZXJzIHByb3ZpZGUgdmVyeSBkZXRhaWxlZCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgcGh5c2ljYWwgYW5kIGNoZW1pY2FsIGNvbmRpdGlvbiBvZiB0aGUgd2F0ZXJzIGFyb3VuZCB0aGUgSGF3YWlpYW4gSXNsYW5kcy4gQWRkaXRpb25hbGx5LCB0aGVzZSBkYXRhIGdldCB1c2VkIGluIGNvbXB1dGVyIG1vZGVscyB0byBtYWtlIHByZWRpY3Rpb25zIGFib3V0IGN1cnJlbnRzLiBPY2VhbiBnbGlkZXJzIGFyZSBzbWFsbCwgZnJlZS1zd2ltbWluZywgdW5tYW5uZWQgdmVoaWNsZXMgdGhhdCBjYW4gY3J1aXNlIHRoZSBvY2VhbiBmb3Igc2V2ZXJhbCBtb250aHMgZ2F0aGVyaW5nIGluZm9ybWF0aW9uIGFib3V0IHRoZSB0ZW1wZXJhdHVyZSwgc2FsaW5pdHksIGFuZCBvdGhlciB3YXRlciBwcm9wZXJ0aWVzIGJldHdlZW4gdGhlIHN1cmZhY2UgYW5kIDEwMDAgbSBkZXB0aC4gQSBwcmVzc3VyZSBzZW5zb3Igb24gdGhlIGdsaWRlciBpcyBhYmxlIHRvIHJlY29yZCB0aGUgZGVwdGggdGhyb3VnaG91dCB0aGUgZGl2ZS4gQmVjYXVzZSBnbGlkZXJzIGFyZSB1bm1hbm5lZCwgdGhleSBjb21tdW5pY2F0ZSB3aXRoIHNjaWVudGlzdHMgb24gbGFuZCB3aGVuIHRoZXkgYXJlIGF0IHRoZSBzdXJmYWNlIHVzaW5nIGFuIGFudGVubmEgb24gdGhlIGVuZCBvZiB0aGUgZ2xpZGVyLiBUaGUgU2VhR2xpZGVyIGF1dG9ub21vdXMgdW5kZXJ3YXRlciB2ZWhpY2xlIChBVVYpIHdhcyBkZXNpZ25lZCBhdCB0aGUgVW5pdmVyc2l0eSBvZiBXYXNoaW5ndG9uIChVVykgQXBwbGllZCBQaHlzaWNzIExhYm9yYXRvcnkgKEFQTCkuIFRoZXNlIGRhdGEgYXJlIHRha2VuIGZyb20gTWlzc2lvbiAzIG9mIFNlYUdsaWRlciA1MjMuXG5cbmNkbV9kYXRhX3R5cGUgPSBUcmFqZWN0b3J5XG5WQVJJQUJMRVM6XG50cmFqZWN0b3J5XG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxudGVtcGVyYXR1cmUgKHNlYV93YXRlcl90ZW1wZXJhdHVyZSwgQ2Vsc2l1cylcbmNvbmR1Y3Rpdml0eSAoc2VhX3dhdGVyX2VsZWN0cmljYWxfY29uZHVjdGl2aXR5LCBTIG0tMSlcbnNhbGluaXR5IChzZWFfd2F0ZXJfc2FsaW5pdHksIDFlLTMpXG5kZW5zaXR5IChzZWFfd2F0ZXJfZGVuc2l0eSwga2cgbS0zKVxucHJlc3N1cmUgKHNlYV93YXRlcl9wcmVzc3VyZSwgZGJhcilcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9oYXdhaWlfc29lc3RfODU2Yl83ZTY2XzhjM2ZfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2hhd2FpaV9zb2VzdF84NTZiXzdlNjZfOGMzZl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9oYXdhaWlfc29lc3RfODU2Yl83ZTY2XzhjM2YvaW5kZXguanNvbiIsICJodHRwOi8vd3d3LnBhY2lvb3MuaGF3YWlpLmVkdSIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9oYXdhaWlfc29lc3RfODU2Yl83ZTY2XzhjM2YucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWhhd2FpaV9zb2VzdF84NTZiXzdlNjZfOGMzZiZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJVbml2ZXJzaXR5IG9mIEhhd2FpaSIsICJoYXdhaWlfc29lc3RfODU2Yl83ZTY2XzhjM2YiXSwKICAgICAgWyIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF8yZjIxXzQwNjNfY2ZlYyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfMmYyMV80MDYzX2NmZWMuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiUGFjSU9PUyBPY2VhbiBHbGlkZXJzOiBTZWFHbGlkZXIgNTIzOiBNaXNzaW9uIDQiLCAiQXMgYSBwYXJ0IG9mIFBhY0lPT1MsIG9jZWFuIGdsaWRlcnMgcHJvdmlkZSB2ZXJ5IGRldGFpbGVkIGluZm9ybWF0aW9uIGFib3V0IHRoZSBwaHlzaWNhbCBhbmQgY2hlbWljYWwgY29uZGl0aW9uIG9mIHRoZSB3YXRlcnMgYXJvdW5kIHRoZSBIYXdhaWlhbiBJc2xhbmRzLiBBZGRpdGlvbmFsbHksIHRoZXNlIGRhdGEgZ2V0IHVzZWQgaW4gY29tcHV0ZXIgbW9kZWxzIHRvIG1ha2UgcHJlZGljdGlvbnMgYWJvdXQgY3VycmVudHMuIE9jZWFuIGdsaWRlcnMgYXJlIHNtYWxsLCBmcmVlLXN3aW1taW5nLCB1bm1hbm5lZCB2ZWhpY2xlcyB0aGF0IGNhbiBjcnVpc2UgdGhlIG9jZWFuIGZvciBzZXZlcmFsIG1vbnRocyBnYXRoZXJpbmcgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHRlbXBlcmF0dXJlLCBzYWxpbml0eSwgYW5kIG90aGVyIHdhdGVyIHByb3BlcnRpZXMgYmV0d2VlbiB0aGUgc3VyZmFjZSBhbmQgMTAwMCBtIGRlcHRoLiBBIHByZXNzdXJlIHNlbnNvciBvbiB0aGUgZ2xpZGVyIGlzIGFibGUgdG8gcmVjb3JkIHRoZSBkZXB0aCB0aHJvdWdob3V0IHRoZSBkaXZlLiBCZWNhdXNlIGdsaWRlcnMgYXJlIHVubWFubmVkLCB0aGV5IGNvbW11bmljYXRlIHdpdGggc2NpZW50aXN0cyBvbiBsYW5kIHdoZW4gdGhleSBhcmUgYXQgdGhlIHN1cmZhY2UgdXNpbmcgYW4gYW50ZW5uYSBvbiB0aGUgZW5kIG9mIHRoZSBnbGlkZXIuIFRoZSBTZWFHbGlkZXIgYXV0b25vbW91cyB1bmRlcndhdGVyIHZlaGljbGUgKEFVVikgd2FzIGRlc2lnbmVkIGF0IHRoZSBVbml2ZXJzaXR5IG9mIFdhc2hpbmd0b24gKFVXKSBBcHBsaWVkIFBoeXNpY3MgTGFib3JhdG9yeSAoQVBMKS4gVGhlc2UgZGF0YSBhcmUgdGFrZW4gZnJvbSBNaXNzaW9uIDQgb2YgU2VhR2xpZGVyIDUyMy5cblxuY2RtX2RhdGFfdHlwZSA9IFRyYWplY3RvcnlcblZBUklBQkxFUzpcbnRyYWplY3RvcnlcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG50ZW1wZXJhdHVyZSAoc2VhX3dhdGVyX3RlbXBlcmF0dXJlLCBDZWxzaXVzKVxuY29uZHVjdGl2aXR5IChzZWFfd2F0ZXJfZWxlY3RyaWNhbF9jb25kdWN0aXZpdHksIFMgbS0xKVxuc2FsaW5pdHkgKHNlYV93YXRlcl9zYWxpbml0eSwgMWUtMylcbmRlbnNpdHkgKHNlYV93YXRlcl9kZW5zaXR5LCBrZyBtLTMpXG5wcmVzc3VyZSAoc2VhX3dhdGVyX3ByZXNzdXJlLCBkYmFyKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2hhd2FpaV9zb2VzdF8yZjIxXzQwNjNfY2ZlY19mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvaGF3YWlpX3NvZXN0XzJmMjFfNDA2M19jZmVjX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2hhd2FpaV9zb2VzdF8yZjIxXzQwNjNfY2ZlYy9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cucGFjaW9vcy5oYXdhaWkuZWR1IiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2hhd2FpaV9zb2VzdF8yZjIxXzQwNjNfY2ZlYy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9aGF3YWlpX3NvZXN0XzJmMjFfNDA2M19jZmVjJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIlVuaXZlcnNpdHkgb2YgSGF3YWlpIiwgImhhd2FpaV9zb2VzdF8yZjIxXzQwNjNfY2ZlYyJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0XzdhZGNfNWIyYl83NjllIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF83YWRjXzViMmJfNzY5ZS5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJQYWNJT09TIFdhdGVyIFF1YWxpdHkgQnVveSAwMyAoV1FCLTAzKTogS2lob2xvIEJheSwgQmlnIElzbGFuZCwgSGF3YWlpIiwgIlRoZSB3YXRlciBxdWFsaXR5IGJ1b3lzIGFyZSBwYXJ0IG9mIHRoZSBQYWNpZmljIElzbGFuZHMgT2NlYW4gT2JzZXJ2aW5nIFN5c3RlbSAoUGFjSU9PUykgYW5kIGFyZSBkZXNpZ25lZCB0byBtZWFzdXJlIGEgdmFyaWV0eSBvZiBvY2VhbiBwYXJhbWV0ZXJzIGF0IGZpeGVkIHBvaW50cy4gV1FCLTAzIGlzIGxvY2F0ZWQgYXQgS2lob2xvIEJheSBhbG9uZyB0aGUgbGVld2FyZCAoV2VzdGVybikgY29hc3Qgb2YgdGhlIE5vcnRoIEtvbmEgZGlzdHJpY3Qgb2YgQmlnIElzbGFuZCBpbiBIYXdhaWkuIENvbnRpbnVvdXMgc2FtcGxpbmcgb2YgdGhpcyBvdXRmbG93IGFyZWEgcHJvdmlkZXMgYSByZWNvcmQgb2YgYmFzZWxpbmUgY29uZGl0aW9ucyBvZiB0aGUgY2hlbWljYWwgYW5kIGJpb2xvZ2ljYWwgZW52aXJvbm1lbnQgZm9yIGNvbXBhcmlzb24gd2hlbiB0aGVyZSBhcmUgcG9sbHV0aW9uIGV2ZW50cyBzdWNoIGFzIHN0b3JtIHJ1bm9mZiBvciBhIHNld2FnZSBzcGlsbC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAoZGVwdGggYmVsb3cgbWVhbiBzZWEgbGV2ZWwsIG0pXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuc3RhdGlvbl9uYW1lXG50ZW1wZXJhdHVyZSAod2F0ZXIgdGVtcGVyYXR1cmUgKHByb2Nlc3NlZCksIENlbHNpdXMpXG50ZW1wZXJhdHVyZV9yYXcgKFRlbXBlcmF0dXJlIChyYXcpLCBDZWxzaXVzKVxudGVtcGVyYXR1cmVfcWQgKFRlbXBlcmF0dXJlIHF1YWxpdHkgZGVzY3JpcHRvciwgMClcbmNvbmR1Y3Rpdml0eSAoQ29uZHVjdGl2aXR5IChwcm9jZXNzZWQpLCBTIG0tMSlcbmNvbmR1Y3Rpdml0eV9yYXcgKENvbmR1Y3Rpdml0eSAocmF3KSwgUyBtLTEpXG5jb25kdWN0aXZpdHlfcWQgKENvbmR1Y3Rpdml0eSBxdWFsaXR5IGRlc2NyaXB0b3IsIDApXG5zYWxpbml0eSAoU2FsaW5pdHkgKHByb2Nlc3NlZCksIDFlLTMpXG5zYWxpbml0eV9yYXcgKFNhbGluaXR5IChyYXcpLCAxZS0zKVxuc2FsaW5pdHlfcWQgKFNhbGluaXR5IHF1YWxpdHkgZGVzY3JpcHRvciwgMClcbm94eWdlbiAoRGlzc29sdmVkIG94eWdlbiBjb25jZW50cmF0aW9uIChwcm9jZXNzZWQpLCBrZyBtLTMpXG5veHlnZW5fcmF3IChEaXNzb2x2ZWQgb3h5Z2VuIGNvbmNlbnRyYXRpb24gKHJhdyksIGtnIG0tMylcbm94eWdlbl9xZCAoRGlzc29sdmVkIG94eWdlbiBjb25jZW50cmF0aW9uIHF1YWxpdHkgZGVzY3JpcHRvciwgMClcbm94eWdlbl9zYXR1cmF0aW9uIChEaXNzb2x2ZWQgb3h5Z2VuIHNhdHVyYXRpb24gKHByb2Nlc3NlZCksIDEpXG5veHlnZW5fc2F0dXJhdGlvbl9yYXcgKERpc3NvbHZlZCBveHlnZW4gc2F0dXJhdGlvbiAocmF3KSwgMSlcbm94eWdlbl9zYXR1cmF0aW9uX3FkIChEaXNzb2x2ZWQgb3h5Z2VuIHNhdHVyYXRpb24gcXVhbGl0eSBkZXNjcmlwdG9yLCAwKVxub3h5Z2VuX3NhdHVyYXRpb25fY29uY2VudHJhdGlvbiAoRGlzc29sdmVkIG94eWdlbiBzYXR1cmF0aW9uIGNvbmNlbnRyYXRpb24gKHByb2Nlc3NlZCksIGtnIG0tMylcbm94eWdlbl9zYXR1cmF0aW9uX2NvbmNlbnRyYXRpb25fcmF3IChEaXNzb2x2ZWQgb3h5Z2VuIHNhdHVyYXRpb24gY29uY2VudHJhdGlvbiAocmF3KSwga2cgbS0zKVxuLi4uICgxNiBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9oYXdhaWlfc29lc3RfN2FkY181YjJiXzc2OWVfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2hhd2FpaV9zb2VzdF83YWRjXzViMmJfNzY5ZV9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9oYXdhaWlfc29lc3RfN2FkY181YjJiXzc2OWUvaW5kZXguanNvbiIsICJodHRwOi8vd3d3LnBhY2lvb3MuaGF3YWlpLmVkdS93YXRlci93cWJ1b3kta2lob2xvLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9oYXdhaWlfc29lc3RfN2FkY181YjJiXzc2OWUucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWhhd2FpaV9zb2VzdF83YWRjXzViMmJfNzY5ZSZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJVbml2ZXJzaXR5IG9mIEhhd2FpaSIsICJoYXdhaWlfc29lc3RfN2FkY181YjJiXzc2OWUiXSwKICAgICAgWyIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF81ZWZhX2NjNmVfNzljNSIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfNWVmYV9jYzZlXzc5YzUuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiUGFjSU9PUyBXYXRlciBRdWFsaXR5IEJ1b3kgQVcgKFdRQi1BVyk6IEFsYSBXYWksIE9haHUsIEhhd2FpaSIsICJUaGUgd2F0ZXIgcXVhbGl0eSBidW95cyBhcmUgcGFydCBvZiB0aGUgUGFjaWZpYyBJc2xhbmRzIE9jZWFuIE9ic2VydmluZyBTeXN0ZW0gKFBhY0lPT1MpIGFuZCBhcmUgZGVzaWduZWQgdG8gbWVhc3VyZSBhIHZhcmlldHkgb2Ygb2NlYW4gcGFyYW1ldGVycyBhdCBmaXhlZCBwb2ludHMuIFdRQi1BVyBpcyBsb2NhdGVkIGF0IHRoZSBleGl0IG9mIHRoZSBBbGEgV2FpIENhbmFsLCBuZWFyIE1hZ2ljIElzbGFuZC4gQ29udGludW91cyBzYW1wbGluZyBvZiB0aGlzIG91dGZsb3cgYXJlYSBwcm92aWRlcyBhIHJlY29yZCBvZiBiYXNlbGluZSBjb25kaXRpb25zIG9mIHRoZSBjaGVtaWNhbCBhbmQgYmlvbG9naWNhbCBlbnZpcm9ubWVudCBmb3IgY29tcGFyaXNvbiB3aGVuIHRoZXJlIGFyZSBwb2xsdXRpb24gZXZlbnRzIHN1Y2ggYXMgc3Rvcm0gcnVub2ZmIG9yIGEgc2V3YWdlIHNwaWxsLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChkZXB0aCBiZWxvdyBtZWFuIHNlYSBsZXZlbCwgbSlcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5zdGF0aW9uX25hbWVcbnRlbXBlcmF0dXJlIChUZW1wZXJhdHVyZSAocHJvY2Vzc2VkKSwgQ2Vsc2l1cylcbnRlbXBlcmF0dXJlX3JhdyAoVGVtcGVyYXR1cmUgKHJhdyksIENlbHNpdXMpXG50ZW1wZXJhdHVyZV9kbV9xZCAoVGVtcGVyYXR1cmUgcXVhbGl0eSBkZXNjcmlwdG9yLCAwKVxuc2FsaW5pdHkgKFNhbGluaXR5IChwcm9jZXNzZWQpLCAxZS0zKVxuc2FsaW5pdHlfcmF3IChTYWxpbml0eSAocmF3KSwgMWUtMylcbnNhbGluaXR5X2RtX3FkIChTYWxpbml0eSBxdWFsaXR5IGRlc2NyaXB0b3IsIDApXG5jb25kdWN0aXZpdHkgKENvbmR1Y3Rpdml0eSAocHJvY2Vzc2VkKSwgUyBtLTEpXG5jb25kdWN0aXZpdHlfcmF3IChDb25kdWN0aXZpdHkgKHJhdyksIFMgbS0xKVxuY29uZHVjdGl2aXR5X2RtX3FkIChDb25kdWN0aXZpdHkgcXVhbGl0eSBkZXNjcmlwdG9yLCAwKVxub3h5Z2VuIChEaXNzb2x2ZWQgb3h5Z2VuIGNvbmNlbnRyYXRpb24gKHByb2Nlc3NlZCksIGtnIG0tMylcbm94eWdlbl9yYXcgKERpc3NvbHZlZCBveHlnZW4gY29uY2VudHJhdGlvbiAocmF3KSwga2cgbS0zKVxub3h5Z2VuX2RtX3FkIChEaXNzb2x2ZWQgb3h5Z2VuIGNvbmNlbnRyYXRpb24gcXVhbGl0eSBkZXNjcmlwdG9yLCAwKVxudHVyYmlkaXR5IChUdXJiaWRpdHkgKHByb2Nlc3NlZCksIE5UVSlcbnR1cmJpZGl0eV9yYXcgKFR1cmJpZGl0eSAocmF3KSwgTlRVKVxudHVyYmlkaXR5X2RtX3FkIChUdXJiaWRpdHkgcXVhbGl0eSBkZXNjcmlwdG9yLCAwKVxuY2hsb3JvcGh5bGwgKENobG9yb3BoeWxsIChwcm9jZXNzZWQpLCBrZyBtLTMpXG5jaGxvcm9waHlsbF9yYXcgKENobG9yb3BoeWxsIChyYXcpLCBrZyBtLTMpXG5jaGxvcm9waHlsbF9kbV9xZCAoQ2hsb3JvcGh5bGwgcXVhbGl0eSBkZXNjcmlwdG9yLCAwKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2hhd2FpaV9zb2VzdF81ZWZhX2NjNmVfNzljNV9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvaGF3YWlpX3NvZXN0XzVlZmFfY2M2ZV83OWM1X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2hhd2FpaV9zb2VzdF81ZWZhX2NjNmVfNzljNS9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cucGFjaW9vcy5oYXdhaWkuZWR1L3dhdGVyL3dxYnVveS1hbGF3YWkvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2hhd2FpaV9zb2VzdF81ZWZhX2NjNmVfNzljNS5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9aGF3YWlpX3NvZXN0XzVlZmFfY2M2ZV83OWM1JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIlVuaXZlcnNpdHkgb2YgSGF3YWlpIiwgImhhd2FpaV9zb2VzdF81ZWZhX2NjNmVfNzljNSJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0XzJkNjlfYTBkOV9kNTU5IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF8yZDY5X2EwZDlfZDU1OS5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJQYWNJT09TIFdhdGVyIFF1YWxpdHkgQnVveSBLTiAoV1FCLUtOKTogS2lsbyBOYWx1LCBPYWh1LCBIYXdhaWkiLCAiVGhlIHdhdGVyIHF1YWxpdHkgYnVveXMgYXJlIHBhcnQgb2YgdGhlIFBhY2lmaWMgSXNsYW5kcyBPY2VhbiBPYnNlcnZpbmcgU3lzdGVtIChQYWNJT09TKSBhbmQgYXJlIGRlc2lnbmVkIHRvIG1lYXN1cmUgYSB2YXJpZXR5IG9mIG9jZWFuIHBhcmFtZXRlcnMgYXQgZml4ZWQgcG9pbnRzLiBXUUItS04gaXMgbG9jYXRlZCBhdCB0aGUgS2lsbyBOYWx1IE5lYXJzaG9yZSBSZWVmIE9ic2VydmF0b3J5LCBuZWFyIEtha2Fha28gV2F0ZXJmcm9udCBQYXJrIGFuZCBLZXdhbG8gQmFzaW4gb2ZmIG9mIEFsYSBNb2FuYSBCb3VsZXZhcmQgaW4gSG9ub2x1bHUuIENvbnRpbnVvdXMgc2FtcGxpbmcgb2YgdGhpcyBhcmVhIHByb3ZpZGVzIGEgcmVjb3JkIG9mIGJhc2VsaW5lIGNvbmRpdGlvbnMgb2YgdGhlIGNoZW1pY2FsIGFuZCBiaW9sb2dpY2FsIGVudmlyb25tZW50IGZvciBjb21wYXJpc29uIHdoZW4gdGhlcmUgYXJlIHBvbGx1dGlvbiBldmVudHMgc3VjaCBhcyBzdG9ybSBydW5vZmYgb3IgYSBzZXdhZ2Ugc3BpbGwuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKGRlcHRoIGJlbG93IG1lYW4gc2VhIGxldmVsLCBtKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbnN0YXRpb25fbmFtZVxudGVtcGVyYXR1cmUgKFRlbXBlcmF0dXJlIChwcm9jZXNzZWQpLCBDZWxzaXVzKVxudGVtcGVyYXR1cmVfcmF3IChUZW1wZXJhdHVyZSAocmF3KSwgQ2Vsc2l1cylcbnRlbXBlcmF0dXJlX2RtX3FkIChUZW1wZXJhdHVyZSBxdWFsaXR5IGRlc2NyaXB0b3IsIDApXG5zYWxpbml0eSAoU2FsaW5pdHkgKHByb2Nlc3NlZCksIDFlLTMpXG5zYWxpbml0eV9yYXcgKFNhbGluaXR5IChyYXcpLCAxZS0zKVxuc2FsaW5pdHlfZG1fcWQgKFNhbGluaXR5IHF1YWxpdHkgZGVzY3JpcHRvciwgMClcbmNvbmR1Y3Rpdml0eSAoQ29uZHVjdGl2aXR5IChwcm9jZXNzZWQpLCBTIG0tMSlcbmNvbmR1Y3Rpdml0eV9yYXcgKENvbmR1Y3Rpdml0eSAocmF3KSwgUyBtLTEpXG5jb25kdWN0aXZpdHlfZG1fcWQgKENvbmR1Y3Rpdml0eSBxdWFsaXR5IGRlc2NyaXB0b3IsIDApXG5veHlnZW4gKERpc3NvbHZlZCBveHlnZW4gY29uY2VudHJhdGlvbiAocHJvY2Vzc2VkKSwga2cgbS0zKVxub3h5Z2VuX3JhdyAoRGlzc29sdmVkIG94eWdlbiBjb25jZW50cmF0aW9uIChyYXcpLCBrZyBtLTMpXG5veHlnZW5fZG1fcWQgKERpc3NvbHZlZCBveHlnZW4gY29uY2VudHJhdGlvbiBxdWFsaXR5IGRlc2NyaXB0b3IsIDApXG50dXJiaWRpdHkgKFR1cmJpZGl0eSAocHJvY2Vzc2VkKSwgTlRVKVxudHVyYmlkaXR5X3JhdyAoVHVyYmlkaXR5IChyYXcpLCBOVFUpXG50dXJiaWRpdHlfZG1fcWQgKFR1cmJpZGl0eSBxdWFsaXR5IGRlc2NyaXB0b3IsIDApXG5jaGxvcm9waHlsbCAoQ2hsb3JvcGh5bGwgKHByb2Nlc3NlZCksIGtnIG0tMylcbmNobG9yb3BoeWxsX3JhdyAoQ2hsb3JvcGh5bGwgKHJhdyksIGtnIG0tMylcbmNobG9yb3BoeWxsX2RtX3FkIChDaGxvcm9waHlsbCBxdWFsaXR5IGRlc2NyaXB0b3IsIDApXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvaGF3YWlpX3NvZXN0XzJkNjlfYTBkOV9kNTU5X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9oYXdhaWlfc29lc3RfMmQ2OV9hMGQ5X2Q1NTlfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vaGF3YWlpX3NvZXN0XzJkNjlfYTBkOV9kNTU5L2luZGV4Lmpzb24iLCAiaHR0cDovL3d3dy5wYWNpb29zLmhhd2FpaS5lZHUvd2F0ZXIvd3FidW95LWtpbG9uYWx1LyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9oYXdhaWlfc29lc3RfMmQ2OV9hMGQ5X2Q1NTkucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWhhd2FpaV9zb2VzdF8yZDY5X2EwZDlfZDU1OSZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJVbml2ZXJzaXR5IG9mIEhhd2FpaSIsICJoYXdhaWlfc29lc3RfMmQ2OV9hMGQ5X2Q1NTkiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvQ2h1a2NoaVNlYV80NTRhXzAzN2FfZmNmNC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvQ2h1a2NoaVNlYV80NTRhXzAzN2FfZmNmNCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9DaHVrY2hpU2VhXzQ1NGFfMDM3YV9mY2Y0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlBNRUwgRWNvRk9DSSBDaHVrY2hpIFNlYSBwcm9maWxlIGRhdGEsIDIwMTAtMjAxMiIsICJQYWNpZmljIE1hcmluZSBFbnZpcm9ubWVudGFsIExhYm9yYXRvcnkgKFBNRUwpIEZpc2hlcmllcy1PY2Vhbm9ncmFwaHkgQ29vcGVyYXRpdmUgSW52ZXN0aWdhdGlvbnMgKEZPQ0kpIENodWtjaGkgU2VhLiBQTUVMIEVjb0ZPQ0kgZGF0YSBmcm9tIGEgbG9jYWwgc291cmNlLlxuXG5jZG1fZGF0YV90eXBlID0gUHJvZmlsZVxuVkFSSUFCTEVTOlxucHJvZlxuaWQgKHByb2ZpbGUgaWQpXG5jYXN0IChjYXN0IG51bWJlcilcbmNydWlzZSAoQ3J1aXNlIG5hbWUpXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubG9uZ2l0dWRlIChzdGF0aW9uIGxvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubG9uMzYwIChzdGF0aW9uIGxvbmdpdHVkZSAzNjAsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChzdGF0aW9uIGxhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxuZGVwdGggKG0pXG5vY2Vhbl90ZW1wZXJhdHVyZV8xIChUZW1wZXJhdHVyZSAxXHIsIERlZ3JlZV9DKVxub2NlYW5fdGVtcGVyYXR1cmVfMiAoVGVtcGVyYXR1cmUgMlxyLCBEZWdyZWVfQylcbm9jZWFuX2Rpc3NvbHZlZF9veHlnZW5fY29uY2VudHJhdGlvbl8xX21McGVyTCAoZGlzc29sdmVkIG94eWdlbiBjb25jZW50cmF0aW9uIDEgbUwvTFxyLCBtTC9MKVxub2NlYW5fZGlzc29sdmVkX294eWdlbl9jb25jZW50cmF0aW9uXzJfbUxwZXJMIChkaXNzb2x2ZWQgb3h5Z2VuIGNvbmNlbnRyYXRpb24gMiBtTC9MXHIsIG1ML0wpXG5waG90b3N5bnRoZXRpY2FsbHlfYWN0aXZlX3JhZGlhdGlvbiAoUGhvdG9zeW50aGV0aWNhbGx5IEFjdGl2ZSBSYWRpYXRpb25cciwgbWljcm9FaW4gY20tMiBzLTEpXG5vY2Vhbl9jaGxvcm9waHlsbF9hX2NvbmNlbnRyYXRpb25fZmFjdG9yeUNhbCAoQ2hsb3JvcGh5bGwgYSBDb25jZW50cmF0aW9uIChGYWN0b3J5IENhbGlicmF0aW9uKVxyLCBtaWNyb2dyYW1zL0wpXG5vY2Vhbl9jaGxvcm9waHlsbF9mbHVvcmVzY2VuY2VfcmF3IChSYXcgQ2hsb3JvcGh5bGwgRmxvdXJlc2NlbmNlXHIsIHZvbHRzKVxub2NlYW5fcHJhY3RpY2FsX3NhbGluaXR5XzEgKFNhbGluaXR5IDEgKFBTVSBQU1MtNzgpXHIsIFBTVSlcbm9jZWFuX3ByYWN0aWNhbF9zYWxpbml0eV8yIChTYWxpbml0eSAyIChQU1UgUFNTLTc4KVxyLCBQU1UpXG5vY2Vhbl9zaWdtYV90IChTaWdtYS1ULCBrZyBtLTMpXG5zZWFfd2F0ZXJfbnV0cmllbnRfYm90dGxlX251bWJlciAoTnV0cmllbnRzIE5pc2tpbiBCb3R0bGUgTnVtYmVyXHIsIG51bWJlcilcbnNlYV93YXRlcl9waG9zcGhhdGVfY29uY2VudHJhdGlvbiAoUE80LCBtaWNyb21vbGVzL2tnKVxuc2VhX3dhdGVyX3NpbGljYXRlX2NvbmNlbnRyYXRpb24gKFNJLCBtaWNyb21vbGVzL2tnKVxuc2VhX3dhdGVyX25pdHJhdGVfY29uY2VudHJhdGlvbiAoTk8zLCBtaWNyb21vbGVzL2tnKVxuc2VhX3dhdGVyX25pdHJpdGVfY29uY2VudHJhdGlvbiAoTk8yLCBtaWNyb21vbGVzL2tnKVxuc2VhX3dhdGVyX2FtbW9uaXVtX2NvbmNlbnRyYXRpb24gKE5INCwgbWljcm9tb2xlcy9rZylcbm9jZWFuX2Rpc3NvbHZlZF9veHlnZW5fY29uY2VudHJhdGlvbl8xX21NcGVya2cgKERpc3NvbHZlZCBPeHlnZW4gQ29uY2VudHJhdGlvbiAxIG1Nb2xlcy9rZ1xyLCBtaWNyb21vbGVzL2tnKVxub2NlYW5fZGlzc29sdmVkX294eWdlbl9jb25jZW50cmF0aW9uXzJfbU1wZXJrZyAoRGlzc29sdmVkIE94eWdlbiBDb25jZW50cmF0aW9uIDIgbU1vbGVzL2tnXHIsIG1pY3JvbW9sZXMva2cpXG5vY2Vhbl9veHlnZW5fc2F0dXJhdGlvbl8xIChPeHlnZW4gUGVyY2VudCBTYXR1cmF0aW9uIDFcciwgcGVyY2VudCBzYXR1cmF0aW9uKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL0NodWtjaGlTZWFfNDU0YV8wMzdhX2ZjZjRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL0NodWtjaGlTZWFfNDU0YV8wMzdhX2ZjZjRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vQ2h1a2NoaVNlYV80NTRhXzAzN2FfZmNmNC9pbmRleC5qc29uIiwgInd3dy5lY29mb2NpLm5vYWEuZ292IiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL0NodWtjaGlTZWFfNDU0YV8wMzdhX2ZjZjQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPUNodWtjaGlTZWFfNDU0YV8wMzdhX2ZjZjQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiUE1FTCBFY29GT0NJIiwgIkNodWtjaGlTZWFfNDU0YV8wMzdhX2ZjZjQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvYXJjdGljUmVzY3VlRGF0YV9lNWJmX2NlZjhfM2Y3Mi5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvYXJjdGljUmVzY3VlRGF0YV9lNWJmX2NlZjhfM2Y3MiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9hcmN0aWNSZXNjdWVEYXRhX2U1YmZfY2VmOF8zZjcyLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlBNRUwgRWNvRk9DSSBFYXJseSBBcmN0aWMgRGF0YSwgMTk4Ni0xOTkxIiwgIlBhY2lmaWMgTWFyaW5lIEVudmlyb25tZW50YWwgTGFib3JhdG9yeSAoUE1FTCkgRmlzaGVyaWVzLU9jZWFub2dyYXBoeSBDb29wZXJhdGl2ZSBJbnZlc3RpZ2F0aW9ucyAoRk9DSSkgRWFybHkgQXJjdGljIERhdGEsIDE5ODcgLSAxOTkxXG5cbmNkbV9kYXRhX3R5cGUgPSBQcm9maWxlXG5WQVJJQUJMRVM6XG5wcm9mXG5pZCAocHJvZmlsZSBpZClcbmNhc3QgKGNhc3QgbnVtYmVyKVxuY3J1aXNlIChDcnVpc2UgbmFtZSlcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sb25naXR1ZGUgKHN0YXRpb24gbG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sb24zNjAgKHN0YXRpb24gbG9uZ2l0dWRlIDM2MCwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKHN0YXRpb24gbGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG5kZXB0aCAobSlcbm9jZWFuX3RlbXBlcmF0dXJlXzEgKFRlbXBlcmF0dXJlIDFcciwgRGVncmVlX0MpXG5vY2Vhbl9jb3hfc2FsaW5pdHlfMSAoc2VhX3dhdGVyX3ByYWN0aWNhbF9zYWxpbml0eSwgUFNVKVxub2NlYW5fcHJhY3RpY2FsX3NhbGluaXR5XzEgKFNhbGluaXR5IDEgKFBTVSBQU1MtNzgpXHIsIFBTVSlcbm9jZWFuX3NpZ21hX3QgKFNpZ21hLVQsIGtnIG0tMylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9hcmN0aWNSZXNjdWVEYXRhX2U1YmZfY2VmOF8zZjcyX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9hcmN0aWNSZXNjdWVEYXRhX2U1YmZfY2VmOF8zZjcyX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2FyY3RpY1Jlc2N1ZURhdGFfZTViZl9jZWY4XzNmNzIvaW5kZXguanNvbiIsICJ3d3cuZWNvZm9jaS5ub2FhLmdvdiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9hcmN0aWNSZXNjdWVEYXRhX2U1YmZfY2VmOF8zZjcyLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1hcmN0aWNSZXNjdWVEYXRhX2U1YmZfY2VmOF8zZjcyJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIlBNRUwgRWNvRk9DSSIsICJhcmN0aWNSZXNjdWVEYXRhX2U1YmZfY2VmOF8zZjcyIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL1NoZWxpa29mX2xpbmU4XzM2OTVfMGFkYV9kMDY2LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9TaGVsaWtvZl9saW5lOF8zNjk1XzBhZGFfZDA2NiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9TaGVsaWtvZl9saW5lOF8zNjk1XzBhZGFfZDA2Ni5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJQTUVMIEVjb0ZPQ0kgU2hlbGlrb2YgTGluZSA4IERhdGEsIDE5ODEtb3BlbiIsICJQYWNpZmljIE1hcmluZSBFbnZpcm9ubWVudGFsIExhYm9yYXRvcnkgKFBNRUwpIEZpc2hlcmllcy1PY2Vhbm9ncmFwaHkgQ29vcGVyYXRpdmUgSW52ZXN0aWdhdGlvbnMgKEZPQ0kpIFNoZWxpa29mIExpbmUgOCBEYXRhXG5cbmNkbV9kYXRhX3R5cGUgPSBQcm9maWxlXG5WQVJJQUJMRVM6XG5wcm9mXG5pZCAocHJvZmlsZSBpZClcbmNhc3QgKGNhc3QgbnVtYmVyKVxuY3J1aXNlIChDcnVpc2UgbmFtZSlcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sb25naXR1ZGUgKHN0YXRpb24gbG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sb24zNjAgKHN0YXRpb24gbG9uZ2l0dWRlIDM2MCwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKHN0YXRpb24gbGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG5kZXB0aCAobSlcbm9jZWFuX3RlbXBlcmF0dXJlXzEgKFRlbXBlcmF0dXJlIDFcciwgRGVncmVlX0MpXG5vY2Vhbl9jb3hfc2FsaW5pdHlfMSAoc2VhX3dhdGVyX3ByYWN0aWNhbF9zYWxpbml0eSwgUFNVKVxub2NlYW5fY2hsb3JvcGh5bGxfZmx1b3Jlc2NlbmNlX3JhdyAoUmF3IENobG9yb3BoeWxsIEZsb3VyZXNjZW5jZVxyLCB2b2x0cylcbnBob3Rvc3ludGhldGljYWxseV9hY3RpdmVfcmFkaWF0aW9uIChQaG90b3N5bnRoZXRpY2FsbHkgQWN0aXZlIFJhZGlhdGlvblxyLCBtaWNyb0VpbiBjbS0yIHMtMSlcbm9jZWFuX3NpZ21hX3QgKFNpZ21hLVQsIGtnIG0tMylcbm9jZWFuX2NobG9yb3BoeWxsX2FfY29uY2VudHJhdGlvbl9mYWN0b3J5Q2FsIChDaGxvcm9waHlsbCBhIENvbmNlbnRyYXRpb24gKEZhY3RvcnkgQ2FsaWJyYXRpb24pXHIsIG1pY3JvZ3JhbXMvTClcbm9jZWFuX2Rpc3NvbHZlZF9veHlnZW5fY29uY2VudHJhdGlvbl8xX21NcGVya2cgKERpc3NvbHZlZCBPeHlnZW4gQ29uY2VudHJhdGlvbiAxIG1Nb2xlcy9rZ1xyLCBtaWNyb21vbGVzL2tnKVxub2NlYW5fZGlzc29sdmVkX294eWdlbl9jb25jZW50cmF0aW9uXzJfbU1wZXJrZyAobW9sZV9jb25jZW50cmF0aW9uX29mX2Rpc3NvbHZlZF9tb2xlY3VsYXJfb3h5Z2VuX2luX3NlYV93YXRlciwgbWljcm9tb2xlcy9rZylcbm9jZWFuX2R5bmFtaWNfaGVpZ2h0IChEeW5hbWljIEhlaWdodCwgZHluYW1pYyBtZXRlcnMpXG5vY2Vhbl9veHlnZW5fc2F0dXJhdGlvbl8xIChPeHlnZW4gUGVyY2VudCBTYXR1cmF0aW9uIDFcciwgcGVyY2VudCBzYXR1cmF0aW9uKVxub2NlYW5fcHJhY3RpY2FsX3NhbGluaXR5XzEgKFNhbGluaXR5IDEgKFBTVSBQU1MtNzgpXHIsIFBTVSlcbm9jZWFuX3ByYWN0aWNhbF9zYWxpbml0eV8yIChTYWxpbml0eSAyIChQU1UgUFNTLTc4KVxyLCBQU1UpXG5vY2Vhbl90ZW1wZXJhdHVyZV8yIChUZW1wZXJhdHVyZSAyXHIsIERlZ3JlZV9DKVxucGhvdG9zeW50aGV0aWNhbGx5X2FjdGl2ZV9yYWRpYXRpb25fcmF3IChSYXcgUGhvdG9zeW50aGV0aWNhbGx5IEFjdGl2ZSBSYWRpYXRpb25cciwgdm9sdHMpXG50cmFuc21pdHRhbmNlX3BlcmNlbnRhZ2UgKFBlcmNlbnQgTGlnaHQgVHJhbnNtaXR0YW5jZSwgcGVyY2VudClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9TaGVsaWtvZl9saW5lOF8zNjk1XzBhZGFfZDA2Nl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvU2hlbGlrb2ZfbGluZThfMzY5NV8wYWRhX2QwNjZfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vU2hlbGlrb2ZfbGluZThfMzY5NV8wYWRhX2QwNjYvaW5kZXguanNvbiIsICJ3d3cuZWNvZm9jaS5ub2FhLmdvdiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9TaGVsaWtvZl9saW5lOF8zNjk1XzBhZGFfZDA2Ni5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9U2hlbGlrb2ZfbGluZThfMzY5NV8wYWRhX2QwNjYmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiUE1FTCBFY29GT0NJIiwgIlNoZWxpa29mX2xpbmU4XzM2OTVfMGFkYV9kMDY2Il0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdVJlc2VhcmNoU2hpcFdEQzk0MTducnQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdVJlc2VhcmNoU2hpcFdEQzk0MTducnQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1UmVzZWFyY2hTaGlwV0RDOTQxN25ydC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJSZXNlYXJjaCBTaGlwIEF0bGFudGljIEV4cGxvcmVyIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEsIFF1YWxpdHkgQ29udHJvbGxlZCIsICJSZXNlYXJjaCBTaGlwIEF0bGFudGljIEV4cGxvcmVyIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEgKGRlbGF5ZWQgfjEwIGRheXMgZm9yIHF1YWxpdHkgY29udHJvbCkgYXJlIGZyb20gdGhlIFNoaXBib2FyZCBBdXRvbWF0ZWQgTWV0ZW9yb2xvZ2ljYWwgYW5kIE9jZWFub2dyYXBoaWMgU3lzdGVtIChTQU1PUykgcHJvZ3JhbS5cblxuSU1QT1JUQU5UOiBBTFdBWVMgVVNFIFRIRSBRVUFMSVRZIEZMQUcgREFUQSEgRWFjaCBkYXRhIHZhcmlhYmxlJ3MgbWV0YWRhdGEgaW5jbHVkZXMgYSBxY2luZGV4IGF0dHJpYnV0ZSB3aGljaCBpbmRpY2F0ZXMgYSBjaGFyYWN0ZXIgbnVtYmVyIGluIHRoZSBmbGFnIGRhdGEuICBBTFdBWVMgY2hlY2sgdGhlIGZsYWcgZGF0YSBmb3IgZWFjaCByb3cgb2YgZGF0YSB0byBzZWUgd2hpY2ggZGF0YSBpcyBnb29kIChmbGFnPSdaJykgYW5kIHdoaWNoIGRhdGEgaXNuJ3QuICBGb3IgZXhhbXBsZSwgdG8gZXh0cmFjdCBqdXN0IGRhdGEgd2hlcmUgdGltZSAocWNpbmRleD0xKSwgbGF0aXR1ZGUgKHFjaW5kZXg9MiksIGxvbmdpdHVkZSAocWNpbmRleD0zKSwgYW5kIGFpclRlbXBlcmF0dXJlIChxY2luZGV4PTEyKSBhcmUgJ2dvb2QnIGRhdGEsIGluY2x1ZGUgdGhpcyBjb25zdHJhaW50IGluIHlvdXIgRVJEREFQIHF1ZXJ5OlxuIGZsYWc9flwiWlpaLi4uLi4uLi5aLipcIlxuaW4geW91ciBxdWVyeS5cbic9ficgaW5kaWNhdGVzIHRoaXMgaXMgYSByZWd1bGFyIGV4cHJlc3Npb24gY29uc3RyYWludC5cblRoZSAnWidzIGFyZSBsaXRlcmFsIGNoYXJhY3RlcnMuICBJbiB0aGlzIGRhdGFzZXQsICdaJyBpbmRpY2F0ZXMgJ2dvb2QnIGRhdGEuXG5UaGUgJy4ncyBzYXkgdG8gbWF0Y2ggYW55IGNoYXJhY3Rlci5cblRoZSAnKicgc2F5cyB0byBtYXRjaCB0aGUgcHJldmlvdXMgY2hhcmFjdGVyIDAgb3IgbW9yZSB0aW1lcy5cbihEb24ndCBpbmNsdWRlIGJhY2tzbGFzaGVzIGluIHlvdXIgcXVlcnkuKVxuU2VlIHRoZSB0dXRvcmlhbCBmb3IgcmVndWxhciBleHByZXNzaW9ucyBhdFxuaHR0cDovL3d3dy52b2dlbGxhLmNvbS90dXRvcmlhbHMvSmF2YVJlZ3VsYXJFeHByZXNzaW9ucy9hcnRpY2xlLmh0bWxcblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2VfaWRcbmV4cG9jb2RlXG5mYWNpbGl0eVxuSURcbklNT1xucGxhdGZvcm1cbnBsYXRmb3JtX3ZlcnNpb25cbnNpdGVcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuLi4uICgxOSBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9mc3VSZXNlYXJjaFNoaXBXREM5NDE3bnJ0X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9mc3VSZXNlYXJjaFNoaXBXREM5NDE3bnJ0X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2ZzdVJlc2VhcmNoU2hpcFdEQzk0MTducnQvaW5kZXguanNvbiIsICJodHRwczovL3NhbW9zLmNvYXBzLmZzdS5lZHUvaHRtbC8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZnN1UmVzZWFyY2hTaGlwV0RDOTQxN25ydC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZnN1UmVzZWFyY2hTaGlwV0RDOTQxN25ydCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJGU1UiLCAiZnN1UmVzZWFyY2hTaGlwV0RDOTQxN25ydCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VSZXNlYXJjaFNoaXBLQVFQLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VSZXNlYXJjaFNoaXBLQVFQIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdVJlc2VhcmNoU2hpcEtBUVAuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiUmVzZWFyY2ggU2hpcCBBdGxhbnRpcyBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhLCBRdWFsaXR5IENvbnRyb2xsZWQiLCAiUmVzZWFyY2ggU2hpcCBBdGxhbnRpcyBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhIChkZWxheWVkIH4xMCBkYXlzIGZvciBxdWFsaXR5IGNvbnRyb2wpIGFyZSBmcm9tIHRoZSBTaGlwYm9hcmQgQXV0b21hdGVkIE1ldGVvcm9sb2dpY2FsIGFuZCBPY2Vhbm9ncmFwaGljIFN5c3RlbSAoU0FNT1MpIHByb2dyYW0uXG5cbklNUE9SVEFOVDogQUxXQVlTIFVTRSBUSEUgUVVBTElUWSBGTEFHIERBVEEhIEVhY2ggZGF0YSB2YXJpYWJsZSdzIG1ldGFkYXRhIGluY2x1ZGVzIGEgcWNpbmRleCBhdHRyaWJ1dGUgd2hpY2ggaW5kaWNhdGVzIGEgY2hhcmFjdGVyIG51bWJlciBpbiB0aGUgZmxhZyBkYXRhLiAgQUxXQVlTIGNoZWNrIHRoZSBmbGFnIGRhdGEgZm9yIGVhY2ggcm93IG9mIGRhdGEgdG8gc2VlIHdoaWNoIGRhdGEgaXMgZ29vZCAoZmxhZz0nWicpIGFuZCB3aGljaCBkYXRhIGlzbid0LiAgRm9yIGV4YW1wbGUsIHRvIGV4dHJhY3QganVzdCBkYXRhIHdoZXJlIHRpbWUgKHFjaW5kZXg9MSksIGxhdGl0dWRlIChxY2luZGV4PTIpLCBsb25naXR1ZGUgKHFjaW5kZXg9MyksIGFuZCBhaXJUZW1wZXJhdHVyZSAocWNpbmRleD0xMikgYXJlICdnb29kJyBkYXRhLCBpbmNsdWRlIHRoaXMgY29uc3RyYWludCBpbiB5b3VyIEVSRERBUCBxdWVyeTpcbiBmbGFnPX5cIlpaWi4uLi4uLi4uWi4qXCJcbmluIHlvdXIgcXVlcnkuXG4nPX4nIGluZGljYXRlcyB0aGlzIGlzIGEgcmVndWxhciBleHByZXNzaW9uIGNvbnN0cmFpbnQuXG5UaGUgJ1oncyBhcmUgbGl0ZXJhbCBjaGFyYWN0ZXJzLiAgSW4gdGhpcyBkYXRhc2V0LCAnWicgaW5kaWNhdGVzICdnb29kJyBkYXRhLlxuVGhlICcuJ3Mgc2F5IHRvIG1hdGNoIGFueSBjaGFyYWN0ZXIuXG5UaGUgJyonIHNheXMgdG8gbWF0Y2ggdGhlIHByZXZpb3VzIGNoYXJhY3RlciAwIG9yIG1vcmUgdGltZXMuXG4oRG9uJ3QgaW5jbHVkZSBiYWNrc2xhc2hlcyBpbiB5b3VyIHF1ZXJ5LilcblNlZSB0aGUgdHV0b3JpYWwgZm9yIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYXRcbmh0dHA6Ly93d3cudm9nZWxsYS5jb20vdHV0b3JpYWxzL0phdmFSZWd1bGFyRXhwcmVzc2lvbnMvYXJ0aWNsZS5odG1sXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlX2lkXG5leHBvY29kZVxuZmFjaWxpdHlcbklEXG5JTU9cbnBsYXRmb3JtXG5wbGF0Zm9ybV92ZXJzaW9uXG5zaXRlXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbi4uLiAoMzMgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZnN1UmVzZWFyY2hTaGlwS0FRUF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZnN1UmVzZWFyY2hTaGlwS0FRUF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9mc3VSZXNlYXJjaFNoaXBLQVFQL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9zYW1vcy5jb2Fwcy5mc3UuZWR1L2h0bWwvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2ZzdVJlc2VhcmNoU2hpcEtBUVAucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWZzdVJlc2VhcmNoU2hpcEtBUVAmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiRlNVIiwgImZzdVJlc2VhcmNoU2hpcEtBUVAiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1UmVzZWFyY2hTaGlwS0FRUG5ydC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1UmVzZWFyY2hTaGlwS0FRUG5ydCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VSZXNlYXJjaFNoaXBLQVFQbnJ0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlJlc2VhcmNoIFNoaXAgQXRsYW50aXMgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSwgUXVhbGl0eSBDb250cm9sbGVkIiwgIlJlc2VhcmNoIFNoaXAgQXRsYW50aXMgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSAoZGVsYXllZCB+MTAgZGF5cyBmb3IgcXVhbGl0eSBjb250cm9sKSBhcmUgZnJvbSB0aGUgU2hpcGJvYXJkIEF1dG9tYXRlZCBNZXRlb3JvbG9naWNhbCBhbmQgT2NlYW5vZ3JhcGhpYyBTeXN0ZW0gKFNBTU9TKSBwcm9ncmFtLlxuXG5JTVBPUlRBTlQ6IEFMV0FZUyBVU0UgVEhFIFFVQUxJVFkgRkxBRyBEQVRBISBFYWNoIGRhdGEgdmFyaWFibGUncyBtZXRhZGF0YSBpbmNsdWRlcyBhIHFjaW5kZXggYXR0cmlidXRlIHdoaWNoIGluZGljYXRlcyBhIGNoYXJhY3RlciBudW1iZXIgaW4gdGhlIGZsYWcgZGF0YS4gIEFMV0FZUyBjaGVjayB0aGUgZmxhZyBkYXRhIGZvciBlYWNoIHJvdyBvZiBkYXRhIHRvIHNlZSB3aGljaCBkYXRhIGlzIGdvb2QgKGZsYWc9J1onKSBhbmQgd2hpY2ggZGF0YSBpc24ndC4gIEZvciBleGFtcGxlLCB0byBleHRyYWN0IGp1c3QgZGF0YSB3aGVyZSB0aW1lIChxY2luZGV4PTEpLCBsYXRpdHVkZSAocWNpbmRleD0yKSwgbG9uZ2l0dWRlIChxY2luZGV4PTMpLCBhbmQgYWlyVGVtcGVyYXR1cmUgKHFjaW5kZXg9MTIpIGFyZSAnZ29vZCcgZGF0YSwgaW5jbHVkZSB0aGlzIGNvbnN0cmFpbnQgaW4geW91ciBFUkREQVAgcXVlcnk6XG4gZmxhZz1+XCJaWlouLi4uLi4uLlouKlwiXG5pbiB5b3VyIHF1ZXJ5LlxuJz1+JyBpbmRpY2F0ZXMgdGhpcyBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBjb25zdHJhaW50LlxuVGhlICdaJ3MgYXJlIGxpdGVyYWwgY2hhcmFjdGVycy4gIEluIHRoaXMgZGF0YXNldCwgJ1onIGluZGljYXRlcyAnZ29vZCcgZGF0YS5cblRoZSAnLidzIHNheSB0byBtYXRjaCBhbnkgY2hhcmFjdGVyLlxuVGhlICcqJyBzYXlzIHRvIG1hdGNoIHRoZSBwcmV2aW91cyBjaGFyYWN0ZXIgMCBvciBtb3JlIHRpbWVzLlxuKERvbid0IGluY2x1ZGUgYmFja3NsYXNoZXMgaW4geW91ciBxdWVyeS4pXG5TZWUgdGhlIHR1dG9yaWFsIGZvciByZWd1bGFyIGV4cHJlc3Npb25zIGF0XG5odHRwOi8vd3d3LnZvZ2VsbGEuY29tL3R1dG9yaWFscy9KYXZhUmVndWxhckV4cHJlc3Npb25zL2FydGljbGUuaHRtbFxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZV9pZFxuZXhwb2NvZGVcbmZhY2lsaXR5XG5JRFxuSU1PXG5wbGF0Zm9ybVxucGxhdGZvcm1fdmVyc2lvblxuc2l0ZVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG4uLi4gKDMzIG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2ZzdVJlc2VhcmNoU2hpcEtBUVBucnRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2ZzdVJlc2VhcmNoU2hpcEtBUVBucnRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZnN1UmVzZWFyY2hTaGlwS0FRUG5ydC9pbmRleC5qc29uIiwgImh0dHBzOi8vc2Ftb3MuY29hcHMuZnN1LmVkdS9odG1sLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9mc3VSZXNlYXJjaFNoaXBLQVFQbnJ0LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1mc3VSZXNlYXJjaFNoaXBLQVFQbnJ0JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkZTVSIsICJmc3VSZXNlYXJjaFNoaXBLQVFQbnJ0Il0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdVJlc2VhcmNoU2hpcE5FUFAuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdVJlc2VhcmNoU2hpcE5FUFAiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1UmVzZWFyY2hTaGlwTkVQUC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJSZXNlYXJjaCBTaGlwIEhlYWx5IFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEsIFF1YWxpdHkgQ29udHJvbGxlZCIsICJSZXNlYXJjaCBTaGlwIEhlYWx5IFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEgKGRlbGF5ZWQgfjEwIGRheXMgZm9yIHF1YWxpdHkgY29udHJvbCkgYXJlIGZyb20gdGhlIFNoaXBib2FyZCBBdXRvbWF0ZWQgTWV0ZW9yb2xvZ2ljYWwgYW5kIE9jZWFub2dyYXBoaWMgU3lzdGVtIChTQU1PUykgcHJvZ3JhbS5cblxuSU1QT1JUQU5UOiBBTFdBWVMgVVNFIFRIRSBRVUFMSVRZIEZMQUcgREFUQSEgRWFjaCBkYXRhIHZhcmlhYmxlJ3MgbWV0YWRhdGEgaW5jbHVkZXMgYSBxY2luZGV4IGF0dHJpYnV0ZSB3aGljaCBpbmRpY2F0ZXMgYSBjaGFyYWN0ZXIgbnVtYmVyIGluIHRoZSBmbGFnIGRhdGEuICBBTFdBWVMgY2hlY2sgdGhlIGZsYWcgZGF0YSBmb3IgZWFjaCByb3cgb2YgZGF0YSB0byBzZWUgd2hpY2ggZGF0YSBpcyBnb29kIChmbGFnPSdaJykgYW5kIHdoaWNoIGRhdGEgaXNuJ3QuICBGb3IgZXhhbXBsZSwgdG8gZXh0cmFjdCBqdXN0IGRhdGEgd2hlcmUgdGltZSAocWNpbmRleD0xKSwgbGF0aXR1ZGUgKHFjaW5kZXg9MiksIGxvbmdpdHVkZSAocWNpbmRleD0zKSwgYW5kIGFpclRlbXBlcmF0dXJlIChxY2luZGV4PTEyKSBhcmUgJ2dvb2QnIGRhdGEsIGluY2x1ZGUgdGhpcyBjb25zdHJhaW50IGluIHlvdXIgRVJEREFQIHF1ZXJ5OlxuIGZsYWc9flwiWlpaLi4uLi4uLi5aLipcIlxuaW4geW91ciBxdWVyeS5cbic9ficgaW5kaWNhdGVzIHRoaXMgaXMgYSByZWd1bGFyIGV4cHJlc3Npb24gY29uc3RyYWludC5cblRoZSAnWidzIGFyZSBsaXRlcmFsIGNoYXJhY3RlcnMuICBJbiB0aGlzIGRhdGFzZXQsICdaJyBpbmRpY2F0ZXMgJ2dvb2QnIGRhdGEuXG5UaGUgJy4ncyBzYXkgdG8gbWF0Y2ggYW55IGNoYXJhY3Rlci5cblRoZSAnKicgc2F5cyB0byBtYXRjaCB0aGUgcHJldmlvdXMgY2hhcmFjdGVyIDAgb3IgbW9yZSB0aW1lcy5cbihEb24ndCBpbmNsdWRlIGJhY2tzbGFzaGVzIGluIHlvdXIgcXVlcnkuKVxuU2VlIHRoZSB0dXRvcmlhbCBmb3IgcmVndWxhciBleHByZXNzaW9ucyBhdFxuaHR0cDovL3d3dy52b2dlbGxhLmNvbS90dXRvcmlhbHMvSmF2YVJlZ3VsYXJFeHByZXNzaW9ucy9hcnRpY2xlLmh0bWxcblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2VfaWRcbmV4cG9jb2RlXG5mYWNpbGl0eVxuSURcbklNT1xucGxhdGZvcm1cbnBsYXRmb3JtX3ZlcnNpb25cbnNpdGVcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuLi4uICgyMiBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9mc3VSZXNlYXJjaFNoaXBORVBQX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9mc3VSZXNlYXJjaFNoaXBORVBQX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2ZzdVJlc2VhcmNoU2hpcE5FUFAvaW5kZXguanNvbiIsICJodHRwczovL3NhbW9zLmNvYXBzLmZzdS5lZHUvaHRtbC8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZnN1UmVzZWFyY2hTaGlwTkVQUC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZnN1UmVzZWFyY2hTaGlwTkVQUCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJGU1UiLCAiZnN1UmVzZWFyY2hTaGlwTkVQUCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VSZXNlYXJjaFNoaXBXREE3ODI3bnJ0LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VSZXNlYXJjaFNoaXBXREE3ODI3bnJ0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdVJlc2VhcmNoU2hpcFdEQTc4MjducnQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiUmVzZWFyY2ggU2hpcCBLaWxvIE1vYW5hIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEsIFF1YWxpdHkgQ29udHJvbGxlZCIsICJSZXNlYXJjaCBTaGlwIEtpbG8gTW9hbmEgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSAoZGVsYXllZCB+MTAgZGF5cyBmb3IgcXVhbGl0eSBjb250cm9sKSBhcmUgZnJvbSB0aGUgU2hpcGJvYXJkIEF1dG9tYXRlZCBNZXRlb3JvbG9naWNhbCBhbmQgT2NlYW5vZ3JhcGhpYyBTeXN0ZW0gKFNBTU9TKSBwcm9ncmFtLlxuXG5JTVBPUlRBTlQ6IEFMV0FZUyBVU0UgVEhFIFFVQUxJVFkgRkxBRyBEQVRBISBFYWNoIGRhdGEgdmFyaWFibGUncyBtZXRhZGF0YSBpbmNsdWRlcyBhIHFjaW5kZXggYXR0cmlidXRlIHdoaWNoIGluZGljYXRlcyBhIGNoYXJhY3RlciBudW1iZXIgaW4gdGhlIGZsYWcgZGF0YS4gIEFMV0FZUyBjaGVjayB0aGUgZmxhZyBkYXRhIGZvciBlYWNoIHJvdyBvZiBkYXRhIHRvIHNlZSB3aGljaCBkYXRhIGlzIGdvb2QgKGZsYWc9J1onKSBhbmQgd2hpY2ggZGF0YSBpc24ndC4gIEZvciBleGFtcGxlLCB0byBleHRyYWN0IGp1c3QgZGF0YSB3aGVyZSB0aW1lIChxY2luZGV4PTEpLCBsYXRpdHVkZSAocWNpbmRleD0yKSwgbG9uZ2l0dWRlIChxY2luZGV4PTMpLCBhbmQgYWlyVGVtcGVyYXR1cmUgKHFjaW5kZXg9MTIpIGFyZSAnZ29vZCcgZGF0YSwgaW5jbHVkZSB0aGlzIGNvbnN0cmFpbnQgaW4geW91ciBFUkREQVAgcXVlcnk6XG4gZmxhZz1+XCJaWlouLi4uLi4uLlouKlwiXG5pbiB5b3VyIHF1ZXJ5LlxuJz1+JyBpbmRpY2F0ZXMgdGhpcyBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBjb25zdHJhaW50LlxuVGhlICdaJ3MgYXJlIGxpdGVyYWwgY2hhcmFjdGVycy4gIEluIHRoaXMgZGF0YXNldCwgJ1onIGluZGljYXRlcyAnZ29vZCcgZGF0YS5cblRoZSAnLidzIHNheSB0byBtYXRjaCBhbnkgY2hhcmFjdGVyLlxuVGhlICcqJyBzYXlzIHRvIG1hdGNoIHRoZSBwcmV2aW91cyBjaGFyYWN0ZXIgMCBvciBtb3JlIHRpbWVzLlxuKERvbid0IGluY2x1ZGUgYmFja3NsYXNoZXMgaW4geW91ciBxdWVyeS4pXG5TZWUgdGhlIHR1dG9yaWFsIGZvciByZWd1bGFyIGV4cHJlc3Npb25zIGF0XG5odHRwOi8vd3d3LnZvZ2VsbGEuY29tL3R1dG9yaWFscy9KYXZhUmVndWxhckV4cHJlc3Npb25zL2FydGljbGUuaHRtbFxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZV9pZFxuZXhwb2NvZGVcbmZhY2lsaXR5XG5JRFxuSU1PXG5wbGF0Zm9ybVxucGxhdGZvcm1fdmVyc2lvblxuc2l0ZVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG4uLi4gKDIwIG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2ZzdVJlc2VhcmNoU2hpcFdEQTc4MjducnRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2ZzdVJlc2VhcmNoU2hpcFdEQTc4MjducnRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZnN1UmVzZWFyY2hTaGlwV0RBNzgyN25ydC9pbmRleC5qc29uIiwgImh0dHBzOi8vc2Ftb3MuY29hcHMuZnN1LmVkdS9odG1sLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9mc3VSZXNlYXJjaFNoaXBXREE3ODI3bnJ0LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1mc3VSZXNlYXJjaFNoaXBXREE3ODI3bnJ0JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkZTVSIsICJmc3VSZXNlYXJjaFNoaXBXREE3ODI3bnJ0Il0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdVJlc2VhcmNoU2hpcEtDRUouc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdVJlc2VhcmNoU2hpcEtDRUoiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1UmVzZWFyY2hTaGlwS0NFSi5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJSZXNlYXJjaCBTaGlwIEtub3JyIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEsIFF1YWxpdHkgQ29udHJvbGxlZCIsICJSZXNlYXJjaCBTaGlwIEtub3JyIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEgKGRlbGF5ZWQgfjEwIGRheXMgZm9yIHF1YWxpdHkgY29udHJvbCkgYXJlIGZyb20gdGhlIFNoaXBib2FyZCBBdXRvbWF0ZWQgTWV0ZW9yb2xvZ2ljYWwgYW5kIE9jZWFub2dyYXBoaWMgU3lzdGVtIChTQU1PUykgcHJvZ3JhbS5cblxuSU1QT1JUQU5UOiBBTFdBWVMgVVNFIFRIRSBRVUFMSVRZIEZMQUcgREFUQSEgRWFjaCBkYXRhIHZhcmlhYmxlJ3MgbWV0YWRhdGEgaW5jbHVkZXMgYSBxY2luZGV4IGF0dHJpYnV0ZSB3aGljaCBpbmRpY2F0ZXMgYSBjaGFyYWN0ZXIgbnVtYmVyIGluIHRoZSBmbGFnIGRhdGEuICBBTFdBWVMgY2hlY2sgdGhlIGZsYWcgZGF0YSBmb3IgZWFjaCByb3cgb2YgZGF0YSB0byBzZWUgd2hpY2ggZGF0YSBpcyBnb29kIChmbGFnPSdaJykgYW5kIHdoaWNoIGRhdGEgaXNuJ3QuICBGb3IgZXhhbXBsZSwgdG8gZXh0cmFjdCBqdXN0IGRhdGEgd2hlcmUgdGltZSAocWNpbmRleD0xKSwgbGF0aXR1ZGUgKHFjaW5kZXg9MiksIGxvbmdpdHVkZSAocWNpbmRleD0zKSwgYW5kIGFpclRlbXBlcmF0dXJlIChxY2luZGV4PTEyKSBhcmUgJ2dvb2QnIGRhdGEsIGluY2x1ZGUgdGhpcyBjb25zdHJhaW50IGluIHlvdXIgRVJEREFQIHF1ZXJ5OlxuIGZsYWc9flwiWlpaLi4uLi4uLi5aLipcIlxuaW4geW91ciBxdWVyeS5cbic9ficgaW5kaWNhdGVzIHRoaXMgaXMgYSByZWd1bGFyIGV4cHJlc3Npb24gY29uc3RyYWludC5cblRoZSAnWidzIGFyZSBsaXRlcmFsIGNoYXJhY3RlcnMuICBJbiB0aGlzIGRhdGFzZXQsICdaJyBpbmRpY2F0ZXMgJ2dvb2QnIGRhdGEuXG5UaGUgJy4ncyBzYXkgdG8gbWF0Y2ggYW55IGNoYXJhY3Rlci5cblRoZSAnKicgc2F5cyB0byBtYXRjaCB0aGUgcHJldmlvdXMgY2hhcmFjdGVyIDAgb3IgbW9yZSB0aW1lcy5cbihEb24ndCBpbmNsdWRlIGJhY2tzbGFzaGVzIGluIHlvdXIgcXVlcnkuKVxuU2VlIHRoZSB0dXRvcmlhbCBmb3IgcmVndWxhciBleHByZXNzaW9ucyBhdFxuaHR0cDovL3d3dy52b2dlbGxhLmNvbS90dXRvcmlhbHMvSmF2YVJlZ3VsYXJFeHByZXNzaW9ucy9hcnRpY2xlLmh0bWxcblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2VfaWRcbmV4cG9jb2RlXG5mYWNpbGl0eVxuSURcbklNT1xucGxhdGZvcm1cbnBsYXRmb3JtX3ZlcnNpb25cbnNpdGVcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuLi4uICgzMyBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9mc3VSZXNlYXJjaFNoaXBLQ0VKX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9mc3VSZXNlYXJjaFNoaXBLQ0VKX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2ZzdVJlc2VhcmNoU2hpcEtDRUovaW5kZXguanNvbiIsICJodHRwczovL3NhbW9zLmNvYXBzLmZzdS5lZHUvaHRtbC8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZnN1UmVzZWFyY2hTaGlwS0NFSi5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZnN1UmVzZWFyY2hTaGlwS0NFSiZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJGU1UiLCAiZnN1UmVzZWFyY2hTaGlwS0NFSiJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VSZXNlYXJjaFNoaXBXQ1g3NDQ1bnJ0LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VSZXNlYXJjaFNoaXBXQ1g3NDQ1bnJ0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdVJlc2VhcmNoU2hpcFdDWDc0NDVucnQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiUmVzZWFyY2ggU2hpcCBMYXVyZW5jZSBNLiBHb3VsZCBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhLCBRdWFsaXR5IENvbnRyb2xsZWQiLCAiUmVzZWFyY2ggU2hpcCBMYXVyZW5jZSBNLiBHb3VsZCBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhIChkZWxheWVkIH4xMCBkYXlzIGZvciBxdWFsaXR5IGNvbnRyb2wpIGFyZSBmcm9tIHRoZSBTaGlwYm9hcmQgQXV0b21hdGVkIE1ldGVvcm9sb2dpY2FsIGFuZCBPY2Vhbm9ncmFwaGljIFN5c3RlbSAoU0FNT1MpIHByb2dyYW0uXG5cbklNUE9SVEFOVDogQUxXQVlTIFVTRSBUSEUgUVVBTElUWSBGTEFHIERBVEEhIEVhY2ggZGF0YSB2YXJpYWJsZSdzIG1ldGFkYXRhIGluY2x1ZGVzIGEgcWNpbmRleCBhdHRyaWJ1dGUgd2hpY2ggaW5kaWNhdGVzIGEgY2hhcmFjdGVyIG51bWJlciBpbiB0aGUgZmxhZyBkYXRhLiAgQUxXQVlTIGNoZWNrIHRoZSBmbGFnIGRhdGEgZm9yIGVhY2ggcm93IG9mIGRhdGEgdG8gc2VlIHdoaWNoIGRhdGEgaXMgZ29vZCAoZmxhZz0nWicpIGFuZCB3aGljaCBkYXRhIGlzbid0LiAgRm9yIGV4YW1wbGUsIHRvIGV4dHJhY3QganVzdCBkYXRhIHdoZXJlIHRpbWUgKHFjaW5kZXg9MSksIGxhdGl0dWRlIChxY2luZGV4PTIpLCBsb25naXR1ZGUgKHFjaW5kZXg9MyksIGFuZCBhaXJUZW1wZXJhdHVyZSAocWNpbmRleD0xMikgYXJlICdnb29kJyBkYXRhLCBpbmNsdWRlIHRoaXMgY29uc3RyYWludCBpbiB5b3VyIEVSRERBUCBxdWVyeTpcbiBmbGFnPX5cIlpaWi4uLi4uLi4uWi4qXCJcbmluIHlvdXIgcXVlcnkuXG4nPX4nIGluZGljYXRlcyB0aGlzIGlzIGEgcmVndWxhciBleHByZXNzaW9uIGNvbnN0cmFpbnQuXG5UaGUgJ1oncyBhcmUgbGl0ZXJhbCBjaGFyYWN0ZXJzLiAgSW4gdGhpcyBkYXRhc2V0LCAnWicgaW5kaWNhdGVzICdnb29kJyBkYXRhLlxuVGhlICcuJ3Mgc2F5IHRvIG1hdGNoIGFueSBjaGFyYWN0ZXIuXG5UaGUgJyonIHNheXMgdG8gbWF0Y2ggdGhlIHByZXZpb3VzIGNoYXJhY3RlciAwIG9yIG1vcmUgdGltZXMuXG4oRG9uJ3QgaW5jbHVkZSBiYWNrc2xhc2hlcyBpbiB5b3VyIHF1ZXJ5LilcblNlZSB0aGUgdHV0b3JpYWwgZm9yIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYXRcbmh0dHA6Ly93d3cudm9nZWxsYS5jb20vdHV0b3JpYWxzL0phdmFSZWd1bGFyRXhwcmVzc2lvbnMvYXJ0aWNsZS5odG1sXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlX2lkXG5leHBvY29kZVxuZmFjaWxpdHlcbklEXG5JTU9cbnBsYXRmb3JtXG5wbGF0Zm9ybV92ZXJzaW9uXG5zaXRlXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbi4uLiAoMjEgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZnN1UmVzZWFyY2hTaGlwV0NYNzQ0NW5ydF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZnN1UmVzZWFyY2hTaGlwV0NYNzQ0NW5ydF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9mc3VSZXNlYXJjaFNoaXBXQ1g3NDQ1bnJ0L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9zYW1vcy5jb2Fwcy5mc3UuZWR1L2h0bWwvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2ZzdVJlc2VhcmNoU2hpcFdDWDc0NDVucnQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWZzdVJlc2VhcmNoU2hpcFdDWDc0NDVucnQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiRlNVIiwgImZzdVJlc2VhcmNoU2hpcFdDWDc0NDVucnQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1UmVzZWFyY2hTaGlwV0VDQm5ydC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1UmVzZWFyY2hTaGlwV0VDQm5ydCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VSZXNlYXJjaFNoaXBXRUNCbnJ0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlJlc2VhcmNoIFNoaXAgTWVsdmlsbGUgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSwgUXVhbGl0eSBDb250cm9sbGVkIiwgIlJlc2VhcmNoIFNoaXAgTWVsdmlsbGUgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSAoZGVsYXllZCB+MTAgZGF5cyBmb3IgcXVhbGl0eSBjb250cm9sKSBhcmUgZnJvbSB0aGUgU2hpcGJvYXJkIEF1dG9tYXRlZCBNZXRlb3JvbG9naWNhbCBhbmQgT2NlYW5vZ3JhcGhpYyBTeXN0ZW0gKFNBTU9TKSBwcm9ncmFtLlxuXG5JTVBPUlRBTlQ6IEFMV0FZUyBVU0UgVEhFIFFVQUxJVFkgRkxBRyBEQVRBISBFYWNoIGRhdGEgdmFyaWFibGUncyBtZXRhZGF0YSBpbmNsdWRlcyBhIHFjaW5kZXggYXR0cmlidXRlIHdoaWNoIGluZGljYXRlcyBhIGNoYXJhY3RlciBudW1iZXIgaW4gdGhlIGZsYWcgZGF0YS4gIEFMV0FZUyBjaGVjayB0aGUgZmxhZyBkYXRhIGZvciBlYWNoIHJvdyBvZiBkYXRhIHRvIHNlZSB3aGljaCBkYXRhIGlzIGdvb2QgKGZsYWc9J1onKSBhbmQgd2hpY2ggZGF0YSBpc24ndC4gIEZvciBleGFtcGxlLCB0byBleHRyYWN0IGp1c3QgZGF0YSB3aGVyZSB0aW1lIChxY2luZGV4PTEpLCBsYXRpdHVkZSAocWNpbmRleD0yKSwgbG9uZ2l0dWRlIChxY2luZGV4PTMpLCBhbmQgYWlyVGVtcGVyYXR1cmUgKHFjaW5kZXg9MTIpIGFyZSAnZ29vZCcgZGF0YSwgaW5jbHVkZSB0aGlzIGNvbnN0cmFpbnQgaW4geW91ciBFUkREQVAgcXVlcnk6XG4gZmxhZz1+XCJaWlouLi4uLi4uLlouKlwiXG5pbiB5b3VyIHF1ZXJ5LlxuJz1+JyBpbmRpY2F0ZXMgdGhpcyBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBjb25zdHJhaW50LlxuVGhlICdaJ3MgYXJlIGxpdGVyYWwgY2hhcmFjdGVycy4gIEluIHRoaXMgZGF0YXNldCwgJ1onIGluZGljYXRlcyAnZ29vZCcgZGF0YS5cblRoZSAnLidzIHNheSB0byBtYXRjaCBhbnkgY2hhcmFjdGVyLlxuVGhlICcqJyBzYXlzIHRvIG1hdGNoIHRoZSBwcmV2aW91cyBjaGFyYWN0ZXIgMCBvciBtb3JlIHRpbWVzLlxuKERvbid0IGluY2x1ZGUgYmFja3NsYXNoZXMgaW4geW91ciBxdWVyeS4pXG5TZWUgdGhlIHR1dG9yaWFsIGZvciByZWd1bGFyIGV4cHJlc3Npb25zIGF0XG5odHRwOi8vd3d3LnZvZ2VsbGEuY29tL3R1dG9yaWFscy9KYXZhUmVndWxhckV4cHJlc3Npb25zL2FydGljbGUuaHRtbFxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZV9pZFxuZXhwb2NvZGVcbmZhY2lsaXR5XG5JRFxuSU1PXG5wbGF0Zm9ybVxucGxhdGZvcm1fdmVyc2lvblxuc2l0ZVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG4uLi4gKDE5IG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2ZzdVJlc2VhcmNoU2hpcFdFQ0JucnRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2ZzdVJlc2VhcmNoU2hpcFdFQ0JucnRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZnN1UmVzZWFyY2hTaGlwV0VDQm5ydC9pbmRleC5qc29uIiwgImh0dHBzOi8vc2Ftb3MuY29hcHMuZnN1LmVkdS9odG1sLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9mc3VSZXNlYXJjaFNoaXBXRUNCbnJ0LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1mc3VSZXNlYXJjaFNoaXBXRUNCbnJ0JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkZTVSIsICJmc3VSZXNlYXJjaFNoaXBXRUNCbnJ0Il0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdVJlc2VhcmNoU2hpcFdCUDMyMTAuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdVJlc2VhcmNoU2hpcFdCUDMyMTAiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1UmVzZWFyY2hTaGlwV0JQMzIxMC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJSZXNlYXJjaCBTaGlwIE5hdGhhbmllbCBCLiBQYWxtZXIgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSwgUXVhbGl0eSBDb250cm9sbGVkIiwgIlJlc2VhcmNoIFNoaXAgTmF0aGFuaWVsIEIuIFBhbG1lciBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhIChkZWxheWVkIH4xMCBkYXlzIGZvciBxdWFsaXR5IGNvbnRyb2wpIGFyZSBmcm9tIHRoZSBTaGlwYm9hcmQgQXV0b21hdGVkIE1ldGVvcm9sb2dpY2FsIGFuZCBPY2Vhbm9ncmFwaGljIFN5c3RlbSAoU0FNT1MpIHByb2dyYW0uXG5cbklNUE9SVEFOVDogQUxXQVlTIFVTRSBUSEUgUVVBTElUWSBGTEFHIERBVEEhIEVhY2ggZGF0YSB2YXJpYWJsZSdzIG1ldGFkYXRhIGluY2x1ZGVzIGEgcWNpbmRleCBhdHRyaWJ1dGUgd2hpY2ggaW5kaWNhdGVzIGEgY2hhcmFjdGVyIG51bWJlciBpbiB0aGUgZmxhZyBkYXRhLiAgQUxXQVlTIGNoZWNrIHRoZSBmbGFnIGRhdGEgZm9yIGVhY2ggcm93IG9mIGRhdGEgdG8gc2VlIHdoaWNoIGRhdGEgaXMgZ29vZCAoZmxhZz0nWicpIGFuZCB3aGljaCBkYXRhIGlzbid0LiAgRm9yIGV4YW1wbGUsIHRvIGV4dHJhY3QganVzdCBkYXRhIHdoZXJlIHRpbWUgKHFjaW5kZXg9MSksIGxhdGl0dWRlIChxY2luZGV4PTIpLCBsb25naXR1ZGUgKHFjaW5kZXg9MyksIGFuZCBhaXJUZW1wZXJhdHVyZSAocWNpbmRleD0xMikgYXJlICdnb29kJyBkYXRhLCBpbmNsdWRlIHRoaXMgY29uc3RyYWludCBpbiB5b3VyIEVSRERBUCBxdWVyeTpcbiBmbGFnPX5cIlpaWi4uLi4uLi4uWi4qXCJcbmluIHlvdXIgcXVlcnkuXG4nPX4nIGluZGljYXRlcyB0aGlzIGlzIGEgcmVndWxhciBleHByZXNzaW9uIGNvbnN0cmFpbnQuXG5UaGUgJ1oncyBhcmUgbGl0ZXJhbCBjaGFyYWN0ZXJzLiAgSW4gdGhpcyBkYXRhc2V0LCAnWicgaW5kaWNhdGVzICdnb29kJyBkYXRhLlxuVGhlICcuJ3Mgc2F5IHRvIG1hdGNoIGFueSBjaGFyYWN0ZXIuXG5UaGUgJyonIHNheXMgdG8gbWF0Y2ggdGhlIHByZXZpb3VzIGNoYXJhY3RlciAwIG9yIG1vcmUgdGltZXMuXG4oRG9uJ3QgaW5jbHVkZSBiYWNrc2xhc2hlcyBpbiB5b3VyIHF1ZXJ5LilcblNlZSB0aGUgdHV0b3JpYWwgZm9yIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYXRcbmh0dHA6Ly93d3cudm9nZWxsYS5jb20vdHV0b3JpYWxzL0phdmFSZWd1bGFyRXhwcmVzc2lvbnMvYXJ0aWNsZS5odG1sXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlX2lkXG5leHBvY29kZVxuZmFjaWxpdHlcbklEXG5JTU9cbnBsYXRmb3JtXG5wbGF0Zm9ybV92ZXJzaW9uXG5zaXRlXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbi4uLiAoMTggbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZnN1UmVzZWFyY2hTaGlwV0JQMzIxMF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZnN1UmVzZWFyY2hTaGlwV0JQMzIxMF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9mc3VSZXNlYXJjaFNoaXBXQlAzMjEwL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9zYW1vcy5jb2Fwcy5mc3UuZWR1L2h0bWwvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2ZzdVJlc2VhcmNoU2hpcFdCUDMyMTAucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWZzdVJlc2VhcmNoU2hpcFdCUDMyMTAmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiRlNVIiwgImZzdVJlc2VhcmNoU2hpcFdCUDMyMTAiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1UmVzZWFyY2hTaGlwV0JQMzIxMG5ydC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1UmVzZWFyY2hTaGlwV0JQMzIxMG5ydCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VSZXNlYXJjaFNoaXBXQlAzMjEwbnJ0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlJlc2VhcmNoIFNoaXAgTmF0aGFuaWVsIEIuIFBhbG1lciBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhLCBRdWFsaXR5IENvbnRyb2xsZWQiLCAiUmVzZWFyY2ggU2hpcCBOYXRoYW5pZWwgQi4gUGFsbWVyIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEgKGRlbGF5ZWQgfjEwIGRheXMgZm9yIHF1YWxpdHkgY29udHJvbCkgYXJlIGZyb20gdGhlIFNoaXBib2FyZCBBdXRvbWF0ZWQgTWV0ZW9yb2xvZ2ljYWwgYW5kIE9jZWFub2dyYXBoaWMgU3lzdGVtIChTQU1PUykgcHJvZ3JhbS5cblxuSU1QT1JUQU5UOiBBTFdBWVMgVVNFIFRIRSBRVUFMSVRZIEZMQUcgREFUQSEgRWFjaCBkYXRhIHZhcmlhYmxlJ3MgbWV0YWRhdGEgaW5jbHVkZXMgYSBxY2luZGV4IGF0dHJpYnV0ZSB3aGljaCBpbmRpY2F0ZXMgYSBjaGFyYWN0ZXIgbnVtYmVyIGluIHRoZSBmbGFnIGRhdGEuICBBTFdBWVMgY2hlY2sgdGhlIGZsYWcgZGF0YSBmb3IgZWFjaCByb3cgb2YgZGF0YSB0byBzZWUgd2hpY2ggZGF0YSBpcyBnb29kIChmbGFnPSdaJykgYW5kIHdoaWNoIGRhdGEgaXNuJ3QuICBGb3IgZXhhbXBsZSwgdG8gZXh0cmFjdCBqdXN0IGRhdGEgd2hlcmUgdGltZSAocWNpbmRleD0xKSwgbGF0aXR1ZGUgKHFjaW5kZXg9MiksIGxvbmdpdHVkZSAocWNpbmRleD0zKSwgYW5kIGFpclRlbXBlcmF0dXJlIChxY2luZGV4PTEyKSBhcmUgJ2dvb2QnIGRhdGEsIGluY2x1ZGUgdGhpcyBjb25zdHJhaW50IGluIHlvdXIgRVJEREFQIHF1ZXJ5OlxuIGZsYWc9flwiWlpaLi4uLi4uLi5aLipcIlxuaW4geW91ciBxdWVyeS5cbic9ficgaW5kaWNhdGVzIHRoaXMgaXMgYSByZWd1bGFyIGV4cHJlc3Npb24gY29uc3RyYWludC5cblRoZSAnWidzIGFyZSBsaXRlcmFsIGNoYXJhY3RlcnMuICBJbiB0aGlzIGRhdGFzZXQsICdaJyBpbmRpY2F0ZXMgJ2dvb2QnIGRhdGEuXG5UaGUgJy4ncyBzYXkgdG8gbWF0Y2ggYW55IGNoYXJhY3Rlci5cblRoZSAnKicgc2F5cyB0byBtYXRjaCB0aGUgcHJldmlvdXMgY2hhcmFjdGVyIDAgb3IgbW9yZSB0aW1lcy5cbihEb24ndCBpbmNsdWRlIGJhY2tzbGFzaGVzIGluIHlvdXIgcXVlcnkuKVxuU2VlIHRoZSB0dXRvcmlhbCBmb3IgcmVndWxhciBleHByZXNzaW9ucyBhdFxuaHR0cDovL3d3dy52b2dlbGxhLmNvbS90dXRvcmlhbHMvSmF2YVJlZ3VsYXJFeHByZXNzaW9ucy9hcnRpY2xlLmh0bWxcblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2VfaWRcbmV4cG9jb2RlXG5mYWNpbGl0eVxuSURcbklNT1xucGxhdGZvcm1cbnBsYXRmb3JtX3ZlcnNpb25cbnNpdGVcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuLi4uICgxOCBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9mc3VSZXNlYXJjaFNoaXBXQlAzMjEwbnJ0X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9mc3VSZXNlYXJjaFNoaXBXQlAzMjEwbnJ0X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2ZzdVJlc2VhcmNoU2hpcFdCUDMyMTBucnQvaW5kZXguanNvbiIsICJodHRwczovL3NhbW9zLmNvYXBzLmZzdS5lZHUvaHRtbC8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZnN1UmVzZWFyY2hTaGlwV0JQMzIxMG5ydC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZnN1UmVzZWFyY2hTaGlwV0JQMzIxMG5ydCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJGU1UiLCAiZnN1UmVzZWFyY2hTaGlwV0JQMzIxMG5ydCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VSZXNlYXJjaFNoaXBXS1dCbnJ0LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VSZXNlYXJjaFNoaXBXS1dCbnJ0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdVJlc2VhcmNoU2hpcFdLV0JucnQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiUmVzZWFyY2ggU2hpcCBOZXcgSG9yaXpvbiBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhLCBRdWFsaXR5IENvbnRyb2xsZWQiLCAiUmVzZWFyY2ggU2hpcCBOZXcgSG9yaXpvbiBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhIChkZWxheWVkIH4xMCBkYXlzIGZvciBxdWFsaXR5IGNvbnRyb2wpIGFyZSBmcm9tIHRoZSBTaGlwYm9hcmQgQXV0b21hdGVkIE1ldGVvcm9sb2dpY2FsIGFuZCBPY2Vhbm9ncmFwaGljIFN5c3RlbSAoU0FNT1MpIHByb2dyYW0uXG5cbklNUE9SVEFOVDogQUxXQVlTIFVTRSBUSEUgUVVBTElUWSBGTEFHIERBVEEhIEVhY2ggZGF0YSB2YXJpYWJsZSdzIG1ldGFkYXRhIGluY2x1ZGVzIGEgcWNpbmRleCBhdHRyaWJ1dGUgd2hpY2ggaW5kaWNhdGVzIGEgY2hhcmFjdGVyIG51bWJlciBpbiB0aGUgZmxhZyBkYXRhLiAgQUxXQVlTIGNoZWNrIHRoZSBmbGFnIGRhdGEgZm9yIGVhY2ggcm93IG9mIGRhdGEgdG8gc2VlIHdoaWNoIGRhdGEgaXMgZ29vZCAoZmxhZz0nWicpIGFuZCB3aGljaCBkYXRhIGlzbid0LiAgRm9yIGV4YW1wbGUsIHRvIGV4dHJhY3QganVzdCBkYXRhIHdoZXJlIHRpbWUgKHFjaW5kZXg9MSksIGxhdGl0dWRlIChxY2luZGV4PTIpLCBsb25naXR1ZGUgKHFjaW5kZXg9MyksIGFuZCBhaXJUZW1wZXJhdHVyZSAocWNpbmRleD0xMikgYXJlICdnb29kJyBkYXRhLCBpbmNsdWRlIHRoaXMgY29uc3RyYWludCBpbiB5b3VyIEVSRERBUCBxdWVyeTpcbiBmbGFnPX5cIlpaWi4uLi4uLi4uWi4qXCJcbmluIHlvdXIgcXVlcnkuXG4nPX4nIGluZGljYXRlcyB0aGlzIGlzIGEgcmVndWxhciBleHByZXNzaW9uIGNvbnN0cmFpbnQuXG5UaGUgJ1oncyBhcmUgbGl0ZXJhbCBjaGFyYWN0ZXJzLiAgSW4gdGhpcyBkYXRhc2V0LCAnWicgaW5kaWNhdGVzICdnb29kJyBkYXRhLlxuVGhlICcuJ3Mgc2F5IHRvIG1hdGNoIGFueSBjaGFyYWN0ZXIuXG5UaGUgJyonIHNheXMgdG8gbWF0Y2ggdGhlIHByZXZpb3VzIGNoYXJhY3RlciAwIG9yIG1vcmUgdGltZXMuXG4oRG9uJ3QgaW5jbHVkZSBiYWNrc2xhc2hlcyBpbiB5b3VyIHF1ZXJ5LilcblNlZSB0aGUgdHV0b3JpYWwgZm9yIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYXRcbmh0dHA6Ly93d3cudm9nZWxsYS5jb20vdHV0b3JpYWxzL0phdmFSZWd1bGFyRXhwcmVzc2lvbnMvYXJ0aWNsZS5odG1sXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlX2lkXG5leHBvY29kZVxuZmFjaWxpdHlcbklEXG5JTU9cbnBsYXRmb3JtXG5wbGF0Zm9ybV92ZXJzaW9uXG5zaXRlXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbi4uLiAoMjUgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZnN1UmVzZWFyY2hTaGlwV0tXQm5ydF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZnN1UmVzZWFyY2hTaGlwV0tXQm5ydF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9mc3VSZXNlYXJjaFNoaXBXS1dCbnJ0L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9zYW1vcy5jb2Fwcy5mc3UuZWR1L2h0bWwvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2ZzdVJlc2VhcmNoU2hpcFdLV0JucnQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWZzdVJlc2VhcmNoU2hpcFdLV0JucnQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiRlNVIiwgImZzdVJlc2VhcmNoU2hpcFdLV0JucnQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1UmVzZWFyY2hTaGlwV1hBUS5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1UmVzZWFyY2hTaGlwV1hBUSIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VSZXNlYXJjaFNoaXBXWEFRLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlJlc2VhcmNoIFNoaXAgT2NlYW51cyBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhLCBRdWFsaXR5IENvbnRyb2xsZWQiLCAiUmVzZWFyY2ggU2hpcCBPY2VhbnVzIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEgKGRlbGF5ZWQgfjEwIGRheXMgZm9yIHF1YWxpdHkgY29udHJvbCkgYXJlIGZyb20gdGhlIFNoaXBib2FyZCBBdXRvbWF0ZWQgTWV0ZW9yb2xvZ2ljYWwgYW5kIE9jZWFub2dyYXBoaWMgU3lzdGVtIChTQU1PUykgcHJvZ3JhbS5cblxuSU1QT1JUQU5UOiBBTFdBWVMgVVNFIFRIRSBRVUFMSVRZIEZMQUcgREFUQSEgRWFjaCBkYXRhIHZhcmlhYmxlJ3MgbWV0YWRhdGEgaW5jbHVkZXMgYSBxY2luZGV4IGF0dHJpYnV0ZSB3aGljaCBpbmRpY2F0ZXMgYSBjaGFyYWN0ZXIgbnVtYmVyIGluIHRoZSBmbGFnIGRhdGEuICBBTFdBWVMgY2hlY2sgdGhlIGZsYWcgZGF0YSBmb3IgZWFjaCByb3cgb2YgZGF0YSB0byBzZWUgd2hpY2ggZGF0YSBpcyBnb29kIChmbGFnPSdaJykgYW5kIHdoaWNoIGRhdGEgaXNuJ3QuICBGb3IgZXhhbXBsZSwgdG8gZXh0cmFjdCBqdXN0IGRhdGEgd2hlcmUgdGltZSAocWNpbmRleD0xKSwgbGF0aXR1ZGUgKHFjaW5kZXg9MiksIGxvbmdpdHVkZSAocWNpbmRleD0zKSwgYW5kIGFpclRlbXBlcmF0dXJlIChxY2luZGV4PTEyKSBhcmUgJ2dvb2QnIGRhdGEsIGluY2x1ZGUgdGhpcyBjb25zdHJhaW50IGluIHlvdXIgRVJEREFQIHF1ZXJ5OlxuIGZsYWc9flwiWlpaLi4uLi4uLi5aLipcIlxuaW4geW91ciBxdWVyeS5cbic9ficgaW5kaWNhdGVzIHRoaXMgaXMgYSByZWd1bGFyIGV4cHJlc3Npb24gY29uc3RyYWludC5cblRoZSAnWidzIGFyZSBsaXRlcmFsIGNoYXJhY3RlcnMuICBJbiB0aGlzIGRhdGFzZXQsICdaJyBpbmRpY2F0ZXMgJ2dvb2QnIGRhdGEuXG5UaGUgJy4ncyBzYXkgdG8gbWF0Y2ggYW55IGNoYXJhY3Rlci5cblRoZSAnKicgc2F5cyB0byBtYXRjaCB0aGUgcHJldmlvdXMgY2hhcmFjdGVyIDAgb3IgbW9yZSB0aW1lcy5cbihEb24ndCBpbmNsdWRlIGJhY2tzbGFzaGVzIGluIHlvdXIgcXVlcnkuKVxuU2VlIHRoZSB0dXRvcmlhbCBmb3IgcmVndWxhciBleHByZXNzaW9ucyBhdFxuaHR0cDovL3d3dy52b2dlbGxhLmNvbS90dXRvcmlhbHMvSmF2YVJlZ3VsYXJFeHByZXNzaW9ucy9hcnRpY2xlLmh0bWxcblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2VfaWRcbmV4cG9jb2RlXG5mYWNpbGl0eVxuSURcbklNT1xucGxhdGZvcm1cbnBsYXRmb3JtX3ZlcnNpb25cbnNpdGVcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuLi4uICgyOSBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9mc3VSZXNlYXJjaFNoaXBXWEFRX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9mc3VSZXNlYXJjaFNoaXBXWEFRX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2ZzdVJlc2VhcmNoU2hpcFdYQVEvaW5kZXguanNvbiIsICJodHRwczovL3NhbW9zLmNvYXBzLmZzdS5lZHUvaHRtbC8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZnN1UmVzZWFyY2hTaGlwV1hBUS5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZnN1UmVzZWFyY2hTaGlwV1hBUSZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJGU1UiLCAiZnN1UmVzZWFyY2hTaGlwV1hBUSJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VSZXNlYXJjaFNoaXBXU1EyNjc0bnJ0LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VSZXNlYXJjaFNoaXBXU1EyNjc0bnJ0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdVJlc2VhcmNoU2hpcFdTUTI2NzRucnQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiUmVzZWFyY2ggU2hpcCBSb2JlcnQgR29yZG9uIFNwcm91bCBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhLCBRdWFsaXR5IENvbnRyb2xsZWQiLCAiUmVzZWFyY2ggU2hpcCBSb2JlcnQgR29yZG9uIFNwcm91bCBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhIChkZWxheWVkIH4xMCBkYXlzIGZvciBxdWFsaXR5IGNvbnRyb2wpIGFyZSBmcm9tIHRoZSBTaGlwYm9hcmQgQXV0b21hdGVkIE1ldGVvcm9sb2dpY2FsIGFuZCBPY2Vhbm9ncmFwaGljIFN5c3RlbSAoU0FNT1MpIHByb2dyYW0uXG5cbklNUE9SVEFOVDogQUxXQVlTIFVTRSBUSEUgUVVBTElUWSBGTEFHIERBVEEhIEVhY2ggZGF0YSB2YXJpYWJsZSdzIG1ldGFkYXRhIGluY2x1ZGVzIGEgcWNpbmRleCBhdHRyaWJ1dGUgd2hpY2ggaW5kaWNhdGVzIGEgY2hhcmFjdGVyIG51bWJlciBpbiB0aGUgZmxhZyBkYXRhLiAgQUxXQVlTIGNoZWNrIHRoZSBmbGFnIGRhdGEgZm9yIGVhY2ggcm93IG9mIGRhdGEgdG8gc2VlIHdoaWNoIGRhdGEgaXMgZ29vZCAoZmxhZz0nWicpIGFuZCB3aGljaCBkYXRhIGlzbid0LiAgRm9yIGV4YW1wbGUsIHRvIGV4dHJhY3QganVzdCBkYXRhIHdoZXJlIHRpbWUgKHFjaW5kZXg9MSksIGxhdGl0dWRlIChxY2luZGV4PTIpLCBsb25naXR1ZGUgKHFjaW5kZXg9MyksIGFuZCBhaXJUZW1wZXJhdHVyZSAocWNpbmRleD0xMikgYXJlICdnb29kJyBkYXRhLCBpbmNsdWRlIHRoaXMgY29uc3RyYWludCBpbiB5b3VyIEVSRERBUCBxdWVyeTpcbiBmbGFnPX5cIlpaWi4uLi4uLi4uWi4qXCJcbmluIHlvdXIgcXVlcnkuXG4nPX4nIGluZGljYXRlcyB0aGlzIGlzIGEgcmVndWxhciBleHByZXNzaW9uIGNvbnN0cmFpbnQuXG5UaGUgJ1oncyBhcmUgbGl0ZXJhbCBjaGFyYWN0ZXJzLiAgSW4gdGhpcyBkYXRhc2V0LCAnWicgaW5kaWNhdGVzICdnb29kJyBkYXRhLlxuVGhlICcuJ3Mgc2F5IHRvIG1hdGNoIGFueSBjaGFyYWN0ZXIuXG5UaGUgJyonIHNheXMgdG8gbWF0Y2ggdGhlIHByZXZpb3VzIGNoYXJhY3RlciAwIG9yIG1vcmUgdGltZXMuXG4oRG9uJ3QgaW5jbHVkZSBiYWNrc2xhc2hlcyBpbiB5b3VyIHF1ZXJ5LilcblNlZSB0aGUgdHV0b3JpYWwgZm9yIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYXRcbmh0dHA6Ly93d3cudm9nZWxsYS5jb20vdHV0b3JpYWxzL0phdmFSZWd1bGFyRXhwcmVzc2lvbnMvYXJ0aWNsZS5odG1sXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlX2lkXG5leHBvY29kZVxuZmFjaWxpdHlcbklEXG5JTU9cbnBsYXRmb3JtXG5wbGF0Zm9ybV92ZXJzaW9uXG5zaXRlXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbi4uLiAoNyBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9mc3VSZXNlYXJjaFNoaXBXU1EyNjc0bnJ0X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9mc3VSZXNlYXJjaFNoaXBXU1EyNjc0bnJ0X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2ZzdVJlc2VhcmNoU2hpcFdTUTI2NzRucnQvaW5kZXguanNvbiIsICJodHRwczovL3NhbW9zLmNvYXBzLmZzdS5lZHUvaHRtbC8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZnN1UmVzZWFyY2hTaGlwV1NRMjY3NG5ydC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZnN1UmVzZWFyY2hTaGlwV1NRMjY3NG5ydCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJGU1UiLCAiZnN1UmVzZWFyY2hTaGlwV1NRMjY3NG5ydCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VSZXNlYXJjaFNoaXBLQU9VbnJ0LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VSZXNlYXJjaFNoaXBLQU9VbnJ0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdVJlc2VhcmNoU2hpcEtBT1VucnQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiUmVzZWFyY2ggU2hpcCBSb2dlciBSZXZlbGxlIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEsIFF1YWxpdHkgQ29udHJvbGxlZCIsICJSZXNlYXJjaCBTaGlwIFJvZ2VyIFJldmVsbGUgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSAoZGVsYXllZCB+MTAgZGF5cyBmb3IgcXVhbGl0eSBjb250cm9sKSBhcmUgZnJvbSB0aGUgU2hpcGJvYXJkIEF1dG9tYXRlZCBNZXRlb3JvbG9naWNhbCBhbmQgT2NlYW5vZ3JhcGhpYyBTeXN0ZW0gKFNBTU9TKSBwcm9ncmFtLlxuXG5JTVBPUlRBTlQ6IEFMV0FZUyBVU0UgVEhFIFFVQUxJVFkgRkxBRyBEQVRBISBFYWNoIGRhdGEgdmFyaWFibGUncyBtZXRhZGF0YSBpbmNsdWRlcyBhIHFjaW5kZXggYXR0cmlidXRlIHdoaWNoIGluZGljYXRlcyBhIGNoYXJhY3RlciBudW1iZXIgaW4gdGhlIGZsYWcgZGF0YS4gIEFMV0FZUyBjaGVjayB0aGUgZmxhZyBkYXRhIGZvciBlYWNoIHJvdyBvZiBkYXRhIHRvIHNlZSB3aGljaCBkYXRhIGlzIGdvb2QgKGZsYWc9J1onKSBhbmQgd2hpY2ggZGF0YSBpc24ndC4gIEZvciBleGFtcGxlLCB0byBleHRyYWN0IGp1c3QgZGF0YSB3aGVyZSB0aW1lIChxY2luZGV4PTEpLCBsYXRpdHVkZSAocWNpbmRleD0yKSwgbG9uZ2l0dWRlIChxY2luZGV4PTMpLCBhbmQgYWlyVGVtcGVyYXR1cmUgKHFjaW5kZXg9MTIpIGFyZSAnZ29vZCcgZGF0YSwgaW5jbHVkZSB0aGlzIGNvbnN0cmFpbnQgaW4geW91ciBFUkREQVAgcXVlcnk6XG4gZmxhZz1+XCJaWlouLi4uLi4uLlouKlwiXG5pbiB5b3VyIHF1ZXJ5LlxuJz1+JyBpbmRpY2F0ZXMgdGhpcyBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBjb25zdHJhaW50LlxuVGhlICdaJ3MgYXJlIGxpdGVyYWwgY2hhcmFjdGVycy4gIEluIHRoaXMgZGF0YXNldCwgJ1onIGluZGljYXRlcyAnZ29vZCcgZGF0YS5cblRoZSAnLidzIHNheSB0byBtYXRjaCBhbnkgY2hhcmFjdGVyLlxuVGhlICcqJyBzYXlzIHRvIG1hdGNoIHRoZSBwcmV2aW91cyBjaGFyYWN0ZXIgMCBvciBtb3JlIHRpbWVzLlxuKERvbid0IGluY2x1ZGUgYmFja3NsYXNoZXMgaW4geW91ciBxdWVyeS4pXG5TZWUgdGhlIHR1dG9yaWFsIGZvciByZWd1bGFyIGV4cHJlc3Npb25zIGF0XG5odHRwOi8vd3d3LnZvZ2VsbGEuY29tL3R1dG9yaWFscy9KYXZhUmVndWxhckV4cHJlc3Npb25zL2FydGljbGUuaHRtbFxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZV9pZFxuZXhwb2NvZGVcbmZhY2lsaXR5XG5JRFxuSU1PXG5wbGF0Zm9ybVxucGxhdGZvcm1fdmVyc2lvblxuc2l0ZVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG4uLi4gKDIwIG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2ZzdVJlc2VhcmNoU2hpcEtBT1VucnRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2ZzdVJlc2VhcmNoU2hpcEtBT1VucnRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZnN1UmVzZWFyY2hTaGlwS0FPVW5ydC9pbmRleC5qc29uIiwgImh0dHBzOi8vc2Ftb3MuY29hcHMuZnN1LmVkdS9odG1sLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9mc3VSZXNlYXJjaFNoaXBLQU9VbnJ0LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1mc3VSZXNlYXJjaFNoaXBLQU9VbnJ0JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkZTVSIsICJmc3VSZXNlYXJjaFNoaXBLQU9VbnJ0Il0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdVJlc2VhcmNoU2hpcFZMSEouc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdVJlc2VhcmNoU2hpcFZMSEoiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1UmVzZWFyY2hTaGlwVkxISi5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJSZXNlYXJjaCBTaGlwIFNvdXRoZXJuIFN1cnZleW9yIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEsIFF1YWxpdHkgQ29udHJvbGxlZCIsICJSZXNlYXJjaCBTaGlwIFNvdXRoZXJuIFN1cnZleW9yIFVuZGVyd2F5IE1ldGVvcm9sb2dpY2FsIERhdGEgKGRlbGF5ZWQgfjEwIGRheXMgZm9yIHF1YWxpdHkgY29udHJvbCkgYXJlIGZyb20gdGhlIFNoaXBib2FyZCBBdXRvbWF0ZWQgTWV0ZW9yb2xvZ2ljYWwgYW5kIE9jZWFub2dyYXBoaWMgU3lzdGVtIChTQU1PUykgcHJvZ3JhbS5cblxuSU1QT1JUQU5UOiBBTFdBWVMgVVNFIFRIRSBRVUFMSVRZIEZMQUcgREFUQSEgRWFjaCBkYXRhIHZhcmlhYmxlJ3MgbWV0YWRhdGEgaW5jbHVkZXMgYSBxY2luZGV4IGF0dHJpYnV0ZSB3aGljaCBpbmRpY2F0ZXMgYSBjaGFyYWN0ZXIgbnVtYmVyIGluIHRoZSBmbGFnIGRhdGEuICBBTFdBWVMgY2hlY2sgdGhlIGZsYWcgZGF0YSBmb3IgZWFjaCByb3cgb2YgZGF0YSB0byBzZWUgd2hpY2ggZGF0YSBpcyBnb29kIChmbGFnPSdaJykgYW5kIHdoaWNoIGRhdGEgaXNuJ3QuICBGb3IgZXhhbXBsZSwgdG8gZXh0cmFjdCBqdXN0IGRhdGEgd2hlcmUgdGltZSAocWNpbmRleD0xKSwgbGF0aXR1ZGUgKHFjaW5kZXg9MiksIGxvbmdpdHVkZSAocWNpbmRleD0zKSwgYW5kIGFpclRlbXBlcmF0dXJlIChxY2luZGV4PTEyKSBhcmUgJ2dvb2QnIGRhdGEsIGluY2x1ZGUgdGhpcyBjb25zdHJhaW50IGluIHlvdXIgRVJEREFQIHF1ZXJ5OlxuIGZsYWc9flwiWlpaLi4uLi4uLi5aLipcIlxuaW4geW91ciBxdWVyeS5cbic9ficgaW5kaWNhdGVzIHRoaXMgaXMgYSByZWd1bGFyIGV4cHJlc3Npb24gY29uc3RyYWludC5cblRoZSAnWidzIGFyZSBsaXRlcmFsIGNoYXJhY3RlcnMuICBJbiB0aGlzIGRhdGFzZXQsICdaJyBpbmRpY2F0ZXMgJ2dvb2QnIGRhdGEuXG5UaGUgJy4ncyBzYXkgdG8gbWF0Y2ggYW55IGNoYXJhY3Rlci5cblRoZSAnKicgc2F5cyB0byBtYXRjaCB0aGUgcHJldmlvdXMgY2hhcmFjdGVyIDAgb3IgbW9yZSB0aW1lcy5cbihEb24ndCBpbmNsdWRlIGJhY2tzbGFzaGVzIGluIHlvdXIgcXVlcnkuKVxuU2VlIHRoZSB0dXRvcmlhbCBmb3IgcmVndWxhciBleHByZXNzaW9ucyBhdFxuaHR0cDovL3d3dy52b2dlbGxhLmNvbS90dXRvcmlhbHMvSmF2YVJlZ3VsYXJFeHByZXNzaW9ucy9hcnRpY2xlLmh0bWxcblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG5jcnVpc2VfaWRcbmV4cG9jb2RlXG5mYWNpbGl0eVxuSURcbklNT1xucGxhdGZvcm1cbnBsYXRmb3JtX3ZlcnNpb25cbnNpdGVcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuLi4uICgyNyBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9mc3VSZXNlYXJjaFNoaXBWTEhKX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9mc3VSZXNlYXJjaFNoaXBWTEhKX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2ZzdVJlc2VhcmNoU2hpcFZMSEovaW5kZXguanNvbiIsICJodHRwczovL3NhbW9zLmNvYXBzLmZzdS5lZHUvaHRtbC8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZnN1UmVzZWFyY2hTaGlwVkxISi5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZnN1UmVzZWFyY2hTaGlwVkxISiZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJGU1UiLCAiZnN1UmVzZWFyY2hTaGlwVkxISiJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VSZXNlYXJjaFNoaXBLVERRbnJ0LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VSZXNlYXJjaFNoaXBLVERRbnJ0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2ZzdVJlc2VhcmNoU2hpcEtURFFucnQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiUmVzZWFyY2ggU2hpcCBULiBHLiBUaG9tcHNvbiBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhLCBRdWFsaXR5IENvbnRyb2xsZWQiLCAiUmVzZWFyY2ggU2hpcCBULiBHLiBUaG9tcHNvbiBVbmRlcndheSBNZXRlb3JvbG9naWNhbCBEYXRhIChkZWxheWVkIH4xMCBkYXlzIGZvciBxdWFsaXR5IGNvbnRyb2wpIGFyZSBmcm9tIHRoZSBTaGlwYm9hcmQgQXV0b21hdGVkIE1ldGVvcm9sb2dpY2FsIGFuZCBPY2Vhbm9ncmFwaGljIFN5c3RlbSAoU0FNT1MpIHByb2dyYW0uXG5cbklNUE9SVEFOVDogQUxXQVlTIFVTRSBUSEUgUVVBTElUWSBGTEFHIERBVEEhIEVhY2ggZGF0YSB2YXJpYWJsZSdzIG1ldGFkYXRhIGluY2x1ZGVzIGEgcWNpbmRleCBhdHRyaWJ1dGUgd2hpY2ggaW5kaWNhdGVzIGEgY2hhcmFjdGVyIG51bWJlciBpbiB0aGUgZmxhZyBkYXRhLiAgQUxXQVlTIGNoZWNrIHRoZSBmbGFnIGRhdGEgZm9yIGVhY2ggcm93IG9mIGRhdGEgdG8gc2VlIHdoaWNoIGRhdGEgaXMgZ29vZCAoZmxhZz0nWicpIGFuZCB3aGljaCBkYXRhIGlzbid0LiAgRm9yIGV4YW1wbGUsIHRvIGV4dHJhY3QganVzdCBkYXRhIHdoZXJlIHRpbWUgKHFjaW5kZXg9MSksIGxhdGl0dWRlIChxY2luZGV4PTIpLCBsb25naXR1ZGUgKHFjaW5kZXg9MyksIGFuZCBhaXJUZW1wZXJhdHVyZSAocWNpbmRleD0xMikgYXJlICdnb29kJyBkYXRhLCBpbmNsdWRlIHRoaXMgY29uc3RyYWludCBpbiB5b3VyIEVSRERBUCBxdWVyeTpcbiBmbGFnPX5cIlpaWi4uLi4uLi4uWi4qXCJcbmluIHlvdXIgcXVlcnkuXG4nPX4nIGluZGljYXRlcyB0aGlzIGlzIGEgcmVndWxhciBleHByZXNzaW9uIGNvbnN0cmFpbnQuXG5UaGUgJ1oncyBhcmUgbGl0ZXJhbCBjaGFyYWN0ZXJzLiAgSW4gdGhpcyBkYXRhc2V0LCAnWicgaW5kaWNhdGVzICdnb29kJyBkYXRhLlxuVGhlICcuJ3Mgc2F5IHRvIG1hdGNoIGFueSBjaGFyYWN0ZXIuXG5UaGUgJyonIHNheXMgdG8gbWF0Y2ggdGhlIHByZXZpb3VzIGNoYXJhY3RlciAwIG9yIG1vcmUgdGltZXMuXG4oRG9uJ3QgaW5jbHVkZSBiYWNrc2xhc2hlcyBpbiB5b3VyIHF1ZXJ5LilcblNlZSB0aGUgdHV0b3JpYWwgZm9yIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYXRcbmh0dHA6Ly93d3cudm9nZWxsYS5jb20vdHV0b3JpYWxzL0phdmFSZWd1bGFyRXhwcmVzc2lvbnMvYXJ0aWNsZS5odG1sXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxuY3J1aXNlX2lkXG5leHBvY29kZVxuZmFjaWxpdHlcbklEXG5JTU9cbnBsYXRmb3JtXG5wbGF0Zm9ybV92ZXJzaW9uXG5zaXRlXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbi4uLiAoMTcgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZnN1UmVzZWFyY2hTaGlwS1REUW5ydF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZnN1UmVzZWFyY2hTaGlwS1REUW5ydF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9mc3VSZXNlYXJjaFNoaXBLVERRbnJ0L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9zYW1vcy5jb2Fwcy5mc3UuZWR1L2h0bWwvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2ZzdVJlc2VhcmNoU2hpcEtURFFucnQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWZzdVJlc2VhcmNoU2hpcEtURFFucnQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiRlNVIiwgImZzdVJlc2VhcmNoU2hpcEtURFFucnQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1UmVzZWFyY2hTaGlwWk1GUm5ydC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZnN1UmVzZWFyY2hTaGlwWk1GUm5ydCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9mc3VSZXNlYXJjaFNoaXBaTUZSbnJ0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlJlc2VhcmNoIFNoaXAgVGFuZ2Fyb2EgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSwgUXVhbGl0eSBDb250cm9sbGVkIiwgIlJlc2VhcmNoIFNoaXAgVGFuZ2Fyb2EgVW5kZXJ3YXkgTWV0ZW9yb2xvZ2ljYWwgRGF0YSAoZGVsYXllZCB+MTAgZGF5cyBmb3IgcXVhbGl0eSBjb250cm9sKSBhcmUgZnJvbSB0aGUgU2hpcGJvYXJkIEF1dG9tYXRlZCBNZXRlb3JvbG9naWNhbCBhbmQgT2NlYW5vZ3JhcGhpYyBTeXN0ZW0gKFNBTU9TKSBwcm9ncmFtLlxuXG5JTVBPUlRBTlQ6IEFMV0FZUyBVU0UgVEhFIFFVQUxJVFkgRkxBRyBEQVRBISBFYWNoIGRhdGEgdmFyaWFibGUncyBtZXRhZGF0YSBpbmNsdWRlcyBhIHFjaW5kZXggYXR0cmlidXRlIHdoaWNoIGluZGljYXRlcyBhIGNoYXJhY3RlciBudW1iZXIgaW4gdGhlIGZsYWcgZGF0YS4gIEFMV0FZUyBjaGVjayB0aGUgZmxhZyBkYXRhIGZvciBlYWNoIHJvdyBvZiBkYXRhIHRvIHNlZSB3aGljaCBkYXRhIGlzIGdvb2QgKGZsYWc9J1onKSBhbmQgd2hpY2ggZGF0YSBpc24ndC4gIEZvciBleGFtcGxlLCB0byBleHRyYWN0IGp1c3QgZGF0YSB3aGVyZSB0aW1lIChxY2luZGV4PTEpLCBsYXRpdHVkZSAocWNpbmRleD0yKSwgbG9uZ2l0dWRlIChxY2luZGV4PTMpLCBhbmQgYWlyVGVtcGVyYXR1cmUgKHFjaW5kZXg9MTIpIGFyZSAnZ29vZCcgZGF0YSwgaW5jbHVkZSB0aGlzIGNvbnN0cmFpbnQgaW4geW91ciBFUkREQVAgcXVlcnk6XG4gZmxhZz1+XCJaWlouLi4uLi4uLlouKlwiXG5pbiB5b3VyIHF1ZXJ5LlxuJz1+JyBpbmRpY2F0ZXMgdGhpcyBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBjb25zdHJhaW50LlxuVGhlICdaJ3MgYXJlIGxpdGVyYWwgY2hhcmFjdGVycy4gIEluIHRoaXMgZGF0YXNldCwgJ1onIGluZGljYXRlcyAnZ29vZCcgZGF0YS5cblRoZSAnLidzIHNheSB0byBtYXRjaCBhbnkgY2hhcmFjdGVyLlxuVGhlICcqJyBzYXlzIHRvIG1hdGNoIHRoZSBwcmV2aW91cyBjaGFyYWN0ZXIgMCBvciBtb3JlIHRpbWVzLlxuKERvbid0IGluY2x1ZGUgYmFja3NsYXNoZXMgaW4geW91ciBxdWVyeS4pXG5TZWUgdGhlIHR1dG9yaWFsIGZvciByZWd1bGFyIGV4cHJlc3Npb25zIGF0XG5odHRwOi8vd3d3LnZvZ2VsbGEuY29tL3R1dG9yaWFscy9KYXZhUmVndWxhckV4cHJlc3Npb25zL2FydGljbGUuaHRtbFxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbmNydWlzZV9pZFxuZXhwb2NvZGVcbmZhY2lsaXR5XG5JRFxuSU1PXG5wbGF0Zm9ybVxucGxhdGZvcm1fdmVyc2lvblxuc2l0ZVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG4uLi4gKDE3IG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2ZzdVJlc2VhcmNoU2hpcFpNRlJucnRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2ZzdVJlc2VhcmNoU2hpcFpNRlJucnRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZnN1UmVzZWFyY2hTaGlwWk1GUm5ydC9pbmRleC5qc29uIiwgImh0dHBzOi8vc2Ftb3MuY29hcHMuZnN1LmVkdS9odG1sLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9mc3VSZXNlYXJjaFNoaXBaTUZSbnJ0LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1mc3VSZXNlYXJjaFNoaXBaTUZSbnJ0JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIkZTVSIsICJmc3VSZXNlYXJjaFNoaXBaTUZSbnJ0Il0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL0ZFRF9Sb2NrZmlzaF9DYXRjaC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvRkVEX1JvY2tmaXNoX0NhdGNoIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL0ZFRF9Sb2NrZmlzaF9DYXRjaC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJSb2NrZmlzaCBSZWNydWl0bWVudCBhbmQgRWNvc3lzdGVtIEFzc2Vzc21lbnQgU3VydmV5LCBDYXRjaCBEYXRhIiwgIlRoZSBGaXNoZXJpZXMgRWNvbG9neSBEaXZpc2lvbiAoRkVELCBodHRwczovL3N3ZnNjLm5vYWEuZ292L0dyb3VuZGZpc2hBbmFseXNpcy8pIG9mIHRoZSBTb3V0aHdlc3QgRmlzaGVyaWVzIFNjaWVuY2UgQ2VudGVyIChTV0ZTQykgaGFzIGNvbmR1Y3RlZCBhIG1pZHdhdGVyIHRyYXdsIHN1cnZleSBvZmYgY2VudHJhbCBDYWxpZm9ybmlhIHNpbmNlIDE5ODMgd2l0aCB0aGUgcHJpbWFyeSBnb2FsIG9mIGRldmVsb3BpbmcgcHJlLXJlY3J1aXQgaW5kaWNlcyBmb3IgeW91bmctb2YtdGhlLXllYXIgKFlPWSkgcm9ja2Zpc2ggKFNlYmFzdGVzIHNwcC4pLiBUaGUgc3VydmV5IGFsc28gc2FtcGxlcyBudW1lcm91cyBvdGhlciBjb21wb25lbnRzIG9mIHRoZSBlcGlwZWxhZ2ljIG1pY3JvbmVrdG9uLCBpbmNsdWRpbmcgb3RoZXIgWU9ZIGdyb3VuZGZpc2ggKHN1Y2ggYXMgUGFjaWZpYyBoYWtlLCBNZXJsdWNjaXVzIHByb2R1Y3R1cywgYW5kIHNhbmRkYWIsIENpdGhhcmljaHRoeXMgc3BwICksIGNvYXN0YWwgcGVsYWdpYyBmaXNoZXMgKHN1Y2ggYXMgUGFjaWZpYyBzYXJkaW5lLCBTYXJkaW5vcHMgc2FnYXgsIGFuZCBub3J0aGVybiBhbmNob3Z5LCBFbmdyYXVsaXMgbW9yZGF4KSBhbmQgb3RoZXIgZm9yYWdlIHNwZWNpZXMuICBBZGRpdGlvbmFsIGRldGFpbHMgcmVnYXJkaW5nIHRoZSBzdXJ2ZXkgbWV0aG9kcyBhbmQgcmVzdWx0cyBhcmUgZGVzY3JpYmVkIGluIFJhbHN0b24gZXQgYWwuICgyMDE1KSBhbmQgU2FrdW1hIGV0IGFsLiAoaHR0cDovL2NhbGNvZmkub3JnL3B1YmxpY2F0aW9ucy9jYWxjb2ZpcmVwb3J0cy92NTcvVm9sNTctU2FrdW1hX3BhZ2VzLjE2My0xODMucGRmKS4gUmFsc3RvbiwgUy4sIEouQy4gRmllbGQgYW5kIEsuUy4gU2FrdW1hLiAyMDE1LiBMb25ndGVybSB2YXJpYXRpb24gaW4gYSBjZW50cmFsIENhbGlmb3JuaWEgcGVsYWdpYyBmb3JhZ2UgYXNzZW1ibGFnZS4gSm91cm5hbCBvZiBNYXJpbmUgU3lzdGVtcyAxNDY6IDI2LTM3LiBodHRwczovL2R4LmRvaS5vcmcvMTAuMTAxNi9qLmptYXJzeXMuMjAxNC4wNi4wMTMuIFNha3VtYSwgSy5NLiwgSi5DLiBGaWVsZCwgQi5CLiBNYXJpbm92aWMsIEMuTi4gQ2FycmlvbiwgTi5KLiBNYW50dWEgYW5kIFMuIFJhbHN0b24uIEluIHJldmlzaW9uLiBBbm9tYWxvdXMgZXBpcGVsYWdpYyBtaWNyb25la3RvbiBhc3NlbWJsYWdlIHBhdHRlcm5zIGluIHRoZSBuZXJpdGljIHdhdGVycyBvZiB0aGUgQ2FsaWZvcm5pYSBDdXJyZW50IGluIHNwcmluZyAyMDE1IGR1cmluZyBhIHBlcmlvZCBvZiBleHRyZW1lIG9jZWFuIGNvbmRpdGlvbnMuIENhbENPRkkgUmVwb3J0cy5cblxuY2RtX2RhdGFfdHlwZSA9IFBvaW50XG5WQVJJQUJMRVM6XG50aW1lIChOZXQtaW4gdGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxhdGl0dWRlIChOZXQtaW4gTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKE5ldC1pbiBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmNydWlzZVxuaGF1bF9ubyAoSGF1bCBOdW1iZXIpXG52ZXNzZWxcbnN0YXRpb24gKFN0YXRpb24gTnVtYmVyKVxuY2F0Y2hcbnNwZWNpZXNfY29kZVxuY29tbW9uX25hbWVcbnNjaV9uYW1lIChTY2llbnRpZmljIG5hbWUpXG5zcGVjaWVzX2dyb3VwXG5tYXR1cml0eVxuc3BlY2llc19ub3Rlc1xuLi4uICgxNCBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9GRURfUm9ja2Zpc2hfQ2F0Y2hfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL0ZFRF9Sb2NrZmlzaF9DYXRjaF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9GRURfUm9ja2Zpc2hfQ2F0Y2gvaW5kZXguanNvbiIsICJodHRwOi8vY2FsY29maS5vcmcvcHVibGljYXRpb25zL2NhbGNvZmlyZXBvcnRzL3Y1Ny9Wb2w1Ny1TYWt1bWFfcGFnZXMuMTYzLTE4My5wZGYiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvRkVEX1JvY2tmaXNoX0NhdGNoLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1GRURfUm9ja2Zpc2hfQ2F0Y2gmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBOTUZTIFNXRlNDIEZFRCIsICJGRURfUm9ja2Zpc2hfQ2F0Y2giXSwKICAgICAgWyIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3J0Y2N0ZENNQXlzaSIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ydGNjdGRDTUF5c2kuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiUlRDIENhcnFpbmV6IFlTSSBBcmNoaXZlZCBkYXRhIiwgIkFyY2hpdmVkIENNQSBkYXRhIC0gdW5lZGl0ZWQgdmFyaWFibGUgbmFtZXNcblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG50ZW1wZXJhdHVyZSAoV2F0ZXIgVGVtcGVyYXR1cmUsIGRlZ3JlZXMgQylcbnNwY29uZCAodVMvY20pXG5jb25kICh1Uy9jbSlcbnJlc2lzdCAoT2htKmNtKVxuVERTIChnL0wpXG5zYWxpbml0eSAocHB0KVxucHJlc3N1cmUgKHBzaXIpXG5kZXB0aCAobSlcbnBoXG5waG12IChwSCwgbVYpXG5jaGwgKHVnL0wpXG5jaGxyZnUgKGNobCwgUkZVKVxudHVyYmlkIChUdXJiaWQrLCBOVFUpXG5vZG9zYXQgKCUpXG5vZG8gKG1nL0wpXG5iYXR0IChiYXR0ZXJ5LCB2b2x0cylcbnN0YXRpb25faWRcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcnRjY3RkQ01BeXNpX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9ydGNjdGRDTUF5c2lfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcnRjY3RkQ01BeXNpL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9zZmJlYW1zLnNmc3UuZWR1LyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9ydGNjdGRDTUF5c2kucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXJ0Y2N0ZENNQXlzaSZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJSVEMiLCAicnRjY3RkQ01BeXNpIl0sCiAgICAgIFsiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ydGNjdGRDTUF5c2lydCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ydGNjdGRDTUF5c2lydC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJSVEMgQ2FycWluZXogWVNJIFJhdyBkYXRhIiwgIlRlc3Qgb2YgaW5zdGFsbGluZyBFUkREQVAgb24gdG9wIG9mIFlTSSBvdXRwdXQuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxudGVtcGVyYXR1cmUgKFdhdGVyIFRlbXBlcmF0dXJlLCBkZWdyZWVzIEMpXG5zcGNvbmQgKHVTL2NtKVxuY29uZCAodVMvY20pXG5yZXNpc3QgKE9obSpjbSlcblREUyAoZy9MKVxuc2FsaW5pdHkgKHBwdClcbnByZXNzdXJlIChwc2lyKVxuZGVwdGggKG0pXG5waFxucGhtdiAocEgsIG1WKVxuY2hsICh1Zy9MKVxuY2hscmZ1IChjaGwsIFJGVSlcbnR1cmJpZCAoVHVyYmlkKywgTlRVKVxub2Rvc2F0ICglKVxub2RvIChtZy9MKVxuYmF0dCAoYmF0dGVyeSwgdm9sdHMpXG5zdGF0aW9uX2lkXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3J0Y2N0ZENNQXlzaXJ0X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9ydGNjdGRDTUF5c2lydF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9ydGNjdGRDTUF5c2lydC9pbmRleC5qc29uIiwgImh0dHBzOi8vc2ZiZWFtcy5zZnN1LmVkdS8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcnRjY3RkQ01BeXNpcnQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXJ0Y2N0ZENNQXlzaXJ0JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIlJUQyIsICJydGNjdGRDTUF5c2lydCJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcnRjbWV0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3J0Y21ldC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJSVEMgTWV0U3RhdGlvbiBBcmNoaXZlZCBkYXRhIiwgIkFyY2hpdmVkIFJUQyBNZXQgZGF0YSAtIHVuZWRpdGVkIHZhcmlhYmxlIG5hbWVzXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuQWlyVF9BVkcgKEFpciBUZW1wZXJhdHVyZSwgZGVncmVlcyBDKVxuUkggKFJlbGF0aXZlIEh1bWlkaXR5LCAlKVxuQlBfQVZHIChCYXJvbWV0cmljIFByZXNzdXJlLCBtYmFyKVxuU2xyV19BVkcgKHdhdHRzIHMtMW0tMilcblBBUl9EZW5fQVZHIChcdTAwYzJcdTAwYjVtb2wgcy0xbS0yKVxuUmFpbl9UT1QgKG1tKVxuV1NfU19XVlQgKG0vcylcbldTX1VfV1ZUIChtL3MpXG5XaW5kRGlyX0RVX1dWVCAoZGVnKVxuV2luZERpcl9TRFVfV1ZUIChkZWcpXG5XU19NQVggKG0vcylcblBBUl9EZW5fMl9BVkcgKFx1MDBjMlx1MDBiNW1vbCBzLTFtLTIpXG5zdGF0aW9uX2lkXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3J0Y21ldF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcnRjbWV0X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3J0Y21ldC9pbmRleC5qc29uIiwgImh0dHBzOi8vc2ZiZWFtcy5zZnN1LmVkdS8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcnRjbWV0LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1ydGNtZXQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiUlRDIiwgInJ0Y21ldCJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcnRjbWV0cnQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcnRjbWV0cnQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiUlRDIE1ldFN0YXRpb24gcmVhbCB0aW1lIGRhdGEiLCAiUmVhbCBUaW1lIFJUQyBNZXQgZGF0YSAtIHVuZWRpdGVkIHZhcmlhYmxlIG5hbWVzXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuQWlyVF9BVkcgKEFpciBUZW1wZXJhdHVyZSwgZGVncmVlcyBDKVxuUkggKFJlbGF0aXZlIEh1bWlkaXR5LCAlKVxuQlBfQVZHIChCYXJvbWV0cmljIFByZXNzdXJlLCBtYmFyKVxuU2xyV19BVkcgKHdhdHRzIHMtMW0tMilcblBBUl9EZW5fQVZHIChcdTAwYjVtb2wgcy0xbS0yKVxuUmFpbl9UT1QgKG1tKVxuV1NfU19XVlQgKG0vcylcbldTX1VfV1ZUIChtL3MpXG5XaW5kRGlyX0RVX1dWVCAoZGVnKVxuV2luZERpcl9TRFVfV1ZUIChkZWcpXG5XU19NQVggKG0vcylcbnN0YXRpb25faWRcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcnRjbWV0cnRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3J0Y21ldHJ0X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3J0Y21ldHJ0L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9zZmJlYW1zLnNmc3UuZWR1LyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9ydGNtZXRydC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cnRjbWV0cnQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiUlRDIiwgInJ0Y21ldHJ0Il0sCiAgICAgIFsiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ydGNjdGRTZWFiaXJkIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3J0Y2N0ZFNlYWJpcmQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiUlRDIFNlYWJpcmQgQXJjaGl2ZWQgZGF0YSIsICJBcmNoaXZlZCBSVEMgU2VhYmlyZCBkYXRhIC0gdW5lZGl0ZWQgdmFyaWFibGUgbmFtZXNcblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG50ZW1wZXJhdHVyZSAoV2F0ZXIgVGVtcGVyYXR1cmUsIGRlZ3JlZXMgQylcbmNvbmQgKHVTL2NtKVxucHJlc3N1cmUgKHBzaXIpXG5za3VmYTEgKFYpXG5za3VmYTIgKFYpXG54bWlzICglKVxucGFyIChtaWNyb01vbCptLTIqcy0xKVxuc2FsaW5pdHkgKHBzcylcbnNpZ21hIChrZy9tMylcbmluc3RfU04gKEluc3RydW1lbnQgU2VyaWFsIE51bWJlcilcbnN0YXRpb25faWRcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcnRjY3RkU2VhYmlyZF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcnRjY3RkU2VhYmlyZF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9ydGNjdGRTZWFiaXJkL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9zZmJlYW1zLnNmc3UuZWR1LyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9ydGNjdGRTZWFiaXJkLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1ydGNjdGRTZWFiaXJkJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIlJUQyIsICJydGNjdGRTZWFiaXJkIl0sCiAgICAgIFsiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ydGNjdGRSVEN5c2kiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcnRjY3RkUlRDeXNpLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlJUQyBZU0kgQXJjaGl2ZWQgZGF0YSIsICJBcmNoaXZlZCBSVEMgZGF0YSAtIHVuZWRpdGVkIHZhcmlhYmxlIG5hbWVzXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxudGVtcGVyYXR1cmUgKFdhdGVyIFRlbXBlcmF0dXJlLCBkZWdyZWVzIEMpXG5zcGNvbmQgKHVTL2NtKVxuY29uZCAodVMvY20pXG5yZXNpc3QgKE9obSpjbSlcblREUyAoZy9MKVxuc2FsaW5pdHkgKHBwdClcbnByZXNzdXJlIChwc2lyKVxuZGVwdGggKG0pXG5waFxucGhtdiAocEgsIG1WKVxuY2hsICh1Zy9MKVxuY2hscmZ1IChjaGwsIFJGVSlcbnR1cmJpZCAoVHVyYmlkKywgTlRVKVxub2Rvc2F0ICglKVxub2RvIChtZy9MKVxuYmF0dCAoYmF0dGVyeSwgdm9sdHMpXG5zdGF0aW9uX2lkXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3J0Y2N0ZFJUQ3lzaV9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcnRjY3RkUlRDeXNpX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3J0Y2N0ZFJUQ3lzaS9pbmRleC5qc29uIiwgImh0dHBzOi8vc2ZiZWFtcy5zZnN1LmVkdS8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcnRjY3RkUlRDeXNpLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1ydGNjdGRSVEN5c2kmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiUlRDIiwgInJ0Y2N0ZFJUQ3lzaSJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcnRjY3RkUlRDeXNpcnQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcnRjY3RkUlRDeXNpcnQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiUlRDIFlTSSBSYXcgZGF0YSIsICJUZXN0IG9mIGluc3RhbGxpbmcgRVJEREFQIG9uIHRvcCBvZiBZU0kgb3V0cHV0LlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnRlbXBlcmF0dXJlIChXYXRlciBUZW1wZXJhdHVyZSwgZGVncmVlcyBDKVxuc3Bjb25kICh1Uy9jbSlcbmNvbmQgKHVTL2NtKVxucmVzaXN0IChPaG0qY20pXG5URFMgKGcvTClcbnNhbGluaXR5IChwcHQpXG5wcmVzc3VyZSAocHNpcilcbmRlcHRoIChtKVxucGhcbnBobXYgKHBILCBtVilcbmNobCAodWcvTClcbmNobHJmdSAoY2hsLCBSRlUpXG50dXJiaWQgKFR1cmJpZCssIE5UVSlcbm9kb3NhdCAoJSlcbm9kbyAobWcvTClcbmJhdHQgKGJhdHRlcnksIHZvbHRzKVxuc3RhdGlvbl9pZFxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9ydGNjdGRSVEN5c2lydF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcnRjY3RkUlRDeXNpcnRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcnRjY3RkUlRDeXNpcnQvaW5kZXguanNvbiIsICJodHRwczovL3NmYmVhbXMuc2ZzdS5lZHUvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3J0Y2N0ZFJUQ3lzaXJ0LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1ydGNjdGRSVEN5c2lydCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJSVEMiLCAicnRjY3RkUlRDeXNpcnQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZ29tb29zQnVveS5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZ29tb29zQnVveSIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9nb21vb3NCdW95LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlNlbnNvciBEYXRhIGZyb20gdGhlIEdvTU9PUyBTT1MgU2VydmVyLCAyMDAwLXByZXNlbnQiLCAiVGhlIE9DRUFOUyBJRSAtLSBmb3JtYWxseSBhcHByb3ZlZCBhcyBhbiBPR0MgSW50ZXJvcGVyYWJpbGl0eVxuRXhwZXJpbWVudCBpbiBEZWNlbWJlciAyMDA2IC0tIGVuZ2FnZXMgZGF0YSBtYW5hZ2VycyBhbmQgc2NpZW50aXN0c1xuaW4gdGhlIE9jZWFuLU9ic2VydmluZyBjb21tdW5pdHkgdG8gYWR2YW5jZSB0aGVpciB1bmRlcnN0YW5kaW5nIGFuZFxuYXBwbGljYXRpb24gb2YgdmFyaW91cyBPR0Mgc3BlY2lmaWNhdGlvbnMsIHNvbGlkaWZ5IGRlbW9uc3RyYXRpb25zXG5mb3IgT2NlYW4gU2NpZW5jZSBhcHBsaWNhdGlvbiBhcmVhcywgaGFyZGVuIHNvZnR3YXJlXG5pbXBsZW1lbnRhdGlvbnMsIGFuZCBwcm9kdWNlIGNhbmRpZGF0ZSBPR0MgQmVzdCBQcmFjdGljZXMgZG9jdW1lbnRzXG50aGF0IGNhbiBiZSB1c2VkIHRvIGluZm9ybSB0aGUgYnJvYWRlciBvY2Vhbi1vYnNlcnZpbmcgY29tbXVuaXR5LlxuXG5CZWNhdXNlIG9mIHRoZSBuYXR1cmUgb2YgU09TIHJlcXVlc3RzLCByZXF1ZXN0cyBmb3IgZGF0YSBNVVNUXG5pbmNsdWRlIGNvbnN0cmFpbnRzIGZvciB0aGUgbG9uZ2l0dWRlLCBsYXRpdHVkZSwgdGltZSwgYW5kL29yXG5zdGF0aW9uX2lkIHZhcmlhYmxlcy5cblxuSW5pdGlhdG9yczogU1VSQSAobGVhZCksIFRleGFzIEEmTSBVbml2ZXJzaXR5LCBNQkFSSSwgR29NT09TIGFuZFxuVW5pZGF0YS5cblxuU3BlY2lmaWMgZ29hbHM6XG4qIENvbXBhcmUgU2Vuc29yIE9ic2VydmF0aW9uIFNlcnZpY2UgKFNPUykgZnJvbSB0aGUgT0dDJ3MgU2Vuc29yXG4gIFdlYiBFbmFibGVtZW50IChTV0UpIGluaXRpYXRpdmUgdG8gdGhlIFdlYiBGZWF0dXJlIFNlcnZpY2UgKFdGUylcbiAgYXMgYXBwbGllZCB0byBvY2VhbiBkYXRhIGluIGEgdmFyaWV0eSBvZiBkYXRhIGZvcm1hdHMgaW5jbHVkaW5nXG4gIHRleHQgZmlsZXMsIG5ldENERiBmaWxlcywgcmVsYXRpb25hbCBkYXRhYmFzZXMsIGFuZCBwb3NzaWJseVxuICBuYXRpdmUgc2Vuc29yIG91dHB1dDsgKHNlZSBFeHBlcmltZW50ICMxIGZvciBkZXRhaWxzKVxuKiBNYWtlIHVzZSBvZiBzZW1hbnRpYyBtZWRpYXRpb24gdmlhIFNlbWFudGljIFdlYiB0ZWNobm9sb2dpZXMgdG9cbiAgYWxsb3cgcGx1cmFsaXR5IG9mIGlkZW50aWZpY2F0aW9uIGZvciBzb3VyY2UgdHlwZXMgKHBsYXRmb3Jtc1xuICBhbmQgc2Vuc29ycykgYW5kIHBoZW5vbWVuYSB0eXBlcztcbiogVGVzdCBhZ2dyZWdhdGlvbiBzZXJ2aWNlcyBhbmQgY2FjaGluZyBzdHJhdGVnaWVzIHRvIHByb3ZpZGVcbiAgZWZmaWNpZW50IHF1ZXJpZXM7XG4qIEV4cGxvcmUgcG9zc2libGUgZW5oYW5jZW1lbnRzIG9mIFRIUkVERFMgc2VydmVyLCBzbyB0aGF0IFRIUkVERFNcbiAgcmVzaWRlbnQgZGF0YSBzb3VyY2VzIG1pZ2h0IGJlIG1hZGUgYXZhaWxhYmxlIHZpYSBTT1Mgb3IgV0ZTO1xuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG4uLi4gKDE5IG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2dvbW9vc0J1b3lfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2dvbW9vc0J1b3lfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZ29tb29zQnVveS9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cub2djbmV0d29yay5uZXQvbm9kZS8zNDQiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZ29tb29zQnVveS5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9Z29tb29zQnVveSZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJHb01PT1MiLCAiZ29tb29zQnVveSJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9uZXJhY29vc1Nvcy5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbmVyYWNvb3NTb3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbmVyYWNvb3NTb3MuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiU2Vuc29yIERhdGEgZnJvbSB0aGUgTkVSQUNPT1MgU09TIFNlcnZlciwgMjAwMC1wcmVzZW50IiwgIk5vcnRoZWFzdGVybiBSZWdpb25hbCBBc3NvY2lhdGlvbiBvZiBDb2FzdGFsIE9jZWFuXG4gICAgICAgIE9ic2VydmluZyBTeXN0ZW1zIChORVJBQ09PUykgU2Vuc29yIE9ic2VydmF0aW9uIFNlcnZpY2UgKFNPUylcbiAgICAgICAgVGhlIE9DRUFOUyBJRSAtLSBmb3JtYWxseSBhcHByb3ZlZCBhcyBhbiBPR0MgSW50ZXJvcGVyYWJpbGl0eVxuRXhwZXJpbWVudCBpbiBEZWNlbWJlciAyMDA2IC0tIGVuZ2FnZXMgZGF0YSBtYW5hZ2VycyBhbmQgc2NpZW50aXN0c1xuaW4gdGhlIE9jZWFuLU9ic2VydmluZyBjb21tdW5pdHkgdG8gYWR2YW5jZSB0aGVpciB1bmRlcnN0YW5kaW5nIGFuZFxuYXBwbGljYXRpb24gb2YgdmFyaW91cyBPR0Mgc3BlY2lmaWNhdGlvbnMsIHNvbGlkaWZ5IGRlbW9uc3RyYXRpb25zXG5mb3IgT2NlYW4gU2NpZW5jZSBhcHBsaWNhdGlvbiBhcmVhcywgaGFyZGVuIHNvZnR3YXJlXG5pbXBsZW1lbnRhdGlvbnMsIGFuZCBwcm9kdWNlIGNhbmRpZGF0ZSBPR0MgQmVzdCBQcmFjdGljZXMgZG9jdW1lbnRzXG50aGF0IGNhbiBiZSB1c2VkIHRvIGluZm9ybSB0aGUgYnJvYWRlciBvY2Vhbi1vYnNlcnZpbmcgY29tbXVuaXR5LlxuXG5CZWNhdXNlIG9mIHRoZSBuYXR1cmUgb2YgU09TIHJlcXVlc3RzLCByZXF1ZXN0cyBmb3IgZGF0YSBNVVNUXG5pbmNsdWRlIGNvbnN0cmFpbnRzIGZvciB0aGUgbG9uZ2l0dWRlLCBsYXRpdHVkZSwgdGltZSwgYW5kL29yXG5zdGF0aW9uX2lkIHZhcmlhYmxlcy5cblxuSW5pdGlhdG9yczogU1VSQSAobGVhZCksIFRleGFzIEEmTSBVbml2ZXJzaXR5LCBNQkFSSSwgR29NT09TIGFuZFxuVW5pZGF0YS5cblxuU3BlY2lmaWMgZ29hbHM6XG4qIENvbXBhcmUgU2Vuc29yIE9ic2VydmF0aW9uIFNlcnZpY2UgKFNPUykgZnJvbSB0aGUgT0dDJ3MgU2Vuc29yXG4gIFdlYiBFbmFibGVtZW50IChTV0UpIGluaXRpYXRpdmUgdG8gdGhlIFdlYiBGZWF0dXJlIFNlcnZpY2UgKFdGUylcbiAgYXMgYXBwbGllZCB0byBvY2VhbiBkYXRhIGluIGEgdmFyaWV0eSBvZiBkYXRhIGZvcm1hdHMgaW5jbHVkaW5nXG4gIHRleHQgZmlsZXMsIG5ldENERiBmaWxlcywgcmVsYXRpb25hbCBkYXRhYmFzZXMsIGFuZCBwb3NzaWJseVxuICBuYXRpdmUgc2Vuc29yIG91dHB1dDsgKHNlZSBFeHBlcmltZW50ICMxIGZvciBkZXRhaWxzKVxuKiBNYWtlIHVzZSBvZiBzZW1hbnRpYyBtZWRpYXRpb24gdmlhIFNlbWFudGljIFdlYiB0ZWNobm9sb2dpZXMgdG9cbiAgYWxsb3cgcGx1cmFsaXR5IG9mIGlkZW50aWZpY2F0aW9uIGZvciBzb3VyY2UgdHlwZXMgKHBsYXRmb3Jtc1xuICBhbmQgc2Vuc29ycykgYW5kIHBoZW5vbWVuYSB0eXBlcztcbiogVGVzdCBhZ2dyZWdhdGlvbiBzZXJ2aWNlcyBhbmQgY2FjaGluZyBzdHJhdGVnaWVzIHRvIHByb3ZpZGVcbiAgZWZmaWNpZW50IHF1ZXJpZXM7XG4qIEV4cGxvcmUgcG9zc2libGUgZW5oYW5jZW1lbnRzIG9mIFRIUkVERFMgc2VydmVyLCBzbyB0aGF0IFRIUkVERFNcbiAgcmVzaWRlbnQgZGF0YSBzb3VyY2VzIG1pZ2h0IGJlIG1hZGUgYXZhaWxhYmxlIHZpYSBTT1Mgb3IgV0ZTO1xuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG4uLi4gKDE5IG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL25lcmFjb29zU29zX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9uZXJhY29vc1Nvc19pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9uZXJhY29vc1Nvcy9pbmRleC5qc29uIiwgImh0dHA6Ly93d3cubmVyYWNvb3Mub3JnLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9uZXJhY29vc1Nvcy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9bmVyYWNvb3NTb3Mmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTkVSQUNPT1MiLCAibmVyYWNvb3NTb3MiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkRmVkUm9ja2Zpc2hDdGQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZEZlZFJvY2tmaXNoQ3RkIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZEZlZFJvY2tmaXNoQ3RkLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlNXRlNDIEZFRCBNaWQgV2F0ZXIgVHJhd2wgSnV2ZW5pbGUgUm9ja2Zpc2ggU3VydmV5LCBDVEQgRGF0YSwgMTk4Ny0yMDE1IiwgIlNXRlNDIEZFRCBNaWQgV2F0ZXIgVHJhd2wgSnV2ZW5pbGUgUm9ja2Zpc2ggU3VydmV5OiBDVEQgRGF0YS5cblN1cnZleXMgaGF2ZSBiZWVuIGNvbmR1Y3RlZCBhbG9uZyB0aGUgY2VudHJhbCBDYWxpZm9ybmlhIGNvYXN0IGluIE1heS9KdW5lIFxuZXZlcnkgeWVhciBzaW5jZSAxOTgzLiBJbiAyMDA0IHRoZSBzdXJ2ZXkgYXJlYSB3YXMgZXhwYW5kZWQgdG8gY292ZXIgdGhlIFxuZW50aXJlIGNvYXN0IGZyb20gU2FuIERpZWdvIHRvIENhcGUgTWVuZG9jaW5vLiAgVGhlIHN1cnZleSBzYW1wbGVzIGEgc2VyaWVzIFxub2YgZml4ZWQgdHJhd2wgc3RhdGlvbnMgdXNpbmcgYSBtaWR3YXRlciB0cmF3bC4gVGhlIG1pZHdhdGVyIHRyYXdsIHN1cnZleSBcbmdlYXIgY2FwdHVyZXMgc2lnbmlmaWNhbnQgbnVtYmVycyBvZiBhcHByb3hpbWF0ZWx5IDEwIHJvY2tmaXNoIHNwZWNpZXMgZHVyaW5nXG50aGVpciBwZWxhZ2ljIGp1dmVuaWxlIHN0YWdlIChpLmUuLCA1MC0xNTAgZGF5cyBvbGQpLCBieSB3aGljaCB0aW1lIGFubnVhbFxucmVwcm9kdWN0aXZlIHN1Y2Nlc3MgaGFzIGJlZW4gZXN0YWJsaXNoZWQuIENhdGNoLXBlci11bml0LWVmZm9ydCBkYXRhIGZyb21cbnRoZSBzdXJ2ZXkgYXJlIGFuYWx5emVkIGFuZCBzZXJ2ZSBhcyB0aGUgYmFzaXMgZm9yIHByZWRpY3RpbmcgZnV0dXJlIFxucmVjcnVpdG1lbnQgdG8gcm9ja2Zpc2ggZmlzaGVyaWVzLiBSZXN1bHRzIGZvciBzZXZlcmFsIHNwZWNpZXMgKGUuZy4sIFxuYm9jYWNjaW8sIGNoaWxpcGVwcGVyIFtTLiBnb29kZWldLCBhbmQgd2lkb3cgcm9ja2Zpc2ggW1MuIGVudG9tZWxhc10pIGhhdmVcbnNob3duIHRoYXQgdGhlIHN1cnZleSBkYXRhIGNhbiBiZSB1c2VmdWwgaW4gcHJlZGljdGluZyB5ZWFyLWNsYXNzIHN0cmVuZ3RoXG5pbiBhZ2UtYmFzZWQgc3RvY2sgYXNzZXNzbWVudHMuXG5cblRoZSBzdXJ2ZXkncyBkYXRhIG9uIFlPWSBQYWNpZmljIHdoaXRpbmcgaGFzIGFsc28gYmVlbiB1c2VkIGluIHRoZSBzdG9ja1xuYXNzZXNzbWVudCBwcm9jZXNzLiBUbyBhc3Npc3QgaW4gb2J0YWluaW5nIGFkZGl0aW9uYWwgbm9ydGh3YXJkIHNwYXRpYWxcbmNvdmVyYWdlIG9mIFlPWSBQYWNpZmljIHdoaXRpbmcgb2ZmIE9yZWdvbiBhbmQgV2FzaGluZ3RvbiwgaW4gMjAwMSB0aGVcblBhY2lmaWMgV2hpdGluZyBDb25zZXJ2YXRpb24gQ29vcGVyYXRpdmUgaW4gY29vcGVyYXRpb24gd2l0aCB0aGUgTk9BQSBOTUZTXG5Ob3J0aHdlc3QgRmlzaGVyaWVzIFNjaWVuY2UgQ2VudGVyIGJlZ2FuIGEgbWlkd2F0ZXIgdHJhd2wgc3VydmV5IHBhdHRlcm5lZFxuYWZ0ZXIgdGhlIE5PQUEgTk1GUyBTV0ZTQyBGaXNoZXJpZXMgRWNvbG9neSBEaXZpc2lvbidzIChGRUQpIGV4aXN0aW5nIHN1cnZleS4gXG5Cb3RoIHN1cnZleXMgd29yayBjb29wZXJhdGl2ZWx5IHRvZ2V0aGVyIGVhY2ggeWVhciBpbiBvcmRlciB0byByZXNvbHZlIFxuaW50ZXJhbm51YWwgYWJ1bmRhbmNlIHBhdHRlcm5zIG9mIFlPWSByb2NrZmlzaCBhbmQgUGFjaWZpYyB3aGl0aW5nIG9uIGEgXG5jb2FzdHdpZGUgYmFzaXMsIHdoaWNoIHByb3ZpZGVzIGV4cGVkaWVudCwgY3JpdGljYWwgaW5mb3JtYXRpb24gdGhhdCBjYW4gYmUgXG51c2VkIGluIHRoZSBmaXNoZXJpZXMgbWFuYWdlbWVudCBwcm9jZXNzLlxuXG5UaGUgbGFyZ2UgcXVhbnRpdHkgb2YgcGh5c2ljYWwgZGF0YSBjb2xsZWN0ZWQgZHVyaW5nIHRoZSBzdXJ2ZXlzIChlLmcuLCBDVERcbndpdGggYXR0YWNoZWQgdHJhbnNpbWlzc29tZXRlciBhbmQgZmx1b3JvbWV0ZXIsIHRoZXJtb3NhbGlub21ldGVyLCBhbmQgQURDUClcbmhhdmUgcHJvdmlkZWQgYSBiZXR0ZXIgdW5kZXJzdGFuZGluZyBvZiB0aGUgaHlkcm9ncmFwaGljIGNvbmRpdGlvbnMgb2ZmIHRoZVxuQ2FsaWZvcm5pYSBjb2FzdCBhbmQgYW5hbHlzaXMgb2YgdGhlc2UgZGF0YSBoYXZlIGJlZW4gZGlzdHJpYnV0ZWQgdGhyb3VnaCB0aGVcbnB1YmxpY2F0aW9uIG9mIE5PQUEgTk1GUyBUZWNobmljYWwgTWVtb3JhbmRhLlxuXG5Gb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIGh0dHBzOi8vc3dmc2Mubm9hYS5nb3YvR3JvdW5kZmlzaEFuYWx5c2lzLyBhbmRcbmh0dHA6Ly93d3cuc2FuY3R1YXJ5c2ltb24ub3JnL3Byb2plY3RzL3Byb2plY3RfaW5mby5waHA/cHJvamVjdElEPTEwMDExOFxuXG5jZG1fZGF0YV90eXBlID0gVHJhamVjdG9yeVByb2ZpbGVcblZBUklBQkxFUzpcbmNydWlzZVxuLi4uICgxNyBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9lcmRGZWRSb2NrZmlzaEN0ZF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkRmVkUm9ja2Zpc2hDdGRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkRmVkUm9ja2Zpc2hDdGQvaW5kZXguanNvbiIsICJodHRwczovL3N3ZnNjLm5vYWEuZ292L0dyb3VuZGZpc2hBbmFseXNpcy8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkRmVkUm9ja2Zpc2hDdGQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZEZlZFJvY2tmaXNoQ3RkJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgU1dGU0MgRkVEIiwgImVyZEZlZFJvY2tmaXNoQ3RkIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZEZlZFJvY2tmaXNoU3RhdGlvbi5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkRmVkUm9ja2Zpc2hTdGF0aW9uIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZEZlZFJvY2tmaXNoU3RhdGlvbi5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJTV0ZTQyBGRUQgTWlkIFdhdGVyIFRyYXdsIEp1dmVuaWxlIFJvY2tmaXNoIFN1cnZleSwgU3VyZmFjZSBEYXRhLCAxOTg3LTIwMTUiLCAiU1dGU0MgRkVEIE1pZCBXYXRlciBUcmF3bCBKdXZlbmlsZSBSb2NrZmlzaCBTdXJ2ZXk6IFN0YXRpb24gSW5mb3JtYXRpb24gYW5kIFN1cmZhY2UgRGF0YS5cblN1cnZleXMgaGF2ZSBiZWVuIGNvbmR1Y3RlZCBhbG9uZyB0aGUgY2VudHJhbCBDYWxpZm9ybmlhIGNvYXN0IGluIE1heS9KdW5lIFxuZXZlcnkgeWVhciBzaW5jZSAxOTgzLiBJbiAyMDA0IHRoZSBzdXJ2ZXkgYXJlYSB3YXMgZXhwYW5kZWQgdG8gY292ZXIgdGhlIFxuZW50aXJlIGNvYXN0IGZyb20gU2FuIERpZWdvIHRvIENhcGUgTWVuZG9jaW5vLiAgVGhlIHN1cnZleSBzYW1wbGVzIGEgc2VyaWVzIFxub2YgZml4ZWQgdHJhd2wgc3RhdGlvbnMgdXNpbmcgYSBtaWR3YXRlciB0cmF3bC4gVGhlIG1pZHdhdGVyIHRyYXdsIHN1cnZleSBcbmdlYXIgY2FwdHVyZXMgc2lnbmlmaWNhbnQgbnVtYmVycyBvZiBhcHByb3hpbWF0ZWx5IDEwIHJvY2tmaXNoIHNwZWNpZXMgZHVyaW5nXG50aGVpciBwZWxhZ2ljIGp1dmVuaWxlIHN0YWdlIChpLmUuLCA1MC0xNTAgZGF5cyBvbGQpLCBieSB3aGljaCB0aW1lIGFubnVhbFxucmVwcm9kdWN0aXZlIHN1Y2Nlc3MgaGFzIGJlZW4gZXN0YWJsaXNoZWQuIENhdGNoLXBlci11bml0LWVmZm9ydCBkYXRhIGZyb21cbnRoZSBzdXJ2ZXkgYXJlIGFuYWx5emVkIGFuZCBzZXJ2ZSBhcyB0aGUgYmFzaXMgZm9yIHByZWRpY3RpbmcgZnV0dXJlIFxucmVjcnVpdG1lbnQgdG8gcm9ja2Zpc2ggZmlzaGVyaWVzLiBSZXN1bHRzIGZvciBzZXZlcmFsIHNwZWNpZXMgKGUuZy4sIFxuYm9jYWNjaW8sIGNoaWxpcGVwcGVyIFtTLiBnb29kZWldLCBhbmQgd2lkb3cgcm9ja2Zpc2ggW1MuIGVudG9tZWxhc10pIGhhdmVcbnNob3duIHRoYXQgdGhlIHN1cnZleSBkYXRhIGNhbiBiZSB1c2VmdWwgaW4gcHJlZGljdGluZyB5ZWFyLWNsYXNzIHN0cmVuZ3RoXG5pbiBhZ2UtYmFzZWQgc3RvY2sgYXNzZXNzbWVudHMuXG5cblRoZSBzdXJ2ZXkncyBkYXRhIG9uIFlPWSBQYWNpZmljIHdoaXRpbmcgaGFzIGFsc28gYmVlbiB1c2VkIGluIHRoZSBzdG9ja1xuYXNzZXNzbWVudCBwcm9jZXNzLiBUbyBhc3Npc3QgaW4gb2J0YWluaW5nIGFkZGl0aW9uYWwgbm9ydGh3YXJkIHNwYXRpYWxcbmNvdmVyYWdlIG9mIFlPWSBQYWNpZmljIHdoaXRpbmcgb2ZmIE9yZWdvbiBhbmQgV2FzaGluZ3RvbiwgaW4gMjAwMSB0aGVcblBhY2lmaWMgV2hpdGluZyBDb25zZXJ2YXRpb24gQ29vcGVyYXRpdmUgaW4gY29vcGVyYXRpb24gd2l0aCB0aGUgTk9BQSBOTUZTXG5Ob3J0aHdlc3QgRmlzaGVyaWVzIFNjaWVuY2UgQ2VudGVyIGJlZ2FuIGEgbWlkd2F0ZXIgdHJhd2wgc3VydmV5IHBhdHRlcm5lZFxuYWZ0ZXIgdGhlIE5PQUEgTk1GUyBTV0ZTQyBGaXNoZXJpZXMgRWNvbG9neSBEaXZpc2lvbidzIChGRUQpIGV4aXN0aW5nIHN1cnZleS4gXG5Cb3RoIHN1cnZleXMgd29yayBjb29wZXJhdGl2ZWx5IHRvZ2V0aGVyIGVhY2ggeWVhciBpbiBvcmRlciB0byByZXNvbHZlIFxuaW50ZXJhbm51YWwgYWJ1bmRhbmNlIHBhdHRlcm5zIG9mIFlPWSByb2NrZmlzaCBhbmQgUGFjaWZpYyB3aGl0aW5nIG9uIGEgXG5jb2FzdHdpZGUgYmFzaXMsIHdoaWNoIHByb3ZpZGVzIGV4cGVkaWVudCwgY3JpdGljYWwgaW5mb3JtYXRpb24gdGhhdCBjYW4gYmUgXG51c2VkIGluIHRoZSBmaXNoZXJpZXMgbWFuYWdlbWVudCBwcm9jZXNzLlxuXG5UaGUgbGFyZ2UgcXVhbnRpdHkgb2YgcGh5c2ljYWwgZGF0YSBjb2xsZWN0ZWQgZHVyaW5nIHRoZSBzdXJ2ZXlzIChlLmcuLCBDVERcbndpdGggYXR0YWNoZWQgdHJhbnNpbWlzc29tZXRlciBhbmQgZmx1b3JvbWV0ZXIsIHRoZXJtb3NhbGlub21ldGVyLCBhbmQgQURDUClcbmhhdmUgcHJvdmlkZWQgYSBiZXR0ZXIgdW5kZXJzdGFuZGluZyBvZiB0aGUgaHlkcm9ncmFwaGljIGNvbmRpdGlvbnMgb2ZmIHRoZVxuQ2FsaWZvcm5pYSBjb2FzdCBhbmQgYW5hbHlzaXMgb2YgdGhlc2UgZGF0YSBoYXZlIGJlZW4gZGlzdHJpYnV0ZWQgdGhyb3VnaCB0aGVcbnB1YmxpY2F0aW9uIG9mIE5PQUEgTk1GUyBUZWNobmljYWwgTWVtb3JhbmRhLlxuXG5Gb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIGh0dHBzOi8vc3dmc2Mubm9hYS5nb3YvR3JvdW5kZmlzaEFuYWx5c2lzLyBhbmRcbmh0dHA6Ly93d3cuc2FuY3R1YXJ5c2ltb24ub3JnL3Byb2plY3RzL3Byb2plY3RfaW5mby5waHA/cHJvamVjdElEPTEwMDExOFxuXG5jZG1fZGF0YV90eXBlID0gVHJhamVjdG9yeVxuVkFSSUFCTEVTOlxuY3J1aXNlXG4uLi4gKDExIG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2VyZEZlZFJvY2tmaXNoU3RhdGlvbl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkRmVkUm9ja2Zpc2hTdGF0aW9uX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZEZlZFJvY2tmaXNoU3RhdGlvbi9pbmRleC5qc29uIiwgImh0dHBzOi8vc3dmc2Mubm9hYS5nb3YvR3JvdW5kZmlzaEFuYWx5c2lzLyIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9lcmRGZWRSb2NrZmlzaFN0YXRpb24ucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZEZlZFJvY2tmaXNoU3RhdGlvbiZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFNXRlNDIEZFRCIsICJlcmRGZWRSb2NrZmlzaFN0YXRpb24iXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkUHJkQ3RkLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRQcmRDdGQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkUHJkQ3RkLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlNXRlNDIFByb3RlY3RlZCBSZXNvdXJjZXMgRGl2aXNpb24gQ1REIERhdGEiLCAiRGF0YSBmcm9tIE5PQUEgU1dGU0MgUHJvdGVjdGVkIFJlc291cmNlcyBEaXZpc2lvbiAoUFJEKS5cblxuY2RtX2RhdGFfdHlwZSA9IFRyYWplY3RvcnlcblZBUklBQkxFUzpcbnRyYWplY3RvcnlcbnNoaXBfc3RhdGlvbiAoU2hpcCBhbmQgU3RhdGlvbilcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuY2hsb3JvIChTdXJmYWNlIENobG9yb3BoeWxsLCB1ZyBMLTEpXG5waGFlbyAoU3VyZmFjZSBQaGFlb3BoeXRpbiwgdWcgTC0xKVxucHJvZHVjdGl2aXR5IChJbnRlZ3JhdGVkIEV1cGhvdGljIFpvbmUgUHJvZHVjdGl2aXR5LCBtZyBDYXJib24gbS0yIGRheS0xKVxuc3N0IChTZWEgU3VyZmFjZSBUZW1wZXJhdHVyZSwgZGVncmVlX0MpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkUHJkQ3RkX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRQcmRDdGRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkUHJkQ3RkL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9zd2ZzYy5ub2FhLmdvdi9QUkQvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZFByZEN0ZC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkUHJkQ3RkJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgU1dGU0MgUFJEIiwgImVyZFByZEN0ZCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheUlzby5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlJc28iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlJc28uZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgNS1EYXksIDE5NzctcHJlc2VudCwgMjBDIElzb3RoZXJtIERlcHRoIiwgIlRoaXMgZGF0YXNldCBoYXMgNS1kYXkgMjBDIElzb3RoZXJtIERlcHRoIGRhdGEgKHRoZSBkZXB0aCBhdCB3aGljaCB0aGUgb2NlYW4gdGVtcGVyYXR1cmUgaXMgMjBDKSBmcm9tIHRoZSBcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgNS1kYXkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIGRhaWx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGNvbnNlY3V0aXZlIGZpdmUgZGF5IGludGVydmFscy4gIEEgbWluaW11bSBvZiAyIGRhaWx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIDUtZGF5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuSVNPXzYgKDIwQyBJc290aGVybSBEZXB0aCwgbSlcblFJXzUwMDYgKDIwQyBEZXB0aCBRdWFsaXR5KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW81ZGF5SXNvX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvNWRheUlzb19pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvNWRheUlzby9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvNWRheUlzby5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhbzVkYXlJc28mc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhbzVkYXlJc28iXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlBaXJ0LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheUFpcnQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlBaXJ0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIDUtRGF5LCAxOTc3LXByZXNlbnQsIEFpciBUZW1wZXJhdHVyZSIsICJUaGlzIGRhdGFzZXQgaGFzIDUtZGF5IEFpciBUZW1wZXJhdHVyZSBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIDUtZGF5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBkYWlseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBjb25zZWN1dGl2ZSBmaXZlIGRheSBpbnRlcnZhbHMuICBBIG1pbmltdW0gb2YgMiBkYWlseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSA1LWRheSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcbkFUXzIxIChBaXIgVGVtcGVyYXR1cmUsIGRlZ3JlZV9DKVxuUUFUXzUwMjEgKEFpciBUZW1wZXJhdHVyZSBRdWFsaXR5KVxuU0FUXzYwMjEgKEFpciBUZW1wZXJhdHVyZSBTb3VyY2UpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhbzVkYXlBaXJ0X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvNWRheUFpcnRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhbzVkYXlBaXJ0L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW81ZGF5QWlydC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhbzVkYXlBaXJ0JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW81ZGF5QWlydCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheUN1ci5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlDdXIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlDdXIuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgNS1EYXksIDE5NzctcHJlc2VudCwgQ3VycmVudHMiLCAiVGhpcyBkYXRhc2V0IGhhcyA1LWRheSBDdXJyZW50cyBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIDUtZGF5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBkYWlseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBjb25zZWN1dGl2ZSBmaXZlIGRheSBpbnRlcnZhbHMuICBBIG1pbmltdW0gb2YgMiBkYWlseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSA1LWRheSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblVfMzIwIChFYXN0d2FyZCBTZWEgV2F0ZXIgVmVsb2NpdHksIGNtIHMtMSlcblZfMzIxIChOb3J0aHdhcmQgU2VhIFdhdGVyIFZlbG9jaXR5LCBjbSBzLTEpXG5DU18zMDAgKFNlYSBXYXRlciBWZWxvY2l0eSwgY20gcy0xKVxuQ0RfMzEwIChEaXJlY3Rpb24gb2YgU2VhIFdhdGVyIFZlbG9jaXR5LCBkZWdyZWVzX3RydWUpXG5RQ1NfNTMwMCAoQ3VycmVudCBTcGVlZCBRdWFsaXR5KVxuUUNEXzUzMTAgKEN1cnJlbnQgRGlyZWN0aW9uIFF1YWxpdHkpXG5TQ1NfNjMwMCAoQ3VycmVudCBTcGVlZCBTb3VyY2UpXG5DSUNfNzMwMCAoQ3VycmVudCBJbnN0cnVtZW50IENvZGUpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhbzVkYXlDdXJfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW81ZGF5Q3VyX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW81ZGF5Q3VyL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW81ZGF5Q3VyLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvNWRheUN1ciZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvNWRheUN1ciJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheVNzdC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlTc3QiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlTc3QuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgNS1EYXksIDE5NzctcHJlc2VudCwgU2VhIFN1cmZhY2UgVGVtcGVyYXR1cmUiLCAiVGhpcyBkYXRhc2V0IGhhcyA1LWRheSBTZWEgU3VyZmFjZSBUZW1wZXJhdHVyZSAoU1NUKSBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIDUtZGF5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBkYWlseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBjb25zZWN1dGl2ZSBmaXZlIGRheSBpbnRlcnZhbHMuICBBIG1pbmltdW0gb2YgMiBkYWlseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSA1LWRheSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblRfMjUgKFNlYSBTdXJmYWNlIFRlbXBlcmF0dXJlLCBkZWdyZWVfQylcblFUXzUwMjUgKFNlYSBTdXJmYWNlIFRlbXBlcmF0dXJlIFF1YWxpdHkpXG5TVF82MDI1IChTZWEgU3VyZmFjZSBUZW1wZXJhdHVyZSBTb3VyY2UpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhbzVkYXlTc3RfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW81ZGF5U3N0X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW81ZGF5U3N0L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW81ZGF5U3N0LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvNWRheVNzdCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvNWRheVNzdCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheVQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5VCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheVQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgNS1EYXksIDE5NzctcHJlc2VudCwgVGVtcGVyYXR1cmUiLCAiVGhpcyBkYXRhc2V0IGhhcyA1LWRheSBUZW1wZXJhdHVyZSBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIDUtZGF5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBkYWlseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBjb25zZWN1dGl2ZSBmaXZlIGRheSBpbnRlcnZhbHMuICBBIG1pbmltdW0gb2YgMiBkYWlseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSA1LWRheSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblRfMjAgKFNlYSBXYXRlciBUZW1wZXJhdHVyZSwgZGVncmVlX0MpXG5RVF81MDIwIChUZW1wZXJhdHVyZSBRdWFsaXR5KVxuU1RfNjAyMCAoVGVtcGVyYXR1cmUgU291cmNlKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW81ZGF5VF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhbzVkYXlUX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW81ZGF5VC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvNWRheVQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW81ZGF5VCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvNWRheVQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlXLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheVciLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlXLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIDUtRGF5LCAxOTc3LXByZXNlbnQsIFdpbmQiLCAiVGhpcyBkYXRhc2V0IGhhcyA1LWRheSBXaW5kIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgNS1kYXkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIGRhaWx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGNvbnNlY3V0aXZlIGZpdmUgZGF5IGludGVydmFscy4gIEEgbWluaW11bSBvZiAyIGRhaWx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIDUtZGF5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuV1VfNDIyIChab25hbCBXaW5kLCBtIHMtMSlcbldWXzQyMyAoTWVyaWRpb25hbCBXaW5kLCBtIHMtMSlcbldTXzQwMSAoV2luZCBTcGVlZCwgbSBzLTEpXG5RV1NfNTQwMSAoV2luZCBTcGVlZCBRdWFsaXR5KVxuU1dTXzY0MDEgKFdpbmQgU3BlZWQgU291cmNlKVxuV0RfNDEwIChXaW5kIERpcmVjdGlvbiwgZGVncmVlc190cnVlKVxuUVdEXzU0MTAgKFdpbmQgRGlyZWN0aW9uIFF1YWxpdHkpXG5TV0RfNjQxMCAoV2luZCBEaXJlY3Rpb24gU291cmNlKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW81ZGF5V19mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhbzVkYXlXX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW81ZGF5Vy9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvNWRheVcucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW81ZGF5VyZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvNWRheVciXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlEeW4uc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5RHluIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5RHluLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIDUtRGF5LCAxOTgwLXByZXNlbnQsIER5bmFtaWMgSGVpZ2h0IiwgIlRoaXMgZGF0YXNldCBoYXMgNS1kYXkgRHluYW1pYyBIZWlnaHQgZGF0YSAoYSBtZWFzdXJlIG9mIHRoZSBlbGV2YXRpb24gb2YgdGhlIHNlYSBsZXZlbCwgY2FsY3VsYXRlZCBieSBpbnRlZ3JhdGluZyB0aGUgc3BlY2lmaWMgdm9sdW1lIGFub21hbHkgb2YgdGhlIHNlYSB3YXRlciBiZXR3ZWVuIHRoZSBzZWEgc3VyZmFjZSBhbmQgNTAwIG0gZGVwdGgpIGZyb20gdGhlIFxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICA1LWRheSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgZGFpbHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgY29uc2VjdXRpdmUgZml2ZSBkYXkgaW50ZXJ2YWxzLiAgQSBtaW5pbXVtIG9mIDIgZGFpbHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgNS1kYXkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5EWU5fMTMgKER5bmFtaWMgSGVpZ2h0LCBkeW4tY20pXG5RRF81MDEzIChEeW5hbWljIEhlaWdodCBRdWFsaXR5KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW81ZGF5RHluX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvNWRheUR5bl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvNWRheUR5bi9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvNWRheUR5bi5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhbzVkYXlEeW4mc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhbzVkYXlEeW4iXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlIZWF0LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheUhlYXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlIZWF0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIDUtRGF5LCAxOTgwLXByZXNlbnQsIEhlYXQgQ29udGVudCIsICJUaGlzIGRhdGFzZXQgaGFzIDUtZGF5IEhlYXQgQ29udGVudCBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIDUtZGF5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBkYWlseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBjb25zZWN1dGl2ZSBmaXZlIGRheSBpbnRlcnZhbHMuICBBIG1pbmltdW0gb2YgMiBkYWlseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSA1LWRheSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcbkhUQ18xMzAgKEhlYXQgQ29udGVudCwgMTAqKjEwIEogbS0yKVxuSFRDXzUxMzAgKEhlYXQgQ29udGVudCBRdWFsaXR5KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW81ZGF5SGVhdF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhbzVkYXlIZWF0X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW81ZGF5SGVhdC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvNWRheUhlYXQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW81ZGF5SGVhdCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvNWRheUhlYXQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlQb3Muc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5UG9zIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5UG9zLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIDUtRGF5LCAxOTgwLXByZXNlbnQsIFBvc2l0aW9uIiwgIlRoaXMgZGF0YXNldCBoYXMgNS1kYXkgUG9zaXRpb24gZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICA1LWRheSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgZGFpbHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgY29uc2VjdXRpdmUgZml2ZSBkYXkgaW50ZXJ2YWxzLiAgQSBtaW5pbXVtIG9mIDIgZGFpbHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgNS1kYXkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5MT05fNTAyIChQcmVjaXNlIExvbmdpdHVkZSwgZGVncmVlX2Vhc3QpXG5RWF81NTAyIChMb25naXR1ZGUgUXVhbGl0eSlcbkxBVF81MDAgKFByZWNpc2UgTGF0aXR1ZGUsIGRlZ3JlZV9ub3J0aClcblFZXzU1MDAgKExhdGl0dWRlIFF1YWxpdHkpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhbzVkYXlQb3NfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW81ZGF5UG9zX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW81ZGF5UG9zL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW81ZGF5UG9zLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvNWRheVBvcyZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvNWRheVBvcyJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheUQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5RCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheUQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgNS1EYXksIDE5ODctcHJlc2VudCwgUG90ZW50aWFsIERlbnNpdHkgQW5vbWFseSIsICJUaGlzIGRhdGFzZXQgaGFzIDUtZGF5IFBvdGVudGlhbCBEZW5zaXR5IEFub21hbHkgKHNpZ21hLXRoZXRhKSBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIDUtZGF5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBkYWlseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBjb25zZWN1dGl2ZSBmaXZlIGRheSBpbnRlcnZhbHMuICBBIG1pbmltdW0gb2YgMiBkYWlseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSA1LWRheSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblNUSF83MSAoU2lnbWEtVGhldGEsIGtnIG0tMylcblFTVF81MDcxIChTaWdtYS1UaGV0YSBRdWFsaXR5KVxuU1NUXzYwNzEgKFNpZ21hLVRoZXRhIFNvdXJjZSlcbkRJQ183MDcxIChTaWdtYS1UaGV0YSBJbnN0cnVtZW50IENvZGUpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhbzVkYXlEX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvNWRheURfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhbzVkYXlEL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW81ZGF5RC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhbzVkYXlEJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW81ZGF5RCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheVMuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5UyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheVMuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgNS1EYXksIDE5ODctcHJlc2VudCwgU2FsaW5pdHkiLCAiVGhpcyBkYXRhc2V0IGhhcyA1LWRheSBTYWxpbml0eSBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIDUtZGF5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBkYWlseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBjb25zZWN1dGl2ZSBmaXZlIGRheSBpbnRlcnZhbHMuICBBIG1pbmltdW0gb2YgMiBkYWlseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSA1LWRheSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblNfNDEgKFNlYSBXYXRlciBQcmFjdGljYWwgU2FsaW5pdHksIFBTVSlcblFTXzUwNDEgKFNhbGluaXR5IFF1YWxpdHkpXG5TU182MDQxIChTYWxpbml0eSBTb3VyY2UpXG5TSUNfODA0MSAoU2FsaW5pdHkgSW5zdHJ1bWVudCBDb2RlKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW81ZGF5U19mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhbzVkYXlTX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW81ZGF5Uy9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvNWRheVMucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW81ZGF5UyZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvNWRheVMiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlBZGNwLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheUFkY3AiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlBZGNwLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIDUtRGF5LCAxOTg4LTIwMTcsIEFEQ1AiLCAiVGhpcyBkYXRhc2V0IGhhcyA1LWRheSBBY291c3RpYyBEb3BwbGVyIEN1cnJlbnQgUHJvZmlsZXIgKEFEQ1ApIHdhdGVyIGN1cnJlbnRzIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgNS1kYXkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIGRhaWx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGNvbnNlY3V0aXZlIGZpdmUgZGF5IGludGVydmFscy4gIEEgbWluaW11bSBvZiAyIGRhaWx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIDUtZGF5IGF2ZXJhZ2UuICBBRENQIGRhdGEgYXJlIGF2YWlsYWJsZSBvbmx5IGFmdGVyIG1vb3JpbmcgcmVjb3Zlcmllcywgd2hpY2ggYXJlIHNjaGVkdWxlZCBvbiBhbiBhbm51YWwgYmFzaXMuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcbnVfMTIwNSAoRWFzdHdhcmQgU2VhIFdhdGVyIFZlbG9jaXR5LCBjbS9zKVxuUVVfNTIwNSAoRWFzdHdhcmQgU2VhIFdhdGVyIFZlbG9jaXR5IFF1YWxpdHkpXG52XzEyMDYgKE5vcnRod2FyZCBTZWEgV2F0ZXIgVmVsb2NpdHksIGNtL3MpXG5RVl81MjA2IChOb3J0aHdhcmQgU2VhIFdhdGVyIFZlbG9jaXR5IFF1YWxpdHkpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhbzVkYXlBZGNwX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvNWRheUFkY3BfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhbzVkYXlBZGNwL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW81ZGF5QWRjcC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhbzVkYXlBZGNwJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW81ZGF5QWRjcCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheUV2YXAuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5RXZhcCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheUV2YXAuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgNS1EYXksIDE5ODktcHJlc2VudCwgRXZhcG9yYXRpb24iLCAiVGhpcyBkYXRhc2V0IGhhcyA1LWRheSBFdmFwb3JhdGlvbiBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIDUtZGF5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBkYWlseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBjb25zZWN1dGl2ZSBmaXZlIGRheSBpbnRlcnZhbHMuICBBIG1pbmltdW0gb2YgMiBkYWlseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSA1LWRheSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcbkVfMjUwIChFdmFwb3JhdGlvbiwgTU0vSFIpXG5RRV81MjUwIChFdmFwb3JhdGlvbiBRdWFsaXR5KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW81ZGF5RXZhcF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhbzVkYXlFdmFwX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW81ZGF5RXZhcC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvNWRheUV2YXAucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW81ZGF5RXZhcCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvNWRheUV2YXAiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlRbGF0LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheVFsYXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlRbGF0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIDUtRGF5LCAxOTg5LXByZXNlbnQsIExhdGVudCBIZWF0IEZsdXgiLCAiVGhpcyBkYXRhc2V0IGhhcyA1LWRheSBMYXRlbnQgSGVhdCBGbHV4IGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgNS1kYXkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIGRhaWx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGNvbnNlY3V0aXZlIGZpdmUgZGF5IGludGVydmFscy4gIEEgbWluaW11bSBvZiAyIGRhaWx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIDUtZGF5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuUUxfMTM3IChMYXRlbnQgSGVhdCBGbHV4LCBXIG0tMilcblFRTF81MTM3IChMYXRlbnQgSGVhdCBGbHV4IFF1YWxpdHkpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhbzVkYXlRbGF0X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvNWRheVFsYXRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhbzVkYXlRbGF0L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW81ZGF5UWxhdC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhbzVkYXlRbGF0JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW81ZGF5UWxhdCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheVJoLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheVJoIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5UmguZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgNS1EYXksIDE5ODktcHJlc2VudCwgUmVsYXRpdmUgSHVtaWRpdHkiLCAiVGhpcyBkYXRhc2V0IGhhcyA1LWRheSBSZWxhdGl2ZSBIdW1pZGl0eSBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIDUtZGF5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBkYWlseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBjb25zZWN1dGl2ZSBmaXZlIGRheSBpbnRlcnZhbHMuICBBIG1pbmltdW0gb2YgMiBkYWlseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSA1LWRheSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblJIXzkxMCAoUmVsYXRpdmUgSHVtaWRpdHksIHBlcmNlbnQpXG5RUkhfNTkxMCAoUmVsYXRpdmUgSHVtaWRpdHkgUXVhbGl0eSlcblNSSF82OTEwIChSZWxhdGl2ZSBIdW1pZGl0eSBTb3VyY2UpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhbzVkYXlSaF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhbzVkYXlSaF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvNWRheVJoL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW81ZGF5UmgucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW81ZGF5Umgmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhbzVkYXlSaCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheVFzZW4uc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5UXNlbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheVFzZW4uZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgNS1EYXksIDE5ODktcHJlc2VudCwgU2Vuc2libGUgSGVhdCBGbHV4IiwgIlRoaXMgZGF0YXNldCBoYXMgNS1kYXkgU2Vuc2libGUgSGVhdCBGbHV4IGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgNS1kYXkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIGRhaWx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGNvbnNlY3V0aXZlIGZpdmUgZGF5IGludGVydmFscy4gIEEgbWluaW11bSBvZiAyIGRhaWx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIDUtZGF5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuUVNfMTM4IChTZW5zaWJsZSBIZWF0IEZsdXgsIFcgbS0yKVxuUVFTXzUxMzggKFNlbnNpYmxlIEhlYXQgRmx1eCBRdWFsaXR5KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW81ZGF5UXNlbl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhbzVkYXlRc2VuX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW81ZGF5UXNlbi9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvNWRheVFzZW4ucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW81ZGF5UXNlbiZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvNWRheVFzZW4iXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlUYXUuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5VGF1IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5VGF1LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIDUtRGF5LCAxOTg5LXByZXNlbnQsIFdpbmQgU3RyZXNzIiwgIlRoaXMgZGF0YXNldCBoYXMgNS1kYXkgV2luZCBTdHJlc3MgZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICA1LWRheSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgZGFpbHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgY29uc2VjdXRpdmUgZml2ZSBkYXkgaW50ZXJ2YWxzLiAgQSBtaW5pbXVtIG9mIDIgZGFpbHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgNS1kYXkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5UWF80NDIgKFpvbmFsIFdpbmQgU3RyZXNzLCBOL20yKVxuVFlfNDQzIChNZXJpZGlvbmFsIFdpbmQgU3RyZXNzLCBOL20yKVxuVEFVXzQ0MCAoV2luZCBTdHJlc3MsIE4vbTIpXG5URF80NDUgKFdpbmQgU3RyZXNzIERpcmVjdGlvbiwgZGVncmVlc190cnVlKVxuUVRBVV81NDQwIChXaW5kIFN0cmVzcyBRdWFsaXR5KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW81ZGF5VGF1X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvNWRheVRhdV9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvNWRheVRhdS9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvNWRheVRhdS5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhbzVkYXlUYXUmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhbzVkYXlUYXUiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlSYWQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5UmFkIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5UmFkLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIDUtRGF5LCAxOTkxLXByZXNlbnQsIERvd25nb2luZyBTaG9ydHdhdmUgUmFkaWF0aW9uIiwgIlRoaXMgZGF0YXNldCBoYXMgNS1kYXkgRG93bmdvaW5nIFNob3J0d2F2ZSBSYWRpYXRpb24gZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICA1LWRheSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgZGFpbHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgY29uc2VjdXRpdmUgZml2ZSBkYXkgaW50ZXJ2YWxzLiAgQSBtaW5pbXVtIG9mIDIgZGFpbHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgNS1kYXkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5SRF80OTUgKERvd25nb2luZyBTaG9ydHdhdmUgUmFkaWF0aW9uLCBXL00qKjIpXG5RU1dfNTQ5NSAoU2hvcnR3YXZlIFJhZGlhdGlvbiBRdWFsaXR5KVxuU1NXXzY0OTUgKFNob3J0d2F2ZSBSYWRpYXRpb24gU291cmNlKVxuUkRTXzQ5NiAoU2hvcnR3YXZlIFJhZGlhdGlvbiBTdGFuZGFyZCBEZXZpYXRpb24sIFcvTSoqMilcblJEUF80OTcgKFNob3J0d2F2ZSBSYWRpYXRpb24gUGVhaywgVy9NKioyKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW81ZGF5UmFkX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvNWRheVJhZF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvNWRheVJhZC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvNWRheVJhZC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhbzVkYXlSYWQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhbzVkYXlSYWQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlTd25ldC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlTd25ldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheVN3bmV0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIDUtRGF5LCAxOTkxLXByZXNlbnQsIE5ldCBTaG9ydHdhdmUgUmFkaWF0aW9uIiwgIlRoaXMgZGF0YXNldCBoYXMgNS1kYXkgTmV0IFNob3J0d2F2ZSBSYWRpYXRpb24gZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICA1LWRheSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgZGFpbHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgY29uc2VjdXRpdmUgZml2ZSBkYXkgaW50ZXJ2YWxzLiAgQSBtaW5pbXVtIG9mIDIgZGFpbHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgNS1kYXkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5TV05fMTQ5NSAoTmV0IFNob3J0d2F2ZSBSYWRpYXRpb24sIFcvTSoqMilcblFTV181NDk1IChTaG9ydHdhdmUgUmFkaWF0aW9uIFF1YWxpdHkpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhbzVkYXlTd25ldF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhbzVkYXlTd25ldF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvNWRheVN3bmV0L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW81ZGF5U3duZXQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW81ZGF5U3duZXQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhbzVkYXlTd25ldCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheVNzcy5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlTc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlTc3MuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgNS1EYXksIDE5OTItcHJlc2VudCwgU2VhIFN1cmZhY2UgU2FsaW5pdHkiLCAiVGhpcyBkYXRhc2V0IGhhcyA1LWRheSBTZWEgU3VyZmFjZSBTYWxpbml0eSBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIDUtZGF5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBkYWlseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBjb25zZWN1dGl2ZSBmaXZlIGRheSBpbnRlcnZhbHMuICBBIG1pbmltdW0gb2YgMiBkYWlseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSA1LWRheSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblNfNDEgKFNlYSBXYXRlciBQcmFjdGljYWwgU2FsaW5pdHksIFBTVSlcblFTXzUwNDEgKFNhbGluaXR5IFF1YWxpdHkpXG5TU182MDQxIChTYWxpbml0eSBTb3VyY2UpXG5TSUNfNzA0MSAoU2FsaW5pdHkgSW5zdHJ1bWVudCBDb2RlKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW81ZGF5U3NzX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvNWRheVNzc19pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvNWRheVNzcy9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvNWRheVNzcy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhbzVkYXlTc3Mmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhbzVkYXlTc3MiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlTc2Quc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5U3NkIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5U3NkLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIDUtRGF5LCAxOTkyLXByZXNlbnQsIFNpZ21hLVRoZXRhIiwgIlRoaXMgZGF0YXNldCBoYXMgNS1kYXkgU2lnbWEtVGhldGEgKFBvdGVudGlhbCBEZW5zaXR5IEFub21hbHkpIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgNS1kYXkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIGRhaWx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGNvbnNlY3V0aXZlIGZpdmUgZGF5IGludGVydmFscy4gIEEgbWluaW11bSBvZiAyIGRhaWx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIDUtZGF5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuU1RIXzcxIChTaWdtYS1UaGV0YSwga2cgbS0zKVxuUVNUXzUwNzEgKFNpZ21hLVRoZXRhIFF1YWxpdHkpXG5TU1RfNjA3MSAoU2lnbWEtVGhldGEgU291cmNlKVxuRElDXzcwNzEgKFNpZ21hLVRoZXRhIEluc3RydW1lbnQgQ29kZSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvNWRheVNzZF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhbzVkYXlTc2RfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhbzVkYXlTc2QvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhbzVkYXlTc2QucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW81ZGF5U3NkJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW81ZGF5U3NkIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5RW1wLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheUVtcCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheUVtcC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCA1LURheSwgMTk5Ny1wcmVzZW50LCBFdmFwb3JhdGlvbiBNaW51cyBQcmVjaXBpdGF0aW9uIiwgIlRoaXMgZGF0YXNldCBoYXMgNS1kYXkgRXZhcG9yYXRpb24gTWludXMgUHJlY2lwaXRhdGlvbiBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIDUtZGF5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBkYWlseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBjb25zZWN1dGl2ZSBmaXZlIGRheSBpbnRlcnZhbHMuICBBIG1pbmltdW0gb2YgMiBkYWlseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSA1LWRheSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcbkVNUF8yNTEgKEV2YXBvcmF0aW9uIE1pbnVzIFByZWNpcGl0YXRpb24sIG1tL2hyKVxuUUVNUF81MjUxIChFdmFwb3JhdGlvbiBNaW51cyBQcmVjaXBpdGF0aW9uIFF1YWxpdHkpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhbzVkYXlFbXBfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW81ZGF5RW1wX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW81ZGF5RW1wL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW81ZGF5RW1wLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvNWRheUVtcCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvNWRheUVtcCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheVJmLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheVJmIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5UmYuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgNS1EYXksIDE5OTctcHJlc2VudCwgSGVhdCBGbHV4IER1ZSBUbyBSYWluIiwgIlRoaXMgZGF0YXNldCBoYXMgNS1kYXkgSGVhdCBGbHV4IER1ZSBUbyBSYWluIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgNS1kYXkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIGRhaWx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGNvbnNlY3V0aXZlIGZpdmUgZGF5IGludGVydmFscy4gIEEgbWluaW11bSBvZiAyIGRhaWx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIDUtZGF5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuUVJfMTM5IChIZWF0IEZsdXggRHVlIFRvIFJhaW4sIFcgbS0yKVxuUVFSXzUxMzkgKEhlYXQgRmx1eCBEdWUgVG8gUmFpbiBRdWFsaXR5KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW81ZGF5UmZfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW81ZGF5UmZfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhbzVkYXlSZi9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvNWRheVJmLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvNWRheVJmJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW81ZGF5UmYiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlSYWluLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheVJhaW4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlSYWluLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIDUtRGF5LCAxOTk3LXByZXNlbnQsIFByZWNpcGl0YXRpb24iLCAiVGhpcyBkYXRhc2V0IGhhcyA1LWRheSBQcmVjaXBpdGF0aW9uIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgNS1kYXkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIGRhaWx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGNvbnNlY3V0aXZlIGZpdmUgZGF5IGludGVydmFscy4gIEEgbWluaW11bSBvZiAyIGRhaWx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIDUtZGF5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuUk5fNDg1IChQcmVjaXBpdGF0aW9uLCBNTS9IUilcblFSTl81NDg1IChQcmVjaXBpdGF0aW9uIFF1YWxpdHkpXG5TUk5fNjQ4NSAoUHJlY2lwaXRhdGlvbiBTb3VyY2UpXG5STlNfNDg2IChQcmVjaXBpdGF0aW9uIFN0YW5kYXJkIERldmlhdGlvbiwgTU0vSFIpXG5STlBfNDg3IChQZXJjZW50IFRpbWUgUmFpbmluZywgcGVyY2VudClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvNWRheVJhaW5fZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW81ZGF5UmFpbl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvNWRheVJhaW4vaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhbzVkYXlSYWluLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvNWRheVJhaW4mc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhbzVkYXlSYWluIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5QnAuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5QnAiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlCcC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCA1LURheSwgMTk5OC1wcmVzZW50LCBCYXJvbWV0cmljIChBaXIpIFByZXNzdXJlIiwgIlRoaXMgZGF0YXNldCBoYXMgNS1kYXkgQmFyb21ldHJpYyAoQWlyKSBQcmVzc3VyZSBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIDUtZGF5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBkYWlseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBjb25zZWN1dGl2ZSBmaXZlIGRheSBpbnRlcnZhbHMuICBBIG1pbmltdW0gb2YgMiBkYWlseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSA1LWRheSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcbkJQXzkxNSAoQmFyb21ldHJpYyAoQWlyKSBQcmVzc3VyZSwgaFBhKVxuUUJQXzU5MTUgKEJhcm9tZXRyaWMgKEFpcikgUHJlc3N1cmUgUXVhbGl0eSlcblNCUF82OTE1IChCYXJvbWV0cmljIChBaXIpIFByZXNzdXJlIFNvdXJjZSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvNWRheUJwX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvNWRheUJwX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW81ZGF5QnAvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhbzVkYXlCcC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhbzVkYXlCcCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvNWRheUJwIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5QmYuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5QmYiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlCZi5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCA1LURheSwgMjAwMC1wcmVzZW50LCBCdW95YW5jeSBGbHV4IiwgIlRoaXMgZGF0YXNldCBoYXMgNS1kYXkgQnVveWFuY3kgRmx1eCBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIDUtZGF5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBkYWlseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBjb25zZWN1dGl2ZSBmaXZlIGRheSBpbnRlcnZhbHMuICBBIG1pbmltdW0gb2YgMiBkYWlseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSA1LWRheSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcbkJGXzE5MSAoQnVveWFuY3kgRmx1eCwgMTAqKjYga2cgbS0yIHMtMSlcblFCRl81MTkxIChCdW95YW5jeSBGbHV4IFF1YWxpdHkpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhbzVkYXlCZl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhbzVkYXlCZl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvNWRheUJmL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW81ZGF5QmYucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW81ZGF5QmYmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhbzVkYXlCZiJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheUx3LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheUx3IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5THcuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgNS1EYXksIDIwMDAtcHJlc2VudCwgTG9uZ3dhdmUgUmFkaWF0aW9uIiwgIlRoaXMgZGF0YXNldCBoYXMgNS1kYXkgSW5jb21pbmcgTG9uZ3dhdmUgUmFkaWF0aW9uIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgNS1kYXkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIGRhaWx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGNvbnNlY3V0aXZlIGZpdmUgZGF5IGludGVydmFscy4gIEEgbWluaW11bSBvZiAyIGRhaWx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIDUtZGF5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuUWxfMTM2IChJbmNvbWluZyBMb25nd2F2ZSBSYWRpYXRpb24sIFcgbS0yKVxuUUxXXzUxMzYgKExvbmd3YXZlIFJhZGlhdGlvbiBRdWFsaXR5KVxuU0xXXzYxMzYgKExvbmd3YXZlIFJhZGlhdGlvbiBTb3VyY2UpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhbzVkYXlMd19mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhbzVkYXlMd19pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvNWRheUx3L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW81ZGF5THcucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW81ZGF5THcmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhbzVkYXlMdyJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheUx3bmV0LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvNWRheUx3bmV0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5THduZXQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgNS1EYXksIDIwMDAtcHJlc2VudCwgTmV0IExvbmd3YXZlIFJhZGlhdGlvbiIsICJUaGlzIGRhdGFzZXQgaGFzIDUtZGF5IE5ldCBMb25nd2F2ZSBSYWRpYXRpb24gZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICA1LWRheSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgZGFpbHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgY29uc2VjdXRpdmUgZml2ZSBkYXkgaW50ZXJ2YWxzLiAgQSBtaW5pbXVtIG9mIDIgZGFpbHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgNS1kYXkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5MV05fMTEzNiAoTmV0IExvbmd3YXZlIFJhZGlhdGlvbiwgVyBtLTIpXG5RTFdfNTEzNiAoTG9uZ3dhdmUgUmFkaWF0aW9uIFF1YWxpdHkpXG5TTFdfNjEzNiAoTG9uZ3dhdmUgUmFkaWF0aW9uIFNvdXJjZSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvNWRheUx3bmV0X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvNWRheUx3bmV0X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW81ZGF5THduZXQvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhbzVkYXlMd25ldC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhbzVkYXlMd25ldCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvNWRheUx3bmV0Il0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5UW5ldC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhbzVkYXlRbmV0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW81ZGF5UW5ldC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCA1LURheSwgMjAwMC1wcmVzZW50LCBUb3RhbCBIZWF0IEZsdXgiLCAiVGhpcyBkYXRhc2V0IGhhcyA1LWRheSBUb3RhbCBIZWF0IEZsdXggZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICA1LWRheSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgZGFpbHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgY29uc2VjdXRpdmUgZml2ZSBkYXkgaW50ZXJ2YWxzLiAgQSBtaW5pbXVtIG9mIDIgZGFpbHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgNS1kYXkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5RVF8yMTAgKFRvdGFsIEhlYXQgRmx1eCwgVy9NKioyKVxuUVEwXzUyMTAgKFRvdGFsIEhlYXQgRmx1eCBRdWFsaXR5KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW81ZGF5UW5ldF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhbzVkYXlRbmV0X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW81ZGF5UW5ldC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvNWRheVFuZXQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW81ZGF5UW5ldCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvNWRheVFuZXQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5SXNvLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlJc28iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5SXNvLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIERhaWx5LCAxOTc3LXByZXNlbnQsIDIwQyBJc290aGVybSBEZXB0aCIsICJUaGlzIGRhdGFzZXQgaGFzIGRhaWx5IDIwQyBJc290aGVybSBEZXB0aCBkYXRhICh0aGUgZGVwdGggYXQgd2hpY2ggdGhlIG9jZWFuIHRlbXBlcmF0dXJlIGlzIDIwQykgZnJvbSB0aGUgXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIERhaWx5IGF2ZXJhZ2VzIGFyZSBjb21wdXRlZCBzdGFydGluZyBhdCAwMDowMFogYW5kIGFyZSBhc3NpZ25lZCBhbiBvYnNlcnZhdGlvbiAndGltZScgb2YgMTI6MDBaLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5JU09fNiAoMjBDIElzb3RoZXJtIERlcHRoLCBtKVxuUUlfNTAwNiAoMjBDIERlcHRoIFF1YWxpdHkpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb0R5SXNvX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvRHlJc29faXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb0R5SXNvL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9EeUlzby5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb0R5SXNvJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9EeUlzbyJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlBaXJ0LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlBaXJ0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeUFpcnQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgRGFpbHksIDE5NzctcHJlc2VudCwgQWlyIFRlbXBlcmF0dXJlIiwgIlRoaXMgZGF0YXNldCBoYXMgZGFpbHkgQWlyIFRlbXBlcmF0dXJlIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgRGFpbHkgYXZlcmFnZXMgYXJlIGNvbXB1dGVkIHN0YXJ0aW5nIGF0IDAwOjAwWiBhbmQgYXJlIGFzc2lnbmVkIGFuIG9ic2VydmF0aW9uICd0aW1lJyBvZiAxMjowMFouICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcbkFUXzIxIChBaXIgVGVtcGVyYXR1cmUsIGRlZ3JlZV9DKVxuUUFUXzUwMjEgKEFpciBUZW1wZXJhdHVyZSBRdWFsaXR5KVxuU0FUXzYwMjEgKEFpciBUZW1wZXJhdHVyZSBTb3VyY2UpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb0R5QWlydF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb0R5QWlydF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvRHlBaXJ0L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9EeUFpcnQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9EeUFpcnQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb0R5QWlydCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlDdXIuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeUN1ciIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlDdXIuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgRGFpbHksIDE5NzctcHJlc2VudCwgQ3VycmVudHMiLCAiVGhpcyBkYXRhc2V0IGhhcyBkYWlseSBDdXJyZW50cyBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIERhaWx5IGF2ZXJhZ2VzIGFyZSBjb21wdXRlZCBzdGFydGluZyBhdCAwMDowMFogYW5kIGFyZSBhc3NpZ25lZCBhbiBvYnNlcnZhdGlvbiAndGltZScgb2YgMTI6MDBaLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5VXzMyMCAoRWFzdHdhcmQgU2VhIFdhdGVyIFZlbG9jaXR5LCBjbSBzLTEpXG5WXzMyMSAoTm9ydGh3YXJkIFNlYSBXYXRlciBWZWxvY2l0eSwgY20gcy0xKVxuQ1NfMzAwIChTZWEgV2F0ZXIgVmVsb2NpdHksIGNtIHMtMSlcbkNEXzMxMCAoRGlyZWN0aW9uIG9mIFNlYSBXYXRlciBWZWxvY2l0eSwgZGVncmVlc190cnVlKVxuUUNTXzUzMDAgKEN1cnJlbnQgU3BlZWQgUXVhbGl0eSlcblFDRF81MzEwIChDdXJyZW50IERpcmVjdGlvbiBRdWFsaXR5KVxuU0NTXzYzMDAgKEN1cnJlbnQgU3BlZWQgU291cmNlKVxuQ0lDXzczMDAgKEN1cnJlbnQgSW5zdHJ1bWVudCBDb2RlKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9EeUN1cl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb0R5Q3VyX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9EeUN1ci9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvRHlDdXIucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9EeUN1ciZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvRHlDdXIiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5U3N0LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlTc3QiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5U3N0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIERhaWx5LCAxOTc3LXByZXNlbnQsIFNlYSBTdXJmYWNlIFRlbXBlcmF0dXJlIiwgIlRoaXMgZGF0YXNldCBoYXMgZGFpbHkgU2VhIFN1cmZhY2UgVGVtcGVyYXR1cmUgKFNTVCkgZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICBEYWlseSBhdmVyYWdlcyBhcmUgY29tcHV0ZWQgc3RhcnRpbmcgYXQgMDA6MDBaIGFuZCBhcmUgYXNzaWduZWQgYW4gb2JzZXJ2YXRpb24gJ3RpbWUnIG9mIDEyOjAwWi4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuVF8yNSAoU2VhIFN1cmZhY2UgVGVtcGVyYXR1cmUsIGRlZ3JlZV9DKVxuUVRfNTAyNSAoU2VhIFN1cmZhY2UgVGVtcGVyYXR1cmUgUXVhbGl0eSlcblNUXzYwMjUgKFNlYSBTdXJmYWNlIFRlbXBlcmF0dXJlIFNvdXJjZSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvRHlTc3RfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9EeVNzdF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvRHlTc3QvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhb0R5U3N0LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvRHlTc3Qmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb0R5U3N0Il0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeVQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeVQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5VC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCBEYWlseSwgMTk3Ny1wcmVzZW50LCBUZW1wZXJhdHVyZSIsICJUaGlzIGRhdGFzZXQgaGFzIGRhaWx5IFRlbXBlcmF0dXJlIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgRGFpbHkgYXZlcmFnZXMgYXJlIGNvbXB1dGVkIHN0YXJ0aW5nIGF0IDAwOjAwWiBhbmQgYXJlIGFzc2lnbmVkIGFuIG9ic2VydmF0aW9uICd0aW1lJyBvZiAxMjowMFouICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblRfMjAgKFNlYSBXYXRlciBUZW1wZXJhdHVyZSwgZGVncmVlX0MpXG5RVF81MDIwIChUZW1wZXJhdHVyZSBRdWFsaXR5KVxuU1RfNjAyMCAoVGVtcGVyYXR1cmUgU291cmNlKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9EeVRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9EeVRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb0R5VC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvRHlULnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvRHlUJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9EeVQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5Vy5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5VyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlXLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIERhaWx5LCAxOTc3LXByZXNlbnQsIFdpbmQiLCAiVGhpcyBkYXRhc2V0IGhhcyBkYWlseSBXaW5kIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgRGFpbHkgYXZlcmFnZXMgYXJlIGNvbXB1dGVkIHN0YXJ0aW5nIGF0IDAwOjAwWiBhbmQgYXJlIGFzc2lnbmVkIGFuIG9ic2VydmF0aW9uICd0aW1lJyBvZiAxMjowMFouICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcbldVXzQyMiAoWm9uYWwgV2luZCwgbSBzLTEpXG5XVl80MjMgKE1lcmlkaW9uYWwgV2luZCwgbSBzLTEpXG5XU180MDEgKFdpbmQgU3BlZWQsIG0gcy0xKVxuUVdTXzU0MDEgKFdpbmQgU3BlZWQgUXVhbGl0eSlcblNXU182NDAxIChXaW5kIFNwZWVkIFNvdXJjZSlcbldEXzQxMCAoV2luZCBEaXJlY3Rpb24sIGRlZ3JlZXNfdHJ1ZSlcblFXRF81NDEwIChXaW5kIERpcmVjdGlvbiBRdWFsaXR5KVxuU1dEXzY0MTAgKFdpbmQgRGlyZWN0aW9uIFNvdXJjZSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvRHlXX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvRHlXX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9EeVcvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhb0R5Vy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb0R5VyZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvRHlXIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeUR5bi5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5RHluIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeUR5bi5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCBEYWlseSwgMTk4MC1wcmVzZW50LCBEeW5hbWljIEhlaWdodCIsICJUaGlzIGRhdGFzZXQgaGFzIGRhaWx5IER5bmFtaWMgSGVpZ2h0IGRhdGEgKGEgbWVhc3VyZSBvZiB0aGUgZWxldmF0aW9uIG9mIHRoZSBzZWEgbGV2ZWwsIGNhbGN1bGF0ZWQgYnkgaW50ZWdyYXRpbmcgdGhlIHNwZWNpZmljIHZvbHVtZSBhbm9tYWx5IG9mIHRoZSBzZWEgd2F0ZXIgYmV0d2VlbiB0aGUgc2VhIHN1cmZhY2UgYW5kIDUwMCBtIGRlcHRoKSBmcm9tIHRoZSBcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgRGFpbHkgYXZlcmFnZXMgYXJlIGNvbXB1dGVkIHN0YXJ0aW5nIGF0IDAwOjAwWiBhbmQgYXJlIGFzc2lnbmVkIGFuIG9ic2VydmF0aW9uICd0aW1lJyBvZiAxMjowMFouICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcbkRZTl8xMyAoRHluYW1pYyBIZWlnaHQsIGR5bi1jbSlcblFEXzUwMTMgKER5bmFtaWMgSGVpZ2h0IFF1YWxpdHkpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb0R5RHluX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvRHlEeW5faXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb0R5RHluL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9EeUR5bi5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb0R5RHluJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9EeUR5biJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlIZWF0LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlIZWF0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeUhlYXQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgRGFpbHksIDE5ODAtcHJlc2VudCwgSGVhdCBDb250ZW50IiwgIlRoaXMgZGF0YXNldCBoYXMgZGFpbHkgSGVhdCBDb250ZW50IGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgRGFpbHkgYXZlcmFnZXMgYXJlIGNvbXB1dGVkIHN0YXJ0aW5nIGF0IDAwOjAwWiBhbmQgYXJlIGFzc2lnbmVkIGFuIG9ic2VydmF0aW9uICd0aW1lJyBvZiAxMjowMFouICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcbkhUQ18xMzAgKEhlYXQgQ29udGVudCwgMTAqKjEwIEogbS0yKVxuSFRDXzUxMzAgKEhlYXQgQ29udGVudCBRdWFsaXR5KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9EeUhlYXRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9EeUhlYXRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb0R5SGVhdC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvRHlIZWF0LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvRHlIZWF0JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9EeUhlYXQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5UG9zLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlQb3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5UG9zLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIERhaWx5LCAxOTgwLXByZXNlbnQsIFBvc2l0aW9uIiwgIlRoaXMgZGF0YXNldCBoYXMgZGFpbHkgUG9zaXRpb24gZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICBEYWlseSBhdmVyYWdlcyBhcmUgY29tcHV0ZWQgc3RhcnRpbmcgYXQgMDA6MDBaIGFuZCBhcmUgYXNzaWduZWQgYW4gb2JzZXJ2YXRpb24gJ3RpbWUnIG9mIDEyOjAwWi4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuTE9OXzUwMiAoUHJlY2lzZSBMb25naXR1ZGUsIGRlZ3JlZV9lYXN0KVxuUVhfNTUwMiAoTG9uZ2l0dWRlIFF1YWxpdHkpXG5MQVRfNTAwIChQcmVjaXNlIExhdGl0dWRlLCBkZWdyZWVfbm9ydGgpXG5RWV81NTAwIChMYXRpdHVkZSBRdWFsaXR5KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9EeVBvc19mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb0R5UG9zX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9EeVBvcy9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvRHlQb3MucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9EeVBvcyZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvRHlQb3MiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5RC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5RCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlELmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIERhaWx5LCAxOTg3LXByZXNlbnQsIFBvdGVudGlhbCBEZW5zaXR5IEFub21hbHkiLCAiVGhpcyBkYXRhc2V0IGhhcyBkYWlseSBQb3RlbnRpYWwgRGVuc2l0eSBBbm9tYWx5IChzaWdtYS10aGV0YSkgZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICBEYWlseSBhdmVyYWdlcyBhcmUgY29tcHV0ZWQgc3RhcnRpbmcgYXQgMDA6MDBaIGFuZCBhcmUgYXNzaWduZWQgYW4gb2JzZXJ2YXRpb24gJ3RpbWUnIG9mIDEyOjAwWi4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuU1RIXzcxIChTaWdtYS1UaGV0YSwga2cgbS0zKVxuUVNUXzUwNzEgKFNpZ21hLVRoZXRhIFF1YWxpdHkpXG5TU1RfNjA3MSAoU2lnbWEtVGhldGEgU291cmNlKVxuRElDXzcwNzEgKFNpZ21hLVRoZXRhIEluc3RydW1lbnQgQ29kZSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvRHlEX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvRHlEX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9EeUQvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhb0R5RC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb0R5RCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvRHlEIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeVMuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeVMiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5Uy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCBEYWlseSwgMTk4Ny1wcmVzZW50LCBTYWxpbml0eSIsICJUaGlzIGRhdGFzZXQgaGFzIGRhaWx5IFNhbGluaXR5IGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgRGFpbHkgYXZlcmFnZXMgYXJlIGNvbXB1dGVkIHN0YXJ0aW5nIGF0IDAwOjAwWiBhbmQgYXJlIGFzc2lnbmVkIGFuIG9ic2VydmF0aW9uICd0aW1lJyBvZiAxMjowMFouICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblNfNDEgKFNlYSBXYXRlciBQcmFjdGljYWwgU2FsaW5pdHksIFBTVSlcblFTXzUwNDEgKFNhbGluaXR5IFF1YWxpdHkpXG5TU182MDQxIChTYWxpbml0eSBTb3VyY2UpXG5TSUNfODA0MSAoU2FsaW5pdHkgSW5zdHJ1bWVudCBDb2RlKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9EeVNfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9EeVNfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb0R5Uy9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvRHlTLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvRHlTJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9EeVMiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5QWRjcC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5QWRjcCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlBZGNwLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIERhaWx5LCAxOTg4LTIwMTcsIEFEQ1AiLCAiVGhpcyBkYXRhc2V0IGhhcyBkYWlseSBBY291c3RpYyBEb3BwbGVyIEN1cnJlbnQgUHJvZmlsZXIgKEFEQ1ApIHdhdGVyIGN1cnJlbnRzIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgRGFpbHkgYXZlcmFnZXMgYXJlIGNvbXB1dGVkIHN0YXJ0aW5nIGF0IDAwOjAwWiBhbmQgYXJlIGFzc2lnbmVkIGFuIG9ic2VydmF0aW9uICd0aW1lJyBvZiAxMjowMFouICBBRENQIGRhdGEgYXJlIGF2YWlsYWJsZSBvbmx5IGFmdGVyIG1vb3JpbmcgcmVjb3Zlcmllcywgd2hpY2ggYXJlIHNjaGVkdWxlZCBvbiBhbiBhbm51YWwgYmFzaXMuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcbnVfMTIwNSAoRWFzdHdhcmQgU2VhIFdhdGVyIFZlbG9jaXR5LCBjbS9zKVxuUVVfNTIwNSAoRWFzdHdhcmQgU2VhIFdhdGVyIFZlbG9jaXR5IFF1YWxpdHkpXG52XzEyMDYgKE5vcnRod2FyZCBTZWEgV2F0ZXIgVmVsb2NpdHksIGNtL3MpXG5RVl81MjA2IChOb3J0aHdhcmQgU2VhIFdhdGVyIFZlbG9jaXR5IFF1YWxpdHkpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb0R5QWRjcF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb0R5QWRjcF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvRHlBZGNwL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9EeUFkY3AucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9EeUFkY3Amc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb0R5QWRjcCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlFdmFwLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlFdmFwIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeUV2YXAuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgRGFpbHksIDE5ODktcHJlc2VudCwgRXZhcG9yYXRpb24iLCAiVGhpcyBkYXRhc2V0IGhhcyBkYWlseSBFdmFwb3JhdGlvbiBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIERhaWx5IGF2ZXJhZ2VzIGFyZSBjb21wdXRlZCBzdGFydGluZyBhdCAwMDowMFogYW5kIGFyZSBhc3NpZ25lZCBhbiBvYnNlcnZhdGlvbiAndGltZScgb2YgMTI6MDBaLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5FXzI1MCAoRXZhcG9yYXRpb24sIE1NL0hSKVxuUUVfNTI1MCAoRXZhcG9yYXRpb24gUXVhbGl0eSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvRHlFdmFwX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvRHlFdmFwX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9EeUV2YXAvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhb0R5RXZhcC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb0R5RXZhcCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvRHlFdmFwIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeVFsYXQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeVFsYXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5UWxhdC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCBEYWlseSwgMTk4OS1wcmVzZW50LCBMYXRlbnQgSGVhdCBGbHV4IiwgIlRoaXMgZGF0YXNldCBoYXMgZGFpbHkgTGF0ZW50IEhlYXQgRmx1eCBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIERhaWx5IGF2ZXJhZ2VzIGFyZSBjb21wdXRlZCBzdGFydGluZyBhdCAwMDowMFogYW5kIGFyZSBhc3NpZ25lZCBhbiBvYnNlcnZhdGlvbiAndGltZScgb2YgMTI6MDBaLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5RTF8xMzcgKExhdGVudCBIZWF0IEZsdXgsIFcgbS0yKVxuUVFMXzUxMzcgKExhdGVudCBIZWF0IEZsdXggUXVhbGl0eSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvRHlRbGF0X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvRHlRbGF0X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9EeVFsYXQvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhb0R5UWxhdC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb0R5UWxhdCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvRHlRbGF0Il0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeVJoLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlSaCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlSaC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCBEYWlseSwgMTk4OS1wcmVzZW50LCBSZWxhdGl2ZSBIdW1pZGl0eSIsICJUaGlzIGRhdGFzZXQgaGFzIGRhaWx5IFJlbGF0aXZlIEh1bWlkaXR5IGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgRGFpbHkgYXZlcmFnZXMgYXJlIGNvbXB1dGVkIHN0YXJ0aW5nIGF0IDAwOjAwWiBhbmQgYXJlIGFzc2lnbmVkIGFuIG9ic2VydmF0aW9uICd0aW1lJyBvZiAxMjowMFouICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblJIXzkxMCAoUmVsYXRpdmUgSHVtaWRpdHksIHBlcmNlbnQpXG5RUkhfNTkxMCAoUmVsYXRpdmUgSHVtaWRpdHkgUXVhbGl0eSlcblNSSF82OTEwIChSZWxhdGl2ZSBIdW1pZGl0eSBTb3VyY2UpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb0R5UmhfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9EeVJoX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9EeVJoL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9EeVJoLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvRHlSaCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvRHlSaCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlRc2VuLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlRc2VuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeVFzZW4uZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgRGFpbHksIDE5ODktcHJlc2VudCwgU2Vuc2libGUgSGVhdCBGbHV4IiwgIlRoaXMgZGF0YXNldCBoYXMgZGFpbHkgU2Vuc2libGUgSGVhdCBGbHV4IGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgRGFpbHkgYXZlcmFnZXMgYXJlIGNvbXB1dGVkIHN0YXJ0aW5nIGF0IDAwOjAwWiBhbmQgYXJlIGFzc2lnbmVkIGFuIG9ic2VydmF0aW9uICd0aW1lJyBvZiAxMjowMFouICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblFTXzEzOCAoU2Vuc2libGUgSGVhdCBGbHV4LCBXIG0tMilcblFRU181MTM4IChTZW5zaWJsZSBIZWF0IEZsdXggUXVhbGl0eSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvRHlRc2VuX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvRHlRc2VuX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9EeVFzZW4vaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhb0R5UXNlbi5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb0R5UXNlbiZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvRHlRc2VuIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeVRhdS5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5VGF1IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeVRhdS5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCBEYWlseSwgMTk4OS1wcmVzZW50LCBXaW5kIFN0cmVzcyIsICJUaGlzIGRhdGFzZXQgaGFzIGRhaWx5IFdpbmQgU3RyZXNzIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgRGFpbHkgYXZlcmFnZXMgYXJlIGNvbXB1dGVkIHN0YXJ0aW5nIGF0IDAwOjAwWiBhbmQgYXJlIGFzc2lnbmVkIGFuIG9ic2VydmF0aW9uICd0aW1lJyBvZiAxMjowMFouICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblRYXzQ0MiAoWm9uYWwgV2luZCBTdHJlc3MsIE4vbTIpXG5UWV80NDMgKE1lcmlkaW9uYWwgV2luZCBTdHJlc3MsIE4vbTIpXG5UQVVfNDQwIChXaW5kIFN0cmVzcywgTi9tMilcblREXzQ0NSAoV2luZCBTdHJlc3MgRGlyZWN0aW9uLCBkZWdyZWVzX3RydWUpXG5RVEFVXzU0NDAgKFdpbmQgU3RyZXNzIFF1YWxpdHkpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb0R5VGF1X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvRHlUYXVfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb0R5VGF1L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9EeVRhdS5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb0R5VGF1JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9EeVRhdSJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlSYWQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeVJhZCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlSYWQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgRGFpbHksIDE5OTEtcHJlc2VudCwgRG93bmdvaW5nIFNob3J0d2F2ZSBSYWRpYXRpb24iLCAiVGhpcyBkYXRhc2V0IGhhcyBkYWlseSBEb3duZ29pbmcgU2hvcnR3YXZlIFJhZGlhdGlvbiBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIERhaWx5IGF2ZXJhZ2VzIGFyZSBjb21wdXRlZCBzdGFydGluZyBhdCAwMDowMFogYW5kIGFyZSBhc3NpZ25lZCBhbiBvYnNlcnZhdGlvbiAndGltZScgb2YgMTI6MDBaLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5SRF80OTUgKERvd25nb2luZyBTaG9ydHdhdmUgUmFkaWF0aW9uLCBXL00qKjIpXG5RU1dfNTQ5NSAoU2hvcnR3YXZlIFJhZGlhdGlvbiBRdWFsaXR5KVxuU1NXXzY0OTUgKFNob3J0d2F2ZSBSYWRpYXRpb24gU291cmNlKVxuUkRTXzQ5NiAoU2hvcnR3YXZlIFJhZGlhdGlvbiBTdGFuZGFyZCBEZXZpYXRpb24sIFcvTSoqMilcblJEUF80OTcgKFNob3J0d2F2ZSBSYWRpYXRpb24gUGVhaywgVy9NKioyKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9EeVJhZF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb0R5UmFkX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9EeVJhZC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvRHlSYWQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9EeVJhZCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvRHlSYWQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5U3duZXQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeVN3bmV0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeVN3bmV0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIERhaWx5LCAxOTkxLXByZXNlbnQsIE5ldCBTaG9ydHdhdmUgUmFkaWF0aW9uIiwgIlRoaXMgZGF0YXNldCBoYXMgZGFpbHkgTmV0IFNob3J0d2F2ZSBSYWRpYXRpb24gZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICBEYWlseSBhdmVyYWdlcyBhcmUgY29tcHV0ZWQgc3RhcnRpbmcgYXQgMDA6MDBaIGFuZCBhcmUgYXNzaWduZWQgYW4gb2JzZXJ2YXRpb24gJ3RpbWUnIG9mIDEyOjAwWi4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuU1dOXzE0OTUgKE5ldCBTaG9ydHdhdmUgUmFkaWF0aW9uLCBXL00qKjIpXG5RU1dfNTQ5NSAoU2hvcnR3YXZlIFJhZGlhdGlvbiBRdWFsaXR5KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9EeVN3bmV0X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvRHlTd25ldF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvRHlTd25ldC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvRHlTd25ldC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb0R5U3duZXQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb0R5U3duZXQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5U3NzLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlTc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5U3NzLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIERhaWx5LCAxOTkyLXByZXNlbnQsIFNlYSBTdXJmYWNlIFNhbGluaXR5IiwgIlRoaXMgZGF0YXNldCBoYXMgZGFpbHkgU2VhIFN1cmZhY2UgU2FsaW5pdHkgZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICBEYWlseSBhdmVyYWdlcyBhcmUgY29tcHV0ZWQgc3RhcnRpbmcgYXQgMDA6MDBaIGFuZCBhcmUgYXNzaWduZWQgYW4gb2JzZXJ2YXRpb24gJ3RpbWUnIG9mIDEyOjAwWi4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuU180MSAoU2VhIFdhdGVyIFByYWN0aWNhbCBTYWxpbml0eSwgUFNVKVxuUVNfNTA0MSAoU2FsaW5pdHkgUXVhbGl0eSlcblNTXzYwNDEgKFNhbGluaXR5IFNvdXJjZSlcblNJQ183MDQxIChTYWxpbml0eSBJbnN0cnVtZW50IENvZGUpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb0R5U3NzX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvRHlTc3NfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb0R5U3NzL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9EeVNzcy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb0R5U3NzJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9EeVNzcyJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlTc2Quc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeVNzZCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlTc2QuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgRGFpbHksIDE5OTItcHJlc2VudCwgU2lnbWEtVGhldGEiLCAiVGhpcyBkYXRhc2V0IGhhcyBkYWlseSBTaWdtYS1UaGV0YSAoUG90ZW50aWFsIERlbnNpdHkgQW5vbWFseSkgZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICBEYWlseSBhdmVyYWdlcyBhcmUgY29tcHV0ZWQgc3RhcnRpbmcgYXQgMDA6MDBaIGFuZCBhcmUgYXNzaWduZWQgYW4gb2JzZXJ2YXRpb24gJ3RpbWUnIG9mIDEyOjAwWi4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuU1RIXzcxIChTaWdtYS1UaGV0YSwga2cgbS0zKVxuUVNUXzUwNzEgKFNpZ21hLVRoZXRhIFF1YWxpdHkpXG5TU1RfNjA3MSAoU2lnbWEtVGhldGEgU291cmNlKVxuRElDXzcwNzEgKFNpZ21hLVRoZXRhIEluc3RydW1lbnQgQ29kZSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvRHlTc2RfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9EeVNzZF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvRHlTc2QvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhb0R5U3NkLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvRHlTc2Qmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb0R5U3NkIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeUVtcC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5RW1wIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeUVtcC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCBEYWlseSwgMTk5Ny1wcmVzZW50LCBFdmFwb3JhdGlvbiBNaW51cyBQcmVjaXBpdGF0aW9uIiwgIlRoaXMgZGF0YXNldCBoYXMgZGFpbHkgRXZhcG9yYXRpb24gTWludXMgUHJlY2lwaXRhdGlvbiBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIERhaWx5IGF2ZXJhZ2VzIGFyZSBjb21wdXRlZCBzdGFydGluZyBhdCAwMDowMFogYW5kIGFyZSBhc3NpZ25lZCBhbiBvYnNlcnZhdGlvbiAndGltZScgb2YgMTI6MDBaLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5FTVBfMjUxIChFdmFwb3JhdGlvbiBNaW51cyBQcmVjaXBpdGF0aW9uLCBtbS9ocilcblFFTVBfNTI1MSAoRXZhcG9yYXRpb24gTWludXMgUHJlY2lwaXRhdGlvbiBRdWFsaXR5KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9EeUVtcF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb0R5RW1wX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9EeUVtcC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvRHlFbXAucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9EeUVtcCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvRHlFbXAiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5UmYuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeVJmIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeVJmLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIERhaWx5LCAxOTk3LXByZXNlbnQsIEhlYXQgRmx1eCBEdWUgVG8gUmFpbiIsICJUaGlzIGRhdGFzZXQgaGFzIGRhaWx5IEhlYXQgRmx1eCBEdWUgVG8gUmFpbiBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIERhaWx5IGF2ZXJhZ2VzIGFyZSBjb21wdXRlZCBzdGFydGluZyBhdCAwMDowMFogYW5kIGFyZSBhc3NpZ25lZCBhbiBvYnNlcnZhdGlvbiAndGltZScgb2YgMTI6MDBaLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5RUl8xMzkgKEhlYXQgRmx1eCBEdWUgVG8gUmFpbiwgVyBtLTIpXG5RUVJfNTEzOSAoSGVhdCBGbHV4IER1ZSBUbyBSYWluIFF1YWxpdHkpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb0R5UmZfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9EeVJmX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9EeVJmL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9EeVJmLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvRHlSZiZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvRHlSZiJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlSYWluLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlSYWluIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeVJhaW4uZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgRGFpbHksIDE5OTctcHJlc2VudCwgUHJlY2lwaXRhdGlvbiIsICJUaGlzIGRhdGFzZXQgaGFzIGRhaWx5IFByZWNpcGl0YXRpb24gZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICBEYWlseSBhdmVyYWdlcyBhcmUgY29tcHV0ZWQgc3RhcnRpbmcgYXQgMDA6MDBaIGFuZCBhcmUgYXNzaWduZWQgYW4gb2JzZXJ2YXRpb24gJ3RpbWUnIG9mIDEyOjAwWi4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuUk5fNDg1IChQcmVjaXBpdGF0aW9uLCBNTS9IUilcblFSTl81NDg1IChQcmVjaXBpdGF0aW9uIFF1YWxpdHkpXG5TUk5fNjQ4NSAoUHJlY2lwaXRhdGlvbiBTb3VyY2UpXG5STlNfNDg2IChQcmVjaXBpdGF0aW9uIFN0YW5kYXJkIERldmlhdGlvbiwgTU0vSFIpXG5STlBfNDg3IChQZXJjZW50IFRpbWUgUmFpbmluZywgcGVyY2VudClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvRHlSYWluX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvRHlSYWluX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9EeVJhaW4vaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhb0R5UmFpbi5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb0R5UmFpbiZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvRHlSYWluIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeUJwLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlCcCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlCcC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCBEYWlseSwgMTk5OC1wcmVzZW50LCBCYXJvbWV0cmljIChBaXIpIFByZXNzdXJlIiwgIlRoaXMgZGF0YXNldCBoYXMgZGFpbHkgQmFyb21ldHJpYyAoQWlyKSBQcmVzc3VyZSBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIERhaWx5IGF2ZXJhZ2VzIGFyZSBjb21wdXRlZCBzdGFydGluZyBhdCAwMDowMFogYW5kIGFyZSBhc3NpZ25lZCBhbiBvYnNlcnZhdGlvbiAndGltZScgb2YgMTI6MDBaLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5CUF85MTUgKEJhcm9tZXRyaWMgKEFpcikgUHJlc3N1cmUsIGhQYSlcblFCUF81OTE1IChCYXJvbWV0cmljIChBaXIpIFByZXNzdXJlIFF1YWxpdHkpXG5TQlBfNjkxNSAoQmFyb21ldHJpYyAoQWlyKSBQcmVzc3VyZSBTb3VyY2UpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb0R5QnBfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9EeUJwX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9EeUJwL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9EeUJwLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvRHlCcCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvRHlCcCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlCZi5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5QmYiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5QmYuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgRGFpbHksIDIwMDAtcHJlc2VudCwgQnVveWFuY3kgRmx1eCIsICJUaGlzIGRhdGFzZXQgaGFzIGRhaWx5IEJ1b3lhbmN5IEZsdXggZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICBEYWlseSBhdmVyYWdlcyBhcmUgY29tcHV0ZWQgc3RhcnRpbmcgYXQgMDA6MDBaIGFuZCBhcmUgYXNzaWduZWQgYW4gb2JzZXJ2YXRpb24gJ3RpbWUnIG9mIDEyOjAwWi4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuQkZfMTkxIChCdW95YW5jeSBGbHV4LCAxMCoqNiBrZyBtLTIgcy0xKVxuUUJGXzUxOTEgKEJ1b3lhbmN5IEZsdXggUXVhbGl0eSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvRHlCZl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb0R5QmZfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb0R5QmYvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhb0R5QmYucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9EeUJmJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9EeUJmIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeUx3LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlMdyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlMdy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCBEYWlseSwgMjAwMC1wcmVzZW50LCBMb25nd2F2ZSBSYWRpYXRpb24iLCAiVGhpcyBkYXRhc2V0IGhhcyBkYWlseSBJbmNvbWluZyBMb25nd2F2ZSBSYWRpYXRpb24gZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICBEYWlseSBhdmVyYWdlcyBhcmUgY29tcHV0ZWQgc3RhcnRpbmcgYXQgMDA6MDBaIGFuZCBhcmUgYXNzaWduZWQgYW4gb2JzZXJ2YXRpb24gJ3RpbWUnIG9mIDEyOjAwWi4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuUWxfMTM2IChJbmNvbWluZyBMb25nd2F2ZSBSYWRpYXRpb24sIFcgbS0yKVxuUUxXXzUxMzYgKExvbmd3YXZlIFJhZGlhdGlvbiBRdWFsaXR5KVxuU0xXXzYxMzYgKExvbmd3YXZlIFJhZGlhdGlvbiBTb3VyY2UpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb0R5THdfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9EeUx3X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9EeUx3L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9EeUx3LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvRHlMdyZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvRHlMdyJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlMd25ldC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5THduZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb0R5THduZXQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgRGFpbHksIDIwMDAtcHJlc2VudCwgTmV0IExvbmd3YXZlIFJhZGlhdGlvbiIsICJUaGlzIGRhdGFzZXQgaGFzIGRhaWx5IE5ldCBMb25nd2F2ZSBSYWRpYXRpb24gZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICBEYWlseSBhdmVyYWdlcyBhcmUgY29tcHV0ZWQgc3RhcnRpbmcgYXQgMDA6MDBaIGFuZCBhcmUgYXNzaWduZWQgYW4gb2JzZXJ2YXRpb24gJ3RpbWUnIG9mIDEyOjAwWi4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuTFdOXzExMzYgKE5ldCBMb25nd2F2ZSBSYWRpYXRpb24sIFcgbS0yKVxuUUxXXzUxMzYgKExvbmd3YXZlIFJhZGlhdGlvbiBRdWFsaXR5KVxuU0xXXzYxMzYgKExvbmd3YXZlIFJhZGlhdGlvbiBTb3VyY2UpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb0R5THduZXRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9EeUx3bmV0X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9EeUx3bmV0L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9EeUx3bmV0LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvRHlMd25ldCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvRHlMd25ldCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlRbmV0LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvRHlRbmV0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9EeVFuZXQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgRGFpbHksIDIwMDAtcHJlc2VudCwgVG90YWwgSGVhdCBGbHV4IiwgIlRoaXMgZGF0YXNldCBoYXMgZGFpbHkgVG90YWwgSGVhdCBGbHV4IGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgRGFpbHkgYXZlcmFnZXMgYXJlIGNvbXB1dGVkIHN0YXJ0aW5nIGF0IDAwOjAwWiBhbmQgYXJlIGFzc2lnbmVkIGFuIG9ic2VydmF0aW9uICd0aW1lJyBvZiAxMjowMFouICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblFUXzIxMCAoVG90YWwgSGVhdCBGbHV4LCBXL00qKjIpXG5RUTBfNTIxMCAoVG90YWwgSGVhdCBGbHV4IFF1YWxpdHkpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb0R5UW5ldF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb0R5UW5ldF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvRHlRbmV0L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9EeVFuZXQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9EeVFuZXQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb0R5UW5ldCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uSXNvLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uSXNvIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25Jc28uZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgTW9udGhseSwgMTk3Ny1wcmVzZW50LCAyMEMgSXNvdGhlcm0gRGVwdGgiLCAiVGhpcyBkYXRhc2V0IGhhcyBtb250aGx5IDIwQyBJc290aGVybSBEZXB0aCBkYXRhICh0aGUgZGVwdGggYXQgd2hpY2ggdGhlIG9jZWFuIHRlbXBlcmF0dXJlIGlzIDIwQykgZnJvbSB0aGUgXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIE1vbnRobHkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIGRhaWx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGEgbW9udGguICBBIG1pbmltdW0gb2YgMTUgZGFpbHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgbW9udGhseSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcbklTT182ICgyMEMgSXNvdGhlcm0gRGVwdGgsIG0pXG5RSV81MDA2ICgyMEMgRGVwdGggUXVhbGl0eSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvTW9uSXNvX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvTW9uSXNvX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9Nb25Jc28vaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhb01vbklzby5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb01vbklzbyZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvTW9uSXNvIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25BaXJ0LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uQWlydCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uQWlydC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCBNb250aGx5LCAxOTc3LXByZXNlbnQsIEFpciBUZW1wZXJhdHVyZSIsICJUaGlzIGRhdGFzZXQgaGFzIG1vbnRobHkgQWlyIFRlbXBlcmF0dXJlIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgTW9udGhseSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgZGFpbHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgYSBtb250aC4gIEEgbWluaW11bSBvZiAxNSBkYWlseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSBtb250aGx5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuQVRfMjEgKEFpciBUZW1wZXJhdHVyZSwgZGVncmVlX0MpXG5RQVRfNTAyMSAoQWlyIFRlbXBlcmF0dXJlIFF1YWxpdHkpXG5TQVRfNjAyMSAoQWlyIFRlbXBlcmF0dXJlIFNvdXJjZSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvTW9uQWlydF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb01vbkFpcnRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb01vbkFpcnQvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhb01vbkFpcnQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9Nb25BaXJ0JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9Nb25BaXJ0Il0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25DdXIuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25DdXIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vbkN1ci5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCBNb250aGx5LCAxOTc3LXByZXNlbnQsIEN1cnJlbnRzIiwgIlRoaXMgZGF0YXNldCBoYXMgbW9udGhseSBDdXJyZW50cyBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIE1vbnRobHkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIGRhaWx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGEgbW9udGguICBBIG1pbmltdW0gb2YgMTUgZGFpbHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgbW9udGhseSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblVfMzIwIChFYXN0d2FyZCBTZWEgV2F0ZXIgVmVsb2NpdHksIGNtIHMtMSlcblZfMzIxIChOb3J0aHdhcmQgU2VhIFdhdGVyIFZlbG9jaXR5LCBjbSBzLTEpXG5DU18zMDAgKFNlYSBXYXRlciBWZWxvY2l0eSwgY20gcy0xKVxuQ0RfMzEwIChEaXJlY3Rpb24gb2YgU2VhIFdhdGVyIFZlbG9jaXR5LCBkZWdyZWVzX3RydWUpXG5RQ1NfNTMwMCAoQ3VycmVudCBTcGVlZCBRdWFsaXR5KVxuUUNEXzUzMTAgKEN1cnJlbnQgRGlyZWN0aW9uIFF1YWxpdHkpXG5TQ1NfNjMwMCAoQ3VycmVudCBTcGVlZCBTb3VyY2UpXG5DSUNfNzMwMCAoQ3VycmVudCBJbnN0cnVtZW50IENvZGUpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb01vbkN1cl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb01vbkN1cl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvTW9uQ3VyL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9Nb25DdXIucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9Nb25DdXImc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb01vbkN1ciJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uU3N0LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uU3N0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25Tc3QuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgTW9udGhseSwgMTk3Ny1wcmVzZW50LCBTZWEgU3VyZmFjZSBUZW1wZXJhdHVyZSIsICJUaGlzIGRhdGFzZXQgaGFzIG1vbnRobHkgU2VhIFN1cmZhY2UgVGVtcGVyYXR1cmUgKFNTVCkgZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICBNb250aGx5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBkYWlseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBhIG1vbnRoLiAgQSBtaW5pbXVtIG9mIDE1IGRhaWx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIG1vbnRobHkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5UXzI1IChTZWEgU3VyZmFjZSBUZW1wZXJhdHVyZSwgZGVncmVlX0MpXG5RVF81MDI1IChTZWEgU3VyZmFjZSBUZW1wZXJhdHVyZSBRdWFsaXR5KVxuU1RfNjAyNSAoU2VhIFN1cmZhY2UgVGVtcGVyYXR1cmUgU291cmNlKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9Nb25Tc3RfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9Nb25Tc3RfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb01vblNzdC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvTW9uU3N0LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvTW9uU3N0JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9Nb25Tc3QiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vblQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25UIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25ULmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIE1vbnRobHksIDE5NzctcHJlc2VudCwgVGVtcGVyYXR1cmUiLCAiVGhpcyBkYXRhc2V0IGhhcyBtb250aGx5IFRlbXBlcmF0dXJlIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgTW9udGhseSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgZGFpbHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgYSBtb250aC4gIEEgbWluaW11bSBvZiAxNSBkYWlseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSBtb250aGx5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuVF8yMCAoU2VhIFdhdGVyIFRlbXBlcmF0dXJlLCBkZWdyZWVfQylcblFUXzUwMjAgKFRlbXBlcmF0dXJlIFF1YWxpdHkpXG5TVF82MDIwIChUZW1wZXJhdHVyZSBTb3VyY2UpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb01vblRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9Nb25UX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9Nb25UL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9Nb25ULnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvTW9uVCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvTW9uVCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uVy5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vblciLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vblcuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgTW9udGhseSwgMTk3Ny1wcmVzZW50LCBXaW5kIiwgIlRoaXMgZGF0YXNldCBoYXMgbW9udGhseSBXaW5kIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgTW9udGhseSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgZGFpbHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgYSBtb250aC4gIEEgbWluaW11bSBvZiAxNSBkYWlseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSBtb250aGx5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuV1VfNDIyIChab25hbCBXaW5kLCBtIHMtMSlcbldWXzQyMyAoTWVyaWRpb25hbCBXaW5kLCBtIHMtMSlcbldTXzQwMSAoV2luZCBTcGVlZCwgbSBzLTEpXG5RV1NfNTQwMSAoV2luZCBTcGVlZCBRdWFsaXR5KVxuU1dTXzY0MDEgKFdpbmQgU3BlZWQgU291cmNlKVxuV0RfNDEwIChXaW5kIERpcmVjdGlvbiwgZGVncmVlc190cnVlKVxuUVdEXzU0MTAgKFdpbmQgRGlyZWN0aW9uIFF1YWxpdHkpXG5TV0RfNjQxMCAoV2luZCBEaXJlY3Rpb24gU291cmNlKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9Nb25XX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvTW9uV19pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvTW9uVy9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvTW9uVy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb01vblcmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb01vblciXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vbkR5bi5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vbkR5biIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uRHluLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIE1vbnRobHksIDE5ODAtcHJlc2VudCwgRHluYW1pYyBIZWlnaHQiLCAiVGhpcyBkYXRhc2V0IGhhcyBtb250aGx5IER5bmFtaWMgSGVpZ2h0IGRhdGEgKGEgbWVhc3VyZSBvZiB0aGUgZWxldmF0aW9uIG9mIHRoZSBzZWEgbGV2ZWwsIGNhbGN1bGF0ZWQgYnkgaW50ZWdyYXRpbmcgdGhlIHNwZWNpZmljIHZvbHVtZSBhbm9tYWx5IG9mIHRoZSBzZWEgd2F0ZXIgYmV0d2VlbiB0aGUgc2VhIHN1cmZhY2UgYW5kIDUwMCBtIGRlcHRoKSBmcm9tIHRoZSBcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgTW9udGhseSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgZGFpbHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgYSBtb250aC4gIEEgbWluaW11bSBvZiAxNSBkYWlseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSBtb250aGx5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuRFlOXzEzIChEeW5hbWljIEhlaWdodCwgZHluLWNtKVxuUURfNTAxMyAoRHluYW1pYyBIZWlnaHQgUXVhbGl0eSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvTW9uRHluX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvTW9uRHluX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9Nb25EeW4vaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhb01vbkR5bi5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb01vbkR5biZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvTW9uRHluIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25IZWF0LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uSGVhdCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uSGVhdC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCBNb250aGx5LCAxOTgwLXByZXNlbnQsIEhlYXQgQ29udGVudCIsICJUaGlzIGRhdGFzZXQgaGFzIG1vbnRobHkgSGVhdCBDb250ZW50IGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgTW9udGhseSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgZGFpbHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgYSBtb250aC4gIEEgbWluaW11bSBvZiAxNSBkYWlseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSBtb250aGx5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuSFRDXzEzMCAoSGVhdCBDb250ZW50LCAxMCoqMTAgSiBtLTIpXG5IVENfNTEzMCAoSGVhdCBDb250ZW50IFF1YWxpdHkpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb01vbkhlYXRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9Nb25IZWF0X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9Nb25IZWF0L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9Nb25IZWF0LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvTW9uSGVhdCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvTW9uSGVhdCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uUG9zLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uUG9zIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25Qb3MuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgTW9udGhseSwgMTk4MC1wcmVzZW50LCBQb3NpdGlvbiIsICJUaGlzIGRhdGFzZXQgaGFzIG1vbnRobHkgUG9zaXRpb24gZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICBNb250aGx5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBkYWlseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBhIG1vbnRoLiAgQSBtaW5pbXVtIG9mIDE1IGRhaWx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIG1vbnRobHkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5MT05fNTAyIChQcmVjaXNlIExvbmdpdHVkZSwgZGVncmVlX2Vhc3QpXG5RWF81NTAyIChMb25naXR1ZGUgUXVhbGl0eSlcbkxBVF81MDAgKFByZWNpc2UgTGF0aXR1ZGUsIGRlZ3JlZV9ub3J0aClcblFZXzU1MDAgKExhdGl0dWRlIFF1YWxpdHkpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb01vblBvc19mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb01vblBvc19pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvTW9uUG9zL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9Nb25Qb3MucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9Nb25Qb3Mmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb01vblBvcyJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uRC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vbkQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vbkQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgTW9udGhseSwgMTk4Ny1wcmVzZW50LCBQb3RlbnRpYWwgRGVuc2l0eSBBbm9tYWx5IiwgIlRoaXMgZGF0YXNldCBoYXMgbW9udGhseSBQb3RlbnRpYWwgRGVuc2l0eSBBbm9tYWx5IChzaWdtYS10aGV0YSkgZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICBNb250aGx5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBkYWlseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBhIG1vbnRoLiAgQSBtaW5pbXVtIG9mIDE1IGRhaWx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIG1vbnRobHkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5TVEhfNzEgKFNpZ21hLVRoZXRhLCBrZyBtLTMpXG5RU1RfNTA3MSAoU2lnbWEtVGhldGEgUXVhbGl0eSlcblNTVF82MDcxIChTaWdtYS1UaGV0YSBTb3VyY2UpXG5ESUNfNzA3MSAoU2lnbWEtVGhldGEgSW5zdHJ1bWVudCBDb2RlKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9Nb25EX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvTW9uRF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvTW9uRC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvTW9uRC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb01vbkQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb01vbkQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vblMuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25TIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25TLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIE1vbnRobHksIDE5ODctcHJlc2VudCwgU2FsaW5pdHkiLCAiVGhpcyBkYXRhc2V0IGhhcyBtb250aGx5IFNhbGluaXR5IGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgTW9udGhseSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgZGFpbHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgYSBtb250aC4gIEEgbWluaW11bSBvZiAxNSBkYWlseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSBtb250aGx5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuU180MSAoU2VhIFdhdGVyIFByYWN0aWNhbCBTYWxpbml0eSwgUFNVKVxuUVNfNTA0MSAoU2FsaW5pdHkgUXVhbGl0eSlcblNTXzYwNDEgKFNhbGluaXR5IFNvdXJjZSlcblNJQ184MDQxIChTYWxpbml0eSBJbnN0cnVtZW50IENvZGUpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb01vblNfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9Nb25TX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9Nb25TL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9Nb25TLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvTW9uUyZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvTW9uUyJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uQWRjcC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vbkFkY3AiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vbkFkY3AuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgTW9udGhseSwgMTk4OC0yMDE3LCBBRENQIiwgIlRoaXMgZGF0YXNldCBoYXMgbW9udGhseSBBY291c3RpYyBEb3BwbGVyIEN1cnJlbnQgUHJvZmlsZXIgKEFEQ1ApIHdhdGVyIGN1cnJlbnRzIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgTW9udGhseSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgZGFpbHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgYSBtb250aC4gIEEgbWluaW11bSBvZiAxNSBkYWlseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSBtb250aGx5IGF2ZXJhZ2UuICBBRENQIGRhdGEgYXJlIGF2YWlsYWJsZSBvbmx5IGFmdGVyIG1vb3JpbmcgcmVjb3Zlcmllcywgd2hpY2ggYXJlIHNjaGVkdWxlZCBvbiBhbiBhbm51YWwgYmFzaXMuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcbnVfMTIwNSAoRWFzdHdhcmQgU2VhIFdhdGVyIFZlbG9jaXR5LCBjbS9zKVxuUVVfNTIwNSAoRWFzdHdhcmQgU2VhIFdhdGVyIFZlbG9jaXR5IFF1YWxpdHkpXG52XzEyMDYgKE5vcnRod2FyZCBTZWEgV2F0ZXIgVmVsb2NpdHksIGNtL3MpXG5RVl81MjA2IChOb3J0aHdhcmQgU2VhIFdhdGVyIFZlbG9jaXR5IFF1YWxpdHkpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb01vbkFkY3BfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9Nb25BZGNwX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9Nb25BZGNwL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9Nb25BZGNwLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvTW9uQWRjcCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvTW9uQWRjcCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uRXZhcC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vbkV2YXAiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vbkV2YXAuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgTW9udGhseSwgMTk4OS1wcmVzZW50LCBFdmFwb3JhdGlvbiIsICJUaGlzIGRhdGFzZXQgaGFzIG1vbnRobHkgRXZhcG9yYXRpb24gZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICBNb250aGx5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBkYWlseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBhIG1vbnRoLiAgQSBtaW5pbXVtIG9mIDE1IGRhaWx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIG1vbnRobHkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5FXzI1MCAoRXZhcG9yYXRpb24sIE1NL0hSKVxuUUVfNTI1MCAoRXZhcG9yYXRpb24gUXVhbGl0eSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvTW9uRXZhcF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb01vbkV2YXBfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb01vbkV2YXAvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhb01vbkV2YXAucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9Nb25FdmFwJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9Nb25FdmFwIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25RbGF0LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uUWxhdCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uUWxhdC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCBNb250aGx5LCAxOTg5LXByZXNlbnQsIExhdGVudCBIZWF0IEZsdXgiLCAiVGhpcyBkYXRhc2V0IGhhcyBtb250aGx5IExhdGVudCBIZWF0IEZsdXggZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICBNb250aGx5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBkYWlseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBhIG1vbnRoLiAgQSBtaW5pbXVtIG9mIDE1IGRhaWx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIG1vbnRobHkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5RTF8xMzcgKExhdGVudCBIZWF0IEZsdXgsIFcgbS0yKVxuUVFMXzUxMzcgKExhdGVudCBIZWF0IEZsdXggUXVhbGl0eSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvTW9uUWxhdF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb01vblFsYXRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb01vblFsYXQvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhb01vblFsYXQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9Nb25RbGF0JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9Nb25RbGF0Il0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25SaC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vblJoIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25SaC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCBNb250aGx5LCAxOTg5LXByZXNlbnQsIFJlbGF0aXZlIEh1bWlkaXR5IiwgIlRoaXMgZGF0YXNldCBoYXMgbW9udGhseSBSZWxhdGl2ZSBIdW1pZGl0eSBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIE1vbnRobHkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIGRhaWx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGEgbW9udGguICBBIG1pbmltdW0gb2YgMTUgZGFpbHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgbW9udGhseSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblJIXzkxMCAoUmVsYXRpdmUgSHVtaWRpdHksIHBlcmNlbnQpXG5RUkhfNTkxMCAoUmVsYXRpdmUgSHVtaWRpdHkgUXVhbGl0eSlcblNSSF82OTEwIChSZWxhdGl2ZSBIdW1pZGl0eSBTb3VyY2UpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb01vblJoX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvTW9uUmhfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb01vblJoL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9Nb25SaC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb01vblJoJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9Nb25SaCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uUXNlbi5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vblFzZW4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vblFzZW4uZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgTW9udGhseSwgMTk4OS1wcmVzZW50LCBTZW5zaWJsZSBIZWF0IEZsdXgiLCAiVGhpcyBkYXRhc2V0IGhhcyBtb250aGx5IFNlbnNpYmxlIEhlYXQgRmx1eCBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIE1vbnRobHkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIGRhaWx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGEgbW9udGguICBBIG1pbmltdW0gb2YgMTUgZGFpbHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgbW9udGhseSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblFTXzEzOCAoU2Vuc2libGUgSGVhdCBGbHV4LCBXIG0tMilcblFRU181MTM4IChTZW5zaWJsZSBIZWF0IEZsdXggUXVhbGl0eSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvTW9uUXNlbl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb01vblFzZW5faXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb01vblFzZW4vaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhb01vblFzZW4ucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9Nb25Rc2VuJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9Nb25Rc2VuIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25UYXUuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25UYXUiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vblRhdS5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCBNb250aGx5LCAxOTg5LXByZXNlbnQsIFdpbmQgU3RyZXNzIiwgIlRoaXMgZGF0YXNldCBoYXMgbW9udGhseSBXaW5kIFN0cmVzcyBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIE1vbnRobHkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIGRhaWx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGEgbW9udGguICBBIG1pbmltdW0gb2YgMTUgZGFpbHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgbW9udGhseSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblRYXzQ0MiAoWm9uYWwgV2luZCBTdHJlc3MsIE4vbTIpXG5UWV80NDMgKE1lcmlkaW9uYWwgV2luZCBTdHJlc3MsIE4vbTIpXG5UQVVfNDQwIChXaW5kIFN0cmVzcywgTi9tMilcblREXzQ0NSAoV2luZCBTdHJlc3MgRGlyZWN0aW9uLCBkZWdyZWVzX3RydWUpXG5RVEFVXzU0NDAgKFdpbmQgU3RyZXNzIFF1YWxpdHkpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb01vblRhdV9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb01vblRhdV9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvTW9uVGF1L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9Nb25UYXUucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9Nb25UYXUmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb01vblRhdSJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uUmFkLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uUmFkIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25SYWQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgTW9udGhseSwgMTk5MS1wcmVzZW50LCBEb3duZ29pbmcgU2hvcnR3YXZlIFJhZGlhdGlvbiIsICJUaGlzIGRhdGFzZXQgaGFzIG1vbnRobHkgRG93bmdvaW5nIFNob3J0d2F2ZSBSYWRpYXRpb24gZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICBNb250aGx5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBkYWlseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBhIG1vbnRoLiAgQSBtaW5pbXVtIG9mIDE1IGRhaWx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIG1vbnRobHkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5SRF80OTUgKERvd25nb2luZyBTaG9ydHdhdmUgUmFkaWF0aW9uLCBXL00qKjIpXG5RU1dfNTQ5NSAoU2hvcnR3YXZlIFJhZGlhdGlvbiBRdWFsaXR5KVxuU1NXXzY0OTUgKFNob3J0d2F2ZSBSYWRpYXRpb24gU291cmNlKVxuUkRTXzQ5NiAoU2hvcnR3YXZlIFJhZGlhdGlvbiBTdGFuZGFyZCBEZXZpYXRpb24sIFcvTSoqMilcblJEUF80OTcgKFNob3J0d2F2ZSBSYWRpYXRpb24gUGVhaywgVy9NKioyKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9Nb25SYWRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9Nb25SYWRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb01vblJhZC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvTW9uUmFkLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvTW9uUmFkJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9Nb25SYWQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vblN3bmV0LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uU3duZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vblN3bmV0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIE1vbnRobHksIDE5OTEtcHJlc2VudCwgTmV0IFNob3J0d2F2ZSBSYWRpYXRpb24iLCAiVGhpcyBkYXRhc2V0IGhhcyBtb250aGx5IE5ldCBTaG9ydHdhdmUgUmFkaWF0aW9uIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgTW9udGhseSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgZGFpbHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgYSBtb250aC4gIEEgbWluaW11bSBvZiAxNSBkYWlseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSBtb250aGx5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuU1dOXzE0OTUgKE5ldCBTaG9ydHdhdmUgUmFkaWF0aW9uLCBXL00qKjIpXG5RU1dfNTQ5NSAoU2hvcnR3YXZlIFJhZGlhdGlvbiBRdWFsaXR5KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9Nb25Td25ldF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb01vblN3bmV0X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9Nb25Td25ldC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvTW9uU3duZXQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9Nb25Td25ldCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvTW9uU3duZXQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vblNzcy5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vblNzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uU3NzLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIE1vbnRobHksIDE5OTItcHJlc2VudCwgU2VhIFN1cmZhY2UgU2FsaW5pdHkiLCAiVGhpcyBkYXRhc2V0IGhhcyBtb250aGx5IFNlYSBTdXJmYWNlIFNhbGluaXR5IGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgTW9udGhseSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgZGFpbHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgYSBtb250aC4gIEEgbWluaW11bSBvZiAxNSBkYWlseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSBtb250aGx5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuU180MSAoU2VhIFdhdGVyIFByYWN0aWNhbCBTYWxpbml0eSwgUFNVKVxuUVNfNTA0MSAoU2FsaW5pdHkgUXVhbGl0eSlcblNTXzYwNDEgKFNhbGluaXR5IFNvdXJjZSlcblNJQ183MDQxIChTYWxpbml0eSBJbnN0cnVtZW50IENvZGUpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb01vblNzc19mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb01vblNzc19pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvTW9uU3NzL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9Nb25Tc3MucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9Nb25Tc3Mmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb01vblNzcyJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uU3NkLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uU3NkIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25Tc2QuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgTW9udGhseSwgMTk5Mi1wcmVzZW50LCBTaWdtYS1UaGV0YSIsICJUaGlzIGRhdGFzZXQgaGFzIG1vbnRobHkgU2lnbWEtVGhldGEgKFBvdGVudGlhbCBEZW5zaXR5IEFub21hbHkpIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgTW9udGhseSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgZGFpbHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgYSBtb250aC4gIEEgbWluaW11bSBvZiAxNSBkYWlseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSBtb250aGx5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuU1RIXzcxIChTaWdtYS1UaGV0YSwga2cgbS0zKVxuUVNUXzUwNzEgKFNpZ21hLVRoZXRhIFF1YWxpdHkpXG5TU1RfNjA3MSAoU2lnbWEtVGhldGEgU291cmNlKVxuRElDXzcwNzEgKFNpZ21hLVRoZXRhIEluc3RydW1lbnQgQ29kZSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvTW9uU3NkX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvTW9uU3NkX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9Nb25Tc2QvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhb01vblNzZC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb01vblNzZCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvTW9uU3NkIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25FbXAuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25FbXAiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vbkVtcC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCBNb250aGx5LCAxOTk3LXByZXNlbnQsIEV2YXBvcmF0aW9uIE1pbnVzIFByZWNpcGl0YXRpb24iLCAiVGhpcyBkYXRhc2V0IGhhcyBtb250aGx5IEV2YXBvcmF0aW9uIE1pbnVzIFByZWNpcGl0YXRpb24gZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICBNb250aGx5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBkYWlseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBhIG1vbnRoLiAgQSBtaW5pbXVtIG9mIDE1IGRhaWx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIG1vbnRobHkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5FTVBfMjUxIChFdmFwb3JhdGlvbiBNaW51cyBQcmVjaXBpdGF0aW9uLCBtbS9ocilcblFFTVBfNTI1MSAoRXZhcG9yYXRpb24gTWludXMgUHJlY2lwaXRhdGlvbiBRdWFsaXR5KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9Nb25FbXBfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9Nb25FbXBfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb01vbkVtcC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvTW9uRW1wLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvTW9uRW1wJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9Nb25FbXAiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vblJmLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uUmYiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vblJmLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIE1vbnRobHksIDE5OTctcHJlc2VudCwgSGVhdCBGbHV4IER1ZSBUbyBSYWluIiwgIlRoaXMgZGF0YXNldCBoYXMgbW9udGhseSBIZWF0IEZsdXggRHVlIFRvIFJhaW4gZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICBNb250aGx5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBkYWlseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBhIG1vbnRoLiAgQSBtaW5pbXVtIG9mIDE1IGRhaWx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIG1vbnRobHkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5RUl8xMzkgKEhlYXQgRmx1eCBEdWUgVG8gUmFpbiwgVyBtLTIpXG5RUVJfNTEzOSAoSGVhdCBGbHV4IER1ZSBUbyBSYWluIFF1YWxpdHkpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb01vblJmX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvTW9uUmZfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb01vblJmL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9Nb25SZi5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb01vblJmJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9Nb25SZiJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uUmFpbi5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vblJhaW4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vblJhaW4uZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgTW9udGhseSwgMTk5Ny1wcmVzZW50LCBQcmVjaXBpdGF0aW9uIiwgIlRoaXMgZGF0YXNldCBoYXMgbW9udGhseSBQcmVjaXBpdGF0aW9uIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgTW9udGhseSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgZGFpbHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgYSBtb250aC4gIEEgbWluaW11bSBvZiAxNSBkYWlseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSBtb250aGx5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuUk5fNDg1IChQcmVjaXBpdGF0aW9uLCBNTS9IUilcblFSTl81NDg1IChQcmVjaXBpdGF0aW9uIFF1YWxpdHkpXG5TUk5fNjQ4NSAoUHJlY2lwaXRhdGlvbiBTb3VyY2UpXG5STlNfNDg2IChQcmVjaXBpdGF0aW9uIFN0YW5kYXJkIERldmlhdGlvbiwgTU0vSFIpXG5STlBfNDg3IChQZXJjZW50IFRpbWUgUmFpbmluZywgcGVyY2VudClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvTW9uUmFpbl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb01vblJhaW5faXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb01vblJhaW4vaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhb01vblJhaW4ucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9Nb25SYWluJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9Nb25SYWluIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25CcC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vbkJwIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25CcC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCBNb250aGx5LCAxOTk4LXByZXNlbnQsIEJhcm9tZXRyaWMgKEFpcikgUHJlc3N1cmUiLCAiVGhpcyBkYXRhc2V0IGhhcyBtb250aGx5IEJhcm9tZXRyaWMgKEFpcikgUHJlc3N1cmUgZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICBNb250aGx5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBkYWlseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBhIG1vbnRoLiAgQSBtaW5pbXVtIG9mIDE1IGRhaWx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIG1vbnRobHkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5CUF85MTUgKEJhcm9tZXRyaWMgKEFpcikgUHJlc3N1cmUsIGhQYSlcblFCUF81OTE1IChCYXJvbWV0cmljIChBaXIpIFByZXNzdXJlIFF1YWxpdHkpXG5TQlBfNjkxNSAoQmFyb21ldHJpYyAoQWlyKSBQcmVzc3VyZSBTb3VyY2UpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb01vbkJwX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvTW9uQnBfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb01vbkJwL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9Nb25CcC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb01vbkJwJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9Nb25CcCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uQmYuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25CZiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uQmYuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgTW9udGhseSwgMjAwMC1wcmVzZW50LCBCdW95YW5jeSBGbHV4IiwgIlRoaXMgZGF0YXNldCBoYXMgbW9udGhseSBCdW95YW5jeSBGbHV4IGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgTW9udGhseSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgZGFpbHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgYSBtb250aC4gIEEgbWluaW11bSBvZiAxNSBkYWlseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSBtb250aGx5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuQkZfMTkxIChCdW95YW5jeSBGbHV4LCAxMCoqNiBrZyBtLTIgcy0xKVxuUUJGXzUxOTEgKEJ1b3lhbmN5IEZsdXggUXVhbGl0eSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvTW9uQmZfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9Nb25CZl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvTW9uQmYvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhb01vbkJmLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvTW9uQmYmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb01vbkJmIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25Mdy5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vbkx3IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25Mdy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCBNb250aGx5LCAyMDAwLXByZXNlbnQsIExvbmd3YXZlIFJhZGlhdGlvbiIsICJUaGlzIGRhdGFzZXQgaGFzIG1vbnRobHkgSW5jb21pbmcgTG9uZ3dhdmUgUmFkaWF0aW9uIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgTW9udGhseSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgZGFpbHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgYSBtb250aC4gIEEgbWluaW11bSBvZiAxNSBkYWlseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSBtb250aGx5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuUWxfMTM2IChJbmNvbWluZyBMb25nd2F2ZSBSYWRpYXRpb24sIFcgbS0yKVxuUUxXXzUxMzYgKExvbmd3YXZlIFJhZGlhdGlvbiBRdWFsaXR5KVxuU0xXXzYxMzYgKExvbmd3YXZlIFJhZGlhdGlvbiBTb3VyY2UpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb01vbkx3X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvTW9uTHdfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb01vbkx3L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9Nb25Mdy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb01vbkx3JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9Nb25MdyJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uTHduZXQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9Nb25Md25ldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uTHduZXQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgTW9udGhseSwgMjAwMC1wcmVzZW50LCBOZXQgTG9uZ3dhdmUgUmFkaWF0aW9uIiwgIlRoaXMgZGF0YXNldCBoYXMgbW9udGhseSBOZXQgTG9uZ3dhdmUgUmFkaWF0aW9uIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgTW9udGhseSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgZGFpbHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgYSBtb250aC4gIEEgbWluaW11bSBvZiAxNSBkYWlseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSBtb250aGx5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuTFdOXzExMzYgKE5ldCBMb25nd2F2ZSBSYWRpYXRpb24sIFcgbS0yKVxuUUxXXzUxMzYgKExvbmd3YXZlIFJhZGlhdGlvbiBRdWFsaXR5KVxuU0xXXzYxMzYgKExvbmd3YXZlIFJhZGlhdGlvbiBTb3VyY2UpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb01vbkx3bmV0X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvTW9uTHduZXRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb01vbkx3bmV0L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9Nb25Md25ldC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb01vbkx3bmV0JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9Nb25Md25ldCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvTW9uUW5ldC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vblFuZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb01vblFuZXQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgTW9udGhseSwgMjAwMC1wcmVzZW50LCBUb3RhbCBIZWF0IEZsdXgiLCAiVGhpcyBkYXRhc2V0IGhhcyBtb250aGx5IFRvdGFsIEhlYXQgRmx1eCBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIE1vbnRobHkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIGRhaWx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGEgbW9udGguICBBIG1pbmltdW0gb2YgMTUgZGFpbHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgbW9udGhseSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblFUXzIxMCAoVG90YWwgSGVhdCBGbHV4LCBXL00qKjIpXG5RUTBfNTIxMCAoVG90YWwgSGVhdCBGbHV4IFF1YWxpdHkpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb01vblFuZXRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9Nb25RbmV0X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9Nb25RbmV0L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9Nb25RbmV0LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvTW9uUW5ldCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvTW9uUW5ldCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0UmFkLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0UmFkIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRSYWQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgUXVhcnRlcmx5LCAxOTAxLXByZXNlbnQsIERvd25nb2luZyBTaG9ydHdhdmUgUmFkaWF0aW9uIiwgIlRoaXMgZGF0YXNldCBoYXMgcXVhcnRlcmx5IERvd25nb2luZyBTaG9ydHdhdmUgUmFkaWF0aW9uIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgUXVhcnRlcmx5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBtb250aGx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGEgMyBtb250aCBwZXJpb2QuICBBIG1pbmltdW0gb2YgMiBtb250aGx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIHF1YXJ0ZXJseSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblJEXzQ5NSAoRG93bmdvaW5nIFNob3J0d2F2ZSBSYWRpYXRpb24sIFcvTSoqMilcblFTV181NDk1IChTaG9ydHdhdmUgUmFkaWF0aW9uIFF1YWxpdHkpXG5TU1dfNjQ5NSAoU2hvcnR3YXZlIFJhZGlhdGlvbiBTb3VyY2UpXG5SRFNfNDk2IChTaG9ydHdhdmUgUmFkaWF0aW9uIFN0YW5kYXJkIERldmlhdGlvbiwgVy9NKioyKVxuUkRQXzQ5NyAoU2hvcnR3YXZlIFJhZGlhdGlvbiBQZWFrLCBXL00qKjIpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb1FydFJhZF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb1FydFJhZF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvUXJ0UmFkL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9RcnRSYWQucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9RcnRSYWQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb1FydFJhZCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0SXNvLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0SXNvIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRJc28uZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgUXVhcnRlcmx5LCAxOTc3LXByZXNlbnQsIDIwQyBJc290aGVybSBEZXB0aCIsICJUaGlzIGRhdGFzZXQgaGFzIHF1YXJ0ZXJseSAyMEMgSXNvdGhlcm0gRGVwdGggZGF0YSAodGhlIGRlcHRoIGF0IHdoaWNoIHRoZSBvY2VhbiB0ZW1wZXJhdHVyZSBpcyAyMEMpIGZyb20gdGhlIFxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICBRdWFydGVybHkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIG1vbnRobHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgYSAzIG1vbnRoIHBlcmlvZC4gIEEgbWluaW11bSBvZiAyIG1vbnRobHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgcXVhcnRlcmx5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuSVNPXzYgKDIwQyBJc290aGVybSBEZXB0aCwgbSlcblFJXzUwMDYgKDIwQyBEZXB0aCBRdWFsaXR5KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9RcnRJc29fZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9RcnRJc29faXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb1FydElzby9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvUXJ0SXNvLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvUXJ0SXNvJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9RcnRJc28iXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydEFpcnQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRBaXJ0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRBaXJ0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIFF1YXJ0ZXJseSwgMTk3Ny1wcmVzZW50LCBBaXIgVGVtcGVyYXR1cmUiLCAiVGhpcyBkYXRhc2V0IGhhcyBxdWFydGVybHkgQWlyIFRlbXBlcmF0dXJlIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgUXVhcnRlcmx5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBtb250aGx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGEgMyBtb250aCBwZXJpb2QuICBBIG1pbmltdW0gb2YgMiBtb250aGx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIHF1YXJ0ZXJseSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcbkFUXzIxIChBaXIgVGVtcGVyYXR1cmUsIGRlZ3JlZV9DKVxuUUFUXzUwMjEgKEFpciBUZW1wZXJhdHVyZSBRdWFsaXR5KVxuU0FUXzYwMjEgKEFpciBUZW1wZXJhdHVyZSBTb3VyY2UpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb1FydEFpcnRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9RcnRBaXJ0X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9RcnRBaXJ0L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9RcnRBaXJ0LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvUXJ0QWlydCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvUXJ0QWlydCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0Q3VyLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0Q3VyIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRDdXIuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgUXVhcnRlcmx5LCAxOTc3LXByZXNlbnQsIEN1cnJlbnRzIiwgIlRoaXMgZGF0YXNldCBoYXMgcXVhcnRlcmx5IEN1cnJlbnRzIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgUXVhcnRlcmx5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBtb250aGx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGEgMyBtb250aCBwZXJpb2QuICBBIG1pbmltdW0gb2YgMiBtb250aGx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIHF1YXJ0ZXJseSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblVfMzIwIChFYXN0d2FyZCBTZWEgV2F0ZXIgVmVsb2NpdHksIGNtIHMtMSlcblZfMzIxIChOb3J0aHdhcmQgU2VhIFdhdGVyIFZlbG9jaXR5LCBjbSBzLTEpXG5DU18zMDAgKFNlYSBXYXRlciBWZWxvY2l0eSwgY20gcy0xKVxuQ0RfMzEwIChEaXJlY3Rpb24gb2YgU2VhIFdhdGVyIFZlbG9jaXR5LCBkZWdyZWVzX3RydWUpXG5RQ1NfNTMwMCAoQ3VycmVudCBTcGVlZCBRdWFsaXR5KVxuUUNEXzUzMTAgKEN1cnJlbnQgRGlyZWN0aW9uIFF1YWxpdHkpXG5TQ1NfNjMwMCAoQ3VycmVudCBTcGVlZCBTb3VyY2UpXG5DSUNfNzMwMCAoQ3VycmVudCBJbnN0cnVtZW50IENvZGUpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb1FydEN1cl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb1FydEN1cl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvUXJ0Q3VyL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9RcnRDdXIucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9RcnRDdXImc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb1FydEN1ciJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0U3N0LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0U3N0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRTc3QuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgUXVhcnRlcmx5LCAxOTc3LXByZXNlbnQsIFNlYSBTdXJmYWNlIFRlbXBlcmF0dXJlIiwgIlRoaXMgZGF0YXNldCBoYXMgcXVhcnRlcmx5IFNlYSBTdXJmYWNlIFRlbXBlcmF0dXJlIChTU1QpIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgUXVhcnRlcmx5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBtb250aGx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGEgMyBtb250aCBwZXJpb2QuICBBIG1pbmltdW0gb2YgMiBtb250aGx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIHF1YXJ0ZXJseSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblRfMjUgKFNlYSBTdXJmYWNlIFRlbXBlcmF0dXJlLCBkZWdyZWVfQylcblFUXzUwMjUgKFNlYSBTdXJmYWNlIFRlbXBlcmF0dXJlIFF1YWxpdHkpXG5TVF82MDI1IChTZWEgU3VyZmFjZSBUZW1wZXJhdHVyZSBTb3VyY2UpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb1FydFNzdF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb1FydFNzdF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvUXJ0U3N0L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9RcnRTc3QucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9RcnRTc3Qmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb1FydFNzdCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0VC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydFQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydFQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgUXVhcnRlcmx5LCAxOTc3LXByZXNlbnQsIFRlbXBlcmF0dXJlIiwgIlRoaXMgZGF0YXNldCBoYXMgcXVhcnRlcmx5IFRlbXBlcmF0dXJlIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgUXVhcnRlcmx5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBtb250aGx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGEgMyBtb250aCBwZXJpb2QuICBBIG1pbmltdW0gb2YgMiBtb250aGx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIHF1YXJ0ZXJseSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblRfMjAgKFNlYSBXYXRlciBUZW1wZXJhdHVyZSwgZGVncmVlX0MpXG5RVF81MDIwIChUZW1wZXJhdHVyZSBRdWFsaXR5KVxuU1RfNjAyMCAoVGVtcGVyYXR1cmUgU291cmNlKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9RcnRUX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvUXJ0VF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvUXJ0VC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvUXJ0VC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb1FydFQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb1FydFQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydFcuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRXIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRXLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIFF1YXJ0ZXJseSwgMTk3Ny1wcmVzZW50LCBXaW5kIiwgIlRoaXMgZGF0YXNldCBoYXMgcXVhcnRlcmx5IFdpbmQgZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICBRdWFydGVybHkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIG1vbnRobHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgYSAzIG1vbnRoIHBlcmlvZC4gIEEgbWluaW11bSBvZiAyIG1vbnRobHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgcXVhcnRlcmx5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuV1VfNDIyIChab25hbCBXaW5kLCBtIHMtMSlcbldWXzQyMyAoTWVyaWRpb25hbCBXaW5kLCBtIHMtMSlcbldTXzQwMSAoV2luZCBTcGVlZCwgbSBzLTEpXG5RV1NfNTQwMSAoV2luZCBTcGVlZCBRdWFsaXR5KVxuU1dTXzY0MDEgKFdpbmQgU3BlZWQgU291cmNlKVxuV0RfNDEwIChXaW5kIERpcmVjdGlvbiwgZGVncmVlc190cnVlKVxuUVdEXzU0MTAgKFdpbmQgRGlyZWN0aW9uIFF1YWxpdHkpXG5TV0RfNjQxMCAoV2luZCBEaXJlY3Rpb24gU291cmNlKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9RcnRXX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvUXJ0V19pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvUXJ0Vy9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvUXJ0Vy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb1FydFcmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb1FydFciXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydER5bi5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydER5biIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0RHluLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIFF1YXJ0ZXJseSwgMTk4MC1wcmVzZW50LCBEeW5hbWljIEhlaWdodCIsICJUaGlzIGRhdGFzZXQgaGFzIHF1YXJ0ZXJseSBEeW5hbWljIEhlaWdodCBkYXRhIChhIG1lYXN1cmUgb2YgdGhlIGVsZXZhdGlvbiBvZiB0aGUgc2VhIGxldmVsLCBjYWxjdWxhdGVkIGJ5IGludGVncmF0aW5nIHRoZSBzcGVjaWZpYyB2b2x1bWUgYW5vbWFseSBvZiB0aGUgc2VhIHdhdGVyIGJldHdlZW4gdGhlIHNlYSBzdXJmYWNlIGFuZCA1MDAgbSBkZXB0aCkgZnJvbSB0aGUgXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIFF1YXJ0ZXJseSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgbW9udGhseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBhIDMgbW9udGggcGVyaW9kLiAgQSBtaW5pbXVtIG9mIDIgbW9udGhseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSBxdWFydGVybHkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5EWU5fMTMgKER5bmFtaWMgSGVpZ2h0LCBkeW4tY20pXG5RRF81MDEzIChEeW5hbWljIEhlaWdodCBRdWFsaXR5KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9RcnREeW5fZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9RcnREeW5faXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb1FydER5bi9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvUXJ0RHluLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvUXJ0RHluJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9RcnREeW4iXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydEhlYXQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRIZWF0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRIZWF0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIFF1YXJ0ZXJseSwgMTk4MC1wcmVzZW50LCBIZWF0IENvbnRlbnQiLCAiVGhpcyBkYXRhc2V0IGhhcyBxdWFydGVybHkgSGVhdCBDb250ZW50IGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgUXVhcnRlcmx5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBtb250aGx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGEgMyBtb250aCBwZXJpb2QuICBBIG1pbmltdW0gb2YgMiBtb250aGx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIHF1YXJ0ZXJseSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcbkhUQ18xMzAgKEhlYXQgQ29udGVudCwgMTAqKjEwIEogbS0yKVxuSFRDXzUxMzAgKEhlYXQgQ29udGVudCBRdWFsaXR5KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9RcnRIZWF0X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvUXJ0SGVhdF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvUXJ0SGVhdC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvUXJ0SGVhdC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb1FydEhlYXQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb1FydEhlYXQiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydFBvcy5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydFBvcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0UG9zLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIFF1YXJ0ZXJseSwgMTk4MC1wcmVzZW50LCBQb3NpdGlvbiIsICJUaGlzIGRhdGFzZXQgaGFzIHF1YXJ0ZXJseSBQb3NpdGlvbiBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIFF1YXJ0ZXJseSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgbW9udGhseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBhIDMgbW9udGggcGVyaW9kLiAgQSBtaW5pbXVtIG9mIDIgbW9udGhseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSBxdWFydGVybHkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5MT05fNTAyIChQcmVjaXNlIExvbmdpdHVkZSwgZGVncmVlX2Vhc3QpXG5RWF81NTAyIChMb25naXR1ZGUgUXVhbGl0eSlcbkxBVF81MDAgKFByZWNpc2UgTGF0aXR1ZGUsIGRlZ3JlZV9ub3J0aClcblFZXzU1MDAgKExhdGl0dWRlIFF1YWxpdHkpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb1FydFBvc19mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb1FydFBvc19pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvUXJ0UG9zL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9RcnRQb3MucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9RcnRQb3Mmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb1FydFBvcyJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0RC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydEQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydEQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgUXVhcnRlcmx5LCAxOTg3LXByZXNlbnQsIFBvdGVudGlhbCBEZW5zaXR5IEFub21hbHkiLCAiVGhpcyBkYXRhc2V0IGhhcyBxdWFydGVybHkgUG90ZW50aWFsIERlbnNpdHkgQW5vbWFseSAoc2lnbWEtdGhldGEpIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgUXVhcnRlcmx5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBtb250aGx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGEgMyBtb250aCBwZXJpb2QuICBBIG1pbmltdW0gb2YgMiBtb250aGx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIHF1YXJ0ZXJseSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblNUSF83MSAoU2lnbWEtVGhldGEsIGtnIG0tMylcblFTVF81MDcxIChTaWdtYS1UaGV0YSBRdWFsaXR5KVxuU1NUXzYwNzEgKFNpZ21hLVRoZXRhIFNvdXJjZSlcbkRJQ183MDcxIChTaWdtYS1UaGV0YSBJbnN0cnVtZW50IENvZGUpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb1FydERfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9RcnREX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9RcnREL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9RcnRELnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvUXJ0RCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvUXJ0RCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0Uy5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydFMiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydFMuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgUXVhcnRlcmx5LCAxOTg3LXByZXNlbnQsIFNhbGluaXR5IiwgIlRoaXMgZGF0YXNldCBoYXMgcXVhcnRlcmx5IFNhbGluaXR5IGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgUXVhcnRlcmx5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBtb250aGx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGEgMyBtb250aCBwZXJpb2QuICBBIG1pbmltdW0gb2YgMiBtb250aGx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIHF1YXJ0ZXJseSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblNfNDEgKFNlYSBXYXRlciBQcmFjdGljYWwgU2FsaW5pdHksIFBTVSlcblFTXzUwNDEgKFNhbGluaXR5IFF1YWxpdHkpXG5TU182MDQxIChTYWxpbml0eSBTb3VyY2UpXG5TSUNfODA0MSAoU2FsaW5pdHkgSW5zdHJ1bWVudCBDb2RlKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9RcnRTX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvUXJ0U19pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvUXJ0Uy9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvUXJ0Uy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb1FydFMmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb1FydFMiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydEFkY3Auc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRBZGNwIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRBZGNwLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIFF1YXJ0ZXJseSwgMTk4OC0yMDE3LCBBRENQIiwgIlRoaXMgZGF0YXNldCBoYXMgcXVhcnRlcmx5IEFjb3VzdGljIERvcHBsZXIgQ3VycmVudCBQcm9maWxlciAoQURDUCkgd2F0ZXIgY3VycmVudHMgZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICBRdWFydGVybHkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIG1vbnRobHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgYSAzIG1vbnRoIHBlcmlvZC4gIEEgbWluaW11bSBvZiAyIG1vbnRobHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgcXVhcnRlcmx5IGF2ZXJhZ2UuICBBRENQIGRhdGEgYXJlIGF2YWlsYWJsZSBvbmx5IGFmdGVyIG1vb3JpbmcgcmVjb3Zlcmllcywgd2hpY2ggYXJlIHNjaGVkdWxlZCBvbiBhbiBhbm51YWwgYmFzaXMuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcbnVfMTIwNSAoRWFzdHdhcmQgU2VhIFdhdGVyIFZlbG9jaXR5LCBjbS9zKVxuUVVfNTIwNSAoRWFzdHdhcmQgU2VhIFdhdGVyIFZlbG9jaXR5IFF1YWxpdHkpXG52XzEyMDYgKE5vcnRod2FyZCBTZWEgV2F0ZXIgVmVsb2NpdHksIGNtL3MpXG5RVl81MjA2IChOb3J0aHdhcmQgU2VhIFdhdGVyIFZlbG9jaXR5IFF1YWxpdHkpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb1FydEFkY3BfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9RcnRBZGNwX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9RcnRBZGNwL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9RcnRBZGNwLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvUXJ0QWRjcCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvUXJ0QWRjcCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0RXZhcC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydEV2YXAiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydEV2YXAuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgUXVhcnRlcmx5LCAxOTg5LXByZXNlbnQsIEV2YXBvcmF0aW9uIiwgIlRoaXMgZGF0YXNldCBoYXMgcXVhcnRlcmx5IEV2YXBvcmF0aW9uIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgUXVhcnRlcmx5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBtb250aGx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGEgMyBtb250aCBwZXJpb2QuICBBIG1pbmltdW0gb2YgMiBtb250aGx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIHF1YXJ0ZXJseSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcbkVfMjUwIChFdmFwb3JhdGlvbiwgTU0vSFIpXG5RRV81MjUwIChFdmFwb3JhdGlvbiBRdWFsaXR5KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9RcnRFdmFwX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvUXJ0RXZhcF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvUXJ0RXZhcC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvUXJ0RXZhcC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb1FydEV2YXAmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb1FydEV2YXAiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydFFsYXQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRRbGF0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRRbGF0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIFF1YXJ0ZXJseSwgMTk4OS1wcmVzZW50LCBMYXRlbnQgSGVhdCBGbHV4IiwgIlRoaXMgZGF0YXNldCBoYXMgcXVhcnRlcmx5IExhdGVudCBIZWF0IEZsdXggZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICBRdWFydGVybHkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIG1vbnRobHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgYSAzIG1vbnRoIHBlcmlvZC4gIEEgbWluaW11bSBvZiAyIG1vbnRobHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgcXVhcnRlcmx5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuUUxfMTM3IChMYXRlbnQgSGVhdCBGbHV4LCBXIG0tMilcblFRTF81MTM3IChMYXRlbnQgSGVhdCBGbHV4IFF1YWxpdHkpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb1FydFFsYXRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9RcnRRbGF0X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9RcnRRbGF0L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9RcnRRbGF0LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvUXJ0UWxhdCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvUXJ0UWxhdCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0Umguc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRSaCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0UmguZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgUXVhcnRlcmx5LCAxOTg5LXByZXNlbnQsIFJlbGF0aXZlIEh1bWlkaXR5IiwgIlRoaXMgZGF0YXNldCBoYXMgcXVhcnRlcmx5IFJlbGF0aXZlIEh1bWlkaXR5IGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgUXVhcnRlcmx5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBtb250aGx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGEgMyBtb250aCBwZXJpb2QuICBBIG1pbmltdW0gb2YgMiBtb250aGx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIHF1YXJ0ZXJseSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblJIXzkxMCAoUmVsYXRpdmUgSHVtaWRpdHksIHBlcmNlbnQpXG5RUkhfNTkxMCAoUmVsYXRpdmUgSHVtaWRpdHkgUXVhbGl0eSlcblNSSF82OTEwIChSZWxhdGl2ZSBIdW1pZGl0eSBTb3VyY2UpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb1FydFJoX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvUXJ0UmhfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb1FydFJoL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9RcnRSaC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb1FydFJoJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9RcnRSaCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0UXNlbi5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydFFzZW4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydFFzZW4uZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgUXVhcnRlcmx5LCAxOTg5LXByZXNlbnQsIFNlbnNpYmxlIEhlYXQgRmx1eCIsICJUaGlzIGRhdGFzZXQgaGFzIHF1YXJ0ZXJseSBTZW5zaWJsZSBIZWF0IEZsdXggZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICBRdWFydGVybHkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIG1vbnRobHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgYSAzIG1vbnRoIHBlcmlvZC4gIEEgbWluaW11bSBvZiAyIG1vbnRobHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgcXVhcnRlcmx5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuUVNfMTM4IChTZW5zaWJsZSBIZWF0IEZsdXgsIFcgbS0yKVxuUVFTXzUxMzggKFNlbnNpYmxlIEhlYXQgRmx1eCBRdWFsaXR5KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9RcnRRc2VuX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvUXJ0UXNlbl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvUXJ0UXNlbi9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvUXJ0UXNlbi5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb1FydFFzZW4mc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb1FydFFzZW4iXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydFRhdS5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydFRhdSIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0VGF1LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIFF1YXJ0ZXJseSwgMTk4OS1wcmVzZW50LCBXaW5kIFN0cmVzcyIsICJUaGlzIGRhdGFzZXQgaGFzIHF1YXJ0ZXJseSBXaW5kIFN0cmVzcyBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIFF1YXJ0ZXJseSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgbW9udGhseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBhIDMgbW9udGggcGVyaW9kLiAgQSBtaW5pbXVtIG9mIDIgbW9udGhseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSBxdWFydGVybHkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5UWF80NDIgKFpvbmFsIFdpbmQgU3RyZXNzLCBOL20yKVxuVFlfNDQzIChNZXJpZGlvbmFsIFdpbmQgU3RyZXNzLCBOL20yKVxuVEFVXzQ0MCAoV2luZCBTdHJlc3MsIE4vbTIpXG5URF80NDUgKFdpbmQgU3RyZXNzIERpcmVjdGlvbiwgZGVncmVlc190cnVlKVxuUVRBVV81NDQwIChXaW5kIFN0cmVzcyBRdWFsaXR5KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9RcnRUYXVfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9RcnRUYXVfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb1FydFRhdS9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvUXJ0VGF1LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvUXJ0VGF1JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9RcnRUYXUiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydFN3bmV0LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0U3duZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydFN3bmV0LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIFF1YXJ0ZXJseSwgMTk5MS1wcmVzZW50LCBOZXQgU2hvcnR3YXZlIFJhZGlhdGlvbiIsICJUaGlzIGRhdGFzZXQgaGFzIHF1YXJ0ZXJseSBOZXQgU2hvcnR3YXZlIFJhZGlhdGlvbiBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIFF1YXJ0ZXJseSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgbW9udGhseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBhIDMgbW9udGggcGVyaW9kLiAgQSBtaW5pbXVtIG9mIDIgbW9udGhseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSBxdWFydGVybHkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5TV05fMTQ5NSAoTmV0IFNob3J0d2F2ZSBSYWRpYXRpb24sIFcvTSoqMilcblFTV181NDk1IChTaG9ydHdhdmUgUmFkaWF0aW9uIFF1YWxpdHkpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb1FydFN3bmV0X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvUXJ0U3duZXRfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb1FydFN3bmV0L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9RcnRTd25ldC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb1FydFN3bmV0JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9RcnRTd25ldCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0U3NzLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0U3NzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRTc3MuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgUXVhcnRlcmx5LCAxOTkyLXByZXNlbnQsIFNlYSBTdXJmYWNlIFNhbGluaXR5IiwgIlRoaXMgZGF0YXNldCBoYXMgcXVhcnRlcmx5IFNlYSBTdXJmYWNlIFNhbGluaXR5IGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgUXVhcnRlcmx5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBtb250aGx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGEgMyBtb250aCBwZXJpb2QuICBBIG1pbmltdW0gb2YgMiBtb250aGx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIHF1YXJ0ZXJseSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcblNfNDEgKFNlYSBXYXRlciBQcmFjdGljYWwgU2FsaW5pdHksIFBTVSlcblFTXzUwNDEgKFNhbGluaXR5IFF1YWxpdHkpXG5TU182MDQxIChTYWxpbml0eSBTb3VyY2UpXG5TSUNfNzA0MSAoU2FsaW5pdHkgSW5zdHJ1bWVudCBDb2RlKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9RcnRTc3NfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9RcnRTc3NfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb1FydFNzcy9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvUXJ0U3NzLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvUXJ0U3NzJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9RcnRTc3MiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydFNzZC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydFNzZCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0U3NkLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIFF1YXJ0ZXJseSwgMTk5Mi1wcmVzZW50LCBTaWdtYS1UaGV0YSIsICJUaGlzIGRhdGFzZXQgaGFzIHF1YXJ0ZXJseSBTaWdtYS1UaGV0YSAoUG90ZW50aWFsIERlbnNpdHkgQW5vbWFseSkgZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICBRdWFydGVybHkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIG1vbnRobHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgYSAzIG1vbnRoIHBlcmlvZC4gIEEgbWluaW11bSBvZiAyIG1vbnRobHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgcXVhcnRlcmx5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuU1RIXzcxIChTaWdtYS1UaGV0YSwga2cgbS0zKVxuUVNUXzUwNzEgKFNpZ21hLVRoZXRhIFF1YWxpdHkpXG5TU1RfNjA3MSAoU2lnbWEtVGhldGEgU291cmNlKVxuRElDXzcwNzEgKFNpZ21hLVRoZXRhIEluc3RydW1lbnQgQ29kZSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvUXJ0U3NkX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvUXJ0U3NkX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9RcnRTc2QvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhb1FydFNzZC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb1FydFNzZCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvUXJ0U3NkIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRFbXAuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRFbXAiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydEVtcC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCBRdWFydGVybHksIDE5OTctcHJlc2VudCwgRXZhcG9yYXRpb24gTWludXMgUHJlY2lwaXRhdGlvbiIsICJUaGlzIGRhdGFzZXQgaGFzIHF1YXJ0ZXJseSBFdmFwb3JhdGlvbiBNaW51cyBQcmVjaXBpdGF0aW9uIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgUXVhcnRlcmx5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBtb250aGx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGEgMyBtb250aCBwZXJpb2QuICBBIG1pbmltdW0gb2YgMiBtb250aGx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIHF1YXJ0ZXJseSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcbkVNUF8yNTEgKEV2YXBvcmF0aW9uIE1pbnVzIFByZWNpcGl0YXRpb24sIG1tL2hyKVxuUUVNUF81MjUxIChFdmFwb3JhdGlvbiBNaW51cyBQcmVjaXBpdGF0aW9uIFF1YWxpdHkpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb1FydEVtcF9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb1FydEVtcF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvUXJ0RW1wL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9RcnRFbXAucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9RcnRFbXAmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb1FydEVtcCJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0UmYuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRSZiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0UmYuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgUXVhcnRlcmx5LCAxOTk3LXByZXNlbnQsIEhlYXQgRmx1eCBEdWUgVG8gUmFpbiIsICJUaGlzIGRhdGFzZXQgaGFzIHF1YXJ0ZXJseSBIZWF0IEZsdXggRHVlIFRvIFJhaW4gZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICBRdWFydGVybHkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIG1vbnRobHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgYSAzIG1vbnRoIHBlcmlvZC4gIEEgbWluaW11bSBvZiAyIG1vbnRobHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgcXVhcnRlcmx5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuUVJfMTM5IChIZWF0IEZsdXggRHVlIFRvIFJhaW4sIFcgbS0yKVxuUVFSXzUxMzkgKEhlYXQgRmx1eCBEdWUgVG8gUmFpbiBRdWFsaXR5KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9RcnRSZl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb1FydFJmX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3BtZWxUYW9RcnRSZi9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvUXJ0UmYucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9RcnRSZiZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIFBNRUwsIFRBTy9UUklUT04sIFJBTUEsIFBJUkFUQSIsICJwbWVsVGFvUXJ0UmYiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydFJhaW4uc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRSYWluIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRSYWluLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlRBTy9UUklUT04sIFJBTUEsIGFuZCBQSVJBVEEgQnVveXMsIFF1YXJ0ZXJseSwgMTk5Ny1wcmVzZW50LCBQcmVjaXBpdGF0aW9uIiwgIlRoaXMgZGF0YXNldCBoYXMgcXVhcnRlcmx5IFByZWNpcGl0YXRpb24gZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICBRdWFydGVybHkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIG1vbnRobHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgYSAzIG1vbnRoIHBlcmlvZC4gIEEgbWluaW11bSBvZiAyIG1vbnRobHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgcXVhcnRlcmx5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuUk5fNDg1IChQcmVjaXBpdGF0aW9uLCBNTS9IUilcblFSTl81NDg1IChQcmVjaXBpdGF0aW9uIFF1YWxpdHkpXG5TUk5fNjQ4NSAoUHJlY2lwaXRhdGlvbiBTb3VyY2UpXG5STlNfNDg2IChQcmVjaXBpdGF0aW9uIFN0YW5kYXJkIERldmlhdGlvbiwgTU0vSFIpXG5STlBfNDg3IChQZXJjZW50IFRpbWUgUmFpbmluZywgcGVyY2VudClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvUXJ0UmFpbl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvcG1lbFRhb1FydFJhaW5faXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb1FydFJhaW4vaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhb1FydFJhaW4ucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXBtZWxUYW9RcnRSYWluJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9RcnRSYWluIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRCcC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydEJwIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRCcC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCBRdWFydGVybHksIDE5OTgtcHJlc2VudCwgQmFyb21ldHJpYyAoQWlyKSBQcmVzc3VyZSIsICJUaGlzIGRhdGFzZXQgaGFzIHF1YXJ0ZXJseSBCYXJvbWV0cmljIChBaXIpIFByZXNzdXJlIGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgUXVhcnRlcmx5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBtb250aGx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGEgMyBtb250aCBwZXJpb2QuICBBIG1pbmltdW0gb2YgMiBtb250aGx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIHF1YXJ0ZXJseSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcbkJQXzkxNSAoQmFyb21ldHJpYyAoQWlyKSBQcmVzc3VyZSwgaFBhKVxuUUJQXzU5MTUgKEJhcm9tZXRyaWMgKEFpcikgUHJlc3N1cmUgUXVhbGl0eSlcblNCUF82OTE1IChCYXJvbWV0cmljIChBaXIpIFByZXNzdXJlIFNvdXJjZSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvUXJ0QnBfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9RcnRCcF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvUXJ0QnAvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhb1FydEJwLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvUXJ0QnAmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb1FydEJwIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRCZi5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvcG1lbFRhb1FydEJmIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRCZi5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCBRdWFydGVybHksIDIwMDAtcHJlc2VudCwgQnVveWFuY3kgRmx1eCIsICJUaGlzIGRhdGFzZXQgaGFzIHF1YXJ0ZXJseSBCdW95YW5jeSBGbHV4IGRhdGEgZnJvbSB0aGVcblRBTy9UUklUT04gKFBhY2lmaWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvICksXG5SQU1BIChJbmRpYW4gT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcG1lbC10aGVtZS9pbmRpYW4tb2NlYW4tcmFtYSApLCBhbmRcblBJUkFUQSAoQXRsYW50aWMgT2NlYW4sIGh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvcGlyYXRhLyApXG5hcnJheXMgb2YgbW9vcmVkIGJ1b3lzIHdoaWNoIHRyYW5zbWl0IG9jZWFub2dyYXBoaWMgYW5kIG1ldGVvcm9sb2dpY2FsIGRhdGEgdG8gc2hvcmUgaW4gcmVhbC10aW1lIHZpYSB0aGUgQXJnb3Mgc2F0ZWxsaXRlIHN5c3RlbS4gIFRoZXNlIGJ1b3lzIGFyZSBtYWpvciBjb21wb25lbnRzIG9mIHRoZSBDTElWQVIgY2xpbWF0ZSBhbmFseXNpcyBwcm9qZWN0IGFuZCB0aGUgR09PUywgR0NPUywgYW5kIEdFT1NTIG9ic2VydmluZyBzeXN0ZW1zLiAgUXVhcnRlcmx5IGRhdGEgaXMgYW4gYXZlcmFnZSBvZiBtb250aGx5IHZhbHVlcyBjb2xsZWN0ZWQgZHVyaW5nIGEgMyBtb250aCBwZXJpb2QuICBBIG1pbmltdW0gb2YgMiBtb250aGx5IHZhbHVlcyBhcmUgcmVxdWlyZWQgdG8gY29tcHV0ZSBhIHF1YXJ0ZXJseSBhdmVyYWdlLiAgVGhpcyBkYXRhc2V0IGNvbnRhaW5zIHJlYWx0aW1lIGFuZCBkZWxheWVkIG1vZGUgZGF0YSAoc2VlIHRoZSAnc291cmNlJyB2YXJpYWJsZSkuICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG5odHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24gLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxuYXJyYXlcbnN0YXRpb25cbndtb19wbGF0Zm9ybV9jb2RlXG5sb25naXR1ZGUgKE5vbWluYWwgTG9uZ2l0dWRlLCBkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoTm9taW5hbCBMYXRpdHVkZSwgZGVncmVlc19ub3J0aClcbnRpbWUgKENlbnRlcmVkIFRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5kZXB0aCAobSlcbkJGXzE5MSAoQnVveWFuY3kgRmx1eCwgMTAqKjYga2cgbS0yIHMtMSlcblFCRl81MTkxIChCdW95YW5jeSBGbHV4IFF1YWxpdHkpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb1FydEJmX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvUXJ0QmZfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb1FydEJmL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9RcnRCZi5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb1FydEJmJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9RcnRCZiJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0THcuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRMdyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0THcuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgUXVhcnRlcmx5LCAyMDAwLXByZXNlbnQsIExvbmd3YXZlIFJhZGlhdGlvbiIsICJUaGlzIGRhdGFzZXQgaGFzIHF1YXJ0ZXJseSBJbmNvbWluZyBMb25nd2F2ZSBSYWRpYXRpb24gZGF0YSBmcm9tIHRoZVxuVEFPL1RSSVRPTiAoUGFjaWZpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS8gKSxcblJBTUEgKEluZGlhbiBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9wbWVsLXRoZW1lL2luZGlhbi1vY2Vhbi1yYW1hICksIGFuZFxuUElSQVRBIChBdGxhbnRpYyBPY2VhbiwgaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9waXJhdGEvIClcbmFycmF5cyBvZiBtb29yZWQgYnVveXMgd2hpY2ggdHJhbnNtaXQgb2NlYW5vZ3JhcGhpYyBhbmQgbWV0ZW9yb2xvZ2ljYWwgZGF0YSB0byBzaG9yZSBpbiByZWFsLXRpbWUgdmlhIHRoZSBBcmdvcyBzYXRlbGxpdGUgc3lzdGVtLiAgVGhlc2UgYnVveXMgYXJlIG1ham9yIGNvbXBvbmVudHMgb2YgdGhlIENMSVZBUiBjbGltYXRlIGFuYWx5c2lzIHByb2plY3QgYW5kIHRoZSBHT09TLCBHQ09TLCBhbmQgR0VPU1Mgb2JzZXJ2aW5nIHN5c3RlbXMuICBRdWFydGVybHkgZGF0YSBpcyBhbiBhdmVyYWdlIG9mIG1vbnRobHkgdmFsdWVzIGNvbGxlY3RlZCBkdXJpbmcgYSAzIG1vbnRoIHBlcmlvZC4gIEEgbWluaW11bSBvZiAyIG1vbnRobHkgdmFsdWVzIGFyZSByZXF1aXJlZCB0byBjb21wdXRlIGEgcXVhcnRlcmx5IGF2ZXJhZ2UuICBUaGlzIGRhdGFzZXQgY29udGFpbnMgcmVhbHRpbWUgYW5kIGRlbGF5ZWQgbW9kZSBkYXRhIChzZWUgdGhlICdzb3VyY2UnIHZhcmlhYmxlKS4gIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbmh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiAuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG5hcnJheVxuc3RhdGlvblxud21vX3BsYXRmb3JtX2NvZGVcbmxvbmdpdHVkZSAoTm9taW5hbCBMb25naXR1ZGUsIGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChOb21pbmFsIExhdGl0dWRlLCBkZWdyZWVzX25vcnRoKVxudGltZSAoQ2VudGVyZWQgVGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuUWxfMTM2IChJbmNvbWluZyBMb25nd2F2ZSBSYWRpYXRpb24sIFcgbS0yKVxuUUxXXzUxMzYgKExvbmd3YXZlIFJhZGlhdGlvbiBRdWFsaXR5KVxuU0xXXzYxMzYgKExvbmd3YXZlIFJhZGlhdGlvbiBTb3VyY2UpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvcG1lbFRhb1FydEx3X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvUXJ0THdfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vcG1lbFRhb1FydEx3L2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3BtZWxUYW9RcnRMdy5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb1FydEx3JnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgUE1FTCwgVEFPL1RSSVRPTiwgUkFNQSwgUElSQVRBIiwgInBtZWxUYW9RcnRMdyJdLAogICAgICBbIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0THduZXQuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRMd25ldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0THduZXQuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVEFPL1RSSVRPTiwgUkFNQSwgYW5kIFBJUkFUQSBCdW95cywgUXVhcnRlcmx5LCAyMDAwLXByZXNlbnQsIE5ldCBMb25nd2F2ZSBSYWRpYXRpb24iLCAiVGhpcyBkYXRhc2V0IGhhcyBxdWFydGVybHkgTmV0IExvbmd3YXZlIFJhZGlhdGlvbiBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIFF1YXJ0ZXJseSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgbW9udGhseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBhIDMgbW9udGggcGVyaW9kLiAgQSBtaW5pbXVtIG9mIDIgbW9udGhseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSBxdWFydGVybHkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5MV05fMTEzNiAoTmV0IExvbmd3YXZlIFJhZGlhdGlvbiwgVyBtLTIpXG5RTFdfNTEzNiAoTG9uZ3dhdmUgUmFkaWF0aW9uIFF1YWxpdHkpXG5TTFdfNjEzNiAoTG9uZ3dhdmUgUmFkaWF0aW9uIFNvdXJjZSlcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9wbWVsVGFvUXJ0THduZXRfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL3BtZWxUYW9RcnRMd25ldF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvUXJ0THduZXQvaW5kZXguanNvbiIsICJodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL21pc3Npb24iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvcG1lbFRhb1FydEx3bmV0LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1wbWVsVGFvUXJ0THduZXQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb1FydEx3bmV0Il0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3BtZWxUYW9RcnRRbmV0LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0UW5ldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9wbWVsVGFvUXJ0UW5ldC5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJUQU8vVFJJVE9OLCBSQU1BLCBhbmQgUElSQVRBIEJ1b3lzLCBRdWFydGVybHksIDIwMDAtcHJlc2VudCwgVG90YWwgSGVhdCBGbHV4IiwgIlRoaXMgZGF0YXNldCBoYXMgcXVhcnRlcmx5IFRvdGFsIEhlYXQgRmx1eCBkYXRhIGZyb20gdGhlXG5UQU8vVFJJVE9OIChQYWNpZmljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhLyApLFxuUkFNQSAoSW5kaWFuIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BtZWwtdGhlbWUvaW5kaWFuLW9jZWFuLXJhbWEgKSwgYW5kXG5QSVJBVEEgKEF0bGFudGljIE9jZWFuLCBodHRwczovL3d3dy5wbWVsLm5vYWEuZ292L2d0bWJhL3BpcmF0YS8gKVxuYXJyYXlzIG9mIG1vb3JlZCBidW95cyB3aGljaCB0cmFuc21pdCBvY2Vhbm9ncmFwaGljIGFuZCBtZXRlb3JvbG9naWNhbCBkYXRhIHRvIHNob3JlIGluIHJlYWwtdGltZSB2aWEgdGhlIEFyZ29zIHNhdGVsbGl0ZSBzeXN0ZW0uICBUaGVzZSBidW95cyBhcmUgbWFqb3IgY29tcG9uZW50cyBvZiB0aGUgQ0xJVkFSIGNsaW1hdGUgYW5hbHlzaXMgcHJvamVjdCBhbmQgdGhlIEdPT1MsIEdDT1MsIGFuZCBHRU9TUyBvYnNlcnZpbmcgc3lzdGVtcy4gIFF1YXJ0ZXJseSBkYXRhIGlzIGFuIGF2ZXJhZ2Ugb2YgbW9udGhseSB2YWx1ZXMgY29sbGVjdGVkIGR1cmluZyBhIDMgbW9udGggcGVyaW9kLiAgQSBtaW5pbXVtIG9mIDIgbW9udGhseSB2YWx1ZXMgYXJlIHJlcXVpcmVkIHRvIGNvbXB1dGUgYSBxdWFydGVybHkgYXZlcmFnZS4gIFRoaXMgZGF0YXNldCBjb250YWlucyByZWFsdGltZSBhbmQgZGVsYXllZCBtb2RlIGRhdGEgKHNlZSB0aGUgJ3NvdXJjZScgdmFyaWFibGUpLiAgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuaHR0cHM6Ly93d3cucG1lbC5ub2FhLmdvdi9ndG1iYS9taXNzaW9uIC5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbmFycmF5XG5zdGF0aW9uXG53bW9fcGxhdGZvcm1fY29kZVxubG9uZ2l0dWRlIChOb21pbmFsIExvbmdpdHVkZSwgZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKE5vbWluYWwgTGF0aXR1ZGUsIGRlZ3JlZXNfbm9ydGgpXG50aW1lIChDZW50ZXJlZCBUaW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5RVF8yMTAgKFRvdGFsIEhlYXQgRmx1eCwgVy9NKioyKVxuUVEwXzUyMTAgKFRvdGFsIEhlYXQgRmx1eCBRdWFsaXR5KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL3BtZWxUYW9RcnRRbmV0X2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9wbWVsVGFvUXJ0UW5ldF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9wbWVsVGFvUXJ0UW5ldC9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBtZWwubm9hYS5nb3YvZ3RtYmEvbWlzc2lvbiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9wbWVsVGFvUXJ0UW5ldC5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9cG1lbFRhb1FydFFuZXQmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBQTUVMLCBUQU8vVFJJVE9OLCBSQU1BLCBQSVJBVEEiLCAicG1lbFRhb1FydFFuZXQiXSwKICAgICAgWyIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZFVJMjE2aHIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkVUkyMTZoci5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJVcHdlbGxpbmcgSW5kZXgsIDIxTiAxMDdXLCA2LWhvdXJseSIsICJVcHdlbGxpbmcgaW5kZXggY29tcHV0ZWQgZnJvbSAxLWRlZ3JlZSBGTk1PQyBzZWEgbGV2ZWwgcHJlc3N1cmUgZm9yIDE1IGxvY2F0aW9ucyBvZmYgdGhlIE5vcnRoIEFtZXJpY2FuIFdlc3QgQ29hc3QgYXQgZWFjaCAzIGRlZ3JlZXMgb2YgbGF0aXR1ZGUgZnJvbSAyMU4gdG8gNjBOLiBUaGUgY29hc3RhbCBVcHdlbGxpbmcgSW5kZXggaXMgYW4gaW5kZXggb2YgdGhlIHN0cmVuZ3RoIG9mIHRoZSB3aW5kIGZvcmNpbmcgb24gdGhlIG9jZWFuIHdoaWNoIGhhcyBiZWVuIHVzZWQgaW4gbWFueSBzdHVkaWVzIG9mIHRoZSBlZmZlY3RzIG9mIG9jZWFuIHZhcmlhYmlsaXR5IG9uIHRoZSByZXByb2R1Y3RpdmUgYW5kIHJlY3J1aXRtZW50IHN1Y2Nlc3Mgb2YgbWFueSBmaXNoIGFuZCBpbnZlcnRlYnJhdGUgc3BlY2llcy5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbnRpbWUgKHJlZmVyZW5jZSB0aW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxudXB3ZWxsaW5nX2luZGV4XG5zdGF0aW9uX2lkXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2VyZFVJMjE2aHJfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2VyZFVJMjE2aHJfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkVUkyMTZoci9pbmRleC5qc29uIiwgImh0dHBzOi8vb2NlYW52aWV3LnBmZWcubm9hYS5nb3YvTEFTL2RvY3Mvd2luZF9mcm9tX3ByZXNzdXJlLm5jLmh0bWwiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkVUkyMTZoci5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkVUkyMTZociZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBL1NXRlNDIEVudmlyb25tZW50YWwgUmVzZWFyY2ggRGl2aXNpb24iLCAiZXJkVUkyMTZociJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkVUkyNDZociIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRVSTI0NmhyLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlVwd2VsbGluZyBJbmRleCwgMjROIDExM1csIDYtaG91cmx5IiwgIlVwd2VsbGluZyBpbmRleCBjb21wdXRlZCBmcm9tIDEtZGVncmVlIEZOTU9DIHNlYSBsZXZlbCBwcmVzc3VyZSBmb3IgMTUgbG9jYXRpb25zIG9mZiB0aGUgTm9ydGggQW1lcmljYW4gV2VzdCBDb2FzdCBhdCBlYWNoIDMgZGVncmVlcyBvZiBsYXRpdHVkZSBmcm9tIDIxTiB0byA2ME4uIFRoZSBjb2FzdGFsIFVwd2VsbGluZyBJbmRleCBpcyBhbiBpbmRleCBvZiB0aGUgc3RyZW5ndGggb2YgdGhlIHdpbmQgZm9yY2luZyBvbiB0aGUgb2NlYW4gd2hpY2ggaGFzIGJlZW4gdXNlZCBpbiBtYW55IHN0dWRpZXMgb2YgdGhlIGVmZmVjdHMgb2Ygb2NlYW4gdmFyaWFiaWxpdHkgb24gdGhlIHJlcHJvZHVjdGl2ZSBhbmQgcmVjcnVpdG1lbnQgc3VjY2VzcyBvZiBtYW55IGZpc2ggYW5kIGludmVydGVicmF0ZSBzcGVjaWVzLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxudGltZSAocmVmZXJlbmNlIHRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG51cHdlbGxpbmdfaW5kZXhcbnN0YXRpb25faWRcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkVUkyNDZocl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkVUkyNDZocl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9lcmRVSTI0NmhyL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9MQVMvZG9jcy93aW5kX2Zyb21fcHJlc3N1cmUubmMuaHRtbCIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9lcmRVSTI0NmhyLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1lcmRVSTI0NmhyJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEvU1dGU0MgRW52aXJvbm1lbnRhbCBSZXNlYXJjaCBEaXZpc2lvbiIsICJlcmRVSTI0NmhyIl0sCiAgICAgIFsiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRVSTI3NmhyIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZFVJMjc2aHIuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVXB3ZWxsaW5nIEluZGV4LCAyN04gMTE2VywgNi1ob3VybHkiLCAiVXB3ZWxsaW5nIGluZGV4IGNvbXB1dGVkIGZyb20gMS1kZWdyZWUgRk5NT0Mgc2VhIGxldmVsIHByZXNzdXJlIGZvciAxNSBsb2NhdGlvbnMgb2ZmIHRoZSBOb3J0aCBBbWVyaWNhbiBXZXN0IENvYXN0IGF0IGVhY2ggMyBkZWdyZWVzIG9mIGxhdGl0dWRlIGZyb20gMjFOIHRvIDYwTi4gVGhlIGNvYXN0YWwgVXB3ZWxsaW5nIEluZGV4IGlzIGFuIGluZGV4IG9mIHRoZSBzdHJlbmd0aCBvZiB0aGUgd2luZCBmb3JjaW5nIG9uIHRoZSBvY2VhbiB3aGljaCBoYXMgYmVlbiB1c2VkIGluIG1hbnkgc3R1ZGllcyBvZiB0aGUgZWZmZWN0cyBvZiBvY2VhbiB2YXJpYWJpbGl0eSBvbiB0aGUgcmVwcm9kdWN0aXZlIGFuZCByZWNydWl0bWVudCBzdWNjZXNzIG9mIG1hbnkgZmlzaCBhbmQgaW52ZXJ0ZWJyYXRlIHNwZWNpZXMuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG50aW1lIChyZWZlcmVuY2UgdGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnVwd2VsbGluZ19pbmRleFxuc3RhdGlvbl9pZFxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9lcmRVSTI3NmhyX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRVSTI3NmhyX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZFVJMjc2aHIvaW5kZXguanNvbiIsICJodHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L0xBUy9kb2NzL3dpbmRfZnJvbV9wcmVzc3VyZS5uYy5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZFVJMjc2aHIucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZFVJMjc2aHImc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQS9TV0ZTQyBFbnZpcm9ubWVudGFsIFJlc2VhcmNoIERpdmlzaW9uIiwgImVyZFVJMjc2aHIiXSwKICAgICAgWyIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZFVJMzA2aHIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkVUkzMDZoci5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJVcHdlbGxpbmcgSW5kZXgsIDMwTiAxMTlXLCA2LWhvdXJseSIsICJVcHdlbGxpbmcgaW5kZXggY29tcHV0ZWQgZnJvbSAxLWRlZ3JlZSBGTk1PQyBzZWEgbGV2ZWwgcHJlc3N1cmUgZm9yIDE1IGxvY2F0aW9ucyBvZmYgdGhlIE5vcnRoIEFtZXJpY2FuIFdlc3QgQ29hc3QgYXQgZWFjaCAzIGRlZ3JlZXMgb2YgbGF0aXR1ZGUgZnJvbSAyMU4gdG8gNjBOLiBUaGUgY29hc3RhbCBVcHdlbGxpbmcgSW5kZXggaXMgYW4gaW5kZXggb2YgdGhlIHN0cmVuZ3RoIG9mIHRoZSB3aW5kIGZvcmNpbmcgb24gdGhlIG9jZWFuIHdoaWNoIGhhcyBiZWVuIHVzZWQgaW4gbWFueSBzdHVkaWVzIG9mIHRoZSBlZmZlY3RzIG9mIG9jZWFuIHZhcmlhYmlsaXR5IG9uIHRoZSByZXByb2R1Y3RpdmUgYW5kIHJlY3J1aXRtZW50IHN1Y2Nlc3Mgb2YgbWFueSBmaXNoIGFuZCBpbnZlcnRlYnJhdGUgc3BlY2llcy5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbnRpbWUgKHJlZmVyZW5jZSB0aW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxudXB3ZWxsaW5nX2luZGV4XG5zdGF0aW9uX2lkXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2VyZFVJMzA2aHJfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2VyZFVJMzA2aHJfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkVUkzMDZoci9pbmRleC5qc29uIiwgImh0dHBzOi8vb2NlYW52aWV3LnBmZWcubm9hYS5nb3YvTEFTL2RvY3Mvd2luZF9mcm9tX3ByZXNzdXJlLm5jLmh0bWwiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkVUkzMDZoci5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkVUkzMDZociZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBL1NXRlNDIEVudmlyb25tZW50YWwgUmVzZWFyY2ggRGl2aXNpb24iLCAiZXJkVUkzMDZociJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkVUkzMzZociIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRVSTMzNmhyLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlVwd2VsbGluZyBJbmRleCwgMzNOIDExOVcsIDYtaG91cmx5IiwgIlVwd2VsbGluZyBpbmRleCBjb21wdXRlZCBmcm9tIDEtZGVncmVlIEZOTU9DIHNlYSBsZXZlbCBwcmVzc3VyZSBmb3IgMTUgbG9jYXRpb25zIG9mZiB0aGUgTm9ydGggQW1lcmljYW4gV2VzdCBDb2FzdCBhdCBlYWNoIDMgZGVncmVlcyBvZiBsYXRpdHVkZSBmcm9tIDIxTiB0byA2ME4uIFRoZSBjb2FzdGFsIFVwd2VsbGluZyBJbmRleCBpcyBhbiBpbmRleCBvZiB0aGUgc3RyZW5ndGggb2YgdGhlIHdpbmQgZm9yY2luZyBvbiB0aGUgb2NlYW4gd2hpY2ggaGFzIGJlZW4gdXNlZCBpbiBtYW55IHN0dWRpZXMgb2YgdGhlIGVmZmVjdHMgb2Ygb2NlYW4gdmFyaWFiaWxpdHkgb24gdGhlIHJlcHJvZHVjdGl2ZSBhbmQgcmVjcnVpdG1lbnQgc3VjY2VzcyBvZiBtYW55IGZpc2ggYW5kIGludmVydGVicmF0ZSBzcGVjaWVzLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxudGltZSAocmVmZXJlbmNlIHRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG51cHdlbGxpbmdfaW5kZXhcbnN0YXRpb25faWRcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkVUkzMzZocl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkVUkzMzZocl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9lcmRVSTMzNmhyL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9MQVMvZG9jcy93aW5kX2Zyb21fcHJlc3N1cmUubmMuaHRtbCIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9lcmRVSTMzNmhyLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1lcmRVSTMzNmhyJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEvU1dGU0MgRW52aXJvbm1lbnRhbCBSZXNlYXJjaCBEaXZpc2lvbiIsICJlcmRVSTMzNmhyIl0sCiAgICAgIFsiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRVSTM2NmhyIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZFVJMzY2aHIuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVXB3ZWxsaW5nIEluZGV4LCAzNk4gMTIyVywgNi1ob3VybHkiLCAiVXB3ZWxsaW5nIGluZGV4IGNvbXB1dGVkIGZyb20gMS1kZWdyZWUgRk5NT0Mgc2VhIGxldmVsIHByZXNzdXJlIGZvciAxNSBsb2NhdGlvbnMgb2ZmIHRoZSBOb3J0aCBBbWVyaWNhbiBXZXN0IENvYXN0IGF0IGVhY2ggMyBkZWdyZWVzIG9mIGxhdGl0dWRlIGZyb20gMjFOIHRvIDYwTi4gVGhlIGNvYXN0YWwgVXB3ZWxsaW5nIEluZGV4IGlzIGFuIGluZGV4IG9mIHRoZSBzdHJlbmd0aCBvZiB0aGUgd2luZCBmb3JjaW5nIG9uIHRoZSBvY2VhbiB3aGljaCBoYXMgYmVlbiB1c2VkIGluIG1hbnkgc3R1ZGllcyBvZiB0aGUgZWZmZWN0cyBvZiBvY2VhbiB2YXJpYWJpbGl0eSBvbiB0aGUgcmVwcm9kdWN0aXZlIGFuZCByZWNydWl0bWVudCBzdWNjZXNzIG9mIG1hbnkgZmlzaCBhbmQgaW52ZXJ0ZWJyYXRlIHNwZWNpZXMuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG50aW1lIChyZWZlcmVuY2UgdGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnVwd2VsbGluZ19pbmRleFxuc3RhdGlvbl9pZFxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9lcmRVSTM2NmhyX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRVSTM2NmhyX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZFVJMzY2aHIvaW5kZXguanNvbiIsICJodHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L0xBUy9kb2NzL3dpbmRfZnJvbV9wcmVzc3VyZS5uYy5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZFVJMzY2aHIucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZFVJMzY2aHImc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQS9TV0ZTQyBFbnZpcm9ubWVudGFsIFJlc2VhcmNoIERpdmlzaW9uIiwgImVyZFVJMzY2aHIiXSwKICAgICAgWyIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZFVJMzk2aHIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkVUkzOTZoci5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJVcHdlbGxpbmcgSW5kZXgsIDM5TiAxMjVXLCA2LWhvdXJseSIsICJVcHdlbGxpbmcgaW5kZXggY29tcHV0ZWQgZnJvbSAxLWRlZ3JlZSBGTk1PQyBzZWEgbGV2ZWwgcHJlc3N1cmUgZm9yIDE1IGxvY2F0aW9ucyBvZmYgdGhlIE5vcnRoIEFtZXJpY2FuIFdlc3QgQ29hc3QgYXQgZWFjaCAzIGRlZ3JlZXMgb2YgbGF0aXR1ZGUgZnJvbSAyMU4gdG8gNjBOLiBUaGUgY29hc3RhbCBVcHdlbGxpbmcgSW5kZXggaXMgYW4gaW5kZXggb2YgdGhlIHN0cmVuZ3RoIG9mIHRoZSB3aW5kIGZvcmNpbmcgb24gdGhlIG9jZWFuIHdoaWNoIGhhcyBiZWVuIHVzZWQgaW4gbWFueSBzdHVkaWVzIG9mIHRoZSBlZmZlY3RzIG9mIG9jZWFuIHZhcmlhYmlsaXR5IG9uIHRoZSByZXByb2R1Y3RpdmUgYW5kIHJlY3J1aXRtZW50IHN1Y2Nlc3Mgb2YgbWFueSBmaXNoIGFuZCBpbnZlcnRlYnJhdGUgc3BlY2llcy5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbnRpbWUgKHJlZmVyZW5jZSB0aW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxudXB3ZWxsaW5nX2luZGV4XG5zdGF0aW9uX2lkXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2VyZFVJMzk2aHJfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2VyZFVJMzk2aHJfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkVUkzOTZoci9pbmRleC5qc29uIiwgImh0dHBzOi8vb2NlYW52aWV3LnBmZWcubm9hYS5nb3YvTEFTL2RvY3Mvd2luZF9mcm9tX3ByZXNzdXJlLm5jLmh0bWwiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkVUkzOTZoci5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkVUkzOTZociZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBL1NXRlNDIEVudmlyb25tZW50YWwgUmVzZWFyY2ggRGl2aXNpb24iLCAiZXJkVUkzOTZociJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkVUk0MjZociIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRVSTQyNmhyLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlVwd2VsbGluZyBJbmRleCwgNDJOIDEyNVcsIDYtaG91cmx5IiwgIlVwd2VsbGluZyBpbmRleCBjb21wdXRlZCBmcm9tIDEtZGVncmVlIEZOTU9DIHNlYSBsZXZlbCBwcmVzc3VyZSBmb3IgMTUgbG9jYXRpb25zIG9mZiB0aGUgTm9ydGggQW1lcmljYW4gV2VzdCBDb2FzdCBhdCBlYWNoIDMgZGVncmVlcyBvZiBsYXRpdHVkZSBmcm9tIDIxTiB0byA2ME4uIFRoZSBjb2FzdGFsIFVwd2VsbGluZyBJbmRleCBpcyBhbiBpbmRleCBvZiB0aGUgc3RyZW5ndGggb2YgdGhlIHdpbmQgZm9yY2luZyBvbiB0aGUgb2NlYW4gd2hpY2ggaGFzIGJlZW4gdXNlZCBpbiBtYW55IHN0dWRpZXMgb2YgdGhlIGVmZmVjdHMgb2Ygb2NlYW4gdmFyaWFiaWxpdHkgb24gdGhlIHJlcHJvZHVjdGl2ZSBhbmQgcmVjcnVpdG1lbnQgc3VjY2VzcyBvZiBtYW55IGZpc2ggYW5kIGludmVydGVicmF0ZSBzcGVjaWVzLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxudGltZSAocmVmZXJlbmNlIHRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG51cHdlbGxpbmdfaW5kZXhcbnN0YXRpb25faWRcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkVUk0MjZocl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkVUk0MjZocl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9lcmRVSTQyNmhyL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9MQVMvZG9jcy93aW5kX2Zyb21fcHJlc3N1cmUubmMuaHRtbCIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9lcmRVSTQyNmhyLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1lcmRVSTQyNmhyJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEvU1dGU0MgRW52aXJvbm1lbnRhbCBSZXNlYXJjaCBEaXZpc2lvbiIsICJlcmRVSTQyNmhyIl0sCiAgICAgIFsiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRVSTQ1NmhyIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZFVJNDU2aHIuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVXB3ZWxsaW5nIEluZGV4LCA0NU4gMTI1VywgNi1ob3VybHkiLCAiVXB3ZWxsaW5nIGluZGV4IGNvbXB1dGVkIGZyb20gMS1kZWdyZWUgRk5NT0Mgc2VhIGxldmVsIHByZXNzdXJlIGZvciAxNSBsb2NhdGlvbnMgb2ZmIHRoZSBOb3J0aCBBbWVyaWNhbiBXZXN0IENvYXN0IGF0IGVhY2ggMyBkZWdyZWVzIG9mIGxhdGl0dWRlIGZyb20gMjFOIHRvIDYwTi4gVGhlIGNvYXN0YWwgVXB3ZWxsaW5nIEluZGV4IGlzIGFuIGluZGV4IG9mIHRoZSBzdHJlbmd0aCBvZiB0aGUgd2luZCBmb3JjaW5nIG9uIHRoZSBvY2VhbiB3aGljaCBoYXMgYmVlbiB1c2VkIGluIG1hbnkgc3R1ZGllcyBvZiB0aGUgZWZmZWN0cyBvZiBvY2VhbiB2YXJpYWJpbGl0eSBvbiB0aGUgcmVwcm9kdWN0aXZlIGFuZCByZWNydWl0bWVudCBzdWNjZXNzIG9mIG1hbnkgZmlzaCBhbmQgaW52ZXJ0ZWJyYXRlIHNwZWNpZXMuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG50aW1lIChyZWZlcmVuY2UgdGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnVwd2VsbGluZ19pbmRleFxuc3RhdGlvbl9pZFxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9lcmRVSTQ1NmhyX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRVSTQ1NmhyX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZFVJNDU2aHIvaW5kZXguanNvbiIsICJodHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L0xBUy9kb2NzL3dpbmRfZnJvbV9wcmVzc3VyZS5uYy5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZFVJNDU2aHIucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZFVJNDU2aHImc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQS9TV0ZTQyBFbnZpcm9ubWVudGFsIFJlc2VhcmNoIERpdmlzaW9uIiwgImVyZFVJNDU2aHIiXSwKICAgICAgWyIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZFVJNDg2aHIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkVUk0ODZoci5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJVcHdlbGxpbmcgSW5kZXgsIDQ4TiAxMjVXLCA2LWhvdXJseSIsICJVcHdlbGxpbmcgaW5kZXggY29tcHV0ZWQgZnJvbSAxLWRlZ3JlZSBGTk1PQyBzZWEgbGV2ZWwgcHJlc3N1cmUgZm9yIDE1IGxvY2F0aW9ucyBvZmYgdGhlIE5vcnRoIEFtZXJpY2FuIFdlc3QgQ29hc3QgYXQgZWFjaCAzIGRlZ3JlZXMgb2YgbGF0aXR1ZGUgZnJvbSAyMU4gdG8gNjBOLiBUaGUgY29hc3RhbCBVcHdlbGxpbmcgSW5kZXggaXMgYW4gaW5kZXggb2YgdGhlIHN0cmVuZ3RoIG9mIHRoZSB3aW5kIGZvcmNpbmcgb24gdGhlIG9jZWFuIHdoaWNoIGhhcyBiZWVuIHVzZWQgaW4gbWFueSBzdHVkaWVzIG9mIHRoZSBlZmZlY3RzIG9mIG9jZWFuIHZhcmlhYmlsaXR5IG9uIHRoZSByZXByb2R1Y3RpdmUgYW5kIHJlY3J1aXRtZW50IHN1Y2Nlc3Mgb2YgbWFueSBmaXNoIGFuZCBpbnZlcnRlYnJhdGUgc3BlY2llcy5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbnRpbWUgKHJlZmVyZW5jZSB0aW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxudXB3ZWxsaW5nX2luZGV4XG5zdGF0aW9uX2lkXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2VyZFVJNDg2aHJfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2VyZFVJNDg2aHJfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkVUk0ODZoci9pbmRleC5qc29uIiwgImh0dHBzOi8vb2NlYW52aWV3LnBmZWcubm9hYS5nb3YvTEFTL2RvY3Mvd2luZF9mcm9tX3ByZXNzdXJlLm5jLmh0bWwiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkVUk0ODZoci5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkVUk0ODZociZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBL1NXRlNDIEVudmlyb25tZW50YWwgUmVzZWFyY2ggRGl2aXNpb24iLCAiZXJkVUk0ODZociJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkVUk1MTZociIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRVSTUxNmhyLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlVwd2VsbGluZyBJbmRleCwgNTFOIDEzMVcsIDYtaG91cmx5IiwgIlVwd2VsbGluZyBpbmRleCBjb21wdXRlZCBmcm9tIDEtZGVncmVlIEZOTU9DIHNlYSBsZXZlbCBwcmVzc3VyZSBmb3IgMTUgbG9jYXRpb25zIG9mZiB0aGUgTm9ydGggQW1lcmljYW4gV2VzdCBDb2FzdCBhdCBlYWNoIDMgZGVncmVlcyBvZiBsYXRpdHVkZSBmcm9tIDIxTiB0byA2ME4uIFRoZSBjb2FzdGFsIFVwd2VsbGluZyBJbmRleCBpcyBhbiBpbmRleCBvZiB0aGUgc3RyZW5ndGggb2YgdGhlIHdpbmQgZm9yY2luZyBvbiB0aGUgb2NlYW4gd2hpY2ggaGFzIGJlZW4gdXNlZCBpbiBtYW55IHN0dWRpZXMgb2YgdGhlIGVmZmVjdHMgb2Ygb2NlYW4gdmFyaWFiaWxpdHkgb24gdGhlIHJlcHJvZHVjdGl2ZSBhbmQgcmVjcnVpdG1lbnQgc3VjY2VzcyBvZiBtYW55IGZpc2ggYW5kIGludmVydGVicmF0ZSBzcGVjaWVzLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxudGltZSAocmVmZXJlbmNlIHRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG51cHdlbGxpbmdfaW5kZXhcbnN0YXRpb25faWRcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkVUk1MTZocl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkVUk1MTZocl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9lcmRVSTUxNmhyL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9MQVMvZG9jcy93aW5kX2Zyb21fcHJlc3N1cmUubmMuaHRtbCIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9lcmRVSTUxNmhyLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1lcmRVSTUxNmhyJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEvU1dGU0MgRW52aXJvbm1lbnRhbCBSZXNlYXJjaCBEaXZpc2lvbiIsICJlcmRVSTUxNmhyIl0sCiAgICAgIFsiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRVSTU0NmhyIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZFVJNTQ2aHIuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVXB3ZWxsaW5nIEluZGV4LCA1NE4gMTM0VywgNi1ob3VybHkiLCAiVXB3ZWxsaW5nIGluZGV4IGNvbXB1dGVkIGZyb20gMS1kZWdyZWUgRk5NT0Mgc2VhIGxldmVsIHByZXNzdXJlIGZvciAxNSBsb2NhdGlvbnMgb2ZmIHRoZSBOb3J0aCBBbWVyaWNhbiBXZXN0IENvYXN0IGF0IGVhY2ggMyBkZWdyZWVzIG9mIGxhdGl0dWRlIGZyb20gMjFOIHRvIDYwTi4gVGhlIGNvYXN0YWwgVXB3ZWxsaW5nIEluZGV4IGlzIGFuIGluZGV4IG9mIHRoZSBzdHJlbmd0aCBvZiB0aGUgd2luZCBmb3JjaW5nIG9uIHRoZSBvY2VhbiB3aGljaCBoYXMgYmVlbiB1c2VkIGluIG1hbnkgc3R1ZGllcyBvZiB0aGUgZWZmZWN0cyBvZiBvY2VhbiB2YXJpYWJpbGl0eSBvbiB0aGUgcmVwcm9kdWN0aXZlIGFuZCByZWNydWl0bWVudCBzdWNjZXNzIG9mIG1hbnkgZmlzaCBhbmQgaW52ZXJ0ZWJyYXRlIHNwZWNpZXMuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG50aW1lIChyZWZlcmVuY2UgdGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnVwd2VsbGluZ19pbmRleFxuc3RhdGlvbl9pZFxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9lcmRVSTU0NmhyX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRVSTU0NmhyX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZFVJNTQ2aHIvaW5kZXguanNvbiIsICJodHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L0xBUy9kb2NzL3dpbmRfZnJvbV9wcmVzc3VyZS5uYy5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZFVJNTQ2aHIucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZFVJNTQ2aHImc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQS9TV0ZTQyBFbnZpcm9ubWVudGFsIFJlc2VhcmNoIERpdmlzaW9uIiwgImVyZFVJNTQ2aHIiXSwKICAgICAgWyIiLCAiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZFVJNTc2aHIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkVUk1NzZoci5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJVcHdlbGxpbmcgSW5kZXgsIDU3TiAxMzdXLCA2LWhvdXJseSIsICJVcHdlbGxpbmcgaW5kZXggY29tcHV0ZWQgZnJvbSAxLWRlZ3JlZSBGTk1PQyBzZWEgbGV2ZWwgcHJlc3N1cmUgZm9yIDE1IGxvY2F0aW9ucyBvZmYgdGhlIE5vcnRoIEFtZXJpY2FuIFdlc3QgQ29hc3QgYXQgZWFjaCAzIGRlZ3JlZXMgb2YgbGF0aXR1ZGUgZnJvbSAyMU4gdG8gNjBOLiBUaGUgY29hc3RhbCBVcHdlbGxpbmcgSW5kZXggaXMgYW4gaW5kZXggb2YgdGhlIHN0cmVuZ3RoIG9mIHRoZSB3aW5kIGZvcmNpbmcgb24gdGhlIG9jZWFuIHdoaWNoIGhhcyBiZWVuIHVzZWQgaW4gbWFueSBzdHVkaWVzIG9mIHRoZSBlZmZlY3RzIG9mIG9jZWFuIHZhcmlhYmlsaXR5IG9uIHRoZSByZXByb2R1Y3RpdmUgYW5kIHJlY3J1aXRtZW50IHN1Y2Nlc3Mgb2YgbWFueSBmaXNoIGFuZCBpbnZlcnRlYnJhdGUgc3BlY2llcy5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbnRpbWUgKHJlZmVyZW5jZSB0aW1lLCBzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxudXB3ZWxsaW5nX2luZGV4XG5zdGF0aW9uX2lkXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2VyZFVJNTc2aHJfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2VyZFVJNTc2aHJfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vZXJkVUk1NzZoci9pbmRleC5qc29uIiwgImh0dHBzOi8vb2NlYW52aWV3LnBmZWcubm9hYS5nb3YvTEFTL2RvY3Mvd2luZF9mcm9tX3ByZXNzdXJlLm5jLmh0bWwiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvZXJkVUk1NzZoci5yc3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvc3Vic2NyaXB0aW9ucy9hZGQuaHRtbD9kYXRhc2V0SUQ9ZXJkVUk1NzZociZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBL1NXRlNDIEVudmlyb25tZW50YWwgUmVzZWFyY2ggRGl2aXNpb24iLCAiZXJkVUk1NzZociJdLAogICAgICBbIiIsICIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvZXJkVUk2MDZociIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRVSTYwNmhyLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlVwd2VsbGluZyBJbmRleCwgNjBOIDE0NlcsIDYtaG91cmx5IiwgIlVwd2VsbGluZyBpbmRleCBjb21wdXRlZCBmcm9tIDEtZGVncmVlIEZOTU9DIHNlYSBsZXZlbCBwcmVzc3VyZSBmb3IgMTUgbG9jYXRpb25zIG9mZiB0aGUgTm9ydGggQW1lcmljYW4gV2VzdCBDb2FzdCBhdCBlYWNoIDMgZGVncmVlcyBvZiBsYXRpdHVkZSBmcm9tIDIxTiB0byA2ME4uIFRoZSBjb2FzdGFsIFVwd2VsbGluZyBJbmRleCBpcyBhbiBpbmRleCBvZiB0aGUgc3RyZW5ndGggb2YgdGhlIHdpbmQgZm9yY2luZyBvbiB0aGUgb2NlYW4gd2hpY2ggaGFzIGJlZW4gdXNlZCBpbiBtYW55IHN0dWRpZXMgb2YgdGhlIGVmZmVjdHMgb2Ygb2NlYW4gdmFyaWFiaWxpdHkgb24gdGhlIHJlcHJvZHVjdGl2ZSBhbmQgcmVjcnVpdG1lbnQgc3VjY2VzcyBvZiBtYW55IGZpc2ggYW5kIGludmVydGVicmF0ZSBzcGVjaWVzLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1xuVkFSSUFCTEVTOlxudGltZSAocmVmZXJlbmNlIHRpbWUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG51cHdlbGxpbmdfaW5kZXhcbnN0YXRpb25faWRcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvZXJkVUk2MDZocl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvZXJkVUk2MDZocl9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9lcmRVSTYwNmhyL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly9vY2VhbnZpZXcucGZlZy5ub2FhLmdvdi9MQVMvZG9jcy93aW5kX2Zyb21fcHJlc3N1cmUubmMuaHRtbCIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9lcmRVSTYwNmhyLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1lcmRVSTYwNmhyJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEvU1dGU0MgRW52aXJvbm1lbnRhbCBSZXNlYXJjaCBEaXZpc2lvbiIsICJlcmRVSTYwNmhyIl0sCiAgICAgIFsiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9lcmRVSTYxNmhyIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2VyZFVJNjE2aHIuZ3JhcGgiLCAiIiwgIiIsICJwdWJsaWMiLCAiVXB3ZWxsaW5nIEluZGV4LCA2ME4gMTQ5VywgNi1ob3VybHkiLCAiVXB3ZWxsaW5nIGluZGV4IGNvbXB1dGVkIGZyb20gMS1kZWdyZWUgRk5NT0Mgc2VhIGxldmVsIHByZXNzdXJlIGZvciAxNSBsb2NhdGlvbnMgb2ZmIHRoZSBOb3J0aCBBbWVyaWNhbiBXZXN0IENvYXN0IGF0IGVhY2ggMyBkZWdyZWVzIG9mIGxhdGl0dWRlIGZyb20gMjFOIHRvIDYwTi4gVGhlIGNvYXN0YWwgVXB3ZWxsaW5nIEluZGV4IGlzIGFuIGluZGV4IG9mIHRoZSBzdHJlbmd0aCBvZiB0aGUgd2luZCBmb3JjaW5nIG9uIHRoZSBvY2VhbiB3aGljaCBoYXMgYmVlbiB1c2VkIGluIG1hbnkgc3R1ZGllcyBvZiB0aGUgZWZmZWN0cyBvZiBvY2VhbiB2YXJpYWJpbGl0eSBvbiB0aGUgcmVwcm9kdWN0aXZlIGFuZCByZWNydWl0bWVudCBzdWNjZXNzIG9mIG1hbnkgZmlzaCBhbmQgaW52ZXJ0ZWJyYXRlIHNwZWNpZXMuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG50aW1lIChyZWZlcmVuY2UgdGltZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnVwd2VsbGluZ19pbmRleFxuc3RhdGlvbl9pZFxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9lcmRVSTYxNmhyX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9lcmRVSTYxNmhyX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2VyZFVJNjE2aHIvaW5kZXguanNvbiIsICJodHRwczovL29jZWFudmlldy5wZmVnLm5vYWEuZ292L0xBUy9kb2NzL3dpbmRfZnJvbV9wcmVzc3VyZS5uYy5odG1sIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL2VyZFVJNjE2aHIucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWVyZFVJNjE2aHImc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQS9TV0ZTQyBFbnZpcm9ubWVudGFsIFJlc2VhcmNoIERpdmlzaW9uIiwgImVyZFVJNjE2aHIiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0Xzg4Y2RfN2RmYl9lY2ZhLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfODhjZF83ZGZiX2VjZmEiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0Xzg4Y2RfN2RmYl9lY2ZhLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlVTIFBhY2lmaWMgSXNsYW5kcywgQ29yYWwgUmVlZiBNb25pdG9yaW5nLCBGaXNoIFN1cnZleXMsIEJlbHQgVHJhbnNlY3RzIChCTFQpIiwgIkNvcmFsIFJlZWYgRWNvc3l0ZW0gRGl2aXNpb24gKENSRUQpIEZpc2ggU3RvY2sgRGF0YSBmcm9tIFJhcGlkIEVjb2xvZ2ljYWwgQXNzZXNzbWVudHMgKFJFQXMpXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5taW5pbXVtRGVwdGhJbk1ldGVyc1xubWF4aW11bURlcHRoSW5NZXRlcnNcbmlzbGFuZEdyb3VwXG52ZXJuYWN1bGFyTmFtZVxuc2NpZW50aWZpY05hbWVcbm9pZFxubW9kaWZpZWRcbmRhdGFzZXRJRFxuZGF0YXNldE5hbWVcbmluc3RpdHV0aW9uQ29kZVxuY29sbGVjdGlvbkNvZGVcbmluc3RpdHV0aW9uSURcbmNvbGxlY3Rpb25JRFxub3duZXJJbnN0aXR1dGlvbkNvZGVcbmJhc2lzT2ZSZWNvcmRcbmNhdGFsb2dOdW1iZXJcbnRheG9uUmFua1xudmVyYmF0aW1Db29yZGluYXRlc1xudmVyYmF0aW1TUlNcbmdlb2RldGljRGF0dW1cbmNvb3JkaW5hdGVVbmNlcnRhaW50eUluTWV0ZXJzXG5nZW9yZWZlcmVuY2VkQnlcbmdlb3JlZmVyZW5jZVByb3RvY29sXG53YXRlckJvZHlcbi4uLiAoNTAgbW9yZSB2YXJpYWJsZXMpXG4iLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvZmdkYy94bWwvaGF3YWlpX3NvZXN0Xzg4Y2RfN2RmYl9lY2ZhX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9oYXdhaWlfc29lc3RfODhjZF83ZGZiX2VjZmFfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vaGF3YWlpX3NvZXN0Xzg4Y2RfN2RmYl9lY2ZhL2luZGV4Lmpzb24iLCAiaHR0cHM6Ly93d3cucGlmc2Mubm9hYS5nb3YvY3JlZC9maXNoLnBocCIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9oYXdhaWlfc29lc3RfODhjZF83ZGZiX2VjZmEucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPWhhd2FpaV9zb2VzdF84OGNkXzdkZmJfZWNmYSZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJVU0RPQy9OT0FBL05NRlMvUElGU0MvQ1JFRCIsICJoYXdhaWlfc29lc3RfODhjZF83ZGZiX2VjZmEiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0Xzc0NDhfOGRkMl9lNTI5LnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfNzQ0OF84ZGQyX2U1MjkiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0Xzc0NDhfOGRkMl9lNTI5LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIlVTIFBhY2lmaWMgSXNsYW5kcywgQ29yYWwgUmVlZiBNb25pdG9yaW5nLCBGaXNoIFN1cnZleXMsIFN0YXRpb25hcnkgUG9pbnQgQ291bnRzIChuU1BDKSIsICJDb3JhbCBSZWVmIEVjb3N5dGVtIERpdmlzaW9uIChDUkVEKSBGaXNoIFN0b2NrIERhdGEgZnJvbSBSYXBpZCBFY29sb2dpY2FsIEFzc2Vzc21lbnRzIChSRUFzKVxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubWluaW11bURlcHRoSW5NZXRlcnNcbm1heGltdW1EZXB0aEluTWV0ZXJzXG5pc2xhbmRHcm91cFxudmVybmFjdWxhck5hbWVcbnNjaWVudGlmaWNOYW1lXG5vaWRcbm1vZGlmaWVkXG5kYXRhc2V0SURcbmRhdGFzZXROYW1lXG5pbnN0aXR1dGlvbkNvZGVcbmNvbGxlY3Rpb25Db2RlXG5pbnN0aXR1dGlvbklEXG5jb2xsZWN0aW9uSURcbm93bmVySW5zdGl0dXRpb25Db2RlXG5iYXNpc09mUmVjb3JkXG5jYXRhbG9nTnVtYmVyXG50YXhvblJhbmtcbnZlcmJhdGltQ29vcmRpbmF0ZXNcbnZlcmJhdGltU1JTXG5nZW9kZXRpY0RhdHVtXG5jb29yZGluYXRlVW5jZXJ0YWludHlJbk1ldGVyc1xuZ2VvcmVmZXJlbmNlZEJ5XG5nZW9yZWZlcmVuY2VQcm90b2NvbFxud2F0ZXJCb2R5XG4uLi4gKDQ5IG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2hhd2FpaV9zb2VzdF83NDQ4XzhkZDJfZTUyOV9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvaGF3YWlpX3NvZXN0Xzc0NDhfOGRkMl9lNTI5X2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2hhd2FpaV9zb2VzdF83NDQ4XzhkZDJfZTUyOS9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBpZnNjLm5vYWEuZ292L2NyZWQvZmlzaC5waHAiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvaGF3YWlpX3NvZXN0Xzc0NDhfOGRkMl9lNTI5LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1oYXdhaWlfc29lc3RfNzQ0OF84ZGQyX2U1Mjkmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiVVNET0MvTk9BQS9OTUZTL1BJRlNDL0NSRUQiLCAiaGF3YWlpX3NvZXN0Xzc0NDhfOGRkMl9lNTI5Il0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF82ZGNiX2U2ODFfM2VhYi5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0XzZkY2JfZTY4MV8zZWFiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL2hhd2FpaV9zb2VzdF82ZGNiX2U2ODFfM2VhYi5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJVUyBQYWNpZmljIElzbGFuZHMsIENvcmFsIFJlZWYgTW9uaXRvcmluZywgRmlzaCBTdXJ2ZXlzLCBTdGF0aW9uYXJ5IFBvaW50IENvdW50cyAoU1BDKSIsICJDb3JhbCBSZWVmIEVjb3N5dGVtIERpdmlzaW9uIChDUkVEKSBGaXNoIFN0b2NrIERhdGEgZnJvbSBSYXBpZCBFY29sb2dpY2FsIEFzc2Vzc21lbnRzIChSRUFzKVxuXG5jZG1fZGF0YV90eXBlID0gUG9pbnRcblZBUklBQkxFUzpcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubWluaW11bURlcHRoSW5NZXRlcnNcbm1heGltdW1EZXB0aEluTWV0ZXJzXG5pc2xhbmRHcm91cFxudmVybmFjdWxhck5hbWVcbnNjaWVudGlmaWNOYW1lXG5vaWRcbm1vZGlmaWVkXG5kYXRhc2V0SURcbmRhdGFzZXROYW1lXG5pbnN0aXR1dGlvbkNvZGVcbmNvbGxlY3Rpb25Db2RlXG5pbnN0aXR1dGlvbklEXG5jb2xsZWN0aW9uSURcbm93bmVySW5zdGl0dXRpb25Db2RlXG5iYXNpc09mUmVjb3JkXG5jYXRhbG9nTnVtYmVyXG50YXhvblJhbmtcbnZlcmJhdGltQ29vcmRpbmF0ZXNcbnZlcmJhdGltU1JTXG5nZW9kZXRpY0RhdHVtXG5jb29yZGluYXRlVW5jZXJ0YWludHlJbk1ldGVyc1xuZ2VvcmVmZXJlbmNlZEJ5XG5nZW9yZWZlcmVuY2VQcm90b2NvbFxud2F0ZXJCb2R5XG4uLi4gKDQ5IG1vcmUgdmFyaWFibGVzKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL2hhd2FpaV9zb2VzdF82ZGNiX2U2ODFfM2VhYl9mZ2RjLnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9pc28xOTExNS94bWwvaGF3YWlpX3NvZXN0XzZkY2JfZTY4MV8zZWFiX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL2hhd2FpaV9zb2VzdF82ZGNiX2U2ODFfM2VhYi9pbmRleC5qc29uIiwgImh0dHBzOi8vd3d3LnBpZnNjLm5vYWEuZ292L2NyZWQvZmlzaC5waHAiLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvaGF3YWlpX3NvZXN0XzZkY2JfZTY4MV8zZWFiLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1oYXdhaWlfc29lc3RfNmRjYl9lNjgxXzNlYWImc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiVVNET0MvTk9BQS9OTUZTL1BJRlNDL0NSRUQiLCAiaGF3YWlpX3NvZXN0XzZkY2JfZTY4MV8zZWFiIl0sCiAgICAgIFsiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfOGY0OV80Nzk2X2RkYzMiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0XzhmNDlfNDc5Nl9kZGMzLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIldlYXRoZXIgU3RhdGlvbjogSGF3YWlpOiBPYWh1OiBDb2NvbnV0IElzbGFuZCIsICJUaGUgSGF3YWlpIEluc3RpdHV0ZSBvZiBNYXJpbmUgQmlvbG9neSAoSElNQikgYXV0b21hdGljIHdlYXRoZXIgc3RhdGlvbiAoQVdTKSByZWNvcmRzIGhvdXJseSBtZWFzdXJlbWVudHMgb2YgcHJlY2lwaXRhdGlvbiwgYWlyIHRlbXBlcmF0dXJlLCB3aW5kIHNwZWVkIGFuZCBkaXJlY3Rpb24sIGFuZCBpcnJhZGlhbmNlLiBTZW5zb3JzIGluY2x1ZGUgYW4gRXBwbGV5IDI5NS0zODUgbm0gdWx0cmF2aW9sZXQgKFVWKSByYWRpb21ldGVyLCBhIExpQ29yIDIwMFNaIFB5cmFub21ldGVyLCBhbmQgYSBMaUNvciBRdWFudGFtZXRlciAoNDAwLTcwMCBubSkuIFRoZSBzZW5zb3JzIGFyZSBsb2NhdGVkIG9uIHRoZSByb29mIG9mIEhJTUIncyBDb3JhbCBSZWVmIEVjb2xvZ3kgTGFib3JhdG9yeSAoUG9pbnQgTGFiKSBvbiBNb2t1IG8gTG9lIChDb2NvbnV0IElzbGFuZCkgaW4gS2FuZW9oZSBCYXkgb24gdGhlIHdpbmR3YXJkIChlYXN0ZXJuKSBjb2FzdCBvZiBPYWh1IGluIEhhd2FpaS4gQW4gYWNjb21wYW55aW5nIHNlYSB3YXRlciB0ZW1wZXJhdHVyZSBzZW5zb3IgaXMgbG9jYXRlZCBsZXNzIHRoYW4gMTAgbSBvZmZzaG9yZSBvZiB0aGUgd2VhdGhlciBzdGF0aW9uIGF0IGEgc2hhbGxvdyBkZXB0aCBvZiBhcHByb3hpbWF0ZWx5IDEgbS5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNcblZBUklBQkxFUzpcbnRpbWUgKHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5hbHRpdHVkZSAoaGVpZ2h0IGFib3ZlIG1lYW4gc2VhIGxldmVsLCBtKVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbnN0YXRpb25fbmFtZVxuYWlyX3RlbXBlcmF0dXJlIChTdXJmYWNlIGFpciB0ZW1wZXJhdHVyZSwgQ2Vsc2l1cylcbnNlYV93YXRlcl90ZW1wZXJhdHVyZSAoTWVhbiBvY2VhbiB0ZW1wZXJhdHVyZSwgQ2Vsc2l1cylcbndpbmRfc3BlZWQgKE1lYW4gd2luZCBzcGVlZCwgbSBzLTEpXG53aW5kX2Zyb21fZGlyZWN0aW9uIChNZWFuIHdpbmQgZnJvbSBkaXJlY3Rpb24sIGRlZ3JlZXMpXG53aW5kX2Zyb21fZGlyZWN0aW9uX3N0ZCAoU3RhbmRhcmQgZGV2aWF0aW9uIG9mIHdpbmQgZnJvbSBkaXJlY3Rpb24sIGRlZ3JlZXMpXG53aW5kX3NwZWVkX21heCAoTWF4aW11bSB3aW5kIGd1c3QsIG0gcy0xKVxucmFpbmZhbGxfYW1vdW50IChSYWluZmFsbCB0b3RhbCwgbW0pXG5zaG9ydHdhdmVfcmFkaWF0aW9uIChBdmVyYWdlIGRvd253ZWxsaW5nIHNob3J0d2F2ZSByYWRpYXRpb24sIFcgbS0yKVxucGhvdG9zeW50aGV0aWNfcmFkaWF0aW9uIChQaG90b3N5bnRoZXRpY2FsbHkgYWN0aXZlIHJhZGlhdGlvbiwgdW1vbCBtLTIgcy0xKVxudWx0cmF2aW9sZXRfcmFkaWF0aW9uIChXIG0tMilcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9oYXdhaWlfc29lc3RfOGY0OV80Nzk2X2RkYzNfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2hhd2FpaV9zb2VzdF84ZjQ5XzQ3OTZfZGRjM19pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9oYXdhaWlfc29lc3RfOGY0OV80Nzk2X2RkYzMvaW5kZXguanNvbiIsICJodHRwOi8vd3d3LnBhY2lvb3MuaGF3YWlpLmVkdS93ZWF0aGVyL29icy1tb2t1b2xvZS8iLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvaGF3YWlpX3NvZXN0XzhmNDlfNDc5Nl9kZGMzLnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1oYXdhaWlfc29lc3RfOGY0OV80Nzk2X2RkYzMmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiVW5pdmVyc2l0eSBvZiBIYXdhaWkiLCAiaGF3YWlpX3NvZXN0XzhmNDlfNDc5Nl9kZGMzIl0sCiAgICAgIFsiIiwgIiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9oYXdhaWlfc29lc3RfZDk4ZF8xZDQzX2ZlZjciLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvaGF3YWlpX3NvZXN0X2Q5OGRfMWQ0M19mZWY3LmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIldlYXRoZXIgU3RhdGlvbjogUGFsYXU6IEtvcm9yOiBOZ2VhbmdlcyBJc2xhbmQiLCAiU2luY2UgMjAwNywgdGhlIENvcmFsIFJlZWYgUmVzZWFyY2ggRm91bmRhdGlvbiAoQ1JSRikgaGFzIG9wZXJhdGVkIGEgQ2FtcGJlbGwgU2NpZW50aWZpYyBhdXRvbWF0aWMgd2VhdGhlciBzdGF0aW9uIChBV1MpIGluIFBhbGF1IGRlc2lnbmVkIHRvIG1lYXN1cmUgbWV0ZW9yb2xvZ2ljYWwvYXRtb3NwaGVyaWMgY29uZGl0aW9ucyByZWxldmFudCB0byBLb3JvciBTdGF0ZSdzIFJvY2sgSXNsYW5kcyBTb3V0aGVybiBMYWdvb24sIGEgV29ybGQgSGVyaXRhZ2UgU2l0ZS4gV2l0aCBsaXR0bGUgZmxhdCBsYW5kIGluIHRoZSBSb2NrIElzbGFuZHMsIHRoZSB3ZWF0aGVyIHN0YXRpb24gaXMgbG9jYXRlZCBvbiBhIDQwLWZ0IHRvd2VyIHNpdHVhdGVkIG9uIGEga2Fyc3QgcmlkZ2Ugb24gTmdlYW5nZXMgSXNsYW5kIGF0IDEwMCBmdCBlbGV2YXRpb24sIGFib3V0IDUuNCBrbSAoMy41IG1pKSBmcm9tIENSUkYncyBzdHVkeSBzaXRlIGF0IEplbGx5ZmlzaCBMYWtlLiBJdCBtZWFzdXJlcyBhIHN1aXRlIG9mIGF0bW9zcGhlcmljIGNvbmRpdGlvbnMgZm9yIGNvbXBhcmlzb24gd2l0aCBDUlJGJ3MgdGVtcG9yYXJ5LCBmbG9hdGluZyB3ZWF0aGVyIHN0YXRpb24gbG9jYXRlZCBvbiBhIHRyaXBvZCBpbiBKZWxseWZpc2ggTGFrZSwgYW5kIHByb3ZpZGVzIHZpdGFsIGRhdGEgZm9yIHN0dWR5aW5nIGhvdyBsb2NhbCB3ZWF0aGVyIGNvbmRpdGlvbnMgYW5kIEVOU08gZXZlbnRzIGFmZmVjdCB0aGUgbWFyaW5lIGxha2UgZW52aXJvbm1lbnQuXG5cbmNkbV9kYXRhX3R5cGUgPSBUaW1lU2VyaWVzXG5WQVJJQUJMRVM6XG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuYWx0aXR1ZGUgKGhlaWdodCBhYm92ZSBtZWFuIHNlYSBsZXZlbCwgbSlcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5zdGF0aW9uX25hbWVcbmFpcl90ZW1wZXJhdHVyZSAoTWVhbiBhaXIgdGVtcGVyYXR1cmUsIENlbHNpdXMpXG5haXJfdGVtcGVyYXR1cmVfc3RkIChTdGFuZGFyZCBkZXZpYXRpb24gb2YgYWlyIHRlbXBlcmF0dXJlLCBDZWxzaXVzKVxuYWlyX3RlbXBlcmF0dXJlX21heCAoTWF4aW11bSBhaXIgdGVtcGVyYXR1cmUsIENlbHNpdXMpXG5haXJfdGVtcGVyYXR1cmVfbWF4X3RpbWUgKFRpbWUgb2YgbWF4aW11bSBhaXIgdGVtcGVyYXR1cmUsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG5haXJfdGVtcGVyYXR1cmVfbWluIChNaW5pbXVtIGFpciB0ZW1wZXJhdHVyZSwgQ2Vsc2l1cylcbmFpcl90ZW1wZXJhdHVyZV9taW5fdGltZSAoVGltZSBvZiBtaW5pbXVtIGFpciB0ZW1wZXJhdHVyZSwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbndpbmRfc3BlZWQgKE1lYW4gd2luZCBzcGVlZCwgbSBzLTEpXG53aW5kX3NwZWVkX3N0ZCAoU3RhbmRhcmQgZGV2aWF0aW9uIHdpbmQgc3BlZWQsIG0gcy0xKVxud2luZF9zcGVlZF9tYXggKE1heGltdW0gd2luZCBzcGVlZCwgbSBzLTEpXG53aW5kX3NwZWVkX21heF90aW1lIChUaW1lIG9mIG1heGltdW0gd2luZCBzcGVlZCwgc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbndpbmRfc3BlZWRfbWluIChNaW5pbXVtIHdpbmQgc3BlZWQsIG0gcy0xKVxud2luZF9zcGVlZF9taW5fdGltZSAoVGltZSBvZiBtaW5pbXVtIHdpbmQgc3BlZWQsIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMVQwMDowMDowMFopXG53aW5kX2Zyb21fZGlyZWN0aW9uIChkZWdyZWVzKVxud2luZF9mcm9tX2RpcmVjdGlvbl9zdGQgKFN0YW5kYXJkIGRldmlhdGlvbiBvZiB3aW5kIGRpcmVjdGlvbiwgZGVncmVlcylcbnJhaW5mYWxsX2Ftb3VudCAoUmFpbmZhbGwgdG90YWwsIG1tKVxuLi4uICgyMCBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9oYXdhaWlfc29lc3RfZDk4ZF8xZDQzX2ZlZjdfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL2hhd2FpaV9zb2VzdF9kOThkXzFkNDNfZmVmN19pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9oYXdhaWlfc29lc3RfZDk4ZF8xZDQzX2ZlZjcvaW5kZXguanNvbiIsICJodHRwOi8vd3d3LmNvcmFscmVlZnJlc2VhcmNoZm91bmRhdGlvbi5vcmciLCAiaHR0cDovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9yc3MvaGF3YWlpX3NvZXN0X2Q5OGRfMWQ0M19mZWY3LnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1oYXdhaWlfc29lc3RfZDk4ZF8xZDQzX2ZlZjcmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiQ29yYWwgUmVlZiBSZXNlYXJjaCBGb3VuZGF0aW9uIChDUlJGKSIsICJoYXdhaWlfc29lc3RfZDk4ZF8xZDQzX2ZlZjciXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm1zcFdjb3NBZGNwRC5zdWJzZXQiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm1zcFdjb3NBZGNwRCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ubXNwV2Nvc0FkY3BELmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIldlc3QgQ29hc3QgT2JzZXJ2aW5nIFN5c3RlbSAoV0NPUykgQURDUCBDdXJyZW50cyBEYXRhLCAyMDA0LTIwMDgiLCAiVGhlIFdlc3QgQ29hc3QgT2JzZXJ2aW5nIFN5c3RlbSAoV0NPUykgcHJvamVjdCBwcm92aWRlcyBhY2Nlc3MgdG8gdGVtcGVyYXR1cmUgYW5kIGN1cnJlbnRzIGRhdGEgY29sbGVjdGVkIGF0IGZvdXIgb2YgdGhlIGZpdmUgTmF0aW9uYWwgTWFyaW5lIFNhbmN0dWFyeSBzaXRlcywgaW5jbHVkaW5nIE9seW1waWMgQ29hc3QsIEd1bGYgb2YgdGhlIEZhcmFsbG9uZXMsIE1vbnRlcmV5IEJheSwgYW5kIENoYW5uZWwgSXNsYW5kcy4gQSBzZW1pLWF1dG9tYXRlZCBlbmQtdG8tZW5kIGRhdGEgbWFuYWdlbWVudCBzeXN0ZW0gdHJhbnNwb3J0cyBhbmQgdHJhbnNmb3JtcyB0aGUgZGF0YSBmcm9tIHNvdXJjZSB0byBhcmNoaXZlLCBtYWtpbmcgdGhlIGRhdGEgYWNlc3NpYmxlIGZvciBkaXNjb3ZlcnksIGFjY2VzcyBhbmQgYW5hbHlzaXMgZnJvbSBtdWx0aXBsZSBJbnRlcm5ldCBwb2ludHMgb2YgZW50cnkuXG5cblRoZSBzdGF0aW9ucyAoYW5kIHRoZWlyIGNvZGUgbmFtZXMpIGFyZSBTYW4gTWlndWVsIE5vcnRoIChCQVkpLCBTYW50YSBSb3NhIE5vcnRoIChCRUEpLCBDdXlsZXIgSGFyYm9yIChDVVkpLCBQZWxpY2FuL1ByaXNvbmVycyBBcmVhIChQRUwpLCBTYW4gTWlndWVsIFNvdXRoIChTTVMpLCBTYW50YSBSb3NhIFNvdXRoIChTUlMpLCBWYWxsZXkgQW5jaCAoVkFMKS5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNQcm9maWxlXG5WQVJJQUJMRVM6XG5zdGF0aW9uXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbmRlcHRoIChtKVxuRGF0YVF1YWxpdHkgKERhdGEgUXVhbGl0eSwgcGVyY2VudClcbkRhdGFRdWFsaXR5X2ZsYWcgKERhdGEgUXVhbGl0eSBGbGFnKVxuRWFzdHdhcmQgKEVhc3R3YXJkIEN1cnJlbnQsIG0gcy0xKVxuRWFzdHdhcmRfZmxhZ1xuRXJyb3JWZWxvY2l0eSAoRXJyb3IgVmVsb2NpdHksIG0gcy0xKVxuRXJyb3JWZWxvY2l0eV9mbGFnIChFcnJvciBWZWxvY2l0eSBGbGFnKVxuSW50ZW5zaXR5IChjb3VudClcbkludGVuc2l0eV9mbGFnXG5Ob3J0aHdhcmQgKE5vcnRod2FyZCBDdXJyZW50LCBtIHMtMSlcbk5vcnRod2FyZF9mbGFnXG5VcHdhcmRzIChVcHdhcmQgQ3VycmVudCwgbSBzLTEpXG5VcHdhcmRzX2ZsYWdcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9ubXNwV2Nvc0FkY3BEX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC9ubXNwV2Nvc0FkY3BEX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL25tc3BXY29zQWRjcEQvaW5kZXguanNvbiIsICJmdHA6Ly9mdHAubm9kYy5ub2FhLmdvdi9ub2RjL2FyY2hpdmUvYXJjMDAwNi8wMDAyMDM5LzEuMS9hYm91dC9XQ09TX3Byb2plY3RfZG9jdW1lbnRfcGhhc2VJXzIwMDYwMzE3LnBkZiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9ubXNwV2Nvc0FkY3BELnJzcyIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9zdWJzY3JpcHRpb25zL2FkZC5odG1sP2RhdGFzZXRJRD1ubXNwV2Nvc0FkY3BEJnNob3dFcnJvcnM9ZmFsc2UmZW1haWw9IiwgIk5PQUEgTk1TUCIsICJubXNwV2Nvc0FkY3BEIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25tc3BXY29zQWRjcFMuc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL25tc3BXY29zQWRjcFMiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm1zcFdjb3NBZGNwUy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJXZXN0IENvYXN0IE9ic2VydmluZyBTeXN0ZW0gKFdDT1MpIEFEQ1AgU3RhdGlvbiBEYXRhLCAyMDA0LTIwMDgiLCAiVGhlIFdlc3QgQ29hc3QgT2JzZXJ2aW5nIFN5c3RlbSAoV0NPUykgcHJvamVjdCBwcm92aWRlcyBhY2Nlc3MgdG8gdGVtcGVyYXR1cmUgYW5kIGN1cnJlbnRzIGRhdGEgY29sbGVjdGVkIGF0IGZvdXIgb2YgdGhlIGZpdmUgTmF0aW9uYWwgTWFyaW5lIFNhbmN0dWFyeSBzaXRlcywgaW5jbHVkaW5nIE9seW1waWMgQ29hc3QsIEd1bGYgb2YgdGhlIEZhcmFsbG9uZXMsIE1vbnRlcmV5IEJheSwgYW5kIENoYW5uZWwgSXNsYW5kcy4gQSBzZW1pLWF1dG9tYXRlZCBlbmQtdG8tZW5kIGRhdGEgbWFuYWdlbWVudCBzeXN0ZW0gdHJhbnNwb3J0cyBhbmQgdHJhbnNmb3JtcyB0aGUgZGF0YSBmcm9tIHNvdXJjZSB0byBhcmNoaXZlLCBtYWtpbmcgdGhlIGRhdGEgYWNlc3NpYmxlIGZvciBkaXNjb3ZlcnksIGFjY2VzcyBhbmQgYW5hbHlzaXMgZnJvbSBtdWx0aXBsZSBJbnRlcm5ldCBwb2ludHMgb2YgZW50cnkuXG5cblRoZSBzdGF0aW9ucyAoYW5kIHRoZWlyIGNvZGUgbmFtZXMpIGFyZSBTYW4gTWlndWVsIE5vcnRoIChCQVkpLCBTYW50YSBSb3NhIE5vcnRoIChCRUEpLCBDdXlsZXIgSGFyYm9yIChDVVkpLCBQZWxpY2FuL1ByaXNvbmVycyBBcmVhIChQRUwpLCBTYW4gTWlndWVsIFNvdXRoIChTTVMpLCBTYW50YSBSb3NhIFNvdXRoIChTUlMpLCBWYWxsZXkgQW5jaCAoVkFMKS5cblxuY2RtX2RhdGFfdHlwZSA9IFRpbWVTZXJpZXNQcm9maWxlXG5WQVJJQUJMRVM6XG5zdGF0aW9uXG5sb25naXR1ZGUgKGRlZ3JlZXNfZWFzdClcbmxhdGl0dWRlIChkZWdyZWVzX25vcnRoKVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcblByZXNzdXJlIChTZWEgV2F0ZXIgUHJlc3N1cmUsIGRiYXIpXG5QcmVzc3VyZV9mbGFnXG5UZW1wZXJhdHVyZSAoU2VhIFdhdGVyIFRlbXBlcmF0dXJlLCBkZWdyZWVfQylcblRlbXBlcmF0dXJlX2ZsYWdcbldhdGVyRGVwdGggKFdhdGVyIERlcHRoLCBtKVxuV2F0ZXJEZXB0aF9mbGFnIChXYXRlciBEZXB0aCBGbGFnKVxuIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2ZnZGMveG1sL25tc3BXY29zQWRjcFNfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL25tc3BXY29zQWRjcFNfaXNvMTkxMTUueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL2luZm8vbm1zcFdjb3NBZGNwUy9pbmRleC5qc29uIiwgImZ0cDovL2Z0cC5ub2RjLm5vYWEuZ292L25vZGMvYXJjaGl2ZS9hcmMwMDA2LzAwMDIwMzkvMS4xL2Fib3V0L1dDT1NfcHJvamVjdF9kb2N1bWVudF9waGFzZUlfMjAwNjAzMTcucGRmIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL25tc3BXY29zQWRjcFMucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPW5tc3BXY29zQWRjcFMmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiTk9BQSBOTVNQIiwgIm5tc3BXY29zQWRjcFMiXSwKICAgICAgWyIiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm1zcFdjb3NUZW1wLnN1YnNldCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC90YWJsZWRhcC9ubXNwV2Nvc1RlbXAiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvbm1zcFdjb3NUZW1wLmdyYXBoIiwgIiIsICIiLCAicHVibGljIiwgIldlc3QgQ29hc3QgT2JzZXJ2aW5nIFN5c3RlbSAoV0NPUykgVGVtcGVyYXR1cmUgRGF0YSwgMjAwNC0yMDExIiwgIlRoZSBXZXN0IENvYXN0IE9ic2VydmluZyBTeXN0ZW0gKFdDT1MpIHByb2plY3QgcHJvdmlkZXMgYWNjZXNzIHRvIHRlbXBlcmF0dXJlIGFuZCBjdXJyZW50cyBkYXRhIGNvbGxlY3RlZCBhdCBmb3VyIG9mIHRoZSBmaXZlIE5hdGlvbmFsIE1hcmluZSBTYW5jdHVhcnkgc2l0ZXMsIGluY2x1ZGluZyBPbHltcGljIENvYXN0LCBHdWxmIG9mIHRoZSBGYXJhbGxvbmVzLCBNb250ZXJleSBCYXksIGFuZCBDaGFubmVsIElzbGFuZHMuIEEgc2VtaS1hdXRvbWF0ZWQgZW5kLXRvLWVuZCBkYXRhIG1hbmFnZW1lbnQgc3lzdGVtIHRyYW5zcG9ydHMgYW5kIHRyYW5zZm9ybXMgdGhlIGRhdGEgZnJvbSBzb3VyY2UgdG8gYXJjaGl2ZSwgbWFraW5nIHRoZSBkYXRhIGFjZXNzaWJsZSBmb3IgZGlzY292ZXJ5LCBhY2Nlc3MgYW5kIGFuYWx5c2lzIGZyb20gbXVsdGlwbGUgSW50ZXJuZXQgcG9pbnRzIG9mIGVudHJ5LlxuXG5UaGUgc3RhdGlvbnMgKGFuZCB0aGVpciBjb2RlIG5hbWVzKSBhcmUgQW5vIE51ZXZvIChBTk8wMDEpLCBTYW4gTWlndWVsIE5vcnRoIChCQVkpLCBTYW50YSBSb3NhIE5vcnRoIChCRUEpLCBCaWcgQ3JlZWsgKEJJRzAwMSksIEJvZGVnYSBIZWFkIChCT0QwMDEpLCBDYXBlIEFsYXZhIDE1TSAoQ0EwMTUpLCBDYXBlIEFsYXZhIDQyTSAoQ0EwNDIpLCBDYXBlIEFsYXZhIDY1TSAoQ0EwNjUpLCBDYXBlIEFsYXZhIDEwME0gKENBMTAwKSwgQ2FubmVyeSBSb3cgKENBTjAwMSksIENhcGUgRWxpemFiZXRoIDE1TSAoQ0UwMTUpLCBDYXBlIEVsaXphYmV0aCA0Mk0gKENFMDQyKSwgQ2FwZSBFbGl6YWJldGggNjVNIChDRTA2NSksIENhcGUgRWxpemFiZXRoIDEwME0gKENFMTAwKSwgQ3V5bGVyIEhhcmJvciAoQ1VZKSwgRXNhbGVuIChFU0EwMDEpLCBQb2ludCBKb2UgKEpPRTAwMSksIEthbGFsb2NoIDE1TSAoS0wwMTUpLCBLYWxhbG9jaCAyN00gKEtMMDI3KSwgTGEgQ3J1eiBSb2NrIChMQUMwMDEpLCBMb3BleiBSb2NrIChMT1AwMDEpLCBNYWthaCBCYXkgMTVNIChNQjAxNSksIE1ha2FoIEJheSA0Mk0gKE1CMDQyKSwgUGVsaWNhbi9Qcmlzb25lcnMgQXJlYSAoUEVMKSwgUGlnZW9uIFBvaW50IChQSUcwMDEpLCBQbGFza2V0dCBSb2NrIChQTEEwMDEpLCBTb3V0aGVhc3QgRmFyYWxsb24gSXNsYW5kIChTRUYwMDEpLCBTYW4gTWlndWVsIFNvdXRoIChTTVMpLCBTYW50YSBSb3NhIFNvdXRoIChTUlMpLCBTdW5zZXQgUG9pbnQgKFNVTjAwMSksIFRlYXdoaXQgSGVhZCAxNU0gKFRIMDE1KSwgVGVhd2hpdCBIZWFkIDMxTSAoVEgwMzEpLCBUZWF3aGl0IEhlYWQgNDJNIChUSDA0MiksIFRlcnJhY2UgUG9pbnQgNyAoVFBUMDA3KSwgVGVycmFjZSBQb2ludCA4IChUUFQwMDgpLCBWYWxsZXkgQW5jaCAoVkFMKSwgV2VzdG9uIEJlYWNoIChXRVMwMDEpLlxuXG5jZG1fZGF0YV90eXBlID0gVGltZVNlcmllc1Byb2ZpbGVcblZBUklBQkxFUzpcbnN0YXRpb25cbmxvbmdpdHVkZSAoZGVncmVlc19lYXN0KVxubGF0aXR1ZGUgKGRlZ3JlZXNfbm9ydGgpXG50aW1lIChzZWNvbmRzIHNpbmNlIDE5NzAtMDEtMDFUMDA6MDA6MDBaKVxuZGVwdGggKG0pXG5UZW1wZXJhdHVyZSAoU2VhIFdhdGVyIFRlbXBlcmF0dXJlLCBkZWdyZWVfQylcblRlbXBlcmF0dXJlX2ZsYWdcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC9ubXNwV2Nvc1RlbXBfZmdkYy54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvbWV0YWRhdGEvaXNvMTkxMTUveG1sL25tc3BXY29zVGVtcF9pc28xOTExNS54bWwiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvaW5mby9ubXNwV2Nvc1RlbXAvaW5kZXguanNvbiIsICJmdHA6Ly9mdHAubm9kYy5ub2FhLmdvdi9ub2RjL2FyY2hpdmUvYXJjMDAwNi8wMDAyMDM5LzEuMS9hYm91dC9XQ09TX3Byb2plY3RfZG9jdW1lbnRfcGhhc2VJXzIwMDYwMzE3LnBkZiIsICJodHRwOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3Jzcy9ubXNwV2Nvc1RlbXAucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPW5tc3BXY29zVGVtcCZzaG93RXJyb3JzPWZhbHNlJmVtYWlsPSIsICJOT0FBIE5NU1AiLCAibm1zcFdjb3NUZW1wIl0sCiAgICAgIFsiIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3dob2lTb3Muc3Vic2V0IiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3RhYmxlZGFwL3dob2lTb3MiLCAiaHR0cHM6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvdGFibGVkYXAvd2hvaVNvcy5ncmFwaCIsICIiLCAiIiwgInB1YmxpYyIsICJXSE9JIE1WQ08gMTJtIE5vZGUgQURDUCBTT1MsIDIwMDgtcHJlc2VudCIsICJXYXZlIG9ic2VydmF0aW9ucyBmcm9tIHRoZSAxMm0gbm9kZSBBRENQIGluIHRoZSBNYXJ0aGEncyBWaW5leWFyZCBDb2FzdGFsIE9ic2VydmF0b3J5IChNVkNPKSBpbiB0aGUgbm9ydGh3ZXN0IEF0bGFudGljIGluIGNvYXN0YWwgd2F0ZXJzIG9mIE5vcnRoIEFtZXJpY2EuICBFeHRlbnNpdmUsIGRldGFpbGVkIGRvY3VtZW50YXRpb24gaXMgYXZhaWxhYmxlIGluIHRoZXNlIC54bWwgZmlsZXM6XG5odHRwOi8vbXZjb2RhdGEud2hvaS5lZHUvZG93bmxvYWRzL3NlbnNvck1ML3YxLjAvZXhhbXBsZXMvc2Vuc29ycy9BRENQXzIuMi9NVkNPX09ic2VydmluZ1N5c3RlbS54bWxcbmh0dHA6Ly9tdmNvZGF0YS53aG9pLmVkdS9kb3dubG9hZHMvc2Vuc29yTUwvdjEuMC9leGFtcGxlcy9zZW5zb3JzL0FEQ1BfMi4yL0FEQ1BfU3lzdGVtLnhtbFxuaHR0cDovL212Y29kYXRhLndob2kuZWR1L2Rvd25sb2Fkcy9zZW5zb3JNTC92MS4wL2V4YW1wbGVzL3NlbnNvcnMvQURDUF8yLjIvTVZDT19Xb3JraG9yc2VfMTIwMC54bWxcbmh0dHA6Ly9tdmNvZGF0YS53aG9pLmVkdS9kb3dubG9hZHMvc2Vuc29yTUwvdjEuMC9leGFtcGxlcy9zZW5zb3JzL0FEQ1BfMi4yL1JESV9Xb3JraG9yc2VfMTIwMC54bWxcbmh0dHA6Ly9tdmNvZGF0YS53aG9pLmVkdS9kb3dubG9hZHMvc2Vuc29yTUwvdjEuMC9leGFtcGxlcy9zZW5zb3JzL0FEQ1BfMi4yL1ByZXNzdXJlX09ic19Qcm9jZXNzLnhtbFxuaHR0cDovL212Y29kYXRhLndob2kuZWR1L2Rvd25sb2Fkcy9zZW5zb3JNTC92MS4wL2V4YW1wbGVzL3NlbnNvcnMvQURDUF8yLjIvVmVsb2NpdHlfT2JzX1Byb2Nlc3MueG1sXG5odHRwOi8vbXZjb2RhdGEud2hvaS5lZHUvZG93bmxvYWRzL3NlbnNvck1ML3YxLjAvZXhhbXBsZXMvc2Vuc29ycy9BRENQXzIuMi9QcmVzc3VyZV9RQ19DaGFpbi54bWxcbmh0dHA6Ly9tdmNvZGF0YS53aG9pLmVkdS9kb3dubG9hZHMvc2Vuc29yTUwvdjEuMC9leGFtcGxlcy9zZW5zb3JzL0FEQ1BfMi4yL1ZlbG9jaXR5X1FDX0NoYWluLnhtbFxuaHR0cDovL212Y29kYXRhLndob2kuZWR1L2Rvd25sb2Fkcy9zZW5zb3JNTC92MS4wL2V4YW1wbGVzL3NlbnNvcnMvQURDUF8yLjIvUFVWX0FuYWx5c2lzLnhtbFxuXG5Gb3IgdGhpcyBkYXRhc2V0LCBpZiB5b3Ugd2FudCB0aGUgbW9zdCByZWNlbnQgZGF0YSwgeW91IE1VU1QgY2hhbmdlIHRoZSBkZWZhdWx0IGVuZCB0aW1lIGNvbnN0cmFpbnQgdG8gYmUgYSB0aW1lIHRoYXQgaXMgc2xpZ2h0bHkgKGEgZmV3IHNlY29uZHMgb3IgYSBmZXcgbWludXRlcykgaW4gdGhlIHBhc3QuICBUaGUgc291cmNlIGRhdGEgc2VydmVyIGRvZXMgbm90IGFsbG93IGVuZCB0aW1lIGNvbnN0cmFpbnRzIHRoYXQgYXJlIGFmdGVyIHRoZSBleGFjdCBjdXJyZW50IHRpbWUuXG5cbmNkbV9kYXRhX3R5cGUgPSBQb2ludFxuVkFSSUFCTEVTOlxubG9uZ2l0dWRlIChkZWdyZWVzX2Vhc3QpXG5sYXRpdHVkZSAoZGVncmVlc19ub3J0aClcbnN0YXRpb25faWRcbmFsdGl0dWRlIChtKVxudGltZSAoc2Vjb25kcyBzaW5jZSAxOTcwLTAxLTAxVDAwOjAwOjAwWilcbnByZXNzdXJlIChNZWFuIFNlYSBXYXRlciBQcmVzc3VyZSwgY20pXG53YXZlSGVpZ2h0RnJvbVByZXNzdXJlIChXYXZlIEhlaWdodCBmcm9tIFByZXNzdXJlLCBjbSlcbndhdmVQZXJpb2RGcm9tUHJlc3N1cmUgKFdhdmUgUGVyaW9kIGZyb20gUHJlc3N1cmUsIHMpXG5sb0N1dG9mZkZyZXF1ZW5jeSAoTG93IEN1dG9mZiBGcmVxdWVuY3ksIEh6KVxuaGlDdXRvZmZGcmVxdWVuY3kgKEhpZ2ggQ3V0b2ZmIEZyZXF1ZW5jeSwgSHopXG53YXZlSGVpZ2h0QWxsIChXYXZlIEhlaWdodCBBbGwsIGNtKVxuc3dlbGwgKGNtKVxuLi4uICgxNCBtb3JlIHZhcmlhYmxlcylcbiIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9tZXRhZGF0YS9mZ2RjL3htbC93aG9pU29zX2ZnZGMueG1sIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL21ldGFkYXRhL2lzbzE5MTE1L3htbC93aG9pU29zX2lzbzE5MTE1LnhtbCIsICJodHRwczovL3Vwd2VsbC5wZmVnLm5vYWEuZ292L2VyZGRhcC9pbmZvL3dob2lTb3MvaW5kZXguanNvbiIsICJodHRwczovL3d3dy53aG9pLmVkdS9tdmNvIiwgImh0dHA6Ly91cHdlbGwucGZlZy5ub2FhLmdvdi9lcmRkYXAvcnNzL3dob2lTb3MucnNzIiwgImh0dHBzOi8vdXB3ZWxsLnBmZWcubm9hYS5nb3YvZXJkZGFwL3N1YnNjcmlwdGlvbnMvYWRkLmh0bWw/ZGF0YXNldElEPXdob2lTb3Mmc2hvd0Vycm9ycz1mYWxzZSZlbWFpbD0iLCAiV29vZHMgSG9sZSBPY2Vhbm9ncmFwaGljIEluc3RpdHV0aW9uIiwgIndob2lTb3MiXQogICAgXQogIH0KfQo=
  recorded_at: 2019-05-07 22:59:48 GMT
  recorded_with: vcr/0.2.6, webmockr/0.3.4.9100
- request:
    method: get
    uri: https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCinpKfmBT.csv?&time%3E%3D2001-07-14&units%28%22STUFF%22%29
    body:
      encoding: ''
      string: ''
    headers:
      User-Agent: libcurl/7.54.0 r-curl/3.3 crul/0.7.4
      Accept-Encoding: gzip, deflate
      Accept: application/json, text/xml, application/xml, */*
  response:
    status:
      status_code: '500'
      message: Internal Server Error
      explanation: Server got itself in trouble
    headers:
      status: 'HTTP/1.1 500 '
      date: Tue, 07 May 2019 22:59:47 GMT
      strict-transport-security: max-age=31536000; includeSubDomains
      last-modified: Tue, 07 May 2019 22:59:47 GMT
      xdods-server: dods/3.7
      erddap-server: '1.82'
      content-type: text/html;charset=utf-8
      content-language: en
      content-encoding: gzip
      vary: Accept-Encoding
      connection: close
      transfer-encoding: chunked
    body:
      encoding: ASCII-8BIT
      string: PCFkb2N0eXBlIGh0bWw+PGh0bWwgbGFuZz0iZW4iPjxoZWFkPjx0aXRsZT5IVFRQIFN0YXR1cyA1MDAg4oCTIEludGVybmFsIFNlcnZlciBFcnJvcjwvdGl0bGU+PHN0eWxlIHR5cGU9InRleHQvY3NzIj5oMSB7Zm9udC1mYW1pbHk6VGFob21hLEFyaWFsLHNhbnMtc2VyaWY7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O2ZvbnQtc2l6ZToyMnB4O30gaDIge2ZvbnQtZmFtaWx5OlRhaG9tYSxBcmlhbCxzYW5zLXNlcmlmO2NvbG9yOndoaXRlO2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtmb250LXNpemU6MTZweDt9IGgzIHtmb250LWZhbWlseTpUYWhvbWEsQXJpYWwsc2Fucy1zZXJpZjtjb2xvcjp3aGl0ZTtiYWNrZ3JvdW5kLWNvbG9yOiM1MjVENzY7Zm9udC1zaXplOjE0cHg7fSBib2R5IHtmb250LWZhbWlseTpUYWhvbWEsQXJpYWwsc2Fucy1zZXJpZjtjb2xvcjpibGFjaztiYWNrZ3JvdW5kLWNvbG9yOndoaXRlO30gYiB7Zm9udC1mYW1pbHk6VGFob21hLEFyaWFsLHNhbnMtc2VyaWY7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojNTI1RDc2O30gcCB7Zm9udC1mYW1pbHk6VGFob21hLEFyaWFsLHNhbnMtc2VyaWY7YmFja2dyb3VuZDp3aGl0ZTtjb2xvcjpibGFjaztmb250LXNpemU6MTJweDt9IGEge2NvbG9yOmJsYWNrO30gYS5uYW1lIHtjb2xvcjpibGFjazt9IC5saW5lIHtoZWlnaHQ6MXB4O2JhY2tncm91bmQtY29sb3I6IzUyNUQ3Njtib3JkZXI6bm9uZTt9PC9zdHlsZT48L2hlYWQ+PGJvZHk+PGgxPkhUVFAgU3RhdHVzIDUwMCDigJMgSW50ZXJuYWwgU2VydmVyIEVycm9yPC9oMT48aHIgY2xhc3M9ImxpbmUiIC8+PHA+PGI+VHlwZTwvYj4gU3RhdHVzIFJlcG9ydDwvcD48cD48Yj5NZXNzYWdlPC9iPiBRdWVyeSBlcnJvcjogdG9Vbml0cz1VRFVOSVRTIG11c3QgYmUgVURVTklUUyBvciBVQ1VNLjwvcD48cD48Yj5EZXNjcmlwdGlvbjwvYj4gVGhlIHNlcnZlciBlbmNvdW50ZXJlZCBhbiB1bmV4cGVjdGVkIGNvbmRpdGlvbiB0aGF0IHByZXZlbnRlZCBpdCBmcm9tIGZ1bGZpbGxpbmcgdGhlIHJlcXVlc3QuPC9wPjxociBjbGFzcz0ibGluZSIgLz48aDM+QXBhY2hlIFRvbWNhdC84LjUuMzg8L2gzPjwvYm9keT48L2h0bWw+
  recorded_at: 2019-05-07 22:59:48 GMT
  recorded_with: vcr/0.2.6, webmockr/0.3.4.9100
